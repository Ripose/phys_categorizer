Spectroscopic LSJ notation for atomic levels obtained

from relativistic calculations

G. Gaigalas a,b∗, T. Zalandauskas b and S. Fritzsche a

a Fachbereich Physik, Universit¨at Kassel,
Heinrich–Plett–Str. 40, D–34132 Kassel, Germany.

b Vilnius University Research Institute of Theoretical Physics and Astronomy,
A. Goˇstauto 12, Vilnius 2600, Lithuania.

June 6, 2011

Abstract

Today, relativistic calculations are known to provide a very successful means in the
study of open–shell atoms and ions. But although accurate atomic data are obtained from
these computations, they are traditionally carried out in jj−coupling and, hence, do often
not allow for a simple LSJ classiﬁcation of the atomic levels as needed by experiment. In
fact, this lack of providing a proper spectroscopic notation from relativistic structure cal-
culations has recently hampered not only the spectroscopy of medium and heavy elements,
but also the interpretation and analysis of inner–shell processes, for which the occurrence
of additional vacancies usually leads to a very detailed ﬁne structure.

Therefore, in order to facilitate the classiﬁcation of atomic levels from such computa-
tions, here we present a program (within the Ratip environment) which help transform
the atomic wave functions from jj−coupled multiconﬁguration Dirac–Fock computations
into a LS−coupled representation. Beside of a proper LSJ assignment to the atomic lev-
els, the program also supports the full transformation of the wave functions if required for
(nonrelativistic) computations.

4
0
0
2
 
n
u
J
 
3
 
 
]
h
p
-
m
o
t
a
.
s
c
i
s
y
h
p
[
 
 
1
v
6
0
0
6
0
4
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

∗

Email: gaigalas@mserv.itpa.lt

1

PROGRAM SUMMARY

Title of program: Lsj.

Catalogue number: ADTL

Program summary URL: http://cpc.cs.qub.ac.uk/summaries/ADTL

Program obtainable from: CPC Program Library, Queen’s University of Belfast, N. Ireland.

Licensing provisions: None.

Computer for which the new version has been tested: IBM RS 6000, PC Pentium III.
Installations: University of Kassel (Germany).
Operating systems: IBM AIX 4.1.2+, Linux 7.1.+

Program language used in the new version: ANSI standard Fortran 90/95.

Memory required to execute with typical data: Memory requirements depend on the shell
structure and the size of the wave function expansion which is used to represent the atomic
levels.

No. of bits in a word: All real variables are parametrized by a selected kind parameter
and, thus, can easily be adapted to any required precision as supported by the compiler.
Presently, the kind parameter is set to double precision (two 32–bit words) in the module
rabs constant.

CPU time required to execute test data: 5 seconds on a 1 GHz Pentium III processor.

Distribution format: compressed tar ﬁle.

Keywords: atomic, LSJ spectroscopic notation, LS − jj transformation, multiconﬁguration
Dirac–Fock, recoupling of angular momenta, relativistic.

Nature of the physical problem:
The spectroscopic LSJ notation is determined for atomic levels which were calculated pre-
viously in the framework of the jj−coupled multiconﬁguration Dirac–Fock (MCDF) model.
This notation is based on a complete jj − LS transformation of the leading jj−coupled con-
ﬁguration state functions (CSF) in the wave function representation of the selected levels.

Restrictions onto the complexity of the problem:
The jj → LS transformation of the (jj−coupled) CSF is supported for all shell structures
including open s−, p−, d−, and f −shells. For shells with l > 3 (i.e. beyond the f −subshells),
however, a proper transformation of the antisymmetrized subshell states can be carried out
only for the case of one or two equivalent electrons. This restriction also applies for the
transformation of the g 7/2 and g 9/2 subshell states which are otherwise supported by the
Ratip package [S. Fritzsche, J. Elec. Spec. Rel. Phen. 114–116 (2001) 1155.]. The jj ↔ LS
transformation matrices, which are applied internally by the program, are consistent with the
deﬁnition of the (reduced) coeﬃcients of fractional parentage [G. Gaigalas, Z. Rudzikas and

2

C. Froese Fischer, At. Data Nucl. Data Tables, 70 (1998) 1; G. Gaigalas, S. Fritzsche and
Z. Rudzikas, At. Data Nucl. Data Tables, 76 (2000) 235.] as published previously.

Unusual features of the program:
The Lsj program is designed as a part of the Ratip package [S. Fritzsche, J. Elec. Spec.
Rel. Phen. 114–116 (2001) 1155.]
for the computation of (relativistic) atomic transition
and ionization properties. This (new) component therefore supports the transformation of all
atomic states which are generated either with Ratip or by means of the Grasp92 code [F. A.
Parpia, C. F. Fischer, and I. P. Grant, Comput. Phys. Commun. 94 (1996) 249.]. Moreover,
the normalization of the transformed states is tested within the LSJ−coupled basis.

3

LONG WRITE–UP

1

Introduction

In atomic spectroscopy, the standard LSJ notation of the atomic levels is frequently applied
for classifying the low–lying level structures of (most) atoms and ions. The knowledge of the
basic LSJ symmetries of the levels often helps the interpretation of atomic spectra without
detailed computations. In fact, the LSJ spectroscopic notation is found useful also in order
to explain the excitation and the decay properties of individual levels, at least qualitatively.
Since, in addition, most atomic structure calculations were carried out within a LS−coupled
basis in the past, the LSJ designation of the levels is taken today as the standard notation in
the literature as well as in the most data bases.

In recent years, however, relativistic structure computations also became feasible and were
frequently performed, when accurate data were required. Based on either the Dirac–Coulomb
or Dirac–Coulomb–Breit Hamiltonian, for instance, these computations are traditionally car-
ried out in jj−coupling, from which the LSJ notation cannot be derived so easily, especially
if atomic conﬁgurations with (several) open shells occur. In the last few years, therefore, the
lack of a proper spectroscopic notation deriving from relativistic calculations has hampered not
only further analysis of open d− and f −shell elements but also the study and interpretation
of the inner–shell processes where the occurrence of (additional) inner–shell holes often result
in a very detailed ﬁne–structure. In order to obtain the standard notation in such a case, an
additional transformation of the atomic states (from the jj−coupled into a LS−coupled basis)
is needed ﬁrst before the full beneﬁt is drawn from such a relativistic treatment. But although
several tools and tabulations are available today for carrying out the transformation between
diﬀerent coupling schemes, there is no program available which would directly support the
well–known relativistic structure codes such as Grasp92 [1] or Ratip [2, 3, 4]. The reasons
for this lack are simple: (i) the rapidly increasing complexity of the transformation matrices,
when several open shells are involved, and (ii) no simple access to the standard quantities from
the atomic shell model.

Apart from the explicit jj − LS transformation of the many–electron basis, there is a second
method known from the literature [5, 6, 7] which helps to derive the LSJ classiﬁcation of atomic
levels from relativistic computations. This method applies the (eﬀective) relativistic operators
within an LS−coupled basis and, hence, can be directly implemented into the non–relativistic
theory, i.e. by using the familiar Pauli spinors for the construction of the many–electron basis.
So far, however, these eﬀective operators have neither been derived in detail for all the physical
cases of interest [8] nor does a full implementation exist which is competitive with the standard
relativistic codes. Moreover, the use of eﬀective operators within a Pauli spinor basis cannot
account for the diﬀerent radial behaviour of equivalent electrons with j = l ± 1/2 (l ≥ 1) as

4

is found to be important, in particular, for the behaviour of inner–shell electrons in medium
and heavy elements. Therefore, the explicit jj − LS transformation of the many–electron
basis seems to us a much simpler route to derive the LSJ designation of the atomic states,
making use of the well–known relativistic structure codes such as Grasp92 [1] or Ratip [2]
as its input. This jj − LS transformation of the basis states has recently been generalized
also to allow an arbitrary number of open shells in the construction of the symmetry–adapted
functions [9].

To facilitate the classiﬁcation of the atomic levels and wave functions from the relativistic
calculations, here we present the Lsj program as a new component of the Ratip package
[2]. This component supports both the LSJ classiﬁcation of the level structure of open–shell
atoms and ions as well as the (complete) transformation of the corresponding wave functions.
But the program may also be of value in solving the problems of a more general character,
where the transformation from the jj– into LS–coupling scheme and vice versa is performed,
e.g. a transformation of this type is needed when one seeks the optimal coupling scheme after
calculating the energy spectra in a non–relativistic or relativistic approximation. But the
problems of this type are quite independent of those investigated here. They are related only
to a similar transformation being made. Therefore the authors have not aimed at creating a
general program in the frame of the Ratip package that would be of use while the physical
problems are formulated in the most general case, especially with certain risks originating
from such a formulation of a problem when the transformation considered is based on the
transformation coeﬃcients [10]. The values of these depend on the phase convention that
is chosen to obtain the spin–angular coeﬃcients and on the deﬁnition of the coeﬃcients of
fractional parentage (CFP). Of course, the program presented in this work may serve as a
basis for solving the other problems in atomic physics. But the authors have not aimed at
the exhaustive description of the program on purpose, because in that case the technical way
of answering those questions is not as important as is the methodological one, related to the
phase convention and the deﬁnition of CFP. The program is based on the methodology that
uses the Fano–Racah convention, and the CFPs are deﬁned via the quasispin formalism [11].
The CFPs are published in [12, 13]. In all other cases this transformation leads to erroneous
results. Therefore, before starting to perform any tasks related to the use of the program in
other packages or trying to solve any problems of other type, we recommend that the authors
of the paper should be contacted.

In the following section, we ﬁrst provide a brief outline on the transformation of the atomic
states in going from the jj−coupled to a LS−coupled many–electron basis. This shows how
the LSJ spectroscopic notation is obtained as a symmetry of the leading term in the wave
function representation within the LS−coupled basis; however, we leave out most of the details
concerning the construction and recoupling of the symmetry functions in the atomic shell model
since that material has been presented recently [14]. In section 3, we describe the program
organization and how the code is distributed. To demonstrate the interactive use of the Lsj
program, section 4 displays — by two examples — the derivation of the LSJ notation for the
low–lying excited levels of beryllium as well as for the ground–state of gadolinium. Finally,
the conclusions and a brief outlook are given in section 5.

5

2 Theoretical background

The task to derive the LSJ designation of atomic levels from relativistic calculations can be
summarized rather easily without much knowledge about the atomic shell model. Having,
for example, a representation of an atomic state ψ with respect to a jj−coupled symmetry
basis, the (ﬁrst few) leading terms in the wave function expansions need to be transformed
into a LS(J)−coupled basis from which, then, the proper spectroscopic notation is given by
the symmetry of (again) the leading term. At the same time, the contributions from the
subsequent terms in the LS−coupled basis indicate the admixture of other LS symmetries
and, hence, the deviation from a pure LS or Russell–Saunders coupling scheme. Of course,
the explicit jj − LS transformation of the atomic state functions (ASF) requires quite detailed
information about the construction and the coupling of the symmetry adapted basis functions,
both in jj− as well as LS−coupling. For most practical applications, however, these details
are irrelevant.

In this write–up of the Lsj program, we therefore restrict the discussion mainly to the repre-
sentation of the atomic states in the various coupling schemes, but otherwise refer the reader to
the literature [14, 15]. While this restriction enables us to explain the basis steps of a jj − LS
transformation of atomic states from standard relativistic computations, and how these steps
are implemented within the program, it avoids the need of providing too many details about
the deﬁnition of symmetry–adapted functions and about the theory of transformation in the
atomic shell model.

2.1 Representation of atomic states

In principle, of course, any valid coupling scheme can be used in order to represent the (many–
electron) wave functions in atomic structure computations. In relativistic calculations, how-
ever, a jj−coupled basis appears particularly appropriate as the symmetry of the Dirac equa-
tion for a single electron leads naturally to solutions which have a well–deﬁned total angular
momentum, j = l + s, but no deﬁned projections (onto the z−axis) of either the orbital angu-
lar momentum l nor the spin s of the electron. In the multiconﬁguration Dirac–Fock (MCDF)
or conﬁguration interaction (CI) methods, these one–electron solutions of the Dirac equation
(which are ﬁnally determined for some eﬀective potential) are then used also for the set–up of
the many–electron basis functions, the so–called conﬁguration state functions (CSF). Owing
to the overall symmetry of atoms with respect to a rotation or inversion of the coordinates,
these CSF are constructed in order to have a well–deﬁned total angular momentum J and
total parity P . For a given set of such conﬁguration states, {|γrJP i , r = 1...nc}, the atomic
states are obtained simply as a linear combination

Ψτ (J P )

=

a (jj)
r

(τ ) |γrJP i

(1)

(cid:11)

(cid:12)
(cid:12)

r
X
of CSF of the same symmetry, where τ = 1, 2, ... enumerates the atomic levels (of the given
symmetry) and γr denote the set of all further quantum numbers as required for an unique
classiﬁcation of the symmetry–adapted basis. Obviously, these quantum numbers and the
details of their coupling play an important role in the transformation of the basis from one
coupling scheme into another. For the present discussion, however, it is suﬃcient to say that
the CSF basis in (1) spans a (ﬁnite) part of the N −electron Hilbert space and that the a (jj)
(τ )

r

nc

6

represent the (usual) Fourier coeﬃcients for the expansion of an atomic state with respect to
this basis. As seen from ansatz (1), moreover, only J and P are in fact good quantum numbers
which, apart from the subshell angular momenta (see below) and the total energy of the ASF,
can be used for the classiﬁcation of the atomic levels.

An (almost) equivalent1 but alternative representation of the ASF can be obtained within a
LS−coupled basis

Ψτ (J P )

=

a (LS)
s

(τ ) |γs LS JP i ,

(2)

nd

s
X

(cid:12)
(cid:12)

(cid:11)

where one–electron spin–orbital functions with well–deﬁned orbital angular momentum l (as
well as with projections ml and ms of the orbital angular momentum and the spin onto the
quantization axis) are used in the set–up of the corresponding CSF basis. Instead of a deﬁned
total angular momentum j of each single electron, however, here the orbital angular momenta
and the spins of all electrons are ﬁrst coupled together separately in order to obtain a total
orbital angular momentum, L = l1 + l2 + ..., and a total spin, S = s1 + s2 + .... The
symmetry J of the CSF with respect to a rotation of the coordinates are obtained then from
the coupling J = L + S of the total orbital and spin angular momenta. In LS−coupling,
therefore, L and S are (approximately) also good quantum numbers which can be used for
the classiﬁcation of the atomic states. And, in fact, such an LS coupling of the atomic levels
appears to be well realized in Nature, in particular for light atoms and ions with, say, Z / 20
as well as for the low–lying levels of most neutral atoms.

As pointed out, the two representations (1) and (2) of the atomic states are almost equally
suitable to determine the energies and properties of an atom. To derive the LSJ designation
of an atomic state, for which a representation {a (jj)
} in jj−coupling is given, it is suﬃcient
to expand each CSF |γrJP i into a LS−coupled basis and to sum up the contributions of the
diﬀerent CSF, using the proper weight a (jj)
(τ ). For two orthonormalized sets of CSF, such a
transformation

r

r

|γr LS JP i ←→ |γsJP i

(3)

is represented by an orthogonal matrix. The knowledge of this matrix is therefore all that is
needed in practice in order to carry out the transformation explicitly and to ﬁnd the symmetry
of the leading term in the LS−coupled basis. The Lsj program enables the user to evaluate and
to apply this matrix for any (given) conﬁguration basis in jj−coupling which is used for the
description of open–shell atoms and ions. There are, however, a few restrictions on the set–up
of these transformation matrices which are reasonable to maintain for practical computations.
The next subsection explains these restrictions and summarizes the steps which are needed to
construct the transformation matrix.

2.2 Transformation of conﬁguration symmetry functions

For identical fermions, the symmetry–adapted CSF must represent many–electron functions
which are also antisymmetric under the interchange of any pair of electron coordinates. In the

1Since a jj−coupled basis allows, due to distinctions of equivalent electrons with j = l ± 1/2 (l ≥ 1), a
somewhat greater ﬂexibility in the representation of the atomic states, a full equivalence of the representations
in jj− and LS−coupling is obtained only in the limit of a complete, inﬁnitely large basis.

7

atomic (and nuclear) shell model, therefore, it is common practice to construct the CSF from
antisymmetrized (sub–)shell states which describe N equivalent electrons in a given shell. In
LS−coupling, for example, such subshell states for the shell (nl) are written as [15]

nl N ανLS

,

(cid:12)
(cid:12)

(cid:11)

(4)

(6)

(7)

where n is the principal quantum number and α represents all those quantum numbers which,
in addition to the total orbital angular momentum L, total spin S and seniority number ν,
are needed for the unique classiﬁcation of these states. In practice, an additional number α is
required only for shells with orbital angular momenta l ≥ 3, i.e. for electrons from the f –, g–,
. . . shells. A more detailed discussion of all the possible subshell states (for shells with l ≤ 3)
has been given recently in Refs. [13, 16]. The CSF with u shells in LS−coupling takes the
form

|γ LS JP i

n1l N1
(cid:12)
(cid:12)
(cid:12)

≡

1 n2l N2
2

...nul Nu

u α1ν1L1S1...αuνuLuSu L12S12...Lu−1 uSu−1 u LS J

.

(5)

The additional intermediate angular momenta Li j, Si j will arise in (5) if the subshell states
of two or more open shells are coupled to each other as needed for CSF with more than a
single open shell.

E

In jj−coupling, similarly, the subshell states of N equivalent electrons of a subshell (nκ) are
represented by [14]

where κ is the relativistic (angular momentum) quantum number

(cid:11)

κ = ± (j + 1/2)

for

l = j ± 1/2

≡

nκN ανJ

(cid:12)
(cid:12)

and where two further quantum numbers ν and J are found suﬃcient in order to classify all
subshell states with j = 1/2, 3/2, 5/2, 7/2, and 9/2 unambiguously. An additional number
α is required only for subshell states with angular momenta j ≥ 9/2. Again, Refs. [13, 16]
provide a more thorough discussion and a complete list of all allowed states for (relativistic)
subshells with j ≤ 9/2. Of course, the transformation of the subshell states lies at the heart
of any transformation which is to be carried out for the symmetry–adapted CSF and which
need to be solved ﬁrst. The jj ↔ LS transformation of the subshell states (in both directions)
was therefore the topic of a recent extension of the Racah package [14, 17] which was utilized
also for the implementation of the present program. In going from a jj− to a LS−coupled
basis, however, there are two diﬃculties in the transformation procedures which one must
keep in mind. These diﬃculties are related (i) to the group–theoretical diﬀerences of the
subshell states in jj− and LS−coupling, respectively, as well as (ii) to the re–coupling of the
antisymmetrized subshell states which is generally required in order to bring these states into
a pre–deﬁned coupling order on both sides of the transformation matrix elements. We will
brieﬂy discuss, in turn, these two issues to make the reader aware also of the limitations of the
present program.

Although, in LS− and jj−coupling, the basic notations (4) and (6) of the subshell states
appear to be rather similar, these states generally belong to diﬀerent irreducible representations
of the SO3 rotation group because, in jj−coupling, each (nonrelativistic) nl–shell can be ‘split’

8

into two (relativistic) subshells with total angular momenta j± = l ± 1/2. In the expansion
of a single shell state
into a jj−coupled basis, therefore, both subshell states

nl N αLS

−
N −
(cid:12)
−
(cid:12)
κ
ν

−
J

+

(cid:11)
and

+
N +
ν

+
J

+

+
κ
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

with j− and j+, i.e.

, will occur. Here, again, we make use of the

relativistic quantum number κ to simplify the notation below. Obviously, N =
−
κ = −(
consistent with the corresponding total j± = l ± 1/2 and subshell angular momenta.

+
κ +1) > 0 must apply where the notation

−
κ > 0 and

+
N and
+
κ < 0 has been chosen to be

−
N +

Making use of this notation, the transformation between the jj− and LS−coupled subshell
states takes the form

−
N −
ν

−
J ,

−
κ

(

+
N

+
κ

+
J ) J

+
ν

=

+

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

αLS (cid:12)
X
(cid:12)
(cid:12)
(cid:12)

(cid:29) *

+

−
N +

l (

N) αLS J

+

−
N+

l (

N ) αLS J | (

−
N −
ν

−
κ

−
J ,

+
N

+
κ

+
J ) J

+
ν

(8)

+

including a summation over α as well as the total subshell orbital angular momentum L and

the subshell spin S. As is clear from our notation in Eq. (8),

−
N −
ν

−
J,

−
κ
(

+
N +
ν

+
κ

+
J) J

represents a

+

coupled state with well–deﬁned total angular momentum J which is built from the correspond-
−
J

ing jj−coupled subshell states with j± = l ± 1/2 and the total subshell angular momenta

+
and
J, respectively. This expansion of the jj−coupled subshell states therefore shows that, for
any number of open (sub–)shells in the construction of the CSF, the transformation of these
symmetry functions can always be traced back to the transformation coeﬃcients

+

−
N +

l (

N ) αLS J | (

−
N −
ν

−
J,

−
κ

+

N +
ν

+
J) J

+
κ

*

(9)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

+

of the individual subshell. And, in fact, these (Fourier) coeﬃcients are the ‘building blocks’
for any transformation of the atomic states into a LS−coupled basis. They are implemented
explicitly into the Lsj component (by means of a recent revision of the Racah package [14])
since their computation requires a recursive — and rather expansive — procedure which traces
back the subshell states on both sides of expression (9) to their parents states with N − 1
electrons, and so on. The transformation coeﬃcients (9) are implemented for all (sub–) shells
with l ≤ 3 and occupation numbers N = 1, 2, ..., 2l + 1; for all higher (allowed) occupation
numbers N = 2l+2, ..., 4l+2, these coeﬃcients are simply obtained by using the electron–hole
symmetry and the tabulated coeﬃcients for N ′ = 4l + 2 − N [14].

A second diﬃculty in the jj −LS transformation of atomic states arises from the (re–) coupling
of the antisymmetrized subshell states. Since, in general, CSF with several open shells occur
very frequently, a pre–deﬁned coupling order of the individual subshell states n1l N1
, ...
need ﬁrst to be speciﬁed, such as

, n2l N2

2

1

(...(((l N1
(cid:12)
(cid:12)
(cid:12)

1 α1L1S1, l N2

2 α2L2S2)L12S12, l N3

3 α3L3S3)L123S123)...) J

(10)

for an LS−coupled basis. Of course, a similar coupling order of the subshell states could
... where any (predeﬁned)
ν1J1
be written also for a jj−coupled basis
sequence would give rise to a valid many–particle basis. But the predeﬁned sequence of
jj−coupled subshell states also decides how many (re–) coupling steps are needed to bring
both sides in the overall transformation matrix hγs LS JP | γrJP i into the same coupling

κ N2
2
(cid:12)
(cid:12)
(cid:12)

κ N1
1

ν2J2

(cid:12)
(cid:12)
(cid:12)

E

E

,

,

E

9

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

order. For this reason, we request the jj−coupled CSF in the Lsj program to be given in a
(so–called) standard order

−
N 1
1

−
κ

−
ν 1

−
J 1,

+
N 1
1

+
κ

+
ν 1

+
J 1)J1,

−
N 2
2

−
κ

−
ν 2

−
J 2)J

′
12,

+
κ

+
N 2
2

+
ν 2

+
J 2)J12

−
N 3
3

−
κ

−
ν 3

−
J 3)J

′
123,

+
N 3
3

+
κ

(...(((((

+
ν 3

+
J 3)J123...)J

(11)

+

in which these functions have to fulﬁll two additional conditions:

(i) If both subshells with common li, i.e.

+
κi, appear in the expansion, these two subshells

+
always occur successively in the sequence (
J i) Ji. Formally, we can use this
sequence even for subshell states with zero occupation if we interpret
≡ 1;
in this case, the full Clebsch–Gordan expansion for the symbolic expression (11) remains valid
(cid:12)
(cid:12)
due to the orthonormality properties of the Clebsch–Gordan coeﬃcients.

κ0ν = 0 J = 0

−
ν i

+
κ
i

+
ν i

−
κ

(cid:11)

i

−
κi and
−
N i

+
N i

−
J i,

(ii) For the jj − LS transformation of conﬁguration states

(...(((l N1

1 α1L1S1, l N2

2 α2L2S2)L12S12, l N3

3 α3L3S3)L123S123)...) J | (...(((((

*

−
N 1

−
κ

1

−
ν 1

−
J 1,

+
N 1

+
κ

1

+
ν 1

+
J 1)J1,

−
N 2

−
κ

2

−
ν 2

−
J 2)J

′
12,

+
κ

2

+
N 2

+
ν 2

+
J 2)J12

−
N 3

−
κ

3

−
ν 3

−
J 3)J

′
123,

+
κ

3

+
N 3

+
ν 3

+
J 3)J123...) J

(12)

+

+
κ2 +1), ..., i.e.
we further assume in standard order that l1 =
that the sequence of (sub–)shell states is the same on both sides of the transformation matrix.

+
κ1 +1), l2 =

−
κ2 = −(

−
κ1 = −(

For such a standard order, explicit expression for the jj − LS transformation matrix of the
CSF with two open shells in LS− or up to four open shells in jj−coupling are displayed in
Ref. [14]. With the present Lsj program, we now extend these expressions to allow for any
number of open subshells.

Although, of course, the standard order sets a restriction onto the set–up of the jj−coupled
CSF basis, it is the order which is typically applied in all relativistic structure codes such as
Grasp92 [1] or Ratip [2]. But even if a non–standard order has been used, the Lsj component
can still be utilized with only minor additional eﬀort. Since, in fact, the coupling of the subshell
states is independent of the radial wave functions, it is usually suﬃcient to (re–) generate
the CSF basis in standard order and just to repeat the diagonalization of the Hamiltonian
matrix. Of course, the representation {a (jj)
(τ )} of the atomic states in (1) must always be
consistent with the basis itself. Moreover, if in the CSF basis the occupied shells appear in a
diﬀerent sequence than the usual (non–relativistic) one 1s, 2s, 2p, 3s, ..., the condition of the
standard order is nevertheless fulﬁlled and the Lsj program can be applied without further
modiﬁcations. In this case, however, the order of the parent states may become diﬀerent and
may ﬁnally result in a diﬀerent LSJ classiﬁcation, if the parent states are accounted for in the
overall designation of the atomic levels.

r

3 Program organization and distribution

Although Lsj is provided as an independent program for the transformation of atomic levels
and wave functions from a jj−coupled into a LS−coupled basis, it is designed also as a new
program component of the Ratip package [2, 3, 4] and, hence, follows design principles similar

10

to the other components of this package. During recent years, Ratip has been found to be
a powerful tool for studying the (relativistic atomic) transition and ionization properties of
atoms and highly–charged ions within rather arbitrary conﬁgurations. Apart from the transi-
tion probabilities and lifetimes, for incorporating the interaction of atoms with the radiation
ﬁeld, Ratip now includes further components which help calculate Auger and photoioniza-
tion properties as well as the coherence transfer in atomic cascades. As described previously,
the Ratip package is built on Grasp92 [1] which is used to generate the (relativistic) wave
functions within the MCDF model.

However, here we shall not recall much about Ratip itself, neither about its overall structure
nor about previous applications, since this has been described previously [18]. Apart from a
few further applications to incorporate atomic processes with one electron in the continuum,
our recent concerns pertained to a long life–cycle of the code, making use of an object–oriented
design and, in particular, the concepts of Fortran 90/95. In fact, all components of Ratip are
now well prepared to deal with large wave function expansions (1) as needed for the accurate
handling of open–shell systems.

3.1 Deﬁnition of derived data types

The proper choice of derived data types certainly belongs to the key features for a long–term
maintenance and the development of a code. In Ratip, therefore, we introduced derived types
at various levels of complexity, including for example a data structure cs function for the
representation of a single CSF (in jj−coupling), or the derived type cs basis in order to
’store’ the information about a full conﬁguration basis. To these data structures, memory
is allocated only on the basis of the actual requirements concerning the number of occupied
shells and CSF in the given CSF basis. In Lsj, we now followed very similar lines and deﬁne
the corresponding data structures also in LS−coupling. Two simple examples are

type, public :: cs_function_LS
integer(kind=i1b) :: totalJ
character(len=1)
:: parity
integer(kind=i1b), dimension(:), pointer :: occupation
integer(kind=i1b), dimension(:), pointer :: seniority
integer(kind=i1b), dimension(:), pointer :: w
integer(kind=i1b), dimension(:), pointer :: shellL
integer(kind=i1b), dimension(:), pointer :: shellS
integer(kind=i1b), dimension(:), pointer :: shellLX
integer(kind=i1b), dimension(:), pointer :: shellSX

end type cs_function_LS

to represent a LS−coupled CSF in terms of the occupation and angular momentum quantum
numbers of all individual subshells as well as in terms of the intermediate angular momenta
L12, S12, L123, S123, ... which are stored in the two arrays shellLX and shellSX. The data
relating to all the LS−coupled CSF are then kept together in the derived data type

type, public :: csf_basis_LS

! Number of CSFs in the basis.
! Number of (nonrelativistic) shells.
! Number of (closed) core shells.

integer :: nocsf
integer :: nwshells
integer :: nwcore
integer :: number_of_electrons
type(nl), dimension(:), pointer
type(cs_function_LS), dimension(:), pointer :: csf
type(parent_from_jj), dimension(:), pointer :: parent

:: shell

end type csf_basis_LS

11

|

|-------------------------------|

|-------------------------------|

|-------------------------------|

|-------------------------------|

|
P |
R |-----| lsj_initialization_LS_jj()
O |
G |
R |
A |-----| lsj_control_transformation() |
M |
|
|
E |
X |
E |
C |
U |
T |
I |
O |
N |
|
|
|

|
|
|--- data input
|
|
|--- formation of all CSF in LSJ coupling
|
|
|--- jj-LS transformation and classification
|
|
|
|--- data output

of all selected levels

Figure 1: Schematic ﬂow chart of the Lsj program.

which, within the pointer array parent, also includes details about the parentage of the
corresponding conﬁguration states functions in the original, jj−coupled CSF basis. Fur-
ther derived structures concern the representation of the atomic states (asf function LS and
asf basis LS) as well as a list of all LS−coupled subshell states subshell term LS to iden-
tify the allowed terms for open–shell conﬁgurations. Obviously, the eﬃcient use of such data
types facilitates the access to and the handling of selected data. In the Lsj program, all new
derived types are deﬁned in the module rabs lsj (ﬁle rabs lsj.f90) which also contains the
transformation coeﬃcients (9) for the jj ↔ LS transformation of the subshell states. These
matrix elements are kept in the derived structure

type, private :: LS_jj_me

sequence
integer(kind=i1b)
integer(kind=i1b)
integer*8

end type LS_jj_me

:: w, Q, L, S, J, Nm, Qm, Jm, Qp, Jp
:: factor
:: nom, denom

within a integer representation, from which the value of the matrix element follows by com-
puting simply: factor

nom
denom .

p

3.2 Interactive control and output of the program

Like the other components of Ratip, the Lsj program is controlled interactively. Figure
1 displays the basic steps in which the program is executed. Following the initialization of
several data arrays at the beginning of the execution, the control is then taken by the procedure
lsj control transformation(), which reads and interprets all input data, carries out the
transformation for all selected levels, and ﬁnally prints the results to screen. This procedure
also prints a full expansion of all jj−coupled CSF in the corresponding LS−basis in the ﬁle
input-csl.LS.

12

LSJ: Transformation of atomic states from a jj-coupled into a LS-coupled CSF basis (Fortran 95 version)

(C) Copyright by G Gaigalas, T Zalandauskas and S Fritzsche, Kassel and Vilnius (2003).

Transform one or several ASF from a GRASP92 calculation into a LS-coupled CSF basis.
The transformation starts from the given .csl and .mix files and is carried out
for the n leading CSF in the jj-coupled basis; the new representation in the LS basis
is printed similar as in a standard GRASP92 computation.

Enter the name of the GRASP92 configuration symmetry list file:

Loading configuration symmetry list file ...

There are ... relativistic subshells;
there are ... relativistic CSFs;
... load complete.

Enter the name of corresponding .mix mixing coefficient file:

Loading mixing coefficients file ...

... load complete;

Maximum number of considered ASF is:
Enter the level numbers of the ASF which are to be transformed,

e.g. 1 3 4

7 - 20

48

69 - 85 :

Enter the number of leading CSF to be printed:

>

>

>

>

Figure 2: Interactive dialog for Lsj at the beginning of the transformation.

Figure 2 shows the interactive dialog of Lsj which requests the user to provide the Grasp92
conﬁguration symmetry list (.csl) ﬁle and the wave function representation (of the considered
level) in a corresponding mixing coeﬃcient (.mix) ﬁle. However, independent of the number
of ASF which are represented in this .mix ﬁle, the user then needs to specify the level numbers
for which the jj → LS transformation is to be carried out, as well as the number of leading
LS−coupled CSF which are included in the printout. As discussed before, only the leading
CSF is used for the LSJ spectroscopic designation of the level but the ’weights’ of the next
most important conﬁguration states may still provide insight into the conﬁguration mixing for
the given atom or ion.

As the transformation of atomic levels appears mainly as a geometrical task, the deﬁnition of
the conﬁguration basis along with the corresponding mixing coeﬃcients provide together all
necessary information for a LSJ classiﬁcation of the atomic levels. For the transformation
of the corresponding wave functions, in contrast, some care must be taken also for the radial
part of the wave function representation, for instance, by taking the average for each pair of
radial orbitals with angular momentum quantum numbers κ > 0 and −κ − 1, respectively,
for all occupied shells (nl). Using the Lsj component, the transformation of the atomic
levels is carried out promptly for most open–shell structures; the results are therefore printed
immediately to screen. Moreover, to provide a test of having obtained a correct and complete
(τ )|2 (which,
transformation, the sum of all ’weights’ in the LS−coupled basis, i.e.
of course, should be 1), is also printed.

i |c (LS)

i

P

3.3 Distribution and installation of the program

Even though the main eﬀort in developing the Lsj component certainly concerned the two
(new) modules rabs lsj and rabs lsj data, we re–distribute the Ratip package as a whole,
owing to the tight binding of the new components with the previously developed code. Overall,
therefore, the present version of Ratip now contains 18 modules as well as the source code for
the executables of the seven components Anco, Cesd99, Lsj, Rcfp, Relci, Reos99, and
Utilities. As previously, they are all contained in the ratip root directory. This root also

13

Table I. Leading CSFs and corresponding weight coeﬃcients (|c (jj)
|c (LS)
s

(τ )|2 and
(τ )|2) of the low–lying levels of the 1s22s2p conﬁgurations in beryllium.

r

Ψτ (J P )

jj

(cid:11)
CSFs

(cid:12)
(cid:12)

weights
|c (jj)
(τ )|2
r

Ψτ (J P )

LS

(cid:11)

CSFs

weights

|c (LS)
s

(τ )|2

0.66673

((2s1) 1

2 , (2p−1) 1

2 ) 1

0.33327

((2s1) 1

2 , (2p1) 3

2 ) 1

(cid:12)
(cid:12)

(cid:11)

(cid:11)

i |c (jj)

i

(cid:12)
(τ )|2 = 1
(cid:12)

i |c (LS)

i

(τ )|2 = 1

((2s1)2S, (2p1)2P ) 3P1

0.66673

((2s1) 1

2 , (2p1) 3

2 ) 1

0.33327

(cid:12)
(cid:12)
((2s1) 1

2 , (2p−1) 1

(cid:11)
2 ) 1

i |c (jj)

i

(cid:12)
(τ )|2 = 1
(cid:12)

(cid:11)

i |c (LS)

i

(τ )|2 = 1

((2s1)2S, (2p1)2P ) 1P1

(cid:11)

(cid:11)

1

1

P

P

P

P

(cid:12)
(cid:12)

(cid:12)
(cid:12)

(cid:12)
(cid:12)

comprises several makeﬁles for generating the executable as well as a number of test suites for
a few components. From this root, the executables of the diﬀerent components are generated
by running the command make -f make-component, that is make -f make-lsj in the present
case.

By utilizing a large set of diﬀerent makeﬁles, it has been found convenient to declare several
global variables for the compilation and linkage of the program. These declarations are now
comprised within the script ﬁle make-environment which avoids the user having to adopt each
makeﬁle independently to the local architecture and computational environment. In fact, the
script make-environment only contains a very few lines but must be sourced before, i.e. by
typing source make-environment, to make this information available to the system. Using
this set–up of the code, Ratip has been found portable rather easily to diﬀerent platforms
such as IBM RS/6000, Sun OS, or to the PC world. Moreover, a Read.me ﬁle in the ratip
root directory contains further details to the installation.

For most components of the Ratip package, we provide in addition a test suite in a subdirectory
test-component of the root where component refers to the names above. For example, the
directory test-lsj comprises all four (input and output) ﬁles in order to run and compare
the two examples below. These tests are typically designed to exhibit the capabilities of the
program but may serve also as a quick test of the local installation.

4 Examples

To explain the use and execution of the lsj component, we have selected two examples which
concern (i) the well–known splitting of the beryllium terms into a singlet and triplet system
and (ii) shows how the program can be used for the classiﬁcation of the lanthanides with an

14

.
.
Enter the name of the GRASP92 configuration symmetry list file:

>be-csl.inp

Loading configuration symmetry list file ...

There are
there are
... load complete.

4
4

relativistic subshells;
relativistic CSFs;

>be-relci.mix

Loading mixing coefficients file ...

... load complete;

Enter the name of corresponding .mix mixing coefficient file:

Maximum number of considered ASF is: 4
Enter the level numbers of the ASF which are to be transformed,

e.g. 1 3 4

7 - 20

48

69 - 85 :

>2 4

>2

Enter the number of leading CSF to be printed:

Weights of major contributors to ASF in jj-coupling:

Level
2

J Parity
-
1

CSF contributions

0.66673 of

2

0.33327 of

3

Definition of leading CSF:

2) 2s ( 1)

2p-( 1)

1/2

1/2

1

Total sum of
The new level is under the investigation.

weights

is:

1.000000000000000

Weights of major contributors to ASF in jj-coupling:

Level
4

J Parity
-
1

CSF contributions

0.66673 of

3

0.33327 of

2

Definition of leading CSF:

3) 2s ( 1)

2p ( 1)

1/2

3/2

1

Total sum of

weights

is:

1.000000000000000

Weights of major contributors to ASF in LS-coupling:

Level
2

J Parity
-
1

CSF contributions

1.00000 of

4

1

-

1.00000 of

Total sum of

weights

is: 0.9999999999999996

Total sum of

weights

is: 0.9999999999999991

3

2

Definition of leading CSF:

2)

3)

2s( 1)
2S1
2s( 1)
2S1

2p( 1)
2P1
2p( 1)
2P1

1P

3P

1

1

LSJ complete ... .

15

Figure 3: Dialog and output for determining the LSJ notation of low–lying levels of the 1s22s2p
conﬁgurations in beryllium.

open f −shell. In both cases, the conﬁguration symmetry list and the corresponding mixing
coeﬃcients have been generated by means of Grasp92 [1] and the Relci component [4] of
Ratip, using simply a conﬁguration interaction approach. The input and (expected) output
of these two examples are provided also in the subdirectory test-lsj.
In both cases, the
transformation is performed very rapidly within less than a second of cpu time on a Pentium
166 MHz processor.

For beryllium, the low–lying excited spectrum of the 1s22s2p conﬁguration consists of just
four levels which belong to the two 1P and 3P terms and have total angular momenta J = 1
and J = 0, 1, 2, respectively. Since the Hamiltonian matrix is diagonal in the total angular
momentum J, only the two levels with J = 1 will exhibit a conﬁguration mixing and, in fact,
this interaction is necessary to represent the two levels in terms of the 1s22s12p–1 and 1s22s12p1
relativistic conﬁgurations. For the two levels with J = 0 and J = 2, the assignment of the LSJ
notation is trivial because there is each just one CSF with a weight coeﬃcients equal to 1 in the
expansion. But to specify also the LSJ symmetry of the remaining two J = 1 levels, we can
run the Lsj program as shown in Figure 3, where use is made of the conﬁguration symmetry
list be-csl.inp and the corresponding mixing coeﬃcient ﬁle be-relci.mix. As seen from
the Figure 3 and Table I where the results of the transformation are summarized, the lower
one of the J = 1 levels (No. 2) has a 3P symmetry, and the 1P term is assigned to level
No. 4. Moreover, while a strong mixing of the conﬁguration states obviously appears in the
jj−coupled basis, a (nearly) pure LSJ symmetry is found for all four levels in a LS−coupled
conﬁguration basis.

For simple shell structures, such as the low–lying excitation spectrum of beryllium and for many
other light elements, the LSJ assignment can often be made just on the basis of the excitation
energies (with respect to the ground state) and total angular momenta of the individual levels,
if these data are compared with experiment. However, such a procedure is not feasible if two
or more open shells occur in some electron conﬁguration, or if open d− and f −shell elements
are considered. In such cases, several tens or even hundreds of levels may belong to a single
(nonrelativistic) conﬁguration, making a LSJ symmetry assignment on the grounds of the
calculated energies very unreliable. As a typically example for such a complex conﬁguration, we
consider the ground state of gadolinium (Z = 64), which has a [Xe] 4f 75d6s2 conﬁguration with
3106 possible (jj−coupled) CSF. To determine the LS symmetries of the computed ground
state with its known total angular momentum 2−, we again run the Lsj component using the
two ﬁles gd-csl.inp and gd-relci.mix, respectively. Figure 4 displays the corresponding
dialog and demonstrates that the ground state of gadolinium has a 9D2 symmetry. The
leading LS– and jj– coupled CSFs together with their weights (squares of mixing coeﬃcients)
are presented in Table II. The rather small mixing of other LS terms shows, moreover, that
the low–lying levels of most (neutral) medium and heavy elements are still well classiﬁed in
terms of their LSJ spectroscopy notation. Despite this classiﬁcation, however, much larger
(or even huge) wave function expansions are typically required in order to obtain accurate
predictions of the level structure and properties of these systems.

5 Conclusions and outlook

The new component Lsj of the Ratip package is presented for deriving the LSJ designation
of atomic levels and wave functions from relativistic calculations. Such spectroscopic notation

16

.
.
Enter the name of the GRASP92 configuration symmetry list file:

>gd-csl.inp

There are
there are
>gd-relci.mix

Loading configuration symmetry list file ...

22
3106

relativistic subshells;
relativistic CSFs;

... load complete.

Enter the name of corresponding .mix mixing coefficient file:

Loading mixing coefficients file ...

... load complete;

Maximum number of considered ASF is: 11
Enter the level numbers of the ASF which are to be transformed,

e.g. 1 3 4

7 - 20

48

69 - 85 :

Enter the number of leading CSF to be printed:

>1

>30

Weights of major contributors to ASF in jj-coupling:

Level
1

J Parity
-
2

CSF contributions

0.23193 of 1403

0.21537 of

457

0.12535 of 2443

0.09234 of

57

0.05331 of

987

Definition of leading CSF:

1403) 4f-( 3)

9/2

4f ( 4)
8

Total sum of

weights

7/2

7/2
0.9999999993812160

is:

7/2

Weights of major contributors to ASF in LS-coupling:

5s ( 2)

5p-( 2)

5p ( 4)

5d-( 1)

6s ( 2)

3/2

7/2

2

2

Level

J Parity

CSF contributions

1

2

-

0.97616 of
0.00297 of
0.00005 of
0.00003 of
0.00002 of

2
1
60
3
62

Total sum over

0.01538 of
0.00034 of
0.00004 of
0.00003 of
0.00001 of

4
8
98
5
15

0.00483 of
0.00005 of
0.00004 of
0.00002 of
0.00001 of
is: 0.9999999993812226

weight

6
100
58
102
28

Definition of leading CSF:

1)

2)

3)

4)

5)

6)

8)

15)

28)

58)

60)

62)

98)

100)

102)

4f( 7)
8S0
4f( 7)
8S0
4f( 7)
6P0
4f( 7)
6P0
4f( 7)
6P0
4f( 7)
6P0
4f( 7)
6P0
4f( 7)
6D0
4f( 7)
6G0
4f( 7)
4D1
4f( 7)
4D1
4f( 7)
4D1
4f( 7)
4D6
4f( 7)
4D6
4f( 7)
4D6

5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0
5s( 2)
1S0

5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0
5p( 6)
1S0

5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1
5d( 1)
2D1

LSJ complete ... .

6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0
6s( 2)
1S0

17

8S

8S

6P

6P

6P

6P

6P

6D

6G

4D

4D

4D

4D

4D

4D

8S

8S

6P

6P

6P

6P

6P

6D

6G

4D

4D

4D

4D

4D

4D

7D

9D

5P

7P

5D

7D

7F

7F

7D

5S

5P

5D

5S

5P

5D

7D

9D

5P

7P

5D

7D

7F

7F

7D

5S

5P

5D

5S

5P

5D

2

2

2

2

2

2

2

2

2

2

2

2

2

2

2

Figure 4: Dialog and output for determining the LSJ notation for the ground state of gadolinium.

Table II. Leading CSFs and corresponding weight coeﬃcients (|c (jj)

(τ )|2

r

and |c (LS)

s

(τ )|2) of the ground state of gadolinium.

Ψτ (J P )

jj

(cid:12)
(cid:12)

(cid:11)
CSFs

Ψτ (J P )

LS

(cid:11)

CSFs

(cid:12)
(cid:12)

weights

|c (LS)
s

(τ )|2

0.23193

(((4f −3 9

2 , 4f 4 8) 7

2 , 5d−1 3

2 ) 2

0.97616

(4f 7 8S, 5d1 2D) 9D2

weights
|c (jj)
(τ )|2
r

(cid:12)
(cid:12)

(cid:11)

0.01538

(4f 7 6P, 5d1 2D) 7P2

0.00483

(cid:12)
(cid:11)
(cid:12)
(4f 7 6P, 5d1 2D) 7D2

(cid:12)
(cid:12)

(cid:12)
(cid:12)

(cid:12)
(cid:12)

(cid:12)
(cid:12)

(cid:12)
(cid:12)

(cid:12)
(cid:12)

(cid:12)
(cid:12)

(cid:11)

(cid:11)

(cid:11)

(cid:11)

(cid:11)

(cid:11)

(cid:11)

(cid:11)

0.00297

(4f 7 8S, 5d1 2D) 7D2

0.00034

(4f 7 6P, 5d1 2D) 7F2

0.00005

0.00005

(cid:12)
(cid:11)
(cid:12)
(4f 7 4D6, 5d1 2D) 5P2

(cid:12)
(cid:12)
(4f 7 4D1, 5d1 2D) 5P2

(cid:11)

0.00004

(4f 7 4D6, 5d1 2D) 5S2

0.00004

(cid:12)
(cid:12)
(4f 7 4D1, 5d1 2D) 5S2

(cid:11)

0.00003

(4f 7 6P, 5d1 2D) 5P2

0.00003

0.00002

(cid:12)
(cid:11)
(cid:12)
(4f 7 6P, 5d1 2D) 5D2

(cid:12)
(cid:11)
(cid:12)
(4f 7 4D6, 5d1 2D) 5D2

0.00002

(4f 7 4D1, 5d1 2D) 5D2

0.00001

(4f 7 6D, 5d1 2D) 7F2

0.00001

(cid:12)
(cid:11)
(cid:12)
(4f 7 6G, 5d1 2D) 7D2

i |c (LS)

i

(τ )|2 = 0.99998

(cid:12)
(cid:12)

P

18

is needed not only to analyze a great deal of spectroscopic data but also for the interpretation
of many inner–shell phenomena such as the angular distributions of emitted Auger and photo
electrons. For 2p −→ 4s resonantly excited argon atoms, for example, it was shown recently
[19] that the electron emission can be understood properly only if the decay in the (two–step)
cascade is treated coherently. However, while the atomic levels in the cascade can be speciﬁed
experimentally rather easily owing to the existence of observed line spectra, program tools
such as Lsj are needed to understand the theoretical data and to select those levels, which
have to be involved in the computation.

The design of Lsj within the framework Ratip enables the user to apply a jj → LS transfor-
mation for all atoms and shell structures which can be calculated by means of Grasp92 or any
other Ratip component. This includes, in particular, open d− and f −shell elements which
have attracted a lot of recent interest. For atomic fermium with Z = 100, for example, ﬁrst
measurements on the low–lying excitation spectrum have recently been carried out in Mainz
and could be supported by means of extended theoretical computations [20]. Therefore, we
hope that the Lsj component might be of use also in improving the available date base on the
lanthanide (Z = 57, ..., 71) and actinide elements (Z = 89, ..., 103) in the future.

In the design and set–up of Ratip, our intention from the very beginning was to provide the
user with an open environment for his or her studies of atomic properties. In the last few
years, therefore, various requests arose for the further development of the code concerning, for
example, the radiative and dielectronic recombination of highly–charged ions, electron–impact
processes or even the study of multi–photon excitation and ionization processes. Very likely,
however, only a few of these requests can be fulﬁlled by us in the forthcoming years where our
attention will ﬁrst be directed to the radiative capture of electrons, i.e. the reversed process to
the photoionization. Therefore, in order to extend Ratip along additional lines, any support
of coworkers or even the independent implementation of new components will be appreciated.

References

[1] F. A. Parpia, C. F. Fischer and I. P. Grant, Comput. Phys. Commun. 94 (1996) 249.

[2] S. Fritzsche, J. Elec. Spec. Rel. Phenom 114–116 (2001) 1155.

[3] S. Fritzsche, C. F. Fischer and C. Z. Dong, Comput. Phys. Commun. 124 (2000) 342.

[4] S. Fritzsche, C. F. Fischer and G. Gaigalas, Comput. Phys. Commun. 148 (2002) 103.

[5] P. G. H. Sandars and J. Beck, Proc. R. Soc. London 1289 (1965) 97.

[6] L. Armstrong, J. Math. Phys. 7 (1966) 1891.

[7] L. Armstrong, J. Math. Phys. 9 (1968) 1083.

[8] R. Karazija, V. Jonauskas, J. Math. Phys. 42 (2001) 5642.

[9] G. Gaigalas, Z. Rudzikas and T. Zalandauskas, Book of Abstracts of XI HCI Conference, 1-6

September, 2002, Caen, France, p. 48.

[10] G. Gaigalas, T. Zalandauskas and Z. Rudzikas, At. Data Nucl. Data Tables, in press (2003).

[11] G. Gaigalas, Z. Rudzikas and C. Froese Fischer, J. Phys. B 30 (1997) 3747.

[12] G. Gaigalas, Z. Rudzikas and C. Froese Fischer, At. Data Nucl. Data Tables, 70 (1998) 1.

[13] G. Gaigalas, S. Fritzsche and Z. Rudzikas, At. Data Nucl. Data Tables, 76 (2000) 235.

[14] G. Gaigalas and S. Fritzsche, Comp. Phys. Commun. 149 (2002) 39.

19

[15] Z. Rudzikas, Theoretical Atomic Spectroscopy (Cambridge Univ. Press, Cambridge, 1997).

[16] G. Gaigalas, S. Fritzsche and B. Fricke, Comp. Phys. Commun. 135 (2001) 219.

[17] S. Fritzsche, Comp. Phys. Commun. 103 (1997) 51.

[18] S. Fritzsche, Phys. Scr. T100 (2002) 37.

[19] K. Ueda, Y. Shimizu, H. Chiba, M. Kitajima, H. Tanaka, S. Fritzsche and N. M. Kabachnik,

J. Phys. B 34 (2001) 107.

[20] M. Sewtz, H. Backe, A. Dretzke, G. Kube, W. Lauth, P. Schwamb, K. Eberhardt, C. Gr¨uning, P.
Th¨orle, N. Trautmann, P. Kunz, J. Lassen, G. Passler, C. Z. Dong, S. Fritzsche and R. G. Haire,
Phys. Rev. Lett., in press (2003).

20

