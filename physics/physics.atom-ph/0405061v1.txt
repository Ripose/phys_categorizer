THE PROGRAM FOR THE TRANSFORMATION OF ATOMIC
STATE FUNCTIONS FROM LS- TO jj-COUPLED BASIS

Tomas ˇZalandauskas and Gediminas Gaigalas

Vilnius University Research Institute of Theoretical Physics and Astronomy,
A. Goˇstauto 12, Vilnius 2600, LITHUANIA

February 2, 2008

Abstract

Here we present the program for the transformation of the expansions of the atomic state functions
from LS- to jj-coupled bases. The program is a part of the coupling optimization package Laris and
allows to transform the multiconﬁgurational expansions with the arbitrary number of open shells (includ-
ing f -electrons) and to identify atomic levels and classify the atomic spectra by means of intermediate
quantum numbers of LS- and jj-couplings.

PACS Ref.: 31.15Ar, 31.15.-p, 02.70.-c.

Keywords: atomic structure, LS-coupling, jj-coupling, LS − jj transformation, optimal coupling scheme, clas-

siﬁcation of atomic spectra.

4
0
0
2
 
y
a
M
 
3
1
 
 
]
h
p
-
m
o
t
a
.
s
c
i
s
y
h
p
[
 
 
1
v
1
6
0
5
0
4
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

1

PROGRAM SUMMARY

Title of program: Lsjj

Program obtainable from: Vilnius University Research Institute of Theoretical Physics and Astronomy, A. Goˇstauto
12, Vilnius, 2600, Lithuania. E-mail: tomas@mserv.itpa.lt

Computer for which the library is designed and others on which it has been tested: Pentium–based PC 155 MHz.
Installations: Vilnius University Research Institute of Theoretical Physics and Astronomy (Lithuania)
Operating systems or monitors under which the new version has been tested: LINUX 2.4.5

Programming language used in the new version: ANSI standard Fortran 90/95.

Memory required to execute with typical data: Memory requirements depend on the shell structure and the size of the
wave function expansion which is used to represent the atomic levels.

No. of bits in a word: All real variables are parametrized by a selected kind parameter and, thus, can easily be
adapted to any required precision as supported by the compiler. Presently, the kind parameter is set to double
precision (two 32–bit words) in the module rabs constant.

No. of bytes in distributed program, including test data, etc.: ...

Distribution format: compressed tar ﬁle

Keywords : atomic structure, LS-coupling, jj-coupling, LS − jj transformation, optimal coupling scheme, classiﬁca-
tion of atomic spectra.

Nature of physical problem:
The set of quantum numbers for the identiﬁcation of atomic state functions (levels) and the classiﬁcation of atomic
spectra usually are chosen comparing the distributions of the mixing coeﬃcients in the bases corresponding to various
coupling schemes. The corresponding mixing coeﬃcients usually are obtained diagonalizing the energy matrix in the
basis of the wave functions of certain coupling. Once the secular equation is solved and the mixing coeﬃcients in
some coupling scheme are obtained they can be used as a source to get corresponding coeﬃcients for the bases of
other coupling schemes if the appropriate transformation matrix is known [1].

Method of solution:
For the transformation of the atomic state functions from LS- to jj-coupled basis we use the recently obtained LS −jj
transformation matrices for the shells of equivalent electrons [2] as well as the formula for the LS − jj transformation
matrices [3].

Restrictions on the complexity of the problem:
The program restricted to the conﬁgurations with LS-coupled shells with l=0, 1, 2 and 3.

Unusual features of the program: The Lsjj program is designed as a part of the coupling optimization package Laris.

References:
[1] Z. Rudzikas, Theoretical Atomic Spectroscopy (Cambridge Univ. Press, Cambridge, 1997).
[2] G. Gaigalas, T. ˇZalandauskas and Z. Rudzikas, At. Data Nucl. Data Tables, in print (2002).
[3] G. Gaigalas, Z. Rudzikas and T. ˇZalandauskas, Book of Abstracts of XI HCI Conference, 1-6 September, 2002,

Caen, France, 48.

2

LONG WRITE–UP

1

Introduction

In investigating the energy spectra and other characteristics of atoms and ions, the experimentalists most
often use the LS-coupling scheme. There a shell of electrons is made of the electron states having the same
principal and angular quantum numbers, n and l. Such a shell is additionally characterized by the shell
occupation number N and the resulting orbital and spin momenta, Li and Si. When several shells are
present, the state in LS-coupling is additionally characterized by the intermediate resulting momenta Lij
and Sij, and by the total momenta L, S and J. This coupling scheme is very popular in the theoretical
atomic physics when atoms and ions are investigated in the non–relativistic approximation. This, in the ﬁrst
place, is related to the fact that for the light atoms and ions such an approximation produces quite accurate
results and the agreement with the experiment is fairly good. Secondly, this coupling scheme is realistic for
such systems. Therefore it is convenient for the identifying the energy levels. At the same time, this scheme
is convenient to investigate such processes as transitions, whereby the selection rules for electronic transitions
are both easily determined and reﬂect the real situation. But this coupling scheme is for a relatively small
number of atoms and ions. The quantum numbers of this scheme are not accurate for highly charged ions
and a number of other cases. For the identiﬁcation of atomic state functions (ASF) and classiﬁcation of
energy spectra the approximate quantum numbers are widely used. Usually such a classiﬁcation relies on
the characteristics of the LS− or jj− coupling scheme. But in a number of cases (for example ions of
intermediate ionization degree) the choice of such classiﬁcation is not trivial and implies the consideration
of the expansions of atomic state functions in several bases of pure coupling wave functions. Therefore it
is convinient to have the possibility to transform the expansions of atomic state functions between various
bases of pure coupling wave functions [1].

The transformation matrices between the diﬀerent bases of pure coupling wave functions were studied
([2]-[10]), whereas the corresponding software were developed ([11, 12, 13, 14]). Nevertheless until recently
there were neither LS − jj transformation matrices for the arbitrary number of open shells available, nor
the corresponding software allowing one to transform the ASFs resulted from the large scale calculations.
In addition, the software created earlier does not always allow to ﬁnd the most suitable coupling scheme,
as sometimes it appears that no dominating scheme is present and several schemes are equally suitable
simultaneously. We present the investigation of the Fluorine isoelectronic sequence as an example [15]. In
this case, several coupling schemes are treated in the search for an optimal one. Those are LS, LK, JK
and JJ. In all those schemes the LS coupling is valid inside a shell. Using the analysis of the structure of
the weights of the ASF or the quantity R, one may notice that in this particular isoelectronic sequence the
ions do not have a dominating scheme, or the dominating scheme does not stand out clearly among others.
Therefore the above–mentioned methods have been extended [8, 9, 10] in a way providing a possibility to
change the LS−coupling scheme into the jj−coupling one inside a shell, when necessary. The recently
obtained LS − jj transformation matrices for the shell of equivalent electrons [9] as well as the formulas for
the LS − jj transformation matrices [10] enabled us to develop a computer code allowing to transform the
ASFs from LS- to jj-coupling for all the conﬁgurations practically needed in atomic physics. In the search
for an optimal coupling scheme that would allow one to change the coupling scheme inside a shell and to
investigate the atoms and ions with ASFs containing open f -shells with arbitrary occupation numbers.

To facilitate such a classiﬁcation of the atomic levels and wave functions, we present here the program
Lsjj.
It supports the performance of the LS − jj transformations. This program may be of value as a
separate module in solving the physical problems that also need this transformation. However in this case
one should bear in mind that the above–mentioned transformation would provide the correct results only if
the calculations are performed in the framework of the Racah–Fano phase system [16], and the coeﬃcients
of fractional parentage are deﬁned via the quasispin formalism, as described in [17, 18].

A short explanation of the theoretical background is presented in Section 2. The explanation of the usage
and the organization of the program with the description of main subroutines are presented in Section 3.
The example of the usage of the program and the concluding remarks are presented in Sections 4 and 5
correspondingly.

3

2 Theoretical background

While investigating theoretically various characteristics of atoms and ions (for example using multiconﬁgu-
ration or conﬁguration interaction approaches) the atomic state functions are used which are either written
in terms of a LS−coupled

or jj-coupled basis

Ψτ (J P )

=

a (LS)
r

(τ ) |γr LrSr JP i

(cid:12)
(cid:12)

(cid:11)

r
X

Ψτ (J P )

=

a (jj)
s

(τ ) |γsJP i ,

(1)

(2)

s
X
where τ = 1, 2, ... enumerates the atomic states (of the given J and parity P ) and γr, γs denote the sets of all
additional quantum numbers of the LS- and jj-coupled conﬁguration state functions (CSF) correspondingly.

(cid:12)
(cid:12)

(cid:11)

When a pure LS–coupling exists in the atoms or ions under consideration, then r=1 in equation (1).
When the jj–coupling exists, then s=1 in equation (2). Therefore such an ASF is identiﬁed by an array
of quantum numbers γ1. However, these quantum numbers are exact only for the cases of pure coupling
schemes, which is more the exception than a rule.

In the most general case the exact ASF is made up as an inﬁnite sum in (1) or (2). Therefore an ASF
consists of an inﬁnite number of CSFs. In the real calculation one attempts to include terms as many as
possible in the sum having the maximum coeﬃcients a (LS)
(τ ). But in this case it is not clear what
r
array γ to ascribe in identifying the ASF. Bearing in mind that the coeﬃcient modulus squared (weight)
a (LS)
a (jj)
deﬁnes the probability for the atomic state to be in a state with the array of
r
s
quantum numbers γrLrSr or γs, one can easily classify all the energy levels by ascribing the characteristics
(cid:12)
(cid:12)
(cid:12)
(cid:12)
of the maximum coeﬃcient (a (LS)
(cid:12)
(cid:12)

smax(τ ) in jj-coupling) to the whole ASF.

rmax (τ ) in LS or a (jj)

(τ ) or a (jj)

(τ )

(τ )

or

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

2

2

s

The situation becomes more complicated when the expansion (1) or (2) has no obviously dominant weight
but several approximatelly equal ones. Most eﬃcient way for such a classiﬁcation is the transformation of
the ASF into another coupling scheme with the suitable distribution of weights (i.e. with only one dominant
weight coeﬃcient). For example, the classiﬁcation of the spectra of complex atoms and ions using the
intermediate quantum numbers of LS-coupling quite oﬀen is problematical.

One of the possible solutions is to transform the function (1) into function (2). Then the level is ascribed to
at the transformation of CSFs |γrmax JP i,
the characteristics γrmax that have the maximum weight
i.e. the intermediate quantum numbers of jj-coupling are used for the identiﬁcation of the ASFs. Such
transformations and identiﬁcations are the tasks of the Lsjj program presented in this paper.

a (jj)
rmax(τ )

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

For practical purposes and especially for an eﬃcient transformation the program treats the CSF in a

standard order, i.e. it is assumed that the LS-coupled functions are couped consequently

|γr LS JP i ≡

1 α1L1S1, l N2

2 α2L2S2)L12S12, l N3

3 α3L3S3)L123S123)...)LS J

(3)

E

as well as the jj-coupled CSFs

(...(((l N1
(cid:12)
(cid:12)
(cid:12)

|γsJP i

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

≡

(...(((((

−
N 1

−
κ

1

−
ν 1

−
J 1,

+
N 1

+
κ

1

+
ν 1

+
J 1)J1,

−
N 2

−
κ

2

−

−
ν 2

J 2)J ′

12,

+
κ

2

+
ν 2

+
J 2)J12

+
N 2

−
N 3

−
κ

3

−

−
ν 3

J 3)J ′

123,

+
κ

3

+
N 3

+
ν 3

+
J 3)J123...)J

,(4)

+

where κ is the relativistic (angular momentum) quantum number

−
κi= li and

+
κi= −li − 1.

If both subshells with common li, i.e.

−
κi and

+
κi appear in the expansion, these two subshells always occur

successively in the sequence (

+
ν i

+
J i) Ji. Formally, we can use this sequence even for the subshell

−
N i

−
κ

i

−
ν i

−
J i,

+
N i

+
κ

i

4

states with zero occupation if we interpret
expansion remains valid due to the orthonormality properties of the Clebsch–Gordan coeﬃcients.

≡ 1; in this case, the full Clebsch–Gordan

κ0ν = 0 J = 0

For the LS − jj transformation of the conﬁguration states we further assume in a standard order that
+
κ2 +1), ..., i.e. that the sequence of (sub–)shell states is the same on

−
κ1 = −(

−
κ2 = −(

+
l1 =
κ1 +1), l2 =
both sides of the transformation matrix.

The program presented in this paper is based on the methodics [8] where mixing coeﬃcients a (LS)

r

(τ ) are

transformed to a (jj)

s

(τ ) using the following relation:

(cid:12)
(cid:12)

(cid:11)

a (jj)
s

(τ ) =

hγsJP |γr LrSr JP i a (LS)

(τ ),

r

(5)

where hγsJP |γr LrSr JP i is the LS − jj transformation matrix.

r
X

In general, the performing of the transformations (5) with the matrix hγsJP |γr LrSr JP i requires the
LS − jj transformation matrices for the shell of equivalent electrons [10]. The numerical values of the
matrices for the shell of equivalent electrons are presented in [9], nevertheless it is necessary to ensure the
compatibility of the coeﬃcients of fractional parentage (CFP) used to form (3) and (4) with the ones used in
the transformation matrices. In this program the usage of the CFP obtained from the reduced coeﬃcients
(subcoeﬃcients) of fractional parentage (RCFP) is assumed [1] (such CFPs were used for the calculation of
LS − jj matrix elements). The program is based on quasisipin formalism and therefore the appropriate data
are required. The data could be generated using the popular package [19, 20] with the angular parts [21].

3 Description of the Program

The program is written in Fortran 90 programming language. The main part of the program consists of
several subroutines collected into the module rabs lsjj (ﬁle rabs lsjj.f90). The program is designed in
the way similar to Ratip [22] package. Some of the Ratip features are used and the overall program includes
the additional modules rabs angular, rabs constant, rabs csl, rabs determinant, rabs dirac orbital,
rabs naglib, rabs nucleus, rabs rcfp, rabs utilities, rabs lsj, rabs lsj data [23, 24] (the corre-
sponding ﬁles named as the module name.f90).

3.1 Installation of the program

The program was designed and tested on the PC with the Linux OS. Nevertheless it can be easily adopted
to any Unix-Linux based platforms (including IBM RS/6000, Sun OS). The installation of the program is
similar to Ratip components. First, the script make-environment which declares the global variables for
the compilation and linkage of the program should be run via statement source make-environment. Then,
the make-ﬁle (make-lsjj in this case) should be executed via comand make -f make-lsjj (both ﬁles can
be obtained from the authors together with other program ﬁles). Then the executable xlsjj is generated.

3.2 Interactive control and output of the program

The principled scheme of the execution of the program is presented in Figure 1. After the initialization of
several data arrays at the beginning of the execution (subroutine lsj initialization LS jj() [23]), the
control is taken by the procedure lsjj control transformation(), which reads and interprets all input
data, carries out the transformation for all selected levels, and ﬁnally prints the results to screen. The
example of an interactive dialogue performed through the execution is presented in Figure 2.

3.2.1 Input

The input of data in this version of the program is performed by the subroutine lsjj load csfs from MCHF files()
called from the subroutine lsjj control transformation(). The input data is assumed to be in the same
format as the Mchf [19, 20] output data and can be generated with this package with the angular parts [21]
(to ensure the usage of the CFP deﬁned via the quasispin formalism). Two ﬁles, one with the CSF basis
(conﬁguration list ﬁle .inp) and the other with the ASFs expansions (mixing coeﬃcients ﬁle .j) should be

5

Table 1 The subroutines and functions of the rabs lsjj module.

General purpose

Output facilities

Utilities

lsjj control transformation()

lsjj load csfs from MCHF files()

lsjj form csf basis jj()

lsjj transformation ASF()

lsjj get subshell term jj()

lsjj print MCHF data()

lsjj print csfs LS MCHF()

lsjj print coefficients LS MCHF()

lsjj print single configuration jj2()

lsjj print coefficients jj()

lsjj print configuration scheme jj()

lsjj print detailed info csf set LS()

lsjj lval()

lsjj lvalr()

lsjj largest coeff()

lsjj deallocate asf basis jj()

provided. The conﬁguration list ﬁle may be generated using the Genclf and the mixing coeﬃcients ﬁle -
using the Ci program from the Mchf package [19]. The fragments of the input ﬁles are presented in Figures
3, 4. The detailed speciﬁcation of the format of these ﬁles is avialable at the description of the popular
Mchf package (mentioned above) therefore we will not go into details.

3.2.2 Output

The output of the program, namely the jj-coupled CSFs and the expansions of the selected ASFs are
performed either directly from the subroutine lsjj control transformation() or from the speciﬁc data
output subroutines called from it.

The direct ”onscreen” output includes the quantum numbers and weights of several CSFs with the
greatest weights as well as the sum of the squares of the mixing coeﬃcients (in the output of the program
denoted as Total sum of weights), serving as the numerical criteria of the accuracy of the expansions 1,
2.

The procedures lsjj print configuration scheme jj(), lsjj print coefficients jj() also print a
full expansions of all ASFs in jj-coupled basis to the ﬁles lsjj-out-csfs.jj and lsjj-out-coeff.jj in
the manner similar to the LS-coupled data. The fragments of the output ﬁles are presented in Figures 5, 6.

3.3 Description of the module rabs lsjj

In this section we will introduce the main procedures of the module and explain some details of their usage
because the main module of the program rabs lsjj is assumed to be used within the Lsjj as well as in other
programs (for example in other programs of the coupling optimization package Laris). The module collects
the procedures and functions in an alphabetic order; they are brieﬂy explained in the header of the module.
Further information about the methods, data structures, etc. and their implementation can be found in many
in–line comments in the headers of the individual procedures/functions or directly inside the source code.
The names of the subroutines/functions in the module begin with the ”lsjj ” and are followed by the rest
of the names explaining the purpose of the procedure. Table 1 lists the procedures and functions grouped
according to their purpose. The detailed description of the subroutines/functions is presented below.

6

The subroutine lsjj control transformation()

The main subroutine is controling the ﬂow of the execution. The subroutine performs an interactive dialogue
with the user, reads the speciﬁcation parameters for the calculation, opens and closes input and output
streams, calls other subroutines of data input, the proceeding and the output. No direct input arguments
should be speciﬁed. All the dinamically allocated arrays are deallocated at the end of the execution of the
subroutine.

The subroutine lsjj load csfs from MCHF files()

This subroutine loads the data on ASFs and corresponding expansions in terms of LS-coupled CSFs from
the ﬁles. The input ﬁles are assumed to be formated like MCHF output ﬁles [20]. Two input arguments
stream nr and stream nr j specify the input streams for the conﬁguration list ﬁle and for mixing coeﬃcient
ﬁle. The output argument ierr is designed for error handling and is assigned to 0 in case of failure. The
data read are placed to the public variable asf set LS%csf set LS.

The subroutine lsjj form csf basis jj()

This subroutine generates the jj-coupled CSFs corresponding to the LS-coupled ones stored in the public
variable asf set LS%csf set LS. No direct input arguments should be speciﬁed. The data generated are
placed to the public variable asf set%csf set. The algorithm of the generation is designed in a way that the
subroutine can deal with the wave functions of the conﬁgurations with the arbitrary number of open shells.
The algorithm is implemented using the utility of recursive subroutines. Two internal recursive subroutines
are used. The ﬁrst one lsjj form csf basis jj fill occupations() is meant for the deﬁnition of the

number of jj-coupled shells (and occupation numbers
. And
the second one lsjj form csf basis jj job count() is for the the calculation of the number of CSFs in
jj-coupling and corresponding intermediate quantum numbers J ′

+
N i) for the given LS coupled shell lNi

i

i..j, Ji..j (4).

−
N i,

The subroutine lsjj transformation ASF()

The subroutine transforms the atomic state function, represented in a LS-coupling CSF basis into a ba-
sis of jj-coupling CSF. Namely the expansion coeﬃcients a (jj)
(τ ) are calculated and placed to the array
asf set%asf(level LS)%eigenvector. The input argument level LS speciﬁes a serial number of the state
to be considered. The LS − jj matrix elements hγsJP |γr LS JP i for the transformation (5) are taken from
module rabs lsj data via the subroutine lsj transformation LS jj general() [23].

s

The subroutine lsjj get subshell term jj()

This procedure returns all allowed subshell terms (j, w, Q, J) for given jN which must be 1/2, 3/2, 5/2, 7/2
or 9/2. Two input arguments namely j shell and N deﬁne the value of the angular momentum and the
occupation. The number of corresponding terms as well as their quantum numbers are given by the output
arguments number and jj correspondingly.

There are a number of subroutines for the data output in various forms. All the names for all subroutines
begin with the lsjj print and are followed by the rest of the names explaining the content and type of
the output.

The subroutine lsjj print MCHF data()
The subroutine prints the data in the manner of MCHF program. The input arguments streamnr inp and
streamnr j specify the output streams for the MCHF mixing coeﬃcients (.j) and conﬁguration list (.inp)
ﬁles correspondingly. The argument asf set LS speciﬁes the variable where the LS-coupled data are stored.
The subroutine ﬁrst generates the temporary set of CSFs not coupled to J (as it is in MCHF ﬁles), prescribes
the mixing coeﬃcients to this set of CSFs and stores this data in temporary variable asf set LS MCHF. Then
the subroutine calls lsjj print csfs LS MCHF() and lsjj print coefficients LS MCHF() for the output
of CSFs and ASFs with the corresponding mixing coeﬃcients from this temporary variable.

The subroutine lsjj print csfs LS MCHF()

7

The subroutine prints the conﬁguration state functions to the ﬁle in the form similar to MCHF conﬁgu-
ration list ﬁle (.inp). The argument streamnr speciﬁes the output stream and the csf set LS speciﬁes the
CSFs in LS-coupling (not coupled to J).

The subroutine lsjj print coefficients LS MCHF()
The subroutine prints the data on ASFs with expansion coeﬃcients to the ﬁle in the form similar to
MCHF mixing coeﬃcients .j ﬁle. The argument streamnr speciﬁes the output stream and the asf set LS
speciﬁes the ASFs and the mixing coeﬃcients in LS-coupling (for the list of CSFs not coupled to J).

The subroutine lsjj print single configuration jj2()
The subroutine prints all information about a single CSF in jj-coupling. The input argument stream
speciﬁes the output stream, the csf set speciﬁes the variable of type csf basis where information on jj-
coupled CSFs is stored and csf number the serial number of CSF to be printed. The subroutine is similar
to the lsjj print single configuration jj() deﬁned in module rabs lsj.

The subroutine lsjj print coefficients jj()
The subroutine prints expansion coeﬃcients in jj-coupling to the ﬁle in the form similar to MCHF mixing
coeﬃcients (.j) ﬁle. The input argument streamnr speciﬁes the output stream and the asf set speciﬁes
the variable where the jj-coupled data are stored.

The subroutine lsjj print configuration scheme jj()
The subroutine prints information about the CSFs in jj-coupling. The input argument stream speciﬁes

the output stream and the csf set speciﬁes variable where the data on jj-coupled CSFs are stored.

The subroutine lsjj print detailed info csf set LS()
The subroutine prints detailed info about the LS-coupled CSFs. The input argument stream speciﬁes

the output stream and the csf set LS speciﬁes variable where the data on LS-coupled CSFs are stored.

The module rabs lsjj contains a number of auxiliary subroutines and functions.

The function lsjj lval()
The function returns the integer value of an orbital quantum number given as a character. The range of
an argument l should be from s to q (or from S to Q), i.e. the corresponding angular momentum l from 0
to 12.

The function lsjj lvalr()
The function returns the character value of an orbital quantum number given as an integer. The range

of an argument l should be from 1 to 12. The subroutine is inverse to the lsjj lval().

The function lsjj largest coeff()
The function deﬁnes the serial number of the largest element in an array. The argument array speciﬁes

the dinamically allocated array and size - it’s size.

The subroutine lsjj deallocate asf basis jj()
The subroutine deallocates the dinamically allocated data arrays within the variable asf set (i.e. the
jj-coupled data). The variable is deﬁned in the module rabs lsj. No direct input arguments should be
speciﬁed.

4 Example

Here we present the example of the transformation of the atomic state function and classiﬁcation in terms
of quantum numbers of LS- and jj-coupling schemes. The example considers the excited state of Ne II. The
interactive dialogue performed in the process of the execution of the program is presented in Figure 7.

First the names of conﬁguration list ﬁle (Ne.inp) and mixing coeﬃcients ﬁle Ne.j) are speciﬁed (the
fragments of the input ﬁles presented in Figures 3 and 4). Then the program proceeds the input and asks
to specify the ASFs to consider.

After the speciﬁcation of the ASFs the corresponding jj-coupled CSF basis is formed (144 CSFs in
this case) and the mixing coeﬃcients a (jj)
(τ ) of the MCHF expansion (2) are calculated. The resul-
tant CSF basis and mixing coeﬃcients of the speciﬁed ASF are printed to the ﬁles lsjj-out-csfs.jj

s

8

and lsjj-out-coeff.jj correspondingly. The fragments of the output ﬁles are presented in Figures 5
In addition the LS- and jj-coupled CSFs with the greatest weights (squares of the mixing co-
and 6.
eﬃcients) useful for the identiﬁcation and classiﬁcation of ASFs under the consideration presented inter-
In our case the considered ASF may be identiﬁed by means of the quantum numbers of the
actively.
or by means of the quantum numbers of jj-coupled
LS-coupled CSF

CSF

((((2s2)0, (2p−2)0) 0, (2p2)2) 2, (3s1) 1

(((2s2)1S, (2p4)3P ) 3P, (3s1)2S) 4P 5
(cid:12)
(cid:12)
(cid:12)

2 ) 5

2

.

2

E

(cid:12)
(cid:12)

The sums of the squares of the mixing coeﬃcients in LS- and jj-couplings equal to 1 with the precision
of the input coeﬃcients in LS-coupling (0.0000001). The fact that the sums in LS- and jj-couplings match
up to the thirteenth digit reveals the accuracy of the performation of the transformation (5).

(cid:11)

5 Conclusions and outlook

The program Lsjj enables us to transform the multiconﬁgurational expansions of the atomic state functions
from LS- to jj-coupled bases. The input data in the current version of the program are supposed to be in the
form of MCHF [20] output ﬁles, but the structure of the program enables to add more data input interfaces
easily. The module rabs lsjj together with the earlier constructed rabs lsj [23] extends the possibility
of comparison of ASFs expansions in various bases. This extent combined together with the program for
the changing coupling scheme between the LS-coupled shells of equivalent electrons and evaluation of the
suitability of the intermediate quantum numbers for the identiﬁcation and classiﬁcation of atomic spectra
under consideration [13] will serve as a tool for the search of the optimal set of quantum numbers for the
classiﬁcation of spectra of atoms and ions.

Program is obtainable from Vilnius University Research Institute of Theoretical Physic and Astronomy,

A. Goˇstauto 12, Vilnius, 2600, LITHUANIA. E-mail: tomas@mserv.itpa.lt.

9

References

502 (1965).

1981).

[1] Z. Rudzikas, Theoretical Atomic Spectroscopy (Cambridge Univ. Press, Cambridge, 1997).

[2] R. D. Cowan and K. L. Andrew, Coupling considerations in two-electron spectra, J. Opt. Soc. Am., 55,

[3] I. Kiˇckin, A. Slepcov, V. Sivcev, Z. Rudzikas, Correlation between wave functions of many-electron

atoms in various coupling schemes, Liet. Fiz. Rink., 16, 217-229 (1976) [in Russian].

[4] R.D. Cowan, The Theory of Atomic Structure and Spectra (Berkeley, CA: University of California Press

[5] J. B. Calvert and E. R. Tuttle, The jj − LS transformation matrices for three or more equivalent p or

d electrons, Il nuovo cimento 54 B, 413 (1979)

[6] K. G. Dyall and I. P. Grant, Phase conventions, quasi-spin and the jj–LS transformation coeﬃcients,

J. Phys. B., 15, L371-L373 (1982).

[7] W. J. Childs, Matrix elements of hyperﬁne structure operators in the SL and jj representations for the
s, pN , and dN conﬁgurations and the SLjj transformation, At. Data Nucl. Data Tables, 67, 1 (1997)

[8] G. Gaigalas, T. ˇZalandauskas and Z. Rudzikas, Analytical expressions for special cases of LS − jj
transformation matrices for a shell of equivalent electrons, Lithuanian Journal of Physics, 41, 226
(2001).

[9] G. Gaigalas, T. ˇZalandauskas and Z. Rudzikas, LS–jj transformation matrices for a shell of equivalent

electrons, At. Data Nucl. Data Tables, in print (2003).

[10] G. Gaigalas, Z. Rudzikas and T. ˇZalandauskas, On the Optimization of Classiﬁcation of HCI Spectra,

Book of Abstracts of XI HCI Conference, 1-6 September, 2002, Caen, France, 48.

[11] R. D. Cowan, , Theoretical calculation of atomic spectra using digital computers, J. Opt. Soc. Am., 50,

808 (1968).

[12] J. V. ˇCiplys, The program for the optimization of the coupling scheme of angular momenta, A Collection
of Programs on Mathematical Supply of Atom Calculations, Ed. 16 (Institute of Physics of the Academy
of Sciences of the Lithuanian SSR, 1986).

[13] T. ˇZalandauskas, The computer program for the optimization of the coupling scheme, Book of Abstracts

of EGAS 34, 9-12 July, 2002, Soﬁa, Bulgaria, 123.

[14] G. Gaigalas, and S. Fritzsche, Maple procedures for the coupling of angular momenta. VI. LS-jj trans-

formations, Comput. Phys. Commun., 149, 39 (2002).

[15] G. Gaigalas, R. Karpuˇskiene and Z. B. Rudzikas, Optimal classiﬁcation of HCI spectra, Physica Scripta,

T80, 472 (1999).

[16] G. Gaigalas, Z. Rudzikas and Ch. Froese Fischer, J. Phys. B 30 (1997) 3747.

[17] G. Gaigalas, Z. Rudzikas and Ch. Froese Fischer, At. Data Nucl. Data Tables, 70 (1998) 1.

[18] G. Gaigalas, T. Zalandauskas and Z. Rudzikas, At. Data Nucl. Data Tables, in print (2003).

[19] C. Froese Fischer, A general multi-conﬁguration Hartree-Fock program, Comput. Phys. Commun., 14,

145 (1978).

[20] C. Froese Fischer, T. Brage and P. J¨onsson, Computational Atomic Structure. An MCHF Approach

(Institute of Physics Publishing, Bristol/Philadelphia, 1997).

[21] G. Gaigalas, The library of subroutines for calculation of matrix elements of two-particle operators for

many-electron atoms, Lithuanian Journal of Physics, 42, 73 (2002).

[22] S. Fritzsche, J. Elec. Spec. Rel. Phenom., 114–116, 1155 (2001).

10

[23] G. Gaigalas, T. ˇZalandauskas and S. Fritzsche, Spectroscopic LSJ notation for atomic levels from

relativistic calculations, Comput. Phys. Commun. in print (2003).

[24] S. Fritzsche, C. F. Fischer and G. Gaigalas, RELCI: A program for relativistic conﬁguration interaction

calculations, Comput. Phys. Commun., 148, 103 (2002).

11

PROGRAMA ATOMU¸ B ¯USENU¸ FUNKCIJOMS TRANSFORMUOTI IˇS LS I¸ jj RYˇSIO BANGINIU¸

FUNKCIJU¸ BAZE¸

T. ˇZalandauskas ir G. Gaigalas

Santrauka

Eksperimentiˇskai gaunami atom¸u ir jon¸u energetiniai spektrai paprastai identiﬁkuojami ir klasiﬁkuojami
naudojant LS ryˇsio schemos kvantinius skaiˇcius. ˇSi ryˇsio schema yra labai populiari ir teorin˙eje atomo
ﬁzikoje, kai atomai ir jonai yra nagrin˙ejami nereliatyvistiniame artutinume. Bet LS ryˇsio kvantiniai skaiˇciai
daˇznai n˙era tinkami sunki¸u atom¸u bei didelio ionizacijos laipsnio jon¸u b¯usenoms apibudinti. Vienareikˇsmiam
bei tiksliam toki¸u atom¸u bei jon¸u b¯usen¸u identiﬁkavimui bei spektr¸u klasiﬁkavikavimui geriau tinka kit¸u ryˇsio
shem¸u (daˇznai jj ryˇsio) kvantiniai skaiˇciai.

Neseniai gautos LS-jj transformacijos matricos ekvivalentini¸u elektron¸u sluoksniams (i¸skaitant f elek-
tron¸u sluoksnius su bet kokiu uˇzpildymo skaiˇciumi) bei LS-jj transformacijos matric¸u iˇsraiˇskos konﬁg¯uracijoms
su bet kokiu atvir¸u sluoksni¸u skaiˇciumi i¸galino mus sukurti program¸a, skirt¸a atom¸u bei jon¸u b¯usen¸u funkcij¸u
transformavimui iˇs LS i¸ jj ryˇsio bangini¸u funkcij¸u baz¸e. Tokio pob¯udˇzio program¸u, leidˇzianˇci¸u keisti ryˇsio
tip¸a tiek ekvivalentini¸u elektron¸u sluoksni¸u viduje (i¸skaitant f elektron¸u sluoksnius), tiek ir tarp sluoksni¸u,
iki ˇsiol nebuvo.

Programa i¸galina atlikti atom¸u ir jon¸u spektr¸u identiﬁkavim¸a ir klasiﬁkacij¸a LS ir jj ryˇsio kvantiniais
skaiˇciais, prapleˇcia kvantini¸u skaiˇci¸u rinkinio, optimalaus atomini¸u spektr¸u identiﬁkavimui ir klasiﬁkavimui,
paieˇskos galimybes.

12

data input

|-------------------------------|
|
|-------------------------------|

|
P |
R |-----| lsj_initialization_LS_jj()
O |
G |
|-------------------------------|
R |
A |-----| lsjj_control_transformation() |
M |
|-------------------------------|
|
|
|
E |
X |
E |
C |
U |
T |
I |
O |
N |
|
|
|
|
|
|
|
|
|
|
|

|
|
|---
|
|
|
|
|---
|
|
|
|
|---
|
|
|
|
|
|---
|
|
|

data output

- lsjj_load_csfs_from_MCHF_files()

formation of all CSFs in jj coupling

- lsjj_form_csf_basis_jj()

LS-jj transformation and classification
of all selected levels

- lsjj_transformation_ASF()

- lsjj_print_configuration_scheme_jj()
- others

Figure 1: Schematic ﬂow chart of the Lsjj program.

Program for transformation of atomic states from LS to jj coupling
(C) Copyright by T Zalandauskas and G Gaigalas Vilnius (2003).

Transform one or several ASF from a MCHF calculation into a
jj-coupled CSF basis. The transformation starts from the given
cfg.inp and .j files and is carried out for the n leading CSF in
the LS-coupled basis; the new representation in the jj basis is
printed as in a standard GRASP92 computation.

Enter the name of the MCHF configuration list file:

Enter the name of corresponding .j mixing coefficient file:

load_cfg_from_MCHF_file ...

... nonrelativistic CSFs (before couplin to J);

number of core shells
= ...
total number of shells = ...
number of csfs LS
= ...
reordered
there are
now couple them to J ...
now load mixing coefficients and form asf_set_LS...
end reading j
there are
there are
... load complete.

atomic state functions
nonrelativistic CSFs (coupled to J)

...
...

Maximum number of considered ASF is: ...
Enter the level numbers of the ASF which are to be transformed,

e.g. 1 3 4 7 - 20

48

69 - 85 :

>

>

>

Figure 2: Interactive dialogue of Lsjj program

13

1s
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)
1S0
2s( 2)

...

2p( 4)
1S0
2p( 4)
3P2
2p( 4)
3P2
2p( 4)
1D2
2p( 4)
1S0
2p( 4)
3P2
2p( 4)
3P2
2p( 4)
3P2
2p( 4)
3P2
2p( 4)
3P2
2p( 4)
1D2
2p( 4)
1D2
2p( 4)

3s( 1)
2S1
3s( 1)
2S1
3s( 1)
2S1
3s( 1)
2S1
3d( 1)
2D1
3d( 1)
2D1
3d( 1)
2D1
3d( 1)
2D1
3d( 1)
2D1
3d( 1)
2D1
3d( 1)
2D1
3d( 1)
2D1
3d( 1)

1S

3P

3P

1D

1S

3P

3P

3P

3P

3P

1D

1D

2S

2P

4P

2D

2D

2P

4P

2D

4D

4F

2P

2D

Figure 3: Fragment of MCHF conﬁguration list ﬁle Ne.inp

Ne

Z = 10.0

N =

9

NCFG = 224

2*J =

5 NUMBER = 1

3

-126.95806136

0.0000000 0.0000000 0.9951298 0.0130359 0.0003521 0.0000000 0.0237319
0.0096379 -.0179847 -.0159071 0.0000000 -.0002664 0.0000000 0.0177844
0.0000002 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
0.0575015 -.0000647 -.0005302 0.0000000 0.0001279 0.0000000 0.0000000

...

Figure 4: Fragment of MCHF mixing coeﬃcients ﬁle Ne.j

14

The current configuration scheme with 144 CSF in jj coupling

is defined as follows:

Number of electrons:

9

Number of (relativistic) subshells: 9
Core shells:

1s

2s
144

Peel shells:

CSF(s):

2p-

2p

3s

3p-

3p

3d-

3d

1) 2s ( 2)

2p-( 1)

2p ( 3)

3s ( 1)

2) 2s ( 2)

2p-( 2)

1/2

3/2

1/2

1/2

2p ( 2)
2

3s ( 1)

1/2

3) 2s ( 2)

2p ( 4)

3d ( 1)

5/2

5/2

4) 2s ( 2)

2p-( 1)

2p ( 3)

3d ( 1)

1/2

3/2

5/2

5) 2s ( 2)

2p-( 1)

2p ( 3)

3d ( 1)

1/2

3/2

5/2

6) 2s ( 2)

2p-( 1)

2p ( 3)

3d-( 1)

1/2

3/2

3/2

1/2

1/2

1/2

2

2

1

2

1

5/2

5/2

5/2

5/2

5/2

...

Figure 5: Fragment of output ﬁle lsjj-out-csfs.jj of jj coupled CSFs

1

0.5638947
0.0103721
0.0355732
0.0049082

-126.95806136
0.8200464
0.0170042
0.0514159
0.0044622

...

-.0140585
-.0084857
-.0002857
-.0028572

0.0254398
0.0230858
-.0018696
-.0023440

0.0123155
-.0169735
0.0043991
0.0025700

-.0067862
0.0440080
0.0004125
0.0059582

-.0061464
-.0234300
-.0016268
0.0018875

Figure 6: Fragment of output ﬁle lsjj-out-coeff.jj of the ASFs expansions in jj-coupling

15

.
.

Ne.inp

Ne.j

Enter the name of the MCHF configuration list file:

Enter the name of corresponding .j mixing coefficient file:

load_cfg_from_MCHF_file ...

224 nonrelativistic CSFs (before coupling to J);

= 224

number of core shells
= 1
total number of shells = 6
number of csfs LS
there are
now couple them to J ...
now load mixing coefficients and form asf_set_LS...
end reading j
there are
there are
... load complete.

nonrelativistic CSFs (coupled to J)

atomic state functions

1
144

Maximum number of considered ASF is: 1
Enter the level numbers of the ASF which are to be transformed,

e.g. 1 3 4 7 - 20

48

69 - 85 :

1

number_of_levels, levels(:) = 1 1

start formation of CSFs in jj coupling...

number of shells in jj coupling =
number of core shells in jj coupling =
number of configuration state functions in jj coupling =

1

9

144

finish formation of CSFs in jj coupling...

Weights of major contributors to ASF in LS-coupling:

Level

J Parity

CSF contributions

1

5/2

+

0.99028 of

1

0.00391 of

15

0.00331 of

11

Definition of leading CSF:

1)

2s( 2)
1S0

2p( 4)
3P2

3s( 1)
2S1

3P

4P

5/2

Total sum of weights is:

0.9999999614146498

Weights of major contributors to ASF in jj-coupling:

Level
1

J Parity
+

5/2

CSF contributions

0.67248 of

2

0.31798 of

1

0.00264 of

16

Total sum of weights is:

0.9999999614146532

Definition of leading CSF:

1) 2s ( 2)

2p-( 1)

2p ( 3)

3s ( 1)

2) 2s ( 2)

2p-( 2)

1/2

3/2

1/2

1/2

2p ( 2)
2

3s ( 1)

1/2

2

2

5/2

5/2

16) 2s ( 1)

2p-( 2)

3s ( 2)

2p ( 2)
2

1/2

1/2

5/2

5/2

LS-jj complete ... .

Figure 7: Interactive dialogue of Lsjj program for the transformation of state function of excited Ne

16

