2
0
0
2
 
r
p
A
 
9
 
 
]
h
p
-
m
e
h
c
.
s
c
i
s
y
h
p
[
 
 
1
v
8
2
0
4
0
2
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Constant-temperature molecular-dynamics algorithms for mixed hard-core/continuous
potentials

Yao A. Houndonougbo and Brian B. Laird∗
Department of Chemistry
University of Kansas
Lawrence, KS 66045, USA
(Dated: February 2, 2008)

We present a set of second-order, time-reversible algorithms for the isothermal (N V T ) molecular-
dynamics (MD) simulation of systems with mixed hard-core/continuous potentials. The methods are
generated by combining real-time Nos´e thermostats with our previously developed Collision Verlet
algorithm [Mol. Phys. 98, 309 (1999)] for constant energy MD simulation of such systems. In all
we present 5 methods, one based on the Nos´e-Hoover [Phys. Rev. A 31, 1695 (1985)] equations of
motion and four based on the Nos´e-Poincar´e [J.Comp.Phys., 151 114 (1999)] real-time formulation
of Nos´e dynamics. The methods are tested using a system of hard spheres with attractive tails and
all correctly reproduce a canonical distribution of instantaneous temperature. The Nos´e-Hoover
based method and two of the Nos´e-Poincar´e methods are shown to have good energy conservation
in long simulations.

I.

INTRODUCTION

Algorithms for molecular-dynamics simulation can be
generally be divided into two distinct classes depending
upon the nature of the potential[1]. For systems with
continuously diﬀerentiable potentials, the trajectory is
generated through the numerical integration of the equa-
tions of motion - a coupled set of diﬀerential equations -
typically with a ﬁxed time step. At the other end of the
spectrum are methods for discontinuous potentials, such
as hard spheres or the square-well potential. Such algo-
rithms are event driven in that the system is advanced
ballistically between ”collisions”, which are then resolved
exactly. There exist, however, model interaction poten-
tials of theoretical and practical importance that are hy-
brids of continuous and discontinuous potentials - for ex-
ample, the restricted primitive model for electrolyte solu-
tions or the dipolar hard-sphere model of polar ﬂuids. To
date, simulation studies for such systems have primarily
been restricted to Monte Carlo studies due to the lack of
a viable molecular-dynamics (MD) algorithm. To rem-
edy this, we have recently introduced a new molecular-
dynamics method for such systems [2]. The algorithm,
referred to as Collision Verlet, has good energy conserva-
tion and is far more stable over long time simulation than
previous integrators for hybrid continuous/discontinous
systems. The Collision Verlet algorithm was formulated
as a constant energy simulation method, which generates
conﬁgurations from a microcanonical (N V E) distribu-
tion. However, to mimic experimental conditions most
modern simulations are run under isothermal (N V T ) or
isothermal/isobaric (N P T ) conditions. In this work, we
introduce and evaluate several reformulations of Collision
Verlet to generate trajectories whose phase space points
are canonically (isothermally) distributed.

∗Author to whom correspondence should be addressed

The NVT (isothermal) Collision Verlet algorithms de-
veloped here are all based on the extended Hamilitonian
of Nos´e[3], which is a standard technique for generating
canonical trajectories for the simulation of systems with
continuous interaction potentials. In the Nos´e approach,
the phase space of the system is augmented by the in-
troduction of an auxilliary variable s and its conjugate
momentum π (with “mass” Q). For a system with a
potential V , the Nos´e extended Hamiltonian is

Hnos´e =

i
X

˜p2
i
2mis2 + V (q) +

π2
2Q

+ gkT ln s,

(1)

where ˜pi is the momentum conjugate to the position qi
and is related to the actual momentum , pi, by the rela-
tion pi = ˜pi/s, and the parameter g = Nf + 1, where Nf
is the number of degrees of freedom of the system. With
this choice of g, it can be readily shown[3], assuming er-
godicity, that constant energy (microcanonical) dynamics
generated by the Nos´e Hamiltonian produces a canonical
(constant temperature) distribution in the reduced phase
space {˜p/s, q}.

The generation of phase space conﬁgurations dis-
tributed in the canonical ensemble within the Nos´e dy-
namical scheme is accomplished by a dynamical rescaling
of time. The real time of the simulation, t, is related to
the Nos´e time, τ , by the transformation dτ
dt = s. Since
numerical integration methods generally operate with a
ﬁxed time step, the transformation to real time generates
a nonuniform grid of time points[4], which is inconvenient
for the calculation of system averages. To remedy this,
two schemes have been developed to produce equations
of motion for Nos´e dynamics that generate trajectories
directly in real time. By applying time and coordinate
transformations directly to the Nos´e equations of mo-
tion Hoover[5], derived a set of real-time equations of
motion for Nos´e dynamics, deﬁning the so-called Nos´e-
Hoover method. This approach has become the most
widely isothermal simulation method, but has a draw-
back in that the coordinate transformation used is not

canonical and the Nos´e-Hoover equations of motion are
non-Hamiltonian in structure, precluding the use of sym-
plectic integration schemes[6]. In an alternate approach
Bond, Leimkuhler and Laird[7] apply a Poincar´e time
transformation to the Nos´e Hamiltonian to give the so-
called Nos´e-Poincare Hamiltonian, from which real-time,
fully Hamiltonian equations of motion for Nos´e dynamics
are generated.

In this work we present constant temperature simu-
lation methods for mixed continuous/discontinuous in-
teraction potentials generated by adapting the Collision
Verlet method within both the Nos´e-Hoover and Nos´e-
Poincar´e schemes. In the next section we brieﬂy review
the standard Collision Verlet algorithm[2] followed by the
introduction of the Nos´e-Hoover Collision Verlet (NHCV)
and Nos´e-Poincar´e Collision Verlet (NPCV) algorithms
in Sections 3 and 4, respectively. The algorithms are
evaluated in Section 5 through numerical experiments on
a model system. In section 6, we conclude.

II. THE COLLISION VERLET ALGORITHM

In this section we review the Collision Verlet[2] al-
gorithm for the numerical integration of the dynamics
of systems with mixed continuous/discontinuous inter-
action potentials. We consider N particles interacting
through a continous potential plus a hard core, assumed
here to be spherical. To facilitate the construction of nu-
merical methods, it is useful to describe the dynamics of
the system within a Hamiltonian format, but for a sys-
tem with a discontinuous potential the construction of
a Hamiltonian as the generator of the dynamical equa-
tions of motion is problematic. In this work, we observe
that the hard sphere interaction potential, Vhs({q}) typ-
ically can be approximated to any degree of accuracy by
a sequence of steeply repulsive continuous functions. In
this sense, the energy function H of the mixed system
is refered to here as a pseudo-Hamiltonian. Here the
pseudo-Hamiltonian is given by

H = T (p) + Vhs({q}) + Vc({q}),

(2)

p2
2mi , Vhs({q}) is
where the kinetic energy T (p) =
i
the hard sphere potential and Vc({q}) is a continuously
diﬀerentiable potential energy function, that we assume
to be pairwise additive, that is,

P

i

Vc({q}) =

vc(qij ) ,

i
X
where vc is a pair potiential, qij is the distance between
two particles indexed by i and j, and the sum is over all
pairs of particles.

j>i
X

The Collision Verlet algorithm is based on the splitting
of the continuous pair potential, vc(q), into a short range
part, v1(q), and a long range part, v2(q), according to

vc(q) = v1(q) + v2(q)

(3)

2

The potential splitting is rendered so that the force due
to the long-range part of the potential vanishes at the
v′
2(σ) = 0). This
hard-sphere contact distance (i.e.
form of the potential splitting is necessary for the con-
struction of a second-order method - For the motivation
and speciﬁc details of this splitting technique the reader
is referred to reference[2]. The pseudo-Hamiltonian is
then split acoordingly. For generality, let consider H
as a pseudo-Hamiltonian of any given mixed impulsive-
continuous system. Next, we partition H in the following
way:

H = H1 + H2 ,

(4)

where H1 includes the kinetic energy, the hard sphere
potential, Vhs, and the short range potential, V1; H2
must include the long range potential, V2. A Trotter
factorization[6] then gives the following approximation
for the dynamical ﬂow map, φH(τ ), deﬁned as the oper-
ator (associated with the Hamiltonian H) that advances
the phase space conﬁguration a time τ into the future,

φH(τ ) = φH2 (

)φH1 (τ )φH2 (

(5)

τ
2

)

Since H2 only contains the long-range potential, the ﬂow
map φH2 can be constructed exactly. The ﬂow map cor-
responding to H1 is approximated in the following way

φH1 ≈ φT +V1 (τ nc+1

)

c

[φVhs φT +V1 (τ nc+1−i

c

)]

(6)

τ
2

nc

i=1
Y

i

where nc is the number of hard-sphere collisions during
the time step h, τ (c)
is the time between each collision
(with τ (c)
1 being measured from the beginning of the time
step until the ﬁrst collision and τ (c)
nc+1 measured from the
nc+1
last collision to the end of the time step so that
i=1 =
τ ), and φVhs is the ﬂow map for an instantaneous hard-
sphere collision. Finally, the ﬂow map for the motion of
the particle between collisions is approximated using the
St¨omer-Verlet algorithm generated by a further Trotter
factorization

P

φT +V1 (τ ) ≈ φV1 (

)φT (τ )φV1 (

) .

(7)

τ
2

τ
2

The most CPU intensive part of the Collision Verlet
algorithm is the determination of the time to next colli-
sion τc. The collision condition for two particles i and j
can be written as

kqi(τc) − qj(τc)k2 − σ2 = 0 .

(8)

Since the trajectories between collisions are approxi-
mated within the Collision Verlet scheme by quadratic
equations, the collision condition (8) is a quartic equa-
tion. To ensure that all collisions are resolved correctly,
it is necessary to accurately resolve the smallest positive
root to this quartic equation. This is not a trivial prob-
lem as the root becomes increasingly unstable as smaller

time steps are used (i.e., when the time to collision is
small). To increase eﬃciency and accuracy of the com-
putation, we employed in all the simulations in this paper
a root ﬁnding method based on Cauchy indices[8]. The
details of the collision-time calculation are given in the
Appendix.

III. COLLISION VERLET WITH A
NOS´E-HOOVER THERMOSTAT

As discussed in the introduction, the Nos´e-Hoover
method for isothermal molecular-dynamics simulation is
generated by applying time and coordinate transforma-
tions to the equations of motion generated by the Nos´e
Hamiltonian (Eq. 1), which are

dqi
dτ

=

˜pi
mis2 ,

ds
dτ

=

π
Q

,

(9)

with the earlier literature, we write the ﬂow map in terms
of a Liouville operator, L, as follows

φ(τ ) = eL .

The Liouville operator corresponding to the Nos´e-Hoover
equations of motion above is

L =

+ Lhs −

piξ

pi
mi

∂
∂qi

i
X

+ξ

∂
∂η

+

1
Q  

i
X

∂
∂pi

−

∂
∂ξ

,

!

i
X

i
X

− gkT

p2
i
mi

∂
∂qi

V (q)

∂
∂pi

(17)

where we have explicitly included a hard-sphere term,
Lhs

To get a reversible method for the Nos´e-Hoover method
with mixed potentials, the above Liouville operator is
split in the following way:

L = L1 + L2 + L3,

d˜pi
dτ

= −

Vc(q),

∂
∂qi

dπ
dτ

=

˜p2
i
mis3 −

gkT
s

.

(10)

with

i
X

Conversion to real time, t, is accomplished through the
following transformations

L1 = Lhs +

pi
mi

∂
∂qi

−

∂
∂qi

V1(q)

∂
∂pi

,

i
X

i
X

p =

˜p
s

,

dτ
dt

= s.

(11)

L2 = −

V2(q)

∂
∂qi

∂
∂pi

In addition, Hoover simpliﬁed the resulting equations of
motion by introducing a further variable tranformation

and

η = ln s ξ = ˙η

(12)

L3 = −

piξ

∂
∂pi

+

1
Q  

p2
i
mi

− gkT

∂
∂ξ

+ ξ

∂
∂η

.

!

i
X

i
X

resulting in the so-called Nos´e-Hoover equations of mo-
tion:

˙qi =

,

˙pi = −

V (q) − piξ,

(13)

pi
mi

∂
∂qi

˙η = ξ,

˙ξ =

1
Q  

p2
i
mi

− gkT

.

(14)

!

i
X
These equations of motion can be shown to generate
conﬁgurations distributed according to an isothermal
(canonical) distribution as long as the system is ergodic
and g = Nf , the number of degrees of freedom.
Since the coordinate transformation is non-canonical, the
equations of motion are not derivable from a Hamilto-
nian, however a conserved energy does exist and is given
by

E =

+ V (q) +

Qξ2 + gkT η.

(15)

with

1
2

p2
i
2mi

i
X

In order to simplify the construction of splitting meth-
ods for this non-Hamiltonian system and to make contact

A Trotter factorization is now applied to this splitting.

eLτ = eL3τ /2eL2τ /2eL1τ eL2τ /2eL3τ /2 + O(τ 3) .

The operator eL1τ is approximated using the Collision
Verlet method described in the previous section - see
Eq. 6. The solution of the operator eL2τ /2 is straight-
forward. To ﬁnd the solution of the operator eL3τ /2,i.e,

qi,n+1
pi,n+1
ηn+1
ξn+1



= eL3τ /2



qi,n
pi,n
ηn
ξn






,








we further split L3. That is,




L3 = L(1)

3 + L(2)
3 ,

L(1)

3 = −

piξ

∂
∂pi

+ ξ

∂
∂η

,

i
X

3

(16)

(18)

(19)

(20)

(21)

(22)

(23)

(24)

(25)

and

L(2)

3 =

1
Q  

p2
i
mi

− gkT

∂
∂ξ

.

!

i
X

(26)

The corresponding Trotter factorization of this splitting
is

eL3τ ≈ eL(2)

3 τ /2eL(1)

3 τ eL(2)

3 τ /2.

(27)

The solution of the operator eL(2)
The operator eL(1)
solution of the operator eL3τ /2 gives

3 τ /2 is straightforward.
3 τ is solve from a further splitting. The

ξn+1/2 = ξn +

τ
4Q  

i
X

(pi,n)2
mi

− gkT

,

(28)

!

ηn+1 = ηn +

ξn+1/2,

τ
2

pi,n+1 = pi,n

1 − τ ξn+1/2/4
1 + τ ξn+1/2/4

,

(29)

(30)

ξn+1 = ξn+1/2 +

τ
4Q  

i
X

(pi,n+1)2
mi

− gkT

.

(31)

!

The algorithm is tested in Section 5 for a system of

hard spheres with inverse-sixth-power attractive tails.

Certainly, the Liouville operator splitting used above
is not the only possible method. For example, another
splitting is

L = L1 + L2,

with

and

L1 =

+ Lhs −

pi
mi

∂
∂qi

i
X

∂
∂qi

V1(q)

∂
∂pi

,

i
X

L2 = −

piξ

+

1
Q  

i
X

i
X

p2
i
mi

∂
∂pi

−

∂
∂qi

V2(q)

∂
∂pi

∂
∂η

.

− gkT

+ ξ

(34)

∂
∂ξ

!

can be used. Using a Trotter factorization gives

for systems with continuous potentials, can be shown
to enhance long-term stability[6].
Recently, Bond,
Leimkuhler, and Laird[7] have proposed a new real-time,
but fully Hamiltonian, formulation of the Nos´e constant-
temperature dynamics. This is accomplished by perform-
ing a time transformation, not to the Nos´e equations of
motion as with Nos´e-Hoover, but directly to the Hamil-
tonian using a Poincar´e time transformation, as follows:

HN P = s(HN os´e − H0),

(36)

where H0 is the initial value of HN os´e. Combining equa-
tions (1) and (36) the Nos´e-Poincar´e thermostat Hamil-
tonian of a physical system consisting of N particles is
expressed as following

HN P = s

 

i
X

˜p2
i
2mis2 + Vc(q) +

π2
2Q

+ gkT ln s − H0

.

In order to sample the correct canonical distribution,
the constant g is taken to be the number of degrees of
freedom[7], g = Nf . The equations of motion are

˙qi =

˜pi
mis

,

˙s = s

π
Q

,

4

!
(37)

(38)

(39)

˙˜pi = −s

∂
∂qi

Vc(q),

˙π =

˜p2
i
mis2 − gkT − ∆H,

i
X

˜p2
i
2mis2 + Vc(q) +

π2
2Q

∆H =

i
X

+ gkT ln s − H0.

(40)

(32)

(33)

Note that, the exact solution to Nos´e-Poincar´e equations
of motion generates trajectories that are identical to that
generated by the Nos´e-Hoover scheme, exactly solved. It
is in the construction of approximate numerical methods
that these two approaches diﬀer.

For the present case, we write the Nos´e-Poincar´e ther-
mostat pseudo-Hamiltonian (see Sect. 2) for a mixed
hard-core/continuous potentials system

HN P = s

˜p2
i
2mis2 + Vhs(q) + Vc(q) +

π2
2Q

 
+gkT ln s − H0) .

i
X

(41)

There are a variety of ways in which one can construct
numerical integration algorithms using this Hamiltonian.
To this end, we ﬁrst consider two ways of splitting the
overal NP Hamiltonian::

eLτ ≈ eL2τ /2eL1τ eL2τ /2

(35)

Splitting I

IV. COLLISION VERLET WITH A
NOS´E-POINCAR´E THERMOSTAT

The Nos´e-Hoover formulation of constant-temperature
dynamics is non-Hamiltonian in structure, thereby pre-
venting the use of symplectic integration schemes, which,

H1 = s

˜p2
i
2mis2 + Vhs(q) + V1(q)
+gkT ln s − H0)

 

i
X

H2 = s

V2(q) +

(cid:18)

π2
2Q

(cid:19)

(42)

(43)

Splitting II

πn+1 = πn+1/2 −

gkT + ∆H2

qn, sn+1, πn+1/2

˜p2
i
2mis2 + Vhs(q) + V1(q) − H0

H1 = s

H2 = s

 

(cid:18)

i
X
V2(q) +

π2
2Q

+ gkT ln s

(cid:19)

(44)

!

(45)

A Trotter factorization of the ﬂow map (Eq. 5) is applied
to each splitting. To approximate the ﬂow map gener-
ated by H1, we employ the Collision Verlet Scheme given
in Eq. 6 to integrate the system from collision to collision
under the inﬂuence of the short-range potential. Since s
is a constant in the dynamics generated by H1 in both
splittings, the St¨ormer-Verlet algorithm can be used to
integrate the trajectory between collisions, with the colli-
sion time being calculated as described in the Appendix.
For splitting I, St¨ormer-Verlet gives

˜pi,n+1/2 = ˜pi,n+1/2 −

sn

V1(qn)

(46)

τ
2

τ
2

∂
∂qi
1
mi (cid:18)

˜pi,n+1/2

2

sn (cid:19)

πn+1/2 = πn+1/2 +

i

(cid:20) X
qn, ˜pi,n+1/2, sn

−∆H

(cid:21)

(cid:1)

(cid:0)
qi,n+1 = qi,n + τ

πn+1 = πn+1/2 +

˜pi,n+1/2
misn
τ
2

i

(cid:20) X

1
mi (cid:18)

˜pi,n+1/2

2

sn (cid:19)

−∆H

qn+1, ˜pi,n+1/2, sn

˜pi,n+1 = ˜pi,n+1/2 −

sn

(cid:0)

τ
2

∂
∂qi

(cid:21)

(cid:1)
V1(qn+1) .

(47)

(48)

(49)

(50)

The equations for Splitting II can be similarly generated.
In both Splittings I and II the integration of H2 is com-
plicated by the presence of both s and its conjugate mo-
mentum π, but here we consider two possible approaches:

H2 Integration Method 1: Since
is non-separable,

the
Hamilto-
nian here
the Generalized
Leapfrog [7, 9, 10] scheme, a fully symplectic
the St¨ormer-Verlet algorithm for
extension of
non-seperable Hamiltonians, can be used. The
integration for Splitting I for timestep τ is

˜pi,n+1/2 = ˜pi,n −

sn

V2(qn)

(51)

τ
2

∂
∂qi

πn+1/2 = πs,n −

gkT + ∆H2

qn, sn, πn+1/2

(52)

τ
2

(cid:0)

τ
2

sn+1 = sn +

(sn + sn+1)

(53)

(cid:0)

(cid:1)(cid:1)

πn+1/2
Q

,

τ
2

(cid:0)

(cid:0)

τ
2

∂
∂qi

˜pi,n+1 = ˜pi,n+1/2 −

sn+1

V2(qn)

(55)

The above integration is explicit. Eq. 52 requires
the solution of a scalar quadratic equation for
πn+1/2. Details of how to solve this equation with-
out involving subtractive cancellation can be found
in Ref. [7]. The application of Method 1 for the H2
in Splitting II is similar and straightforward.

H2 Integration Method 2: Instead of using General-
ized Leapfrog, we employ a splitting of H2

H2 = H(1)

2 + H(2)
2 .

For Splitting I, we use

H(1)

2 =

sπ2
2Q

H(2)

2 = sV2(q) .

Since no conjugate pair appears in H(2)
ics for a timestep τ is straightforward

2 , its dynam-

˜pi,n+1 = ˜pi,n − τ sn

∂
∂qi
πn+1 = πn − τ V2(qn)

V2(qn)

Only equations involving variables p and π are
shown above because q and s are constants of mo-
tion.
The solution of the dynamics of H(1)
involves a
2
conjugate pair s and π, but it can be solved ex-
actly [11]. Thus the time evolution of H(1)
for the
2
timestep τ is

5

(cid:1)(cid:1)(54)

(56)

(57)

(58)

(59)

(60)

(61)

(62)

sn+1 = sn

1 +

(cid:18)

πn
2Q

τ

2

(cid:19)

πn+1 =

πn
1 + πn
2Q τ

.

Here, it is q, and ˜p that are constants of motion.
Again, the application of Method 2 for Splitting II
is similar and straightforward.

Combining the two overall splittings for the NP Hamil-
tonian with the two methods for integrating H2, gives
a total of 4 proposed algorithms for the Nos´e-Poincar´e
Collision-Verlet (NPCV) method. These are

• NPCV1: Splitting I + H2 integration method 1

• NPCV2: Splitting I +H2 integration method 2

6

NPCV1

NPCV3

0

1000 2000 3000 4000 5000

0

1000 2000 3000 4000 5000

NPCV2

NPCV4

 

r
o
r
r
E
y
g
r
e
n
E

0.03

0.025

0.02

0.015

0.01

0.005

0

−0.005

−0.01

r
o
r
r
E
 
y
g
r
e
n
E

0.03

0.025

0.02

0.015

0.01

0.005

0

−0.005

−0.01

0

1000 2000 3000 4000 5000

0

1000 2000 3000 4000 5000

Time

Time

FIG. 2: Energy conservation in a long simulation run (106
time steps) for NPCV algorithms 1 to 4.

0
0

−5
−5

∗
Ε
δ
 
n
l

−10
−10

NHCV
NPCV1
NPCV2
NPCV3
NPCV4
Line of order 2

−15
−15

−6
−6

−5
−5

ln τ

−4
−4

−3
−3

FIG. 1: order of accuracy of the NHCV algorithm and NPCV
algorithms 1 to 4. Comparison is made with a line of order 2.

• NPCV3: Splitting II +H2 integration method 1

• NPCV4: Splitting II +H2 integration method 2

In the next section we test these four algorithms for a
model system and compare them with each other and
with the Nos´e-Hoover Collision Verlet (NHCV) method
outlined in the previous section.

0.03

0.025

0.02

0.015

0.01

0.005

0

−0.005

−0.01

0

V. NUMERICAL EXPERIMENTS ON A
MODEL POTENTIAL

We test the various algorithms for NVT Collision Ver-
let proposed in this paper using a system of hard-spheres
with an attractive inverse-sixth-power continuous poten-
tial,

 

r
o
r
r
E
y
g
r
e
n
E

vc = −ǫ

6

,

σ
q

(63)

(cid:19)

(cid:18)
where σ is the hard-sphere diameter. The potential is
truncated at the distance qc = 2.5σ and, to ensure its
continuity, it is shifted and smoothed so that potential
and the force vanish beyond the cutoﬀ distance. We split
the above potential into short and long-range parts, as
prescribed in Ref.[2], with q1 and q2 as input parameters.

The MD simulations were carried out on systems of
N = 500 particles. A system of reduced units was cho-
sen so that all quantities are dimensionless: as units of
distance and energy we used the potential parameters

0.03

0.02

0.01

0

−0.01

0.03

0.025

0.02

0.015

0.01

0.005

0

−0.005

−0.01

NHCV

NPCV1

Time

1000

2000

3000

4000

5000

FIG. 3: Energy versus time in a long simulation run (106)
using the NHCV and NPCV1 algorithms

NPCV1

NPCV3

NPCV1
Exact 

NPCV3
Exact 

0
1.2 1.3 1.4 1.5 1.6 1.7 1.8

0
1.2 1.3 1.4 1.5 1.6 1.7 1.8

NPCV2

NPCV4

NPCV2
Exact

NPCV4
Exact 

0
1.2 1.3 1.4 1.5 1.6 1.7 1.8

0
1.2 1.3 1.4 1.5 1.6 1.7 1.8

Instantaneous Temperature

Instantaneous Temperature

0.08

0.06

0.04

0.02

0.08

0.06

0.04

0.02

Instantaneous temperature distributions for the
FIG. 4:
NPCV algorithms 1 to 4. In each, the exact canonical dis-
tribution is shown as a solid line.

NHCV

NHCV
Exact

0.08

0.06

0.04

0.02

0.08

0.06

0.04

0.02

n
o
i
t
u
b

i
r
t
s
i
D

n
o
i
t
u
b

i
r
t
s
i
D

0.08

0.06

n
o
i
t
u
b

i
r
t
s
i
D

0.04

0.02

0
1.2

1.3

1.4

1.5
Instantaneous Temperature

1.6

1.7

1.8

FIG. 5:
Instantaneous temperature distribution for the
NHCV simulations (circles). The exact canonical distribu-
tion is shown as a solid line.

7

σ and ǫ, respectively, and the mass of one atom as the
unit mass. The unit of time is (mσ2/ǫ)1/2. An asterisk
In all simulations
superscript indicates reduced units.
the density was ρ∗ = ρσ3 = 0.7 with reduced temper-
ature T ∗ = kT /ǫ = 1.5. In addition, a cubic box with
periodic boundary conditions was used. In improve eﬃ-
ciency, neighbor (Verlet) lists[1] were used for the evalu-
tion of the short range force, the long range force, and the
collision times. In all of our simulations, we set g = Nf
with Nf = 3(N − 1) to correct for the fact that in a
molecular-dynamics simulation the total linear momen-
tum is conserved[12]. Each run has was started form an
initial conﬁguration produced after an equilibration run
of 200,000 time steps (with τ ∗ = 0.001) starting from an
fcc (face-centered-cube) lattice with the particle veloci-
ties chosen from a Boltzmann distributuion at T ∗ = 1.5.
The initial values of the extended variables in all of the
numerical experiments are set to be s0 = 1 and ps,0 = 0
in the case of the Nos´e-Poincar´e thermostat methods. In
the case of the Nos´e-Hoover method, the initial values of
the extended variables are thus η0 = 0 and ξ0 = 0.

In order to compare the short time accuracy of the
methods and verify that each one exhibits second-order
global error, we show in Figure 1 a log-log plot of the
maximum energy error for a run of total length t∗ =
12 for each method as a function of time step, τ . For
comparison, a line of slope 2 is plotted to show that the
global error for each method is second order, as required.
In these runs the thermostat mass Q was set to 1.0. Note
that, due to the discontinuous nature of the dynamics,
the second order global error is not simply a consequence
of the time-reversibility of the algorithms, but it also a
direct result of the particular potential splitting we have
chosen[2]. From Figure 1 we see that for short runs,
the Nos´e-Hoover based method has the smallest error
constant.

For molecular-dynamics simulation the stability during
long runs is more important that the order or short-term
behavior of the algorithm. To test these we plot the
energy trajectory, δE = E(t) − E(t = 0), versus time
for each of our methods using 106 time steps of length
τ ∗ = 5 × 10−3 (total time 5000). Figure 2 shows this plot
for each of the 4 Nos´e-Poincar´e based methods discussed
in the previous section. For this system, NPCV methods
2 and 3 exhibit signiﬁcant drift whereas methods 1 and
4 are more stable for long time trajectories. The same
plot for the Nos´e-Hoover method presented in section 3
is shown in Figure 3 with the plot for NPCV method 1
shown for comparison. The NPCV method 1 has slightly
better energy conservation for this system than the Nos´e-
Hoover Collision Verlet algorithm, which is comparable
to NPCV method 4, but the diﬀerences are small and
could change depending on the system.

The algorithms presented here are designed to give a
canonical distribution of phase space points. A useful
check of this is to examine the distribution of instan-
taneous temperature (as deﬁned for a system with zero

total momentum)

Acknowledgments

8

ˆT =

2
3(N − 1)

p2
i
2m

N

i
X

(64)

The authors wish to thank Professor Benedict
Leimkuhler for helpful discussions and gratefully acknol-
wedge the National Science Foundation for ﬁnancial sup-
port under grant CHE-9970903. In addition, we thank
the Kansas Center for Advanced Scientiﬁc Computing for
use of their computational facilities.

2T 2
3(N −1) .

A canonical distribution in momenta requires that this
quatitiy be Gaussian distributed about the target tem-
In Figure 4 is
perature T with a variance of
plotted the temperature distributions for the 4 NPCV
algorithms using a thermostat mass of 10 measured dur-
ing runs of 270,000 time steps (τ ∗ = 5 × 10−3) after
equilibration. Figure 5 shows the same quantity for the
Nos´e-Hoover Collision Verlet method. Comparison with
the theoretical distribution, shown as a solid line in each
plot, indicates that the canonical distribution is well re-
produced by all proposed algorithms.

*

APPENDIX A: CALCULATION OF TIME TO
NEXT COLLISION

In this appendix we address the issue of the collision
time calculation for mixed hard-core/continuous poten-
tials systems. The quartic equation for the collision con-
dition (Eq. 8), is solved for all pairs of particles and the
smallest positive root is located as the time to the next
collision. For mixed hard-core/continuous potentials sys-
tems, this is time-consuming operations since collision
times for all pairs must be recalculated after each colli-
sion. In addition, Eq. 8 is quartic and diﬃcult to solve.
As we said in section 2, the quartic equation must be
solved accurately to give the nearest root to zero in or-
der to make sure that no collisions are missed.

In ref.[2], we employed Laguerre’s method[13] for colli-
sion time calculation for mixed hard-core/continuous po-
tentials systems. The method is suﬃcient for all but the
very smallest timesteps studied. But the method turns
out to be very slow. This because for any given time
interval and pair of particles, all the four complex roots
need to be calculated. Also Laguerre’s method deals with
complex arithmetic. In this appendix, we propose a time
saving collision time calculation method for collision ver-
let. This method is based on a Cauchy indices of a Sturm
sequence[8] of a real polynomial in a real interval.

The Cauchy index is an integer that can be associated
with any real rational function and any interval whose
end points are not the function poles. Let r be a ratio-
nal function. The Cauchy index, I β
α r(x), of r for the
interval [α, β] is by deﬁnition the number of jumps of the
function r from +∞ to −∞ on the interval [α, β]. The
Cauchy index can be calculated for any real polynomial
that forms a Sturm sequence, {f0, f1, ..., fm}, for the
interval [α, β]. The deﬁnition of the Sturm sequence of
a real polynomials can be found in ref.[8]. The connec-
tion between the Cauchy index and the number of sign
changes, v(x) for arbitrary real x, in the numerical se-
quence ,{f0, f1, ..., fm}, is given by the following result
due to Sturm[14].

———————————————————————–

Theorem 1 Let
the real polynomials ,{f0, f1, ..., fm}
form a Sturm sequence for the interval [α, β], α ≤ β.

VI. CONCLUSION

In this work we have developed several algorithms,
based on the extended Hamiltonian thermostat of Nos´e,
to perform constant temperature (N V T ) molecular-
dynamics simulations of systems with mixed hard-
core/continuous potentials. The methods are extentions
of our recently developed Collision Verlet method[2] for
constant energy (N V E) MD simulation of such systems.
These new methods, to our knowledge, represent the ﬁrst
viable canonical molecular-dynamics simulation methods
for hybrid discontinous/continuous potentials.

Speciﬁcally, ﬁve new algorithms have been presented
and tested. The ﬁrst algorithm, the Nos´e-Hoover Colli-
sion Verlet (NHCV) algorithm, is based on application
of the Nos´e-Hoover thermostat[5] to the Collision Verlet
scheme. The other 4 algorithms presented are based on
the Nos´e-Poincare formulation of real-time Nos´e dynam-
ics. These Nos´e-Poincar´e Collision Verlet methods diﬀer
from one another in the details of the numerical scheme
used to integrate the equations of motion. All meth-
ods were shown to give second-order global error in test
simulation with the NHCV method having the smallest
error constant for short-time simulations. The NHCV
algorithm and two of the presented NPCV algorithms
(NPCV1 and NPCV4) were found to exhibit good sta-
bility in long time simulations involving 500 hard-sphere
particles with attractive inverse-sixth-power tails. In ad-
dition, all methods were shown to correctly reproduce
the canonical distribution of instantaneous temperature
(kinetic energy). Note that, if the continuous potential
is set to zero, the presented methods also provide a way
of performing canonical, as opposed to isokinetic, hard-
sphere molecular-dynamics simulations.

I β
α

f1
f0

I β
α

p′
p0

Then

= v(α) − v(β).

(A1)

———————————————————————–

Using this theorem we can write the number of real
roots for a given polynomial p in any real interval [α, β]
in terms of the Cauchy index

= v(α) − v(β).

(A2)

of the sequence {pk}, generated by the Euclidean
algorithm[8] using the starting polynomials p0 := p, p1 :=
p′, with p′ being the ﬁrst derivative of the polynomial p.
The elements of the rest of the sequence are linked by
the relations

p0(x) = q1(x)p1(x) − p2(x),
p1(x) = q2(x)p2(x) − p3(x),
...
pk−1(x) = qk(x)pk(x) − pk+1(x),
...
pm−1(x) = qm(x)pm(x).

(A3)
(A4)

(A6)

(A5)

Let

The Euclidean algorithm also furnishes information
about the multiplicity of the zeros. x0 is a zero of mul-
tiplicity k of p if and only if it is a zero of multiplicity
k − 1 of pm. We are now able to develop a collision time
calculation method for Collision Verlet.

From the above, the ﬁrst step for Collision Verlet colli-
sion time calculation is to determine in a given time inter-
val the number of real roots by calculating the Cauchy
index for the time interval. This means that we need
an algorithm for polynomial division. The main prob-
lem with polynomials division is that the bitlenght of
coeﬃcients in the sequence can increase dramatically
in some cases the
and also, because we are dividing,
denominator can vanish. To solve this problem, we

use the Sturm-Habicht pseudodivisions subresultant
(PRS) method[15]. The members of the polynomial re-
mainder sequence p1(x), p2(x), p3(x), ..., ph(x)

lc[pi+1(x)]ni−ni+1+1pi(x) = pi+1(x)qi(x) − βipi+2(x),

9

(A7)

deg[pi+2(x)] ≤ deg[pi+1(x)]

(A8)

where i = 1, 2, .., h − 1, for some h, ni = deg[pi(x)],
and lc[pi(x)] is the leading coeﬁcient of pi. The diﬀerent
values of βi are

β1 = (−1)n1−n2+1,
βi = (−1)ni−ni+1+1lc[pi(x)] · H ni−ni+1

,

i

i = 2, 3, ..., h − 1,
H2 = {lc[p′
2(x)]}n1−n2,
Hi = {lc[pi(x)]}ni−1−ni H 1−(ni−1−ni)

,

i−1

i = 3, ..., h − 1

(A9)

(A10)
(A11)

(A12)

p(x) = ax4 + bx3 + cx2 + dx + e,

(A13)

be the quartic polynomial obtained from the collision
condition of eq.
(8), and {p1, p2, p3, p4, p5} its Sturm-
Habitch sequence determined by using eq. A7. We
now determine the number of real roots of the equation
p(t) = 0 in a given time interval by calculating its Cauchy
If there is only one root, then we use
index, Eq. A2.
Newton-Raphson method [13] to approximate the root.
If there is more than one root, then we combine bisec-
tion method [13] and root counting method to isolate
the time interval containing the smalest root.

This method for solving for the shortest collision time
is quite eﬃcient giving a factor of 20 speed-up from our
previous simulations using the Laguerre method [2], pri-
marily because we no longer calculate all four roots of
the quadratic equation and avoid complex arithmetic.

[1] M.A. Allen and D.J. Tildesley, Computer Simulation of

New York : Wiley, 1974.

Liquids, (Oxford Science Press, Oxford, 1987).

[2] Y.A. Houndonougbo, B.B. Laird, and B.J. Leimkuhler,

Mol. Phys. 98, 309 (2000).

[3] S. Nos´e, Mol. Phys. 52, 255 (1984).
[4] S. Nos´e, J. Chem.. Phys. 81, 511 (1984).
[5] W.G. Hoover, Phys. Rev. A 31, 1695 (1985).
[6] J. M. Sanz-Serna and M. P. Calvo, Numerical Hamilto-
nian Problems, (Chapman and Hall, New York, 1995).
[7] S.D. Bond, B.J. Leimkuhler, and B. B. Laird, J. Comp.

Phys. 151, 114 (1999).

[8] P. Henrici. Applied and computational complex analysis.

[9] E. Hairer, Ann. Numer. Math. 1, 107 (1994).
[10] G. Sun, J. Comput. Math. 11, 365 (1993).
[11] S. Nos´e, J. Phys. soc. Jap. 70, 75 (2001).
[12] T. Cagin and J.R. Ray, Phys. Rev. A 37, 4510 (1988).
[13] W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P.
Flannery, Numerical Recipies in Fortran, (Cambridge
University Press,, New York, 1992).

[14] C. Sturm, Inst. France Sc. Math. Phys. 6 (1835).
[15] A. G. Akritas, Elements of computer algebra with appli-

cations, (New York : Wiley, New York, 1989).

