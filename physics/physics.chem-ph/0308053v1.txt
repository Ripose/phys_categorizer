3
0
0
2
 
g
u
A
 
3
1
 
 
]
h
p
-
m
e
h
c
.
s
c
i
s
y
h
p
[
 
 
1
v
3
5
0
8
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Dynamical Multiple-Timestepping Methods for
Overcoming the Half-Period Time Step Barrier

Siu A. Chin
Department of Physics, Texas A&M University, College Station, TX 77843, USA

Current molecular dynamic simulations of biomolecules using multiple time steps to update the
slowingly changing force are hampered by an instability occuring at time step equal to half the period
of the fastest vibrating mode. This has became a critical barrier preventing the long time simulation
of biomolecular dynamics. Attemps to tame this instability by altering the slowly changing force and
eﬀorts to damp out this instability by Langevin dynamics do not address the fundamental cause of
this instability. In this work, we trace the instability to the non-analytic character of the underlying
spectrum and show that a correct splitting of the Hamiltonian, which render the spectrum analytic,
restores stability. The resulting Hamiltonian dictates that in additional to updating the momentum
due to the slowly changing force, one must also update the position with a modiﬁed mass. Thus
multiple-timestepping must be done dynamically.

I.

INTRODUCTION

The evolution of any dynamical variable W (qi, pi) is given by the Poisson bracket,

d
dt

W (qi, pi) =

W, H

{

} ≡ Xi (cid:16)

∂W
∂qi

∂H
∂pi −

∂W
∂pi

∂H
∂qi (cid:17)

.

For the standard Hamiltonian,

the Poisson evolution equation (1.1) can be written as an operator equation

H(p, q) =

+ v(qi),

p2
i
2mi

Xi

dW
dt

=

pi
mi

∂
∂qi

+ Fi

∂
∂pi (cid:17)

W,

Xi (cid:16)

with formal solution

h
where T and V are ﬁrst order diﬀerential operators deﬁned by

W (t) = et(T +V )W (0) =

eǫ(T +V )

W (0),

n

i

Their exponentiations, eǫT and eǫV , are then displacement operators which displace qi and pi forward in time via

Each factorization of eǫ(T +V ) into products of eǫT , eǫV (and exponentials of commutators of T and V ) give rises
to a symplectic algorithm for evolving the system forward in time. This is the fundamental Lie-Poisson theory of
symplectic integrators, which has been studied extensively in the literature1,2,3. First and second order factorizationa
of the form

T

≡ Xi

pi
mi

∂
∂qi

,

V

≡ Xi

Fi

∂
∂pi

.

qi

qi + ǫ

→

pi
mi

and

pi

pi + ǫFi.

→

eǫ(T +V )

eǫT eǫV
2 ǫV eǫT e

e

1

1
2 ǫV

≈

≈

give rises to the well-known symplectic Euler and the velocity-Verlet algorithm. Numerous higher order symplectic
algorithms3,4,5,6,7,8 are also known, but only a special class of fourth order algorithms can have strictly positive time
steps as these lower order algorithms9,10.

(1.1)

(1.2)

(1.3)

(1.4)

(1.5)

(1.6)

(1.7)

(1.8)

In many cases, the Hamiltonian of interest is of the form,

H(p, q) =

+ v1(q) + v2(q),

p2
2m

where there is a “fast” force component F1 =
∂qv2. For example, in
biomolecular dynamics, F1 can be the rapidly vibrating force of H-O bonds and F2, the sum of non-bond forces. Since
it seems reasonable to sample the slowly changing force F2 less frequently, one can factorize this Hamiltonian to ﬁrst
or second order,

∂qv1 and a “slow” force component F2 =

−

−

and solve for the fast force accurately using a smaller time step ∆τ = ∆t/k,

e∆t(T +V1+V2) = e∆t(T +V1)e∆tV2 ,

1

= e

2 ∆tV2e∆t(T +V1)e

2 ∆tV2,

1

e∆t(T +V1) =

k

,

i

e∆τ T e∆τ V1
h
e
h

1

=

2 ∆τ V1 e∆τ (T +V1)e

1
2 ∆τ V1

k

.

i

Thus the slow force is sampled at a multiple time steps of the fast force, ∆t = k∆τ . In the context of biomolecular
simulation, this form of the multiple-time step (MTS) symplectic algorithm was introduced by Grubm¨uller et al. 11,
and independently by Tuckerman et al. 12. If a large time step ∆t can be used in MTS algorithms, one can hope to
simulate the motion of marcomolecules through some biologically signiﬁcant time intervals.

In the subsequent work of Zhou and Berne13 and Watanabe and Karplus14, this hope was dashed by the discovery
of an intransigent instability. No matter how accurately one has solved the fast force, the MTS algorithm is unstable
at ∆t = π/ω1, where ω1 is the fast force’s vibrational angular frequence. This has been described as a “resonance”
instability15,16,17. However, the later numerical work of Barth and Schlick18 clearly demonstrates that this instability
exists at every mid-period as well, i.e., at ∆t = nπ/ω1 = (n/2)T1, where T1 is the period of the fast force, at
n = 1, 2, 3..., and not just at n = 2, 4, 6,... Thus the notion of resonance is not a complete nor accurate description of
this instability. In this work, we will show that this instability is fundamentally related to the non-analytic character
of the harmonic spectrum and cannot be tamed by just multiple-timestepping the slow force. Stability can only be
restored by a diﬀerent splitting of the Hamiltonian requiring the slow force to be updated dynamically with a modiﬁed
mass.

In the next section, we analyze Barth and Schlick’s model of MTS instability18 and show that static multiple-
timestepping of the slow force destablizes the marginally-stable points of the fast force.
In Section III, we show
that an alternative splitting of the Hamiltonian, that of dynamic multiple-timestepping of the slow force, restores
stability.
In Section IV, we explain why the particular splitting worked in terms of the analytic character of the
resulting spectrum. Section V generalizes MTS to the case of multiple forces. Section VI summarizes our ﬁndings
and suggestions for large scale biomolecular simulations.

II. STABILITY ANALYSIS OF MTS ALGORITHMS

Barth and Schlick18 have proposed the simplest and clearest model for understanding the MTS instability. This is

a harmonic oscillator with two spring constants,

v1(q) =

λ1q2,

v2(q) =

λ2q2.

1
2

1
2

Their numerical work unambiguously demonstrated the existence of MTS instability, but they did not carry their
analysis far enough to pinpoint its origin. We will ﬁrst complete their analysis of the symplectic Euler MTS algorithm.
Each operator e∆τ T , e∆τ V1, when acting on the canonical doublet (p, q), produces a symplectic transformation, or

map,

pn+1
qn+1 (cid:19)

(cid:18)

= e∆τ V1

pn
qn (cid:19)

(cid:18)

= V(λ1, ∆τ )

pn
qn (cid:19)

,

(cid:18)

pn+1
qn+1 (cid:19)

(cid:18)

= e∆τ T

pn
qn (cid:19)

(cid:18)

= T(m, ∆τ )

pn
qn (cid:19)

,

(cid:18)

2

(1.9)

(1.10)

(1.11)

(1.12)

(1.13)

(2.1)

(2.2)

(2.3)

3

(2.4)

(2.5)

(2.6)

(2.7)

(2.8)

(2.9)

(2.10)

(2.11)

(2.12)

where T and V are matrices given by

T(m, ∆τ ) =

V(λ, ∆τ ) =

1

0

(cid:18)

(cid:18)

∆τ /m 1 (cid:19)
∆τ λ
1
1 (cid:19)
0

−

,

.

M =

∂(pn+1, qn+1)
∂(pn, qn)

The Jacobian of the transformation deﬁned by

satisﬁes the deﬁning symplectic condition

ensuring that detM T detM =1. For a sequence of symplectic maps, by the chain-rule, the Jacobian multiplies

Regarding (2.2,2.3) as numerical algorithms, the Jacobian matrix is just the error ampliﬁcation matrix. However,
only in the present case of linear maps (2.2,2.3) is the Jacobian the same as the transformation matrix itself.

The error ampliﬁcation matrix corresponding to the symplectic Euler MTS algorithm

is therefore (corresponding to Barth and Schlick’s AI),

M T JM = J, with J =

0
1
−
1 0 (cid:19)

,

(cid:18)

∂(pn, qn)
∂(p0, q0)

=

∂(pn, qn)
∂(pn−1, qn−1)

...

∂(p2, q2)
∂(p1, q1)

∂(p1, q1)
∂(p0, q0)

.

e∆t(T +V1+V2) =

e∆tV2 + O(∆t2)

k

e∆τ T e∆τ V1
h

i

eE =

T(m,

)V(λ1,

V(λ2, ∆t).

∆t
k

h

k

∆t
k

)
i

T(m, ∆τ ) = exp

∆τ

V(λ, ∆τ ) = exp

∆τ

,

0

0
1/m 0 (cid:19)(cid:21)
0
λ
−
0 (cid:19)(cid:21)
0

.

(cid:18)

(cid:18)

(cid:20)

(cid:20)

The symplectic matrices T and V as deﬁned by (2.4) and (2.5), can also be expressed as exponentials of traceless
matrices:

For large multiple k, the fast force term in (2.10) can be evaluated analytically. Using the exponential forms for T
and V, and invoking Trotter’s theorem,

lim
k→∞ (cid:18)

exp

∆t
k (cid:18)

(cid:20)

0

0
1/m 0 (cid:19)(cid:21)

exp

∆t
k (cid:18)

(cid:20)

= exp

∆t

(cid:20)

0

λ1

−
1/m 0 (cid:19)

,

(cid:21)

(cid:18)

=

(cid:18)

cos(ω1∆t)
(mω1)−1 sin(ω1∆t)

H(m, ω1, ∆t),

(cid:19) ≡

(2.13)

k

0
0

−

λ1
0 (cid:19)(cid:21)(cid:19)
mω1 sin(ω1∆t)
cos(ω1∆t)

−

where we have deﬁned the fast force angular frequence ω1 =
λ1/m. Note that one starts with λ1 and m, but the
dynamics of the system is governed by the square root ω1. Since ω1 is a non-analytic function of λ1 and m, it can
only be extracted in the limit of k

p

The eigenvalues of the fast force error matrix (2.13) is given by

.
→ ∞

with C = cos(x) and x = ω1∆t. The algorithm is marginally stable at all time step ∆t with
e1,2|
|
1.
being unstable at x = nπ, where the two eigenvalues are degenerate, purely real, and equal to
±

e1,2 = C

C2

1

−

± p

(2.14)

= 1, but closest to

The error matrix corresponding to Euler MTS algorithm (2.10) is therefore

The eigenvalues are still given by (2.14), but now with C altered to

eE = H(m, ω1, ∆t)V(λ2, ∆t).

C = cos(x)

αx sin(x),

−
= A(x) cos(x + δ(x)),

1
2

A(x) =

1 + (αx/2)2,

p

±

e(x) =

αx/2 +

1 + (αx/2)2

.

± (cid:16)

p

(cid:17)

with α = λ2/λ1, amplitude

and phase shift δ(x) = tan−1(αx/2). The two C-functions, together with the amplitude functions
A(x), are plotted
in Fig.1. The Euler MTS algorithm is unstable whenever
> 1. As shown in Fig.1, the eﬀect of λ2, no matter
C(x)
|
|
how small, is to destablize marginally stable points of the fast force λ1 at x = nπ into a ﬁnite band. The ﬁrst band
at x = π, is the half period barrier. The bands are very narrow if λ2 << λ1. Within these instability bands, the
extremes of the eigenvalues at x + δ(x) = nπ, when C =

A(x), are given by (2.14),

±

This is the linearly growing envelope of eigenvalues observed numerically by Barth and Schlick18. Since the eigenvalue
departs from unity linearly as a function of x, we can characterize this instability as ﬁrst order in x. This is the most
important characterization of MTS algorithms and is plotted in Fig. 2. As one can see, as long as α is not zero,
the departure from unity will be signiﬁcant at x = π, which explains the persistence of the half period barrier. We
emphasize that e(x) only gives the correct eigenvalues at x + δ(x) = nπ, when C =
A(x). For α << 1, this means
that e(x) is only correct at x
nπ. For other values of x, e(x) is not the correct eigenvalue and the algorithm is
actually stable.

±

≈

The error matrix for the second order Verlet-like MTS algorithm,

eV = V(λ2,

∆t) H(m, ω1, ∆t)V(λ2,

∆t)

1
2

1
2

has the same C-function (2.16) and therefore the identical ﬁrst order instability problem. This is a surprise. As we
will see later in Section IV, increasing the order of static MTS algorithms does little to increase its stability.

III. RESTORING STABILITY VIA DYNAMICAL MTS

The MTS algorithm in the last section splits the Hamiltonian as

H(p, q) =

p2
2m

(cid:18)

1
2

+

λ1q2

+

λ2q2,

1
2

(cid:19)

where the parenthesis describes the full dynamics of spring λ1. This leaves λ2 as only a static force with no direct
role in changing the particle’s position. We shall refer to this as static multiple-timestepping. This is not an equitable
splitting, nor the only one possible. The Hamiltonian can alternatively be splitted as

with the constraint

H(p, q) =

p2
2m1

(cid:18)

+

λ1q2

1
2

+

(cid:19)

(cid:18)

p2
2m2

1
2

+

λ2q2

,

(cid:19)

1
m1

+

1
m2

=

1
m

.

e∆t(T1+V1+T2+V2)

e∆t(T1+V1)e∆t(T2+V2).

≈

Now both springs are fully dynamical and we can use the freedom in the choice of m1 and m2 to maximize stability.
We shall refer to this as dynamic multiple-timestepping. The Euler splitting algorithm of (3.2) in operator form is

4

(2.15)

(2.16)

(2.17)

(2.18)

(2.19)

(2.20)

(3.1)

(3.2)

(3.3)

(3.4)

Consider ﬁrst when both are evaluated exactly as in (2.13), then the error matrix is

eDE = H(m1, Ω1, ∆t)H(m2, Ω2, ∆t),

Ω1 =

λ1
m1

r

and Ω2 =

λ2
m2

.

r

The corresponding C-function is

C = cos((Ω1 + Ω2)∆t)

sin(Ω1∆t) sin(Ω2∆t).

(m1Ω1 −

m2Ω2)2

−

2m1Ω1m2Ω2

The destablizing sine function term can be eliminated by choosing

Thus stability can be fully restored in this splitting with the choice of

m1Ω1 = m2Ω2 →

m1λ1 = m2λ2.

For this choice of m1 and m2, we observe that

1
m1

=

λ1
λ1 + λ2

1
m

and

1
m2

=

λ2
λ1 + λ2

1
m

.

Ω1 =

λ1
λ1 + λ2

Ω and Ω2 =

λ2
λ1 + λ2

Ω

is the exact angular frequence of the system. This means, however that

i.e., the choice of m1 and m2 which restores stability also linearizes the spectrum. To compare with the static case,
we also note that

Ω =

λ1 + λ2
m

r

Ω = Ω1 + Ω2,

Ω1 =

λ1
λ1 + λ2

λ1
m

r

=

ω1
√1 + α

Ω2 = α Ω1.

For MTS algorithms, we do not want to evaluate the second spring force exactly, but only sparingly. Thus we

further approximate (3.4) by

This is the dynamical Euler MTS algorithm with error matrix

The resulting C-function is

e∆t(T1+V1+T2+V2)

e∆t(T1+V1)e∆tT2e∆tV2.

≈

eDE = H(m1, Ω1, ∆t)T(m2, ∆t)V(λ2, ∆t).

′
C = cos(x

)(1

′
(αx

)2)

′
αx

′
sin(x

),

1
2

−

−

′
x

′
= Ω1∆t = x/√1 + α and αx

= Ω2∆t.

with

where

and

where

5

(3.5)

(3.6)

(3.7)

(3.8)

(3.9)

(3.10)

(3.11)

(3.12)

(3.13)

(3.14)

(3.15)

(3.16)

(3.17)

(3.18)

This C-function is cos(Ω1∆t + Ω2∆t) correct to second order in Ω2∆t. The corresponding amplitude and eigenvalue
functions are

′
A(x

) =

1 + (αx′)4/4,

p
)2/2 +

′
e(x

) =

′
(αx

± h

1 + (αx′)4/4

.

i

p

Thus by allowing λ2 to be dynamical, the same eﬀort in force evaluation improves the instability to second order.
This is shown in Fig.2. However, one can do even better. By (3.5), the algorithm’s stability will continue to improve
with improvements in solving λ2’s dynamics. With still only one slow force evaluation, one can solve λ2’s dynamic to
second order with error matrix

C-function

amplitude

eigenvalue

eDE2 = H(m1, Ω1, ∆t)T(m2,

∆t)V(λ2, ∆t)T(m2,

∆t),

1
2

′
C = cos(x

)(1

′
(αx

)2)

′
αx

(1

′
(αx

′
)2) sin(x

),

1
2

−

1
8

−

1
2

−

′
A(x

) =

1 + (αx′/2)6,

p

′
e(x

) =

′
(αx

/2)3 +

1 + (αx′/2)6

± h

p

,

i

and improve stability to third order! In sharp contrast to the static case, where the use of a second order algorithm
for the slow force yielded no improvement in stablity, the improvement here is dramatic. As shown in Fig.2, even for
α as large as 1/20, this second order algorithm is basically stable at x = π.

If one is willing to evaluate the slow force more than once, further systematic improvments are possible. The second

spring’s motion can be solve to fourth order using forward symplectic algorithm 4A9,10:

e∆t(T2+V2) = e

2 ∆tV2 e

2 ∆tT2e

1

1

2
3 ∆t

1

1

V2e

2 ∆tT2e

6 ∆tV2 + O(∆t)5.

Here

V2 = V2 + 1

48 ∆t2[V2, [T2, V2]]. The double commutator modiﬁes the original spring constant λ2 to

e

The resulting error matrix is

e

λ2 = λ2(1

∆t2) = λ2(1

1
24

λ2
m2

−

1
24

−

′
(αx

)2).

e4A = H(m1, Ω1, ∆t)V(λ2,

∆t)T(m2,

∆t)V(

λ2,

∆t)T(m2,

∆t)V(λ2,

∆t),

(3.27)

1
6

1

(cid:20)

1
2

−
1
6

1
2

1
24

2
3

e

−

1
864
1
10368

−

1
2

(cid:21)

(cid:21)

′
αx

− (cid:20)

−

′
(αx

)3 +

′
(αx

)5

7
864

′
(αx

)7

′
sin(x

),

′
C = cos(x

)

′
(αx

)2 +

′
(αx

)4

′
(αx

)6

1
6

′
A(x

) =

1 +

r

1
36 (αx′/2)10

−

2
37 (αx′/2)12 +

1
38 (αx′/2)14,

′
e(x

) =

A2(x′)

′
1 + A(x

± hp

−

.

)
i

The instability is now pushed back to ﬁfth order in x. Fig. 2 shows that even for α as large as 1/20, this algorithm is
now basically stable out to x
1.00001
at x

50π. There is no doubt that one has overcame the half-period barrier at x = π.

6π. For α = 1/400, as considered by Barth and Schlick, this algorithm has e

≈

≤

with C-function

amplitude

and eigenvalue function,

e

≈

6

(3.19)

(3.20)

(3.21)

(3.22)

(3.23)

(3.24)

(3.25)

(3.26)

(3.28)

(3.29)

(3.30)

IV. STABILITY EXPLAINED

The poor stability of static multiple-timestepping can be traced to the non-analytic character the spectrum. The

system’s exact angular frequence is

with exact C-function

Ω =

λ1 + λ2
m

r

q

=

1 + ω2
ω2

2 = ω1√1 + α,

C = cos(Ω∆t).

In terms of x = ω1∆t =

λ1/m∆t and α = λ2/λ1, this function is non-analytic in α,

p

C = cos(x√1 + α).

When expanded in terms of α, it has the form

C = cos(x)

x sin(x)α +

x sin(x)

1
8

(cid:20)

1
8

−

x2 cos(x)
(cid:21)

α2 +

.

· · ·

1
2

−

The ﬁrst order term is precisely the ﬁrst order result (2.16). If one were able to reproduce this expansion, one could
in principle systematically restore stability. Unfortunately one cannot; when regarding λ2 as static, one must expand
in powers of V(λ2, ∆t)
xα2 in (4.4) in any ﬁnite order. Worse,
second and fourth order algorithms do not even reproduce the (xα)2 term with the correct coeﬃcient.

αx, and can never reproduce the term

λ2∆t

∝

∝

∝

By contrast, in dynamical multiple-timestepping, one has,

Ω = Ω1 + Ω2,

and the spectrum is linear in Ω2. The corresponding C-function

(4.6)
as shown in the last section, can be systematically reproduced order by order in (αx′). Thus dynamical multiple-
timestepping linearizes the spectrum and can overcome the half period barrier by going to higher order.

′
C = cos(Ω1∆t + Ω2∆t) = cos(x

′
+ αx

),

V. GENERALIZATION TO MANY FORCES

For more than two forces, the generalization is easy. Again, using the harmonic oscillator as an illustration, the

“N -forces” case of

can be dynamically splitted as

with the primary constraint

and the pair-wise stability conditions, i

= j,

Both can be easily satisﬁed by the following generalization of (3.9),

H(p, q) =

p2
2m

+

1
2

N

Xi=1

λiq2,

H(p, q) =

N

(cid:18)

Xi=1

p2
2mi

1
2

+

λiq2

,

(cid:19)

N

Xi=1

1
mi

=

1
m

.

miλi = mjλj .

1
mi

=

λi
N
j=1 λj

1
m

=

ωi
Ω (cid:17)

2 1
m

.

(cid:16)

P

Thus the inverse of the dynamical mass should be chosen in proportional to the strength of the force, or the square
of its angular frequence.

7

(4.1)

(4.2)

(4.3)

(4.4)

(4.5)

(5.1)

(5.2)

(5.3)

(5.4)

(5.5)

6
VI. CONCLUSIONS

In this work, we have given a detailed analysis of Barth and Schlick’s model of MTS instability18. We show that
the instability of static MTS algorithms can ultimately be traced to the non-analytic character of the underlying
spectrum. Static MTS algorithms are simply very poor starting points for solving such a spectrum, even if one were
to modify or average over the slow force19. By contrast, dynamic MTS algorithms linearize the spectrum, render it
analytic, and can improve stability systematically order by order. The use of Langevin dynamics to damp out the
instability20 simply masks the true dynamics of the system without fundamentally solving the instability problem.

Realistic biomolecular simulations are too complicated for a detailed stability analysis as in the harmonic oscillator
case. Nevertheless, the harmonic oscillator captures the essence of its fast vibrating modes. Thus the insight of
dynamic multiple-timestepping can be applied easily. The key idea is to decompose

and update particles aﬀected by the slow force dynamically with mass m2. In the harmonic oscillator case, 1/m1 and
1/m2 are to be determined in proportional to the strength, or the square of the frequence, of the force. For realistic
simulations, one can simply determine the optimal m2 by trial-and-error subject to the constraint (6.1).

1
m

=

1
m1

+

1
m2

Acknowledgments

This work was supported, in part, by the National Science Foundation grants No. PHY-0100839 and DMS-0310580.

8

(6.1)

1 H. Yoshida, Celest. Mech. Dyn. Astron. 56, 27 (1993).
2 P. J. Channell and F. R. Neri, An introduction to symplectic integrators, in Integration Algorithms and Classical mechanics

(Toronto, ON, 1996), Fields Inst. Commun., 10, Amer. Math. Soc., Providence, RI, P.45.

3 R. I. McLachlan and G. R. W. Quispel, Acta Numerica, 11, 241 (2002).
4 E. Forest and R. D. Ruth, Physica D 43, 105 (1990).
5 R. I. McLachlan and P. Atela, Nonlinearity, 5, 542 (1991).
6 R. I. McLachlan, SIAM J. Sci. Comput. 16, 151 (1995).
7 P. V. Koseleﬀ, in Integration algorithms and classical mechanics, Fields Inst. Commun., 10, Amer. Math. Soc., Providence,

RI, P.103, (1996).

8 I. P. Omelyan, I. M. Mryglod and R. Folk, R. 2002, Phys. Rev. E66, 026701 (2002).
9 Siu A. Chin, Phys. Lett. A226, 344 (1997).
10 Siu A. Chin, and C. R. Chin, “Forward Symplectic Integrators for Solving Gravitational Few-Body Problems”, arXiv,

astro-ph/0304223.

11 H. Grubm¨uller, H. Heller, A. Windem¨uth, and K. Sch¨ulten, Mol. Simul. 6, 121 (1991).
12 M. Tuckerman, B. J. Berne, and G. J. Martyna, J. Chem. Phys. 97, 1990 (1992).
13 R. Zhou and B. J. Berne, J. Chem. Phys. 103, 9444 (1995).
14 M. Watanabe and M. Karplus, J. Phys. Chem. 99, 5680 (1995).
15 J.J. Biesiadecki and R.D. Skeel, J. Comp. Phys. 109, 318 (1993).
16 M. Mandziuk and T. Schlick, Chem. Phys. Lett. 237, 525 (1995).
17 T. Schlick, M. Mandziuk, R. D. Skeel, and K. Srinivas, J. Comput. Phys. 139,1 (1998).
18 E. Barth and T. Schlick, J. Chem. Phys. 109, 1633 (1998).
19 J. A. Lzaguirre, S. Reich, R. D. Skeel, J. Chem. Phys. 110, 9853 (1999).
20 E. Barth and T. Schlick, J. Chem. Phys. 109, 1617 (1998).

Figures

9

)
x
(
C

2.0

1.5

1.0

0.5

0

-0.5

-1.0

-1.5

-2.0

0

1

2

3

6

7

8

9

5
4
x / π 

FIG. 1: The fundamental C-function for determing the stability of Multiple-Timestepping (MTS) algorithms. The dashed line
gives the stable C-function for the fast force alone, C(x) = cos(x) where x = ω1∆t, and ω1 is the vibrational angular frequence
of the fast force. The solid lines give the C-function for the static Euler MTS algorithm, Eq.(2.16). To make the unstable
regions visible, a large value of α = λ2/λ1 = 1/10 is used, where λ1 and λ2 are the force constant of the fast and slow force
respectively. The algorithm is unstable whenever |C(x)| > 1. The most unstable point in each unstable band near x ≈ nπ
touches the amplitude envelope ±A(x), Eq.(2.18).

10

1.5

1.4

1.2

1.1

1.0

1.3

static MTS

|
)
x
(
e

|

dynamic MTS

first order

second order

fourth order

0

1

2

3

6

7

8

9

5
4
x / π 

FIG. 2: The magnitude of the error matrix’s eigenvalue for various MTS algorithms. The dashed line is the static Euler MTS
algorithm. The three solids lines are the three dynamic MTS algorithms described in the text. The algorithm is unstable
whenever |e(x)| > 1, however, in this graph, only values at x + δ(x) = nπ are true eigenvalues. See text for details. A large
value of α = 1/20 is used to make the fourth order dynamic MTS result visible.

