6
0
0
2
 
p
e
S
 
4
 
 
]
h
p
-
m
e
h
c
.
s
c
i
s
y
h
p
[
 
 
1
v
9
2
0
9
0
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

On chemisorption of polymers to solid surfaces

Radek Erban∗

Jonathan Chapman†

January 17, 2014

Abstract. The irreversible adsorption of polymers to a two-dimensional
solid surface is studied. An operator formalism is introduced for chemi-
sorption from a polydisperse solution of polymers which transforms the
analysis of the adsorption process to a set of combinatorial problems on
a two-dimensional lattice. The time evolution of the number of polymers
attached and the surface area covered are calculated via a series expansion.
The dependence of the ﬁnal coverage on the parameters of the model (i.e.
the parameters of the distribution of polymer lengths in the solution) is
studied. Various methods for accelerating the convergence of the resulting
inﬁnite series are considered. To demonstrate the accuracy of the truncated
series approach, the series expansion results are compared with the results
of stochastic simulation.

1 Introduction

The adsorption of polymers to solid surfaces has wide technological and medical ap-
plications [14, 8]. In this paper, we study chemisorption, i.e. the situation where co-
valent surface-polymer bonds develop and adsorption is eﬀectively irreversible on the
experimental time scale [13]. Chemisorbing polymers have one or more reactive (bind-
ing) groups along the polymer chain which can react with binding sites on the surface.
Polymers with one reactive group at the end of the chain are called semitelechelic. A
schematic diagram of the adsorption of a semitelechelic polymer is shown in Figure
1(a) where the binding sites are arranged into a rectangular mesh on the surface. An
important parameter of the chemisorption process is the density of binding sites, or
equivalently, the average distance between neigbouring sites, which is denoted by h in
Figure 1(a). Denoting the hydrodynamic radius of the polymer by R, we can distinguish
three diﬀerent scenarios. If h
R, then the polymer layer created by chemisorption of
the semitelechelic polymer will be a polymer brush after suﬃciently long time [11, 9, 21].
In this case, one can simply assume that a polymer can attach anywhere on the sur-
face for modelling purposes. In particular, one can use continuum random sequential
adsorption to model the process [3]. The other extreme case is h
R where the ﬁnal
layer contains one attached polymer at each binding site. No steric shielding needs to

≫

≪

∗University of Oxford, Mathematical Institute, 24-29 St. Giles’, Oxford, OX1 3LB, United Kingdom;
e-mail: erban@maths.ox.ac.uk. This work was supported by Biotechnology and Biological Sciences
Research Council.

†University of Oxford, Mathematical Institute, 24-29 St. Giles’, Oxford, OX1 3LB, United Kingdom;

e-mail: chapman@maths.ox.ac.uk.

1

(a)

(b)

h

Figure 1: (a) A schematic diagram of the chemisorption of the semitelechelic polymer.
(b) Situation from (a) transformed into two-dimensional lattice setting.

be considered when modelling the process and the dynamics of adsorption is trivial from
the mathematical point of view. The last important case is when h
R. This is the
regime studied in this paper.

∼

Chemisorption is often modelled as a random sequential adsorption (RSA) [4, 16].
In a previous paper [3] we studied one-dimensional models of random sequential (irre-
versible) adsorption. Our motivation was to understand the essential processes involved
in pharmacological applications such as the polymer coating of viruses [8]. The classical
RSA model [4] was generalized to study the eﬀects of polydispersity of polymers in solu-
tion, of partial overlapping of the adsorbed polymers, and the inﬂuence of reactions with
the solvent on the adsorption process. Working in one dimension, we derived an integro-
diﬀerential evolution equation for the adsorption process and we studied the asymptotic
behaviour of the quantities of interest, namely the surface area covered and the number
of molecules attached to the surface. We also presented applications of equation-free
dynamics renormalization tools [10] to study the asymptotically self-similar behaviour
of the adsorption process.
In [3] we used a continuum RSA model. The underlying
assumption was that the polymer can eﬀectively bind anywhere on the surface, i.e. we
R. In reality, the reactive groups on the polymer can react
worked in the regime h
only with the corresponding binding sites on the surface, which are primary amino-
groups in the virus coating problem. Rough estimates from molecular models suggest
that the average distance between primary amino-groups in the virus capsid is about a
nanometre [7]. However, it is diﬃcult to guess which of the amino-groups in the capsid
are available for the reaction with the polymer, i.e. are accessible for polymers from
solution.
R can be justiﬁed in the
virus coating problem. Other chemisorbing systems [14, 4] can be also used to motivate
investigation of the borderline case h

In particular, both the regimes h

R and h

R.

≪

≪

∼

∼

Assuming h

R, we have to take the discrete nature of the binding sites into
account. This means that lattice RSA modelling is more appropriate than continuum
RSA modelling. In this paper we assume for simplicity that the binding sites lie on a
rectangular mesh (see Figure 1), with mesh points a distance h apart. We choose h = 1
without loss of generality in what follows. Any polymer covers the binding site to which
it is attached. Moreover, longer polymers also eﬀectively cover neighbouring binding
sites, as illustrated in Figure 1(a). More precisely, an attached semitelechelic polymer
covers a circle of a certain radius r which is centered at the binding site (meshpoint
(i, j)). If r < 1, then the polymer eﬀectively covers only the corresponding binding site
(i, j). If 1

r < √2, then the polymer covers a small “cross”

∼

Xi,j where we deﬁne

≤

(i, j), (i + 1, j), (i

1, j), (i, j

1), (i, j + 1)

.

(1.1)

Xi,j =

(cid:8)

−

2

−

(cid:9)

We call set of mesh points
r < 2, then the polymer covers a small “square”

Xi,j the cross (or cross-polymer) centered at (i, j). If √2
Si,j deﬁned by
1), (i, j + 1),

1, j), (i, j

(i, j), (i + 1, j), (i

≤

(i + 1, j + 1), (i + 1, j

1), (i

1, j + 1), (i

1, j

1)

.

(1.2)

−

−

−

−

Si,j =

(cid:8)

Si,j the square (or square-polymer) centered at (i, j).

We call set of mesh points
If
2 < r, then the polymer covers at least 13 binding sites. To simplify the combinatorial
complexity of the problem, we restrict our consideration to the case r < 2. In this case,
we can formulate the chemisorption of polymers in terms of adsorption of points, crosses
and squares to the two-dimensional lattice (see Figure 1(b)). We denote by α the fraction
r < √2, so that α is the probability that a
of polymers in the solution for which 1
randomly chosen polymer in solution will adsorb as a cross. Similarly, we denote β the
fraction of polymers in the solution for which √2
r < 2 so that β is the probability
that a randomly chosen polymer in solution will adsorb as a square.
In particular,
β is the probability that a randomly
1 where 1
we must have 0
chosen polymer in solution will adsorb as a point. We work with an M
M mesh
with periodic boundary conditions. Then our two-dimensional polydisperse random
sequential adsorption (pRSA) algorithm can be stated as follows.

α + β

≤

≤

−

×

−

≤

≤

α

−

−

(cid:9)

pRSA algorithm: We consider the adsorption of points
, crosses
(i, j)
Xi,j
}
and squares
M mesh. At each
Si,j to the two-dimensional rectangular M
time step, we choose randomly a point (i, j) in the mesh. If the selected mesh
point (i, j) is covered (occupied) by a point/cross/square already placed, the
adsorption is rejected. If the mesh point (i, j) is vacant, then it is marked as
occupied. Moreover, with probability α (resp. β), all mesh points in the set
Xi,j (resp.

Si,j) are marked as occupied.

{
×

To simulate pRSA algorithm, we have to generate three random numbers at each time
step. The ﬁrst two of them are used for random selection of the lattice point where
the reactive group of the adsorbed polymer is attempted to bind. The third random
number rn, uniformly distributed in interval [0, 1], is used to determine the length of the
[α, α + β),
adsorbed polymer. If rn ∈
[α+β, 1], then the point-polymer is adsorbed.
then the square-polymer is chosen. If rn ∈
An illustrative numerical simulation of pRSA algorithm for α = 0.8 and β = 0.1 is shown
in Figure 2. We start with an empty rectangular 100
100 mesh, i.e. M = 100. The
mesh points covered by polymers are plotted at diﬀerent times.

[0, α), then the cross polymer is placed. If rn ∈

×

Xi,j (resp. square

Let us note that pRSA algorithm requires that the position (i, j) of the center of
the adsorbed cross
Si,j) is vacant. On the other hand, the “tails” of
crosses/squares can overlap. Here, the center of the cross (resp. square) describes the
reactive group which is covalently bound to the surface. The remaining four (resp. eight)
points of the cross (resp. square) describe the polymer tails which sterically shield the
neighbourhood of the adsorbed polymer. In our algorithm, binding of a larger polymer
prevents binding (of the center) of another polymer in the neighbourhood of the center
of the polymer already adsorbed. On the other hand, the “wiggling tails” of polymers
can overlap.

As in [3] there are two important quantities of interest: the number of covered mesh
points A(t) and the number N (t) of polymers which are attached to the surface at time
t. To understand the behaviour of A(t) and N (t), we introduce in Section 2 an operator

3

time=200     (188 attached polymers)

time=1000     (781 attached polymers)

10

20

30

40

50

60

70

80

90 100

10

20

30

40

50

60

70

80

90 100

time=3000     (1686 attached polymers)

time=20000     (3251 attached polymers)

100

10

20

30

40

50

60

70

80

90

10

20

30

40

50

60

70

80

90

100

10

20

30

40

50

60

70

80

90 100

10

20

30

40

50

60

70

80

90 100

Figure 2: One realization of pRSA algorithm for α = 0.8 and β = 0.1. The covered
mesh points of the rectangular 100

100 mesh are shown at diﬀerent times.

×

formalism which makes it possible to derive a series expansion for N (t). We also derive
series for A(t) and for numbers of point-polymers, cross-polymers and square-polymers
adsorbed on the surface at time t. The operator formalism transforms the random
sequential adsorption process into a set of combinatorial problems on the lattice.
In
some special cases, one can further simplify the resulting lattice combinatorial problems;
we consider these special cases in Section 3. The general problem is studied in Section 4.
To illustrate the precision of the derived formulas, we also provide a comparison of the
results obtained by series expansion with those obtained by direct stochastic simulation,
of particular interest is the time evolution of A(t) and N (t) and the dependence of the
ﬁnal adsorbed polymer layer on the parameters α and β. We conclude with a discussion
in Section 5.

100

10

20

30

40

50

60

70

80

90

10

20

30

40

50

60

70

80

90

100

4

2 Operator formalism

Let us denote by N (t) (resp. Np(t), Nc(t) and Ns(t)) the number of polymers (resp.
point-polymers, cross-polymers and square-polymers) which are adsorbed on the surface
at time t. Then we have

Np(t) = (1

α

β)N (t),

Nc(t) = αN (t),

Ns(t) = βN (t).

(2.1)

−

−

Let A(t) (resp. F (t)) be the number of covered (resp. vacant) mesh points at time t.
Since dN/dt = F/M 2 and A = M 2
F , we have

−

A(t) = M 2

1
(cid:18)

−

dN
dt

(t)

.

(cid:19)

(2.2)

N ∞ = lim
t→∞

N (t), N ∞

p = lim
t→∞

Np(t), N ∞

c = lim
t→∞

Nc(t), N ∞

s = lim
t→∞

Ns(t).

(2.3)

Let us deﬁne

Then (2.1) implies

N ∞

p = (1

α

−

−

β)N ∞,

N ∞

c = αN ∞,

N ∞

s = βN ∞.

(2.4)

p , N ∞
c

can be computed directly from N ∞.
and N ∞
Hence, the saturating values N ∞
s
Similarly, the time evolution of A(t), Np(t), Nc(t) and Ns(t) can be obtained from N (t)
by (2.1) – (2.2). In this section, we develop an operator formalism framework to obtain
the time evolution of N (t) and the limit N ∞. Once we get N (t) and N ∞, the rest of
quantities of interest can be expressed by (2.1), (2.2) and (2.4) and their dependence on
the model parameters α and β can be also studied.

In [1, 5], an operator formalism was developed for studying the square lattice with
nearest-neighbour exclusion. The results can be directly used to ﬁnd an approximation
of N ∞ for α = 1 and β = 0. If α = 1, then it is suﬃcient to keep track of the centers
of cross-polymers. Each center of a cross-polymer excludes putting another center of
a cross-polymer in the nearest neighbourhood of it. Hence, one can reformulate pRSA
algorithm for α = 1 in terms of adsorption of points which excludes the nearest neigh-
bourhood of them. Similarly, one can reformulate the pRSA algorithm as adsorption
of points which excludes the nearest and the next nearest neighbourhood of them for
α = 0 and β = 1. However, if [α, β]
, then we have a mixture of
polymers of diﬀerent sizes in the solution and the approach of [1, 5] cannot be directly
used. In this section we present a generalization of the operator formalism for the case
of arbitrary α and β.
We consider an M

M lattice (with periodic boundary conditions) to which polymers
.
can adsorb. For each lattice point (i, j), we consider the state function νi,j ∈ {
}
Here, νi,j = 0 means that lattice point (i, j) is vacant or occupied by the “wiggling tail”
of a cross-polymer/square-polymer (i.e. νi,j = 0 means that lattice point (i, j) is free of
centers of polymers/attached reactive groups), νi,j = 1 means that lattice point (i, j) is
occupied by the point-polymer, νi,j = 2 means that the lattice point is occupied by the
center of the cross-polymer and νi,j = 3 means that the lattice point is occupied by the
center of the square-polymer. Denoting

[0, 1], [1, 0], [0, 0]
}

0, 1, 2, 3

6∈ {

×

= [1, 0, 0, 0]T,

= [0, 1, 0, 0]T,

= [0, 0, 1, 0]T,

= [0, 0, 0, 1]T,

0
|

i

1
|

i

3
|

i

2
|

i

5

we identify every lattice point with the four-dimensional vector space R4. Namely, the
conﬁguration of the M

M lattice will be expressed as

The system state is given by

×

M

νi,j}i ∈

|{

0
|

,
i

1
|

,
i

2
|

,
i

3
|

.

i
o

i,j=1 n
M

Ψ(t)
i
|

=

P (
{

νi,j}

, t)

νi,j}i

|{

X{νi,j }

P (
{

νi,j}

, t) = 1.

X{νi,j }

of the lattice and P (
where the sum is taken over all possible conﬁgurations
{
is the probability of each conﬁguration. It satisﬁes the normalization condition

νi,j}

{

, t)

νi,j}

(2.5)

(2.6)

For each lattice point, we deﬁne cross, square and point annihilation operators

0
0
A = 
0
0




0
0
0
0

1 0
0 0
0 0
0 0



,





0
0
B = 
0
0




0 0
0 0
0 0
0 0

,

1
0

0
0




C = 

.

(2.7)

1 0
0 0
0 0
0 0

0
0
0
0





0
0

0
0




i,j = B†

i,j , and C†

i,j (resp. B†

i,jBi,j, and Np

More precisely, operator Ai,j (resp. Bi,j, and Ci,j) acts as A (resp. B, and C) on
the lattice point (i, j) and as the identity on all other lattice points. We also deﬁne
creation operator A†
i,j) as the transpose of operator Ai,j (resp.
Bi,j, and Ci,j). The cross-polymer number operator (resp.
square-polymer number
operator, and point-polymer number operator) is deﬁned as Nc
i,jAi,j (resp.
i,j = C†
Ns
i,jCi,j) which is, at the lattice point (i, j), a projection
which corresponds to a cross.
onto the one-dimensional subspace spanned by vector
i,j = Ai,jA†
The “vacancy” number operator can be expressed as Nv
i,j =
Ci,jC†
i,j. Here, “vacancy” means that the lattice point is either free or covered by the
tail of the cross-polymer/square-polymer, i.e. it is free of the attached reactive groups.
We have Nv
. Let Ri,j be an operator which
i
−
is equal to the identity Id (resp. 0) operating on conﬁgurations in which lattice point
(i, j) lies outside (within) the set of lattice points covered by tails of cross-polymers or
square-polymers, i.e.

i,j = Bi,jB†

i,j = A†

νi,j)/6

νi,j)(2

νi,j)(3

= (1

Ψ
|

i,j |

2
|

−

−

Ψ

i

i

Ri,j ≡

(Nv
(Nv
(Nv

i+1,j + Np
i+1,j+1 + Np
i+1,j−1 + Np

◦

◦

i+1,j)(Nv

i−1,j + Np

i+1,j+1 + Nc
i+1,j−1 + Nc

i−1,j)(Nv
i+1,j+1)(Nv
i+1,j−1)(Nv

i,j+1 + Np
i−1,j+1 + Np
i−1,j−1 + Np

i,j+1)(Nv

i,j−1 + Np

i,j−1)

i−1,j+1 + Nc
i−1,j−1 + Nc

i−1,j+1)
i−1,j−1),

(2.8)

◦

is used to emphasize that Ri,j is the composition of operators which
where symbol
are typed on several lines (to simplify the resulting formulas, we skip the composition
symbol
if the composed operators are typed on the same line). In the pRSA algorithm,
we add the center of a cross-polymer (resp. square-polymer, and point-polymer) at the
β) if (i, j) is vacant and not covered by
lattice site (i, j) at a rate α (resp. β, and 1

α

◦

−

−

6

the tail of a cross-polymer or square-polymer. This means that the state
the master equation

Ψ(t)
i
|

satisﬁes

∂
∂t |

Ψ(t)
i

=

1
M 2

M

i,j=1 (cid:16)
X

αA†

i,j Ri,j + βB†

i,jRi,j + (1

α

−

−

β)C†

i,jRi,j −

Nv

i,jRi,j

.
Ψ(t)
i
|

(cid:17)

(2.9)

Solving (2.9) with the initial condition

0

|{

}i

=

0
|

0
i ⊕ |

0
i ⊕ · · · ⊕ |

, we obtain
i

Ψ(t)
i
|

= exp

M

t
M 2

"

i,j=1 (cid:16)
X

αA†

i,j + βB†

i,j + (1

α

−

−

β)C†

i,j −

Nv
i,j

Ri,j

0

.
}i

#|{

(2.10)

(cid:17)

Denoting
=
number of polymers at time t by

i ⊕ |

u
|

}i

|{

u

u

i ⊕ · · · ⊕ |

u

i

where

u
|

i

= [1, 1, 1, 1]T , we can compute the

N (t) = M 2

u

h{

}|

(Np

1,1 + Nc

1,1 + Ns

.
Ψ(t)
1,1)
i
|

(2.11)

Using (2.10), we get

αA†

i,j + βB†

i,j + (1

α

−

−

β)C†

i,j −

Nv
i,j

Ri,j

=

0

{

}+

i,j + (1

α

−

−

β)C†

i,j −

Nv
i,j

Ri,j

=

0

{

}+

#

(cid:17)

N (t) = M 2

u

*{

1,1 + Nc

1,1 + Ns

1,1)

(Np
}(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

t
M 2

"

exp

◦

M

∞

= M 2

1
k!

t
M 2

Xk=0

(cid:18)

i,j=1 (cid:16)
X
k

u

*{

(Np
}(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
i,j + βB†

αA†

(cid:19)

M

◦"

i,j=1 (cid:16)
X

= M 2

∞

Xk=0

k

1
k!

t
M 2

(cid:18)

(cid:19)

u

*{

(Np
}(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
αA†

k

◦"

X{(xj ,yj)}k

j=1

j=1 "
Y

(cid:16)

1,1 + Nc

1,1 + Ns

1,1)

1,1 + Nc

1,1 + Ns

1,1)

(cid:17)

#(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

k

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:17)

(2.12)

0

.
}+

{
#(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

xj ,yj +βB†

xj ,yj +(1

β)C†

α

−

−

xj ,yj −

Nv

xj,yj

Rxj ,yj

k
j=1 in the mesh. To evaluate this
Here, the last sum is done over all k-tuples
{
formula, let us note that we can consider the contributions of each mesh point separately.
= (1, 1), then an operator of the following type acts on the mesh point (xi, yi):
If (xi, yi)

(xj, yj)
}

[Nv

xi,yi+Np

xi,yi]γ1 [Nv

xi,yi+Np

xi,yi+Nc

xi,yi]γ2 [αA†

xi,yi+βB†

xi,yi+(1

β)C†

α

−

−

xi,yi−

Nv

xi,yi]γ3

[Nv

xi,yi + Np

xi,yi]γ4 [Nv

xi,yi + Np

xi,yi + Nc

xi,yi]γ5

◦

Wxi,yi,

· · · ≡

(2.13)

7

6
where γ1, γ2, γ3, . . . , are nonnegative integers. Without loss of generality, we can assume
γ3 > 0 in what follows. The “building blocks” Wxi,yi can be reasonably simpliﬁed if we
take into account the following formulas:

[Nv
xi,yi + Np
xi,yi + Np

xi,yi + Np
xi,yi + Nc
xi,yi + Nc

xi,yi]2 = Nv
xi,yi]2 = Nv
xi,yi] = Nv

xi,yi + Np
xi,yi + Np
xi,yi + Np

xi,yi,
xi,yi + Nc
xi,yi,

[Nv
xi,yi][Nv

xi,yi,

[Nv

xi,yi + Np

[αA†

xi,yi + βB†

xi,yi + (1

β)C†
α
−
−
xi,yi + βB†
[αA†

xi,yi−
xi,yi+ (1

Nv

xi,yi]2 =
α

−

−

=

−

β)C†

xi,yi −

Nv

xi,yi]Nv

xi,yi,

[Nv

xi,yi + Np

xi,yi][αA†

xi,yi + βB†

xi,yi + (1

α

−

−
= [(1

β)C†

Nv
β) C†

xi,yi−
α

−

−

xi,yi] =

xi,yi −

Nv

xi,yi],

[Nv

xi,yi + Np

xi,yi + Nc

xi,yi][αA†

xi,yi + βB†

α

xi,yi + (1
= [αA†

−

−
xi,yi + (1

β)C†

Nv
β) C†

xi,yi−
α

−

−

xi,yi] =

xi,yi −

Nv

xi,yi].

[αA†

xi,yi +

If γ1 = γ2 = 0, then the building block (2.13) can be rewritten in the form
xi,xi]γ. We can easily observe that
xi,yi][Nv
βB†

xi,yi + (1

β)C†

Nv

α

±

−

−

xi,yi −

u

*{

±

}(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

[αA†

xi,yi + βB†

xi,yi + (1

α

−

−

β)C†

xi,yi −

Nv

xi,yi][Nv

xi,yi]γ

= 0.

0

}+

k
j=1 to have nonzero
Consequently, the ﬁrst necessary condition for k-tuple
contribution to the formula (2.12) is that for every (xi, yi)
= (1, 1) in the k-tuple,
there must be j < i such that (xi, yi) is equal to (xj , yj) or one of its nearest or next
nearest neighbours. In particular, we see that (x1, y1) = (1, 1) in order to have nonzero
contribution of the k-tuple

k
j=1. If γ1 > 0, then (2.13) satisﬁes

(xj , yj)
}

{

{
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(xj, yj)
}

{

u

*{

Wxi,yi
}(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

= (

1)γi(α + β)

0

{

}+

−

(2.14)

where we have denoted by γi the number of times that the mesh point (xi, yi) appears
in the k-tuple

k
j=1. Similarly, if γ1 = 0 and γ2 > 0, then (2.13) satisﬁes

(xj, yj)
}

{

(cid:12)
(cid:12)
(cid:12)
(cid:12)
Finally, considering the contribution of the ﬁrst mesh point (x1, y1) = (1, 1), we get
(cid:12)

u

*{

Wxi,yi
}(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

0

{

}+

= (

1)γiβ.

−

(2.15)

u

*{

(Np
}(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

1,1+Nc

1,1+Ns

1,1)[αA†

1,1 +βB†

1,1+(1

α

−

−

β)C†

1,1 −

Nv

1,1] . . .

0

{

}+

= (

1)γ1−1.

−

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(2.16)

8

6
2, . . . , k

≡ {
there exists j < i such that (xi, yi)

Pk as the set of all sequences s
}
∈ {

k
j=1, such that (x1, y1) = (1, 1)
Let us deﬁne
∈ Sxj ,yj , i.e. (xi, yi)
and for each i
is equal to (xj , yj) or one of its nearest or next nearest neighbours. Let us denote by
ω(s) the number of distinct points in the sequence s
∈ Pk. Let ξ(s) be the number of
distinct points (xi, yi)
= (1, 1), satisfying that there exists j < i such that
∈ Xxj ,yj , i.e. (xi, yi) is equal to (xj , yj) or one of its nearest neighbours. Then
(xi, yi)
we can rewrite (2.12) (using (2.14) – (2.16)) as

(xj, yj)
}

s, (xi, yi)

∈

N (t) = M 2

∞

Xk=1

k

1
k!

t
M 2

(cid:18)

(cid:19)

1)k−1

(
−

Xs∈Pk

[α + β]ξ(s)βω(s)−ξ(s)−1.

(2.17)

Formula (2.17) is a starting point for the analysis of the pRSA algorithm. In order to
evaluate coeﬃcients of the series expansion (2.17), we have to compute the quantities

[α + β]ξ(s)βω(s)−ξ(s)−1,

for k = 1, 2, 3, . . . .

(2.18)

Xs∈Pk

Thus we have transformed the problem of the original pRSA algorithm to a combinatorial
problem on the two-dimensional lattice. The problem can be further simpliﬁed if α = 0
or β = 0 as we will show in the following section. The general analysis of (2.17) for any
α and β is given in Section 4.

3 Analysis of pRSA algorithm in some special cases

First, let us note that formula (2.17) is consistent with the trivial case [α, β] = [0, 0].
We have

N (t) = M 2

∞

Xk=1

1
k!

t
M 2

(cid:18)

(cid:19)

k

(
−

1)k−1 = M 2

1

exp

t
M 2

−

(cid:18)

−

(cid:20)

(cid:21)(cid:19)

which is the exact formula for α = β = 0. This can be seen easily, since N (t)
≡
F/M 2. Formula (2.17) is also consistent
A(t) = M 2
with the cases [α, β] = [1, 0] and [α, β] = [0, 1] which were studied in [1, 5]. Choosing
[α, β] = [0, 1], we get

F (t) where F (t) solves dF/dt =

−

−

N (t) = M 2

∞

Xk=1

k

1
k!

t
M 2

(cid:18)

(cid:19)

1)k−1

(
−

Pk

which is the formula derived in [1, 5]. Here,
Similarly, if [α, β] = [1, 0], we get

|Pk|

is the number of sequences in

N (t) = M 2

∞

k

1
k!

t
M 2

(cid:18)

(cid:19)

1)k−1

(
−

Qk

Xk=1
where
Qk is the set of all sequences s
each i
∈ {
(xj, yj) or one of its nearest neighbours.

2, . . . , k

}

≡ {

there exists j < i such that (xi, yi)

(xj, yj)
}

k
j=1, such that (x1, y1) = (1, 1) and for
∈ Xxj ,yj , i.e. (xi, yi) is equal to

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

(3.1)

Pk.

(3.2)

9

6
The situation is more complicated if [α, β]

. To evaluate coeﬃ-
cients of the series (2.17), we have to compute the quantities (2.18). If we use directly
formula (2.18), we would have to evaluate a diﬀerent computationally intensive combi-
natorial problem for each α and β. Here we show that we can transform formula (2.17)
to the problem where computationally intensive part (involving
Qk) is done in-
dependently of α or β. We start with the analysis of the pRSA algorithm in the special
case α = 0.

[0, 0], [1, 0], [0, 1]
}

Pk or

6∈ {

3.1 Special case α = 0

If α = 0, then pRSA algorithm reduces to adsorption of point-polymers and square-
polymers, and (2.17) reads as follows

N (t) = M 2

∞

Xk=1

k

1
k!

t
M 2

(cid:18)

(cid:19)

1)k−1

(
−

βω(s)−1.

Xs∈Pk

(3.3)

If β = 1, then (3.3) implies (3.1). It was observed in [5] that the Laplace transform can
be used to further simplify the formula (3.1). Here, we show that the Laplace transform
can help us to analyse (3.3) for any β. Taking the Laplace transform of (3.3), term by
term, we obtain

∞

0
Z

M 2
u

−

∞

k

1
uM 2

−

N (u) =

N (t)e−utdt =

βω(s)−1

(3.4)

b

Xs∈Pk
for suﬃciently large u. Let us deﬁne
Gk as the set of all sequences of k distinct points
there exists j < i
2, . . . , k
(xj, yj)
{
}
such that (xi, yi) is equal to one of the nearest or the next nearest neighbours of (xj , yj),
i.e. (xi, yi)

k
j=1, such that (x1, y1) = (1, 1), and for each i

= (xj , yj). Then we have (using (3.4))

∈ {

}

Xk=1 (cid:18)

(cid:19)

N (u) =

b
M 2
u

=

∞

Xk=1

∈ Sxj ,yj and (xi, yi)
M 2
u

1
uM 2

−

∞

−

k

Xk=1 (cid:18)

β)k−1

(
−

Gk
(cid:12)
(cid:12)
(cid:12)

j=1
Y

(cid:12)
(cid:12)
(cid:12)
=

M 2
u

(cid:19)

βk−1
(cid:12)
(cid:12)
(cid:12)

Gk
(cid:12)
(cid:12)
(cid:12)
(uM 2 + j)−1 =

k

k

j=1 "
Y

M 2
u

1

(1

−

2

x)uM

0
Z

1 +

−

(cid:18)

j
uM 2

+

(cid:19)

−

(cid:18)

j
uM 2

2

(cid:19)

+ . . .

=

#

1
(1

−

2

x)uM

xk−1dx =

∞

Xk=1
(

∞

−
(k

Xk=1

Gk

(
−

β)k−1
(k

−
βx)k−1
1)!

−

1)!
(cid:12)
(cid:12)

Gk

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

0
Z

(cid:12)
(cid:12)

dx.

1−exp[−t/M

2

]

∞

Taking the inverse Laplace transform, we obtain (for suﬃciently large r)

N (t) =

N (r + iu)e(r+iu)tdu = M 2

1
2π

∞

−∞

Z

Let us deﬁne function

b

(

βx)k−1
1)!

−
(k

−

Xk=1

Gk

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

dx.

(3.5)

Ψ(x) = M 2

(3.6)

0
Z

(

−

β)k−1 xk
k!

∞

Xk=1

.

Gk

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

10

6
(3.7)

(3.8)

(3.9)

Then (3.5) yields

In particular, the ﬁnal coverage of the lattice can be computed as

N (t) = Ψ

exp

1
(cid:18)

−

−

(cid:20)

t
M 2

.

(cid:21)(cid:19)

N ∞

lim
t→∞

N (t) = lim
x→1

Ψ(x)

≡

and other quantities of interest can be obtained by (2.1), (2.2) and (2.4). Thus, the
adsorption algorithm has been reformulated to the problem of ﬁnding the numbers of
sequences in the sets
we can write Ψ(x)
Gk, k = 1, 2, . . . . Once, we have the numbers
for any β and compute N (t), Np(t), Ns(t) and A(t) by (3.7), (2.1) and (2.2), provided
that we can compute the sum of series (3.6) with reasonable precision. To do so, we set

|Gk|

gk = M 2

Gk
k!

.

(cid:12)
(cid:12)

(cid:12)
(cid:12)

The ﬁrst eight values of gk can be computed relatively easily as follows g1 = 10000;
.
.
= 14461429 and
= 1606667; g6
g2 = 40000; g3
.
= 41070290. Our task is to estimate the sum of series (3.6) knowing only the ﬁrst
g8
eight partial sums

.
= 4918889; g7

.
= 146667; g4

.
= 500000; g5

sn(x) =

β)k−1 gkxk,

n = 1, 2, . . . , 8.

(3.10)

n

Xk=1

(
−

To do that, we use Shanks transformation [15] computed by Wynn’s algorithm [20, 19]
in the following way

εn
1 (x) = sn(x),
εn−1
(x) = 1/(sn(x)
2
(x) = εn−k+2
εn−k+1
k

for n = 1, 2, . . . , 8,
sn−1(x))
(x) + 1/(εn−k+2
k−2
for k = 3, 4, 5, 6, 7, n = k, . . . , 8.

(x)

k−1

−

−

for n = 2, 3, . . . , 8,
εn−k+1
k−1

(x))

(3.11)

To approximate the sum Ψ(x), we use the term ε2
7(x) which is also the Pad´e [4, 3]-
approximant since we use Shanks transformation for a power series [19]. Thus, we
aproximate number of attached polymers as

N (t)

ε2
7

≈

(cid:16)

(cid:17)

x(t)

, where x(t) = 1

exp

(3.12)

−

t
M 2

.

(cid:21)

−

(cid:20)

The results obtained by (3.12) for β = 1 and M = 100 are given in Figure 3(a). To
compute the time evolution of N (t) we chose an equidistant mesh for x in the interval
(0, 1) and evaluated ε2
7 by (3.11) at each mesh point. Then the corresponding time t
was computed by (3.12). In Figure 3(a), we compare results obtained by approximation
(3.12) and by stochastic simulation of pRSA algorithm. We see that we get an excellent
agreement between the theoretically derived formula and the simulation. The asymptotic
coverage can be approximated as

N ∞

lim
t→∞

N (t)

≡

≈

7(1), N ∞
ε2

β ε2

7(1),

s ≈

and N ∞

p ≈

(1

−

β) ε2

7(1).

(3.13)

11

(a)

2000

N(t)

1500

1000

500

0
 
0

(b)

 

10000

8000

∞
N
p

6000

4000

2000

0
0

∞
N
s

α=0

∞

N

α=0, β=1

series expansion
stochastic simulation

1

2

time

3
4
x 10

0.2

0.4

0.6

0.8

1

β

Figure 3: pRSA algorithm for α = 0. (a) Time evolution of N (t) given by (3.12) for
α = 0, β = 1 and M = 100 (dashed line). Ten realizations of stochastic simulation of
pRSA algorithm are plotted as thin solid lines. (b) N ∞, N ∞
s as obtained by
(3.13) (solid lines) for M = 100. We compare the approximate results with stochastic
simulation of pRSA algorithm (20 realizations, each realization plotted as a dot).

p and N ∞

In Figure 3(b), we compare approximations of N ∞, N ∞
computed by (3.13)
with the results of stochastic simulations. We see that approximations (3.13) provide
very good results for any β. We can estimate relative error between approximation N ∞
app
and exact value N ∞ as (N ∞
= 2.7
= 0.15% for β = 1. Here, exact value of N ∞ was approximated
and (N ∞
by averaging over 100,000 realizations of the pRSA algorithm as N ∞ .
= 1869.8 for β = 1.

N ∞)/N ∞. Using (3.13), we obtain N ∞

N ∞)/N ∞ .

p and N ∞
s

N ∞ .

app −

app −

app −

3.2 Special case β = 0

If β = 0, then the pRSA algorithm reduces to the adsorption of point-polymers and
1. Hence,
cross-polymers. The terms in the sum (2.18) are nonzero only if ξ(s) = ω(s)
(2.18) can be rewritten as

−

αω(s)−1,

for k = 1, 2, 3, . . . ,

(3.14)

Xs∈Qk

where
Qk is the set of all sequences s
each i
∈ {
number of distinct points in the sequence s

2, . . . , k

≡ {

}

there exists j < i such that (xi, yi)

(xj, yj)
}

k
j=1, such that (x1, y1) = (1, 1) and for
∈ Xxj ,yj . As before, ω(s) is the
∈ Qk. Using (3.14), we can rewrite (2.17) as

N (t) = M 2

∞

Xk=1

k

1
k!

t
M 2

(cid:18)

(cid:19)

1)k−1

(
−

αω(s)−1.

Xs∈Qk

(3.15)

Comparing formulas (3.3) and (3.15), we ﬁnd out only two diﬀerences:
Pk in (3.3) is
replaced by
Qk in (3.15) and β in (3.3) is replaced by α in (3.15). Consequently, taking
the Laplace transform of (3.15) and using the same method as in Section 3.1, we ﬁnd

12

(compare with (3.7))

N (t) = Ω

exp

1
(cid:18)

−

−

(cid:20)

t
M 2

where Ω(x) = M 2

∞

(
−

α)k−1 xk
k!

,

Hk

(3.16)

(cid:21)(cid:19)

Hk is the set of all sequences of k distinct points
2, . . . , k

where
(1, 1), and for each i
∈ {
of the nearest neighbours of (xj, yj), i.e. (xi, yi)
particular, the ﬁnal coverage of the lattice can be computed as

Xk=1
(cid:12)
(cid:12)
(cid:12)
k
j=1, such that (x1, y1) =
(xj, yj)
}
there exists j < i such that (xi, yi) is equal to one
In
∈ Xxj ,yj and (xi, yi)

= (xj , yj).

(cid:12)
(cid:12)
(cid:12)

}

{

N ∞

≡

lim
t→∞

N (t) = lim
x→1

Ω(x)

(3.17)

and other quantities of interest can be obtained by (2.1), (2.2) and (2.4). Thus, the
adsorption algorithm has been transformed to the problem of ﬁnding the numbers of
we can write Ω(x)
Hk, k = 1, 2, . . . . Once, we have the numbers
sequences in the sets
for any α and compute N (t), Np(t), Nc(t) and A(t) by (3.16), (2.1) and (2.2), provided
that the series in Ω(x) is convergent. It was pointed out in [6] that the convergence of
series (3.16) is slow for α = 1 and for x = 1. To overcome this diﬃculty, we could use
Shanks transformation or Pad´e approximants as in Section 3.1. This approach works in
general and we will use it in Section 4 where the general analysis of pRSA algorithm is
presented. Here, we present an alternative approach, rewriting series (3.16) in diﬀerent
variables. Several possibilities were shown and motivated in [6]. Here, we write Ω(x) as

|Hk|

Ω(x(z)) =

akzk,

where x =

z

3
1 + 2(1

0
Z

ξ)3 dξ.

−

∞

Xk=1

Let us deﬁne

(3.18)

(3.19)

To ﬁnd hk, one has to solve a ﬁnite combinatorial problem.
In this paper, we will
make use of the ﬁrst eight values of hk. They can be computed as follow h1 = 10000;
.
.
= 311048; and
= 125333; h6
h2 = 20000; h3 = 40000; h4
x(z) in (3.16). We
h8
diﬀerentiate the resulting series term by term eight times and we evaluate each derivative
at z = 0 to obtain:

.
= 459452. To ﬁnd coeﬃcients ak in (3.18), we substitute x

.
= 202222; h7

.
= 73333; h5

≡

αh2

a1 = h1
a2 = h1 −
a3 = 2h1/3
a4 = h1/6
a5 =
a6 =
−
a7 =
−
a8 = 1.852 αh2 −

−

2αh2 + α2h3
−
7αh2/3 + 3α2h3 −
α3h4
−
5αh2/3 + 5α2h3 −
4h1/15
−
26α3h4/3 + 5α4h5 −
11αh2/45 + 11α2h3/2
4h1/9
−
38α3h4/3 + 40α4h5/3
20h1/63 + 6αh2/5 + 53α2h3/15
−
13α2h3/30

63α3h4/5 + 145α4h5/6

4α3h4 + α4h5

−

α5h6

−

6α5h6 + α6h7
α7h8

−
19α5h6 + 7α6h7 −

−

(3.20)

hk = M 2

Hk
k!

.

(cid:12)
(cid:12)

(cid:12)
(cid:12)

13

6
z
0 [1 + 2(1
R

−

8

Ω(z) =

akzk

Let z be a solution of equation 1 = 3
z as 0.569). Moreover, let us denote

ξ)3]−1dξ (one can numerically estimate

(3.21)

Xk=1
where a1, . . . , a8 are given by (3.20). Then, using (3.18) and (3.16), we can approximate
number of attached polymers as

e

N (t)

Ω

z(t)

, where z(t) is given by 1

exp

≈

(cid:16)

(cid:17)

e

(3.22)
The results obtained by (3.22) for α = 1 and M = 100 are given in Figure 4(a). To
compute time evolution of N (t), we chose an equidistant mesh in z-variable in interval
[0, z] and evaluated
Ω by (3.21) at each z. The corresponding time t was computed by
(3.22), namely using the formula

t
M 2

−

(cid:20)

=

(cid:21)

0
Z

z(t)

3
1 + 2(1

ξ)3 dξ.

−

−

e

t =

M 2 ln

−

1
"

−

0
Z

z(t)

3
1 + 2(1

ξ)3 dξ

.

#

−

In Figure 4(a), we compare results obtained by approximation (3.22) and by stochastic
simulation of pRSA algorithm. We get a very good agreement between the theoretically
derived formula and simulation. The asymptotic coverage can be approximated as

N ∞

lim
t→∞

N (t)

≡

≈

Ω(z), N ∞

α

Ω(z),

and N ∞

(1

α)

Ω(z).

(3.23)

c ≈

p ≈

−

e

In Figure 4(b), we compare approximations of N ∞, N ∞
e
computed by (3.23)
with the results of stochastic simulations. We see that approximations (3.23) provide
good results for any α. We can estimate relative error between approximation N ∞
app and
exact value N ∞ as (N ∞
= 5 and
app −
(N ∞
= 0.14% for α = 1. Here, N ∞ can be computed by averaging over
many realizations of the pRSA algorithm as N ∞ .

N ∞)/N ∞. Using (3.23), we obtain N ∞

N ∞)/N ∞ .

= 3641 for α = 1.

p and N ∞
c

N ∞ .

app −

app −

e

In this section, we used transformation of variables (3.18) to accelerate the conver-
gence of series (3.16). This transformation was suggested in [6] for pRSA algorithm
with [α, β] = [1, 0], but our analysis shows that it can give good results for any α. The
problem with this approach in general is determining an appropriate change of variables.
An easier, and more systematic, approach is to use a Shanks transformation or Pad´e
approximants [15, 20, 19] as we did in Section 3.1, and as we will do for the general
analysis of the pRSA algorithm in Section 4.

4 General analysis of pRSA algorithm

To evaluate (2.17) for general α and β, we have to compute the quantities (2.18) for
k = 1, 2, 3, . . . . Direct evaluation of (2.18) would require solving diﬀerent combinatorial
problems (weighted sums over all sequences in the set
Pk) for diﬀerent values of α and
β. As in Section 3, we show that a suitable reordering of terms can transform the
set of combinatorial problems to only one combinatorial problem which can be solved

14

N(t)

(a)

4000

3000

2000

1000

β=0

∞

N

(b)

 

10000

8000

6000

4000

2000

0
0

0
 
0

0.5

α=1, β=0
series expansion
stochastic simulation

1
time

1.5

2
4
x 10

∞
N
c

∞
N
p

0.2

0.4

0.6

0.8

1

α

Figure 4: pRSA algorithm for β = 0. (a) Time evolution of N (t) given by (3.22) for
α = 1, β = 0 and M = 100 (dashed line). Ten realizations of stochastic simulation of
pRSA algorithm are plotted as thin solid lines. (b) N ∞, N ∞
c as obtained by
(3.23) (solid lines) for M = 100. We compare the approximate results with stochastic
simulation of pRSA algorithm (20 realizations, each realization plotted as a dot).

p and N ∞

independently of the values of α and β. Then the dependence of the number of attached
polymers and number of covered binding sites can be easily studied. To do that, we ﬁrst
Gk is the
Gk. Here, as before
use the Laplace transform to rewrite (2.17) in terms of
k
j=1, such that (x1, y1) = (1, 1), and for
set of all sequences of k distinct points
= (xj , yj).
∈ Sxj ,yj and (xi, yi)
each i
Following a similar analysis to that in Section 3.1, we derive (compare with (3.7))

there exists j < i such that (xi, yi)

(xj, yj)
}

2, . . . , k

∈ {

}

{

(4.1)

(4.2)

N (t) = Φ

exp

1
(cid:18)

−

−

(cid:20)

t
M 2

(cid:21)(cid:19)

where

Φ(x) = M 2

∞

(
−

1)k−1 xk
k!

[α + β]ξ(s)βk−ξ(s)−1,

Xk=1
where, as before, ξ(s) is the number of distinct points (xi, yi)
= (1, 1),
∈
∈ Xxj,yj . Let φk
j , j = 1, . . . , k, denote
satisfying that there exists j < i such that (xi, yi)
j. The numbers φk
∈ Gk, k = 1, 2, . . . , satisfying ξ(s) = k
the number of sequences s
j
−
for k = 1, 2, . . . , 8, can be directly computed and they are given in Table 1. Using the
deﬁnition of φk

j , formula (4.2) can be rewritten to

s, (xi, yi)

Xs∈Gk

Φ(x) = M 2

j [α + β]k−j βj−1.
φk

(4.3)

(

−

1)k−1 xk
k!

∞

Xk=1

k

j=1
X

Our task is to compute the sum of series (4.3) with reasonable precision, using only the
ﬁrst eight partial sums

sn(x) = M 2

j [α + β]k−j βj−1,
φk

n = 1, 2, . . . , 8.

(
−

1)k−1 xk
k!

n

Xk=1

k

j=1
X

15

6
6
φk
j
k = 1
k = 2
k = 3
k = 4
k = 5
k = 6
k = 7
k = 8

j = 1
1
4
24
176
1504
14560
156768
1852512 10603744 27833952 43206736 42818768 27137992 10289192 1852512

j = 3
–
–
24
424
6696
104752
1677680

j = 4
–
–
–
176
4776
104280
2135920

j = 5
–
–
–
–
1504
57640
1655336

j = 6
–
–
–
–
–
14560
745064

j = 7
–
–
–
–
–
–
156768

j = 2
–
4
40
424
4800
58368
761024

j = 8
–
–
–
–
–
–
–

Table 1: Table of values of φk

j for k = 1, 2, . . . , 8, j = 1, . . . , k.

(a)

5000

4000

3000

2000

1000

∞
N
p

∞
N
s

0
0

(b)

3000

2500

2000

1500

1000

500

0
0

α=0.5

∞

N

∞
N
c

β

∞

N

β=0.5

∞
N
c

∞
N
p

∞
N
s

α

0.1

0.2

0.3

0.4

0.5

0.1

0.2

0.3

0.4

0.5

Figure 5:
(a) pRSA algorithm for M = 100 and α = 0.5; (b) pRSA algorithm for
M = 100 and β = 0.5. In both cases, we present N ∞, N ∞
s as obtained by
(4.5) (solid lines). We compare the approximate series expansion results with stochastic
simulation of pRSA algorithm (20 realizations, each realization plotted as a dot).

c and N ∞

p , N ∞

To do that, we use Shanks transformation computed by Wynn’s algorithm (3.11) and
we approximate sum Φ(x) by term ε2
7(x), as in Section 3.1. Thus we aproximate number
of attached polymers as

N (t)

ε2
7

≈

(cid:16)

(cid:17)

x(t)

, where x(t) is given by x(t) = 1

exp

(4.4)

−

t
M 2

.

(cid:21)

−

(cid:20)

The asymptotic coverage can be approximated as

N ∞

7(1), N ∞
ε2

α ε2

7(1), N ∞

β ε2

7(1) and N ∞

≈

c ≈

s ≈

β) ε2

7(1). (4.5)

In Figure 5(a), we compare approximations of N ∞, N ∞
computed by
(4.5) with the results of stochastic simulations for α = 0.5. The same plots for β = 0.5
are given in Figure 5(b). We see that approximations (4.5) provide excellent results.

The results obtained by (4.4) for α = 0.5, β = 0.5 and M = 100 are given in Figure 6.
To compute time evolution of N (t), we chose an equidistant mesh in x-variable in interval
(0, 1) and evaluated ε2
7 by (3.11) at each x. Then the corresponding time t was computed

p ≈
p , N ∞
c

(1

α

−

−
and N ∞
s

16

 

A(t)

N(t)

(a)

2500

2000

1500

1000

500

0
 
0

(b)

 

10000

8000

6000

4000

2000

0
 
0

α=0.5, β=0.5

series expansion
stochastic simulation

1

2

time

3
4
x 10

α=0.5, β=0.5

series expansion
stochastic simulation

1

2

time

3
4
x 10

Figure 6: pRSA algorithm for α = 0.5, β = 0.5 and M = 100. (a) Time evolution
of N (t) given by (4.4) (dashed line). Ten realizations of stochastic simulation of pRSA
algorithm are plotted as thin solid lines. (b) Time evolution of A(t) given by (4.4) and
(2.2) (dashed line). Ten realizations of stochastic simulation of pRSA algorithm are
plotted as thin solid lines.

by (4.4). To compute A(t) we used formula (2.2) where the time derivative of N (t) was
approximate by the backward-in-time ﬁnite diﬀerence of N (t). In Figure 6, we compare
results obtained by approximation (4.4) and by stochastic simulation of pRSA algorithm.
We see that we get a very good agreement between the theoretically derived formula
and simulation. Finally, we present the time evolution of N (t) and A(t) for α = 0.8
and β = 0.1 which is the situation shown in the illustrative computation in Figure 2.
In Figure 7, we compare results obtained by (4.4) with results obtained by stochastic
simulation of pRSA algorithm. Again, we obtained an excellent agreement between the
series expansion results and the stochastic simulation of the pRSA algorithm.

5 Discussion

In this paper we studied random sequential adsorption to the two-dimensional lattice.
Our motivation was chemisorption from polydisperse solution of polymers. We gener-
alized the operator formalism of [1, 5], derived series expansion results and presented
eﬃcient methods to accelerate their convergence. In Section 3.1, we used classical meth-
ods for accelerating convergence of slowly converging series.
In Section 3.2, we also
presented results obtained by a more specialized transformation of variables [6]. In both
cases, the theoretical results compare well with the results of stochastic simulation of
the pRSA algorithm.

We assumed that the attached polymer can eﬀectively shield a circle on the surface
with radius r < 2h where h is the average distance between neighbouring binding sites.
We worked with the rectangular mesh of binding sites to enable the reformulation of
the problem in terms of the RSA on the rectangular lattice. One should view this
simpliﬁcation as a reasonable approximation of the problem where binding sites are
more or less uniformly distributed on the surface. The restriction r < 2h can be also

17

 

A(t)

3000

N(t)

(a)

2000

1000

0
 
0

(b)

 

10000

8000

6000

4000

2000

0
 
0

α=0.8, β=0.1

series expansion
stochastic simulation

1

2

time

3
4
x 10

α=0.8, β=0.1

series expansion
stochastic simulation

1

2

time

3
4
x 10

Figure 7: pRSA algorithm for α = 0.8, β = 0.1 and M = 100. (a) Time evolution
of N (t) given by (4.4) (dashed line). Ten realizations of stochastic simulation of pRSA
algorithm are plotted as thin solid lines. (b) Time evolution of A(t) given by (4.4) and
(2.2) (dashed line). Ten realizations of stochastic simulation of pRSA algorithm are
plotted as thin solid lines.

relaxed and the operator formalism could be generalized to the case of a mixture of longer
polymers too. However, one should have in mind that for larger r, the assumption that
the “wiggling tails” of polymers can overlap has to be modiﬁed to take into account
the higher probability to ﬁnd the polymer chain close to the binding site; see [2] for the
general discussion of the polymer dynamics.

Two-dimensional adsortption is more complicated to study because there is no sim-
[4] or
ple analogy of the exact approach which is available in one-dimension (see e.g.
the integro-diﬀerential evolution equation framework which was used in [3]). More pre-
cisely, one can formally write an evolution equation for the process (e.g. the master
equation denoted (2.9) in this paper) but it can be solved only by various approxima-
tion techniques [4]. For example, Nord et al [12] study adsorption of dimers or larger
connected sites of objects to two-dimensional lattice. They write a master equation in
hierarchic form for conditional probabilities that a conditioned conﬁguration of mesh
points is empty given that some neighbouring conditioning sites are empty. Using a
series of hierarchic truncation schemes [17], they were able to estimate dynamics and
saturating coverage of the adsorption process. The operator formalism presented is a
useful alternative to methods based on approximate evolution equations.

The theoretical treatment of irreversible polymer adsorption is given in [13]. They
give a more detailed picture than is studied in this paper, by studying the structure of
the resulting nonequilibrium layer in terms of the density proﬁles, and loop and contact
fraction distributions. Adsorption of whole polymers to the surface, modelled as a self-
avoiding random walk, was done in [18] where the results of Monte Carlo simulations
are presented. It has been found that the coverage to its jamming limit is described
by a power law t−γ where an exponent γ depends on the chain length. In our case,
we modelled the adsorption of polymers as adsorption of disks to the surface where
the binding sites were arranged into the rectangular lattice. In particular, the presented

18

algorithm can be viewed as a generalization of the classical lattice RSA models. Random
sequential adsorption has been subject of the intensive research for the last sixty years.
The reader can ﬁnd more details about the RSA in review articles [4] and [16].

References

[1] R. Dickman, J. Wang, and I. Jensen, Random sequential adsorption: series and
virial expansions, Journal of Chemical Physics 94 (1991), no. 12, 8252–8257.

[2] M. Doi and S. Edwards, The Theory of Polymer Dynamics, Oxford University

Press, 1986.

[3] R. Erban, J. Chapman, K. Fisher, I. Kevrekidis, and L. Seymour, Dynamics of
polydisperse irreversible adsorption: a pharmacological example, 22 pages, to appear
in Mathematical Models and Methods in Applied Sciences (M3AS), available as
arXiv.org/physics/0602001, 2006.

[4] J. Evans, Random and cooperative sequential adsorption, Reviews of Modern

Physics 65 (1993), no. 4, 1281–1329.

[5] Y. Fan and J. Percus, Asymptotic coverage in random sequential adsorption on a

lattice, Physical Review A 44 (1991), no. 8, 5099–5103.

[6]

, Use of model solutions in random sequential adsorption on a lattice, Phys-

ical Review Letters 67 (1991), no. 13, 1677–1680.

[7] K. Fisher, Personal communication, 2005.

[8] K. Fisher, Y. Stallwood, N. Green, K. Ulbrich, V. Mautner, and Seymour L.,
Polymer-coated adenovirus permits eﬃcient retargeting and evades neutralising an-
tibodies, Gene therapy 8 (2001), no. 5, 341–348.

[9] M. Himmelhaus, T. Bastuck, S. Tokumitsu, M Grunze, L. Livadaru, and H.J.
Kreuzer, Growth of a dense polymer brush layer from solution, Europhysics let-
ters 64 (2003), no. 3, 378–384.

[10] I. Kevrekidis, C. Gear, J. Hyman, P. Kevrekidis, O. Runborg, and K. Theodoropou-
los, Equation-free, coarse-grained multiscale computation: enabling microscopic
simulators to perform system-level analysis, Communications in Mathematical Sci-
ences 1 (2003), no. 4, 715–762.

[11] S. Milner, T. Witten, and M. Cates, Theory of the grafted polymer brush, Macro-

molecules 21 (1988), 2610–2619.

[12] R. Nord and J. Evans, Irreversible immobile random adsorption of dimers, trimers,
... on 2D lattices, Journal of Chemical Physics 82 (1985), no. 6, 2795–2810.

[13] B. O’Shaughnessy and D. Vavylonis, Irreversibility and polymer adsorption, Phys-

ical Review Letters 90 (2003), no. 5, 056103.

[14]

, Non-equilibrium in adsorbed polymer layers, Journal of Physics: Condensed

Matter 17 (2005), R63–R99.

19

[15] D. Shanks, Non-linear transformations of divergent and slowly convergent se-

quences, J. Math. and Phys. 34 (1955), 1–42.

[16] J. Talbot, G. Tarjus, P. Van Tassel, and P. Viot, From car parking to protein
adsorption: An overview of sequential adsorption processes, Colloids and Surfaces
A: Physicochemical and Engineering Aspects 165 (2000), 287–324.

[17] K. Vette, T. Orent, D. Hoﬀman, and R. Hansen, Kinetic model for dissociative
adsorption of a diatomic gas, Journal of Chemical Physics 60 (1974), no. 12, 4854–
4861.

[18] J. Wang and R. Pandey, Kinetics and jamming coverage in a random sequential
adsorption of polymer chains, Physical Review Letters 77 (1996), no. 9, 1773–1776.

[19] E. Weniger, Nonlinear sequence transformations for the acceleration of convergence

and the summation of divergent series, Comput. Phys. Rep. 10 (1989), 189–371.

[20] P. Wynn, On a device for computing the em(sn) transformation, Math. Tables Aids

Comput. 10 (1956), 91–96.

[21] R. Zajac and A. Chakrabarti, Kinetics and thermodynamics of end-functionalized
polymer adsorption and desorption processes, Physical Review E 49 (1994), no. 4,
3069–3078.

20

