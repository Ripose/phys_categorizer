0
0
0
2

 
t
c
O
2
2

 

 
 
]
h
p
-
d
e
.
s
c
i
s
y
h
p
[
 
 

1
v
3
5
0
0
1
0
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Maple procedures in teaching the canonical

formalism of general relativity

Dumitru N. Vulcanova and Gabriela Ciobanub

a) The West University of Timi¸soara

Theoretical and Computational Physics Department

V. Pˆarvan no. 4 Ave., 1900 Timi¸soara, Romania

and

b) “Al.I Cuza” University of Ia¸si
Theoretical Physics Department

Copou no. 11 Ave., 6600 Ia¸si, Romania

Abstract

We present some Maple procedures using the GrTensorII package
for teaching purposes in the study of the canonical version of the
general relativity based on the ADM formalism

1 Introduction

The use of computer facilities cam be an important tool for teaching
general relativity. We have experienced several packages of procedures,
(in REDUCE + EXCALC for algebraic programming and in Math-
ematica for graphic visualizations) which fulﬁll this purpose ([10]).
In this article we shall present some new procedures in MapleV using
GrTensorII package ([11]) adapted for the canonical version of the gen-
eral relativity (in the so called ADM formalism based on the 3+1 split
of spacetime). This formalism is widely used ([8],[9]) in the last years
as a major tool in numerical relativity for calculating violent processes
as, for example the head-on collisions of black holes, massive stars or
other astrophysical objects. Thus we used these computer procedures

1

in the process of teaching the canonical formalism as an introductory
part of a series of lectures on numerical relativity for graduated stu-
dents. The next section of the article presents shortly the notations
and the main features of the canonical version of the general relativity.
Early attemps in using computer algebra (in REDUCE) for the ADM
formalism can be detected in the literature ([3], [6],[7]). Obviously we
used these programs in producing our new procedures for Maple +
GrTensorII package, but because there are many speciﬁc features we
shall present in some detail these procedures in the section 3 of the
article. The last section of the article is dedicated to the conclusions
pointed out by running the Maple procedures presented here and some
future prospectives on their usage toward the numerical realativity.

2 Review of the canonical formalism
of general relativity

Here we shall use the speciﬁc notations for the ADM formalism [1],[2];
for example latin indices will run from 1 to 3 and greek indices from
0 to 3. The starting point of the canonical formulation of the general
relativity is the (3+1)-dimensional split of the space-time produced
by the split of the metric tensor :

(4)gαβ = 


(4)goo

(4)gio

(4)goj

(4)gij




= 


NkN k − N 2

Ni

Nj

gij




(1)

where gij is the riemannian metric tensor of the three-dimensional
spacelike hypersurfaces at t = const. which realize the spacetime
foliation. Here N is the ”lapse” function and N i are the components
of the ”shift” vector [2].

The Einstein vacuum ﬁeld equations now are (denoting by ”·” the

time derivatives) :

˙gij = 2N g−1/2[πij −

1
2

gij πk

k] + Ni/j + Nj/i

(2)

˙πij = −N g1/2[Rij −

gij R] +

1
2

1
2

N g−1/2gij[πklπkl −

1
2

(πk

k)2]

2

− 2N g−1/2[πimπj

m −

πij πk

1
2

+ [πij N m]/m − N i

k] + g1/2[N /ij − gij N /m
/mπmj − N j

/mπmi

/m]

(3)

where πij are the components of the momenta canonically conjugate
to the gij’s.

In the above formulas we denoted by ”/” the three-dimensional
covariant derivative deﬁned with gij using the components of the three-
dimensional connection [2] :

Γi

jk =

1
2

gim(gmj,k + gmk,j − gjk,m)

The Ricci tensor components are given by

Rij = Γk

ij,k − Γk

ik,j + Γk

ijΓm

km − Γk

imΓm
jk

(4)

(5)

The initial data on the t = const. hypersurface are not independent
because they must satisfy the constraint equations, which complete
the Einstein equations

H = −√g{R + g−1[

1
2

(πk

k)2 − πij πij]} = 0
/j = 0

(6)

Hi = −2πij

(7)
where H is the super-hamiltonian, Hi the super-momentum and g is
the determinant of the three-dimensional metric tensor gij.
The action functional in Hamiltonian form for a vacuum space

-time can thus be written as ([1],[2]) :

S = Z dtZ (πij ˙gij − NH − NiHi)ω1ω2ω3

(8)

where the ωi’s are the basis one-forms. Thus the dynamic equations
(2) and (3) are obtained by diﬀerentiating S with respect to the canon-
ical conjugate pair of variables (πij , gkm).

3 Maple + GrTensorII procedures

Here we shall describe brieﬂy the structure and the main features
of the Maple procedures for the canonical formalism of the general

3

relativity as described in the previous section. Two major parts of
the programs can be detected : one before introducing the metric of
the spacetime used (consisting in several deﬁnitions of tensor objects
which are common to all spacetimes) and the second one, having line-
commands speciﬁc to each version.

The ﬁrst part of the program starts after initalisation of the GrTen-

sorII package (grtw();) and has mainly the next lines :

> grdef(‘tr := pi{^i i}‘);
> grdef(‘ha0:=-sqrt(detg)*(Ricciscalar+

(1/detg)*((1/2)*(tr)^2-pi{i j}*pi{ ^i ^j }))‘);

> grdef(‘ha{ ^i }:=-2*(pi{ ^i ^j ;j}-pi{ ^i ^j }*Chr{ p j ^p })‘);
> grdef(‘derge{ i j }:=2*N(x,t)*(detg)^(-1/2)*(pi{ i j } -

(1/2)*g{ i j}*tr)+Ni{ i ;j } + Ni{ j ;i }‘);

> grdef(‘Ndd{ ^m j }:= Nd{ ^m ;j }‘);
> grdef(‘bum{ ^i ^j ^m}:=pi{ ^i ^j }*Ni{ ^m }‘);
> grdef(‘bla{ ^i ^j }:=bum{ ^i ^j ^m ;m }‘);
> grdef(‘derpi{ ^i ^j }:=

-N(x,t)*(detg)^(1/2)*(R{ ^i ^j }-(1/2)*g{ ^i ^j }*Ricciscalar)+

(1/2)*N(x,t)*(detg)^(-1/2)*g{ ^i ^j }*(pi{ ^k ^l
(1/2)*(tr)^2)-2*N(x,t)*(detg)^(-1/2)*(pi{ ^i ^m }*pi{ ^j m }-
(1/2)*pi{ ^i ^j }*tr)+ (detg)^(1/2)*(Ndd{ ^i ^j }-g{ ^i ^j }*

}*pi{ k l }-

Ndd{ ^m m }) + bla{ ^i ^j } - Ni{ ^i ;m }*pi{ ^m ^j }-
Ni{

^j ;m }*pi{ ^m ^i }‘);

Here ha0 and ha{ ˆ i } represents the superhamiltonian and the
supermomentum as deﬁned in eqs. (6) and (7) respectively and tr
is the trace of momentum tensor density πij - which will be deﬁned
in the next lines of the program. Here N(x,t)represents the lapse
function N . Also, derge{ i j } represents the time derivatives of the
components of the metric tensor, as deﬁned in eq. (2) and derpi{ˆi ˆ
j } the time derivatives of the components of the momentum tensor
πij as deﬁned in eq. (3).

The next line of the program is a speciﬁc GrTensorII command
for loading the spacetime metric. Here Maple loads a ﬁle (previously
generated) for introducing the components of the metric tensor as
functions of the coordinates. We also reproduced here the output of
the Maple session showing the metric structure of the spacetime we
introduced.

> qload(‘Cyl_din‘);

4

Default spacetime = Cyl_din
For the Cyl_din spacetime:

Coordinates

x(up)

a

x

= [x, y, z]

Line element

2

2

ds = exp(gamma(x, t) - psi(x, t)) d x

2

2

2

+ R(x, t) exp(-psi(x, t)) d y

+ exp(psi(x, t)) d z

As is obvious we introduced above the metric for a spacetime with
cylindrical symmetry, an example we used for teaching purposes being
a well known example in the literature ([5]). In natural output this
metric has the form :

gij = 


eγ−ψ

0
0

0

R2e−ψ

0

0
0
eψ




(9)

in cylindrical coordinates x, y, z with x ∈ [0,∞), y ∈ [0, 2π), z ∈
(−∞, +∞) where R, ψ and γ are functions of x and t only.
After the metric of the spacetime is established the next sequence
of the programm just introduce the components of the momentum
tensor πij as

> grdef(‘Nd{ ^ m } := [diff(N(x,t),x), 0, 0]‘);
> grdef(‘Ni{ ^i } := [N1(x,t), N2(x,t), N3(x,t)]‘);
> grdef(‘vi1{^i}:=[pig(x,t)*exp(psi(x,t)-gamma(x,t)),0,0]‘);
> grdef(‘vi3{^i}

:=[0,0,exp(-psi(x,t))*(pig(x,t)+(1/2)*R(x,t)*pir(x,t)+

pip(x,t))]‘);

> grdef(‘vi2{^i}:=[0,(2*R(x,t))^(-1)*pir(x,t)*exp(psi(x,t)),0]‘);
> grdef(‘pi{ ^i ^j } :=

vi1{ ^i }*kdelta{^j $x}+vi2{ ^i }*kdelta{ ^j$y }+
vi3{ ^i }*kdelta{^j $z}‘);

> grcalc(pi(up,up));
> grdisplay(pi(up,up));

5

Here Ni{ ˆ i } represents the shift vector N i and the other objects
(Nd, vi1, vi2 and vi3) represent intermediate vectors deﬁned in order
to introduce the momenum pi{ ˆ i ˆ j } having the form :

πij = 


πγeψ−γ

0
0

0

1
2R πReψ

0

0
0
e−ψ(πγ + 1
2 RπR + πψ)




(10)

In the program we denoted πγ, πR and πψ with pig, pir and pip,
respectively. The momentum components are introduced in order that
the dynamic part of the action of the theory be in canonical form, that
˙gij πij = πγ ˙γ + πψ ˙ψ + πR ˙R. The next lines of the programm check
is :
if this condition is fullﬁled :

> grdef(‘de1{ i }:=[diff(grcomponent(g(dn,dn),[x,x]),t),0,0]‘);
> grdef(‘de2{ i }:=[0,diff(grcomponent(g(dn,dn),[y,y]),t),0]‘);
> grdef(‘de3{ i }:=[0,0,diff(grcomponent(g(dn,dn),[z,z]),t)]‘);
> grdef(‘ddgt({ i j }:=

de1{ i }*kdelta{j $x}+de2{ i }*kdelta{ j$y }+
de3{ i }*kdelta{ j $z}‘);

> grcalc(ddgt(dn,dn));
> grdef(‘act:=pi{ ^i ^j }*ddgt{ i j }‘);
> grcalc(act); gralter(act,simplify); grdisplay(act);

By inspecting this last output from the Maple worksheet, the user can
decide if it is necessary to rediﬁne the components of the momentum
tensor or to go further. Here the components of the momentum tensor
were calculated by hand but, of course a more experienced user can try
to introduce here a sequence of commands for automatic calculation of
the momentum tensor components using the above condition, through
an intensive use of solve Maple command.

Now comes the must important part of the routine, dedicated to

calculations of diﬀerent objects previously deﬁned :

> grcalc(ha0); gralter(ha0,simplify);
> grdisplay(ha0);
> grcalc(ha(up)); gralter(ha(up),simplify);
> grdisplay(ha(up));
> grcalc(derge(dn,dn)); gralter(derge(dn,dn),simplify);
> grdisplay(derge(dn,dn));
> d1:=exp(-psi(x,t))*grcomponent(derge(dn,dn),[z,z])+exp(psi(x,t)-

6

gamma(x,t))*grcomponent(derge(dn,dn),[x,x]);

> simplify(d1);
> d2:=(1/(2*R(x,t)))*exp(psi(x,t))*grcomponent(derge(dn,dn),[y,y])+
(1/2)*R(x,t)*exp(-psi(x,t))*grcomponent(derge(dn,dn),[z,z]);

> simplify(d2);
> d3:=exp(-psi(x,t))*grcomponent(derge(dn,dn),[z,z]);
> simplify(d3);
> grcalc(derpi(up,up)); gralter(derpi(up,up),simplify);
> grdisplay(derpi(up,up));
> f1 := exp(gamma(x,t)-psi(x,t))*grcomponent(derpi(up,up),[x,x])-
pig(x,t)*(d3-d1);

> simplify(f1);
> f2:= 2*R(x,t)*exp(-psi(x,t))*grcomponent(derpi(up,up),[y,y])+
(1/R(x,t))*d2*pir(x,t)-pir(x,t)*d3;

> simplify(f2);
> f3 := exp(psi(x,t))*grcomponent(derpi(up,up),[z,z])+d3*(pig(x,t)+

(1/2)*R(x,t)*pir(x,t)+pip(x,t))-f1-(1/2)*R(x,t)*f2-

(1/2)*pir(x,t)*d2;

> simplify(f3);

This is a simple series of alternation ofgrcalc, gralter and grdisplay
commands for obtainig the superhamiltonian, supermomentum and
the dynamic equations for the theory. d1 ... d3 and f1 ...
f3 are
the time derivatives of the dynamic variables,
˙πR,
˙πψ respectively. Denoting with ”′” the derivatives with respect to r
we display here the results for the example used above (cylindrical
gravitational waves) :

˙ψ and ˙πγ,

˙γ,

˙R,

H0 = e

ψ−γ

2 (2R′′ − R′γ ′ +

1
2

(ψ′)2R − πγπR +

1
2R

(πψ)2) = 0

H1 = Hr = eψ−γ(−2π′

γ + γ ′πγ + R′πR + ψ′πψ) = 0

;

H2 = H3 = 0

˙γ = N 1γ ′ + 2N 1′ − e

ψ−γ

2 N πR

;

˙R = N 1R′ − e

ψ−γ

2 N πγ

˙ψ = N 1ψ′ +

1
R

e

ψ−γ

2 N πψ

;

˙πγ = N 1π′

γ + N 1′πγ − e

ψ−γ

2 (R′N ′ +

1
2

R′ψ′N −

1
4

ψ′2RN +

1
2

N πγπR −

1
4R

N π2
ψ)

7

˙πR = N 1π′

R + N 1′πR + e

ψ−γ

2 (γ ′N ′ − 2N ′′ − 2N ′ψ′ +

1
2

γ ′ψ′N − ψ′′N − ψ′2 +

1
2R

N π2
ψ)

˙πψ = N 1π′

ψ + N 1′πψ + e

ψ−γ

2 (RN ′ψ′ − R′′N +

1
2

N R′γ ′ + R′ψ′N −

1
2

γ ′ψ′N R

+ ψ′′RN +

ψ′2RN +

1
4

1
2

N πRπγ −

1
4R

N π2
ψ)

These are the well-known results reported in ([5]) or ([6]).

One of the important goals of the canonical formalism of the gen-
eral relativity (which constitutes the “kernel” of the ADM formalism)
is the reductional formalism. Here we obtain the true dynamical sta-
tus of the theory, by reducing the number of the variables through
solving the constraint equations. This formalism is applicable only
to a restricted number of space-time models, one of them being the
above cylindrical gravitational waves model. Unfortunately only a
speciﬁc strategy can be used in every model. Thus the next lines of
our program must be rewritten speciﬁcally in every case. Here, for
teaching purposes we present our example of cylindrical gravitational
wave space-time model. Of course we enccourage the student to apply
his own strategy for other examples he dares to calculate.

In our example of cylindrical gravitational waves, the reductional
strategy as described in ([5]) starts with the usual rescaling of H and
Hi to ¯H and ¯Hi by
¯H = e
wich produce the next sequence of Maple+GrTensorII commands :

2 N ; ¯H1 = eγ−ψH1 ; ¯N 1 = eψ−γ N 1

ψ−γ

γ−ψ

2 H ; ¯N = e

> grdef(‘aha0:=sqrt(exp(gamma(x,t)-psi(x,t)))*ha0‘);
> grdef(‘aha{ ^j } := exp(gamma(x,t)-psi(x,t))*ha{ ^j }‘);
> grdef(‘an:=sqrt(exp(psi(x,t)-gamma(x,t)))*n(x,t)‘);
> grdef(‘ani{ ^i } := exp(psi(x,t)-gamma(x,t))*ni{ ^i }‘);

The canonical transformation to the new variables, including Kuchar’s
”extrinsic time”, deﬁned by :

T = T (∞) + Z r

∞

(−πγ)dr

, ΠT = −γ ′ + [ln ((R′)2 − (T ′)2)]′

R = R , ΠR = πR + [ln (

are introduced with :

R′ + T ′

R′ − T ′ )]′

8

> pig(x,t):=-diff(T(x,t),x);

> pir(x,t):=piR(x,t) - diff(ln((diff(R(x,t),x)+diff(T(x,t),x))/
(diff(R(x,t),x)-diff(T(x,t),x))),x);

and speciﬁc substitutions in the dynamic objects of the theory :

> grmap(ha0, subs , diff(gamma(x,t),x)=
diff( ln( (diff(R(x,t),x))^2- (diff(T(x,t),x))^2 ),x)-piT(x,t),‘x‘);
> grcalc(ha0); gralter(ha0,simplify);
> grdisplay(ha0);
> grmap(ha(up), subs , diff(gamma(x,t),x)=diff( ln( (diff(R(x,t),x))^2-

(diff(T(x,t),x))^2 ),x)-piT(x,t),‘x‘);

> gralter(ha(up),simplify);
> grdisplay(ha(up));
> grcalc(aha0);
> grmap(aha0, subs , diff(gamma(x,t),x)=diff( ln( (diff(R(x,t),x))^2-

(diff(T(x,t),x))^2 ),x)-piT(x,t),‘x‘);

> gralter(aha0,simplify,sqrt);
> grdisplay(aha0);
> grcalc(aha(up));
> grmap(aha(up), subs , diff(gamma(x,t),x)=diff( ln( (diff(R(x,t),x))^2-

(diff(T(x,t),x))^2 ),x)-piT(x,t),‘x‘);

> gralter(aha(up),simplify);
> grdisplay(aha(up));
> grmap(act, subs , diff(gamma(x,t),x)=diff( ln( (diff(R(x,t),x))^2-

(diff(T(x,t),x))^2 ),x)-piT(x,t),‘x‘);

> grcalc(act); grdisplay(act);

Thus the action yields (modulo divergences) :

S = 2πZ ∞

−∞

dtZ ∞

0

dr(ΠT ˙T + ΠR ˙R + πψ ˙ψ + πχ ˙χ − ¯N ¯H − ¯N1 ¯H1)

where :

¯H = R′ΠT + T ′ΠR +

1
2

R−1π2

ψ +

Rψ′2 +

1
2

1
4

R−1π2

χ + Rχ′2

¯H1 = T ′ΠT + R′ΠR + ψ′πψ + χ′πχ

9

Solving the constraint equations ¯H = 0 and ¯H1 = 0 for ΠT and ΠR
and imposing the coordinate conditions T = t and R = r we obtain
ﬁnally :

S = 2π Z +∞

−∞

dT Z +∞

0

dR[πψψ,T + πχχ,T −

1
2

from the next sequence of programm lines :

(R−1π2

χ + R−1χ′2)]

ψ + Rψ2

,R + Rπ2

> R(x,t):=x; T(x,t):=t; grdisplay(aha0);
> solve(grcomponent(aha0),piT(x,t));
> piT(x,t):= -1/2*(x^2*diff(psi(x,t),x)^2+pip(x,t)^2)/x;
> eval(piR(x,t));
> piR(x,t):=-diff(psi(x,t),x)*pip(x,t); piR(x,t);
> grdisplay(aha0); grdisplay(aha(up));
> piT(x,t);

2 /d

\2

2

x |-- psi(x, t)| + pip(x, t)

\dx

/

- 1/2 -------------------------------

> piR(x,t);

/d

x

\

-|-- psi(x, t)| pip(x, t)

\dx

/

> grcalc(act); grdisplay(act);

For the Cyl_din spacetime:

act

/d

\

act = |-- psi(x, t)| pip(x, t)

\dt

/

> grdef(‘Action:=act+piT(x,t)*diff(T(x,t),t)+piR(x,t)*diff(R(x,t),t)‘);
> grcalc(Action);gralter(Action,factor,normal,sort,expand);

10

> grdisplay(Action);

For the Cyl_din spacetime:

Action

Action = - 1/2 x |-- psi(x, t)| + |-- psi(x, t)| pip(x, t)

/d

\2

/d

\

\dx

/

\dt

/

2

pip(x, t)

- 1/2 ----------

x

> grdef(‘Ham:=piT(x,t)*diff(T(x,t),t)+piR(x,t)*diff(R(x,t),t)‘);
> grcalc(Ham); gralter(Ham,expand);
> grdisplay(Ham);

For the Cyl_din spacetime:

Ham

2

/d

\2

pip(x, t)

Ham = - 1/2 x |-- psi(x, t)| - 1/2 ----------

\dx

/

x

4 Conclusions. Further improuvements

We used the programms presented above in the computer room with
the students from the graduate course on Numerical Relativity. The
main purpose was to introduce faster the elements of the canonical
version of relativity with the declared objective to skip the long and
not very straitforward hand calculations necessary to process an entire
example of spacetime model. We encouraged the students to try to
modify the procedures in order to compute new examples.

The major conclusion is that this method is indeed usefull for an
attractive and fast teaching of the methods involved in the ADM for-

11

malism. On the other hand we can use and modify these programs for
obtaining the equations necessary for the numerical relativity. In fact
we intend to expand our Maple worksheets for the case of axisymmet-
ric model (used in the numerical treatement of the head-on collision
of black-holes). Of course, for numerical solving of the dynamic equa-
tions obtained here we need more improuvements of the codes for
paralel computing and more sophisticated numerical methods. But
this will be the object of another series of articles.

References

[1] Arnowitt R., Deser S., Misner C.W., Gravitation - an introduc-

tion to current research ed. by L. Witten, New York, 1962

[2] Misner C.W., Thorne K.S., Wheeler J.A., Gravitation, Freeman,

San Francisco, 1973

[3] Moussiaux A., Tombal P., Demaret J., G.R.G., Vol. 15, No. 3, p.

209, 1983

[4] Ryan M.,Hamiltonian Cosmology, Lectures Notes in Physics, Vol.

13, Springer, Berlin, 1972

[5] Kuchar K., Phys. Rev.D, Vol. 4, No. 4, p. 955, 1971

[6] Vulcanov D., Intern.J. of Modern Phys., Vol. 5, No. 6, 1994, p.

973

[7] Vulcanov D., Intern.J. of Modern Phys., Vol. 6, No. 3, 1995, p.

317

[8] Hehl F.W., Puntingam R.A., Ruder H. (editors) - Relativity and
Scientiﬁc Computing, Springer Verlag, Berlin, 1996 (see also the
references cited here)

[9] Laguna P., The Grand Chalange in Computational Gravitation :
Collision of Black-Holes, in Vulcanov D.N., Cot˘aescu I.I (editors),
- Gravity, Theoretical Physics and Computers, Proceedings of the
VI-th conference in General Relativity and Gravitation, Bistrit¸a,
Romania, 1996, Mirton Publ.House, Timi¸soara, 1997 (see also
the references cited here)

[10] Vulcanov D.,Ghergu F., The use of algebraic programming in
teaching general relativity, submitted to Computing in Science
and Engineering, 1999

12

[11] Musgrave P., Pollney D., Lake K,. GrTensorII Release 1.50,
july 1996,

Queen’s Univ. of Kingston, Ontario, Canada,
http://astro.queensu.ca∼grtensor/

13

