4
0
0
2
 
r
p
A
 
8
2
 
 
]
h
p
-
d
e
.
s
c
i
s
y
h
p
[
 
 
1
v
4
3
1
4
0
4
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

An Introduction to Logical Operations on Classical
and Quantum Bits ∗

F.L. Marquezino and R.R. Mello J´unior

CBPF - Centro Brasileiro de Pesquisas F´ısicas
CCP - Coordena¸c˜ao de Campos e Part´ıculas
Av. Dr. Xavier Sigaud, 150
22.290-180 Rio de Janeiro (RJ) Brazil
(CNPq Fellows/PIBIC)
franklin@serraon.com.br, rui.rodrigues@inf.ucp.br

April, 2004

Abstract

This article is a short review on the concept of information. We
show the strong relation between Information Theory and Physics,
and the diﬀerences between classical and quantum information, with
emphasis in their manipulation through logical gates.This paper is in-
tended to be read by non-specialists and undergraduate students of
Computer Science, Mathematics and Physics, with knowledge in Lin-
ear Algebra and Quantum Mechanics.
Keywords: Logical Gates, Quantum Computation, Computer Sci-
ence.

1

Introduction

In a previous paper [1], we expose the physical character of information,
making it clear that every information must be represented by a physical
system. However, another question that may arise is how to interfere on the
information being represented? This subject will be studied in this article,
under the viewpoints of both Classical and Quantum Computation.

Sections 2 and 3 give an introduction to two diﬀerent models of com-
putation. The former is the traditional circuit model, compatible with the
idea of Turing machines, but more adequate to the purposes of this paper.
∗The authors are undergraduate students of Computer Science at the Catholic Univer-

sity of Petr´opolis. They are also members of Grupo de F´ısica Te´orica Jos´e Leite Lopes.

1

The latter is the corresponding concept that uses properties of Quantum
Mechanics, instead of Classical Mechanics.

As soon as we learn how to perform simple operations with a certain
physical system, it is very important to learn how to keep these operations
reliable.
In Section 4, we brieﬂy introduce classical and quantum error
detection and correction.

Here, we assume that the reader already has a certain backgroung on
Quantum Information. If necessary, we recommend the reading of [1] or [2]
before starting reading Section 3.

2 On classical circuits

The Turing machine is an important concept, developed by the british math-
ematician Alan Turing [3]. Any calculation using a classical physical system,
can be carried out by a Turing machine, according to the Church-Turing
thesis [4]:

“Any process that is eﬀective or algorithmic in nature deﬁnes a
mathematical function belonging to a speciﬁc well-deﬁned class,
known variously as the recursive, the λ-deﬁnable, or the Turing
computable functions.”

Here, we use a diﬀerent, yet equivalent formalism, which is the circuit
of gates and wires. The proof for the equivalence between Turing machines
and circuits can be achieved through the notion of uniform circuit family.
The reader may found this proof in many books on Computer Science or
Quantum Computation, including [5].

We shall begin our study of the classical circuits by introducing the
m is called a
0, 1
}

notion of Boolean functions. A function f :
Boolean function, due to the english mathematician George Boole.

n
0, 1
}
{

→ {

Interesting information on this subject can be found in [6], specially in
the section on Combinational Logics. Another good reference is the book
by Andrew Tanenbaum [7].

We can deﬁne a Boolean function f (x) which is equal to 0 if x = 1 and
is equal to 1 if x = 0. This function corresponds to the logical operation
NOT. We can write the result of f (x) as

x or ¯x.

Another interesting function should be f (x, y), which is equal to 1 if
x = y = 1, and 0 otherwise. This is the logical gate AND. Similarly, we
could deﬁne a function f (x, y), equal to 0 if x = y = 0 and 1 otherwise, which
corresponds to the logical gate OR. We can also write an AND operation
as a product and an OR operation as a sum. For instance, f (x, y) = xy,
meaning “x and y”, or f (x, y) = x + y, meaning “x or y”.

¬

2

These functions can be represented by a table, called the truth table.
See Tables 1, 2 and 3, for the functions NOT, AND and OR, respectively.
We can build any circuit with these three logical operations.

Table 1: Logical operation NOT.

Table 2: Logical operation AND.

x ¬x
1
0
0
1

x
0
0
1
1

y
0
1
0
1

xy
0
0
0
1

x
0
0
1
1

y
0
1
0
1

x + y
0
1
1
1

Table 3: Logical operation OR.

At this point we should ﬁnally introduce the circuit of gates and wires.
In this model each gate has a graphical representation. Wires carry 0’s and
1’s, through space or time. See Fig.1, for the functions NOT, OR and AND.
The output of a gate can be the input of another gate1. So, let f (x)
be a Boolean function corresponding to the NOT logical operation, and let
g(x, y) be a Boolean function corresponding to the AND logical gate. We
can deﬁne a function h = f
(xy). This function is very important in
Computer Science, and is called NAND. Graphically, it can be represented
by putting a small circle in the outcome of the AND gate, meaning that this
result is negated (see Fig. 2). Any classical logical circuit can be designed
using only the NAND logical gate, and the FANOUT2.

g =

¬

◦

Another interesting logical gate is the NOR, deﬁned as f (x, y) =

(x+y),
that is, an OR logical gate with its outcome inverted. As well as the NAND
gate, this gate can also be used to build any logical circuit.

¬

1Normally, the output of a gate is not a input of the same gate, although it may be
possible in some special cases, such as ﬂip-ﬂop circuits. Flip-ﬂops are special circuits that
work as memories, keeping the value of a bit even after the input signalization.

2A “gate” that replicates the value of one bit in two diﬀerent wires. It is often repre-

sented by a bifurcation in a wire.

3

Figure 1: Graphical representation for the logical operations NOT, OR and
AND.

Figure 2: We can use the NAND gate to build the gates AND, OR and
NOT. Consequently, we can build any classical circuit using only NAND
gates.

4

Figure 3: We can also use the NOR gate to build the gates AND, OR and
NOT. Consequently, the gate NOR is also universal.

We cannot expect to create quantum circuits in a straightfoward way by
simply using the same techniques of classical circuits. Firstly, because in
classical circuits the universal gate is NAND, which is irreversible3, while in
quantum circuits all gates must be reversible. Not even FANOUT is possible
in Quantum Mechanics, because of the non-cloning theorem [8].

3 On quantum circuits

Similarly to Classical Computation, there must be a mathematical represen-
tation for the operations performed in the quantum physical system. Com-
puter scientists are used to represent logical operations by Boolean functions.
However, in Quantum Computation we will use a slightly diﬀerent formal-
ism, which will be more suitable. The reader must be familiar with Linear
Algebra, because that is what we will use from now on.

A quantum state is represented by a vector in a Hilbert space (a complex
vector space with inner product). Hence, if we consider an orthonormal basis
composed by the states
, the quantum state can be any of the
1
i
|
form α
, where α and β are complex numbers called amplitudes.
1
+ β
0
i
|
i
|
Since this state must be a unit vector, we know that

0
i
|

and

2 +
α
k
k

β
k

2 = 1.
k

We can represent our computational basis by the state vectors

1
i ≡ "
|
3If we know only the output of an irreversible gate, we do not necessarily know the

0
i ≡ "
|

and

(1)

,

1
0 #

0
1 #

inputs.

5

for example. This representarion may help the understanding of the calcu-
lations carried out in this section.

Operations on a quantum state must preserve its norm, so they are
described by unitary matrices. In order to represent a logical operation on
a qubit, one should ﬁnd a unitary matrix that gives the desired result when
applied to the qubit.

ψ
|
To illustrate that, let us observe the equivalent of the NOT classical logic

ψ
|

(2)

.
i

=

U

i

′

gate. We must ﬁnd a unitary operator U, such that

(3)

(4)

(5)

(6)

(7)

(8)

and, since U is a linear operator,

0
U (α
i
|

+ β

) = αU
1
i
|

0
i
|

+ βU

.
1
i
|

The operator

U

0
|
i
1
i
|

U

=

=

1
i
|
,
0
i
|

σx =

0 1
1 0 #

,

"

one of the three Pauli matrices, corresponds to the unitary matrix that we
are looking for.

Note that if we apply the operator σx twice, we keep the original value

of the qubit.

σxσx =

0 1
1 0 # "

0 1
1 0 #

=

"

1 0
0 1 #

"

which is the identity matrix.

Another interesting operator is the Hadamard gate:

H =

1
√2 "

1 1
1 1 #

.

+

1
i
|

= 1

) and H
1
i
|

This gate is able to create superpositions in a qubit. Note that H
1
).
1
0
√2 (
0
√2 (
|
i
i − |
|
i
Another interesting type of operator that we cannot forget mentioning
is the controlled operator. When we have at least two qubits (a quantum
register), we can deﬁne an operator that will interfere in a particular qubit
if and only if some requirement is observed. For instance, let σc,t
x be an
operator that applies the NOT logic operation in the qubit t if and only if
the qubit c is

0
i
|

=

.
1
i
|

6

σc,t
0
x (
c
i
|
σc,t
0
x (
c
i
|
σc,t
x (
1
c
i
|
σc,t
1
x (
c
i
|

0
c
i
|
0
c
i
|
1
c
i
|
1
c
i
|
In this case, we say that qubit t is the “target qubit” and qubit c is
the “control qubit”. This gate is called CNOT and, similarly, it may be
expressed as a unitary matrix.

t) =
0
i
|
t) =
1
i
|
t) =
0
i
|
t) =
1
i
|

0
t
i
|
1
t
i
|
1
t
i
|
t.
0
i
|

(11)

(12)

(10)

(9)

CN OT = 





1 0 0 0
0 1 0 0
0 0 0 1
0 0 1 0



.






(13)

Similarly to Classical Computation, there are gates in Quantum Com-
putation that can be used to build any possible circuit. It can be proven
that an arbitrary unitary matrix U can be decomposed into a product of
two-level unitary matrices, i.e., matrices that act non-trivially on no more
than two vector componets. One could also prove that single qubit gates
and CNOTs can be used to achieve any two-level unitary matrix. Hence, it
can be proven that single qubit gates and CNOT gates can implement an
arbitrary operation and, therefore, they are universal in Quantum Compu-
tation.

The proof for the last paragraph is not straightfoward and would spend
a reasonable space in this paper. If the reader is interested in studying this
subject deeper, the main reference is [9].

4 Error detection and correction: some brief re-

marks

An important area of Computer Science concerns the detection and correc-
If we intend to build a computer, no matter if a classical
tion of errors.
or a quantum-mechanical one, we have to deal with its errors, so that the
calculations can be trusted.

In a classical digital computer, we can consider one single kind of error.
Suppose we wish to send a bit through a channel. If there is noise in this
channel, a bit 0 can be changed to 1, with probability p, and a bit 1 can
be changed to 0, with probability q. So, the bit 0 will keep correct with
q. Normally, we consider
probability 1
p = q. In this case, both bits 0 and 1 have the same probability p of being
aﬀected by the noise, and the same probability 1
p of being sent correctly.
−
This channel is called a binary symmetric channel.

p, and the bit 1 with probability 1

−

−

7

Classical schemes for error detection and correction use some kind of
redundancy. A very simplistic example would be repeating the same bit n
times. For instance

0L = 000
1L = 111

(14)

(15)

with n = 3.

In this case, if we wish to represent the number 5 (101 in the binary

system), we must repeat each logical bit three times:

(101)L = 111000111.

(16)

If some noise inverts a single bit in a triplet, we can easily repair the
information. For instance, if the above number is changed to 111010110, we
know that the triplets 010 and 110 are wrong. We can recover the informa-
tion by performing the majority vote. So, the triplet 010 was originally 000
and the triplet 110 was 111. One could easily prove that the majority vote
works properly whenever p < 1
2 .

In Quantum Mechanics, errors are not so simple. Firstly, we cannot
simply copy the quantum bits, because of the non-cloning theorem. More-
over, even if we could copy qubits, we would not be able to detect errors by
simply measuring them. These limitations are enough to show us that our
techniques must me changed if we wish to handle the quantum-mechanical
world. But, if we wish to go a little further, we must consider that diﬀerent
kinds of errors may occur in this case.

β

+β

1
i
|

0
is changed to α
i−
|

0
A qubit can suﬀer a phase ﬂip, when α
i
|

.
1
i
|
Besides, we must remember that a qubit is continuous, so it can suﬀer a small
error. Imagine a Bloch sphere where the state is accidentally rotated by a
small angle. This error would not be detected if we consider only bit ﬂips
and phase ﬂips. How can we protect our quantum computers against all
these threats? Peter Shor, who created the code to correct arbitrary errors
on a single qubit, answered this question [10]. Nowadays, this code is known
as the Shor code. In order to understand it, we will analyze two “modules”:
the three-qubit bit ﬂip code and the three-qubit phase ﬂip code. The Shor
code is a combination of these two “modules”.

Before the explanation of these modules, it should be important to have
a brief digression on the third postulate of Quantum Mechanics, which con-
cerns to measurements. A measurement is characterized by an observable,
M , such that M = M † = (M T )⋆. So, the spectral decomposition of M is:

M =

Pm.

(17)

m
X

8

(18)

(19)

(20)

(21)

(22)

(23)

(24)

(25)

According to this postulate, the possible outcomes that may occur in
If the state before the

an experiment are the eigenvalues of M , i.e., m.
measurement is

, then the probability that a result m occurs is
i

ψbef
|

and the state after the measurement is

p(m) =

ψbef
h

Pm
|

ψbef
|

i

ψaf t
|

i

=

Mm

ψ
|
i
Pm
|

ψbef
|

.

ψbef
h
q

Now, we shall return to the study of the Shor code.

4.1 The three-qubit bit ﬂip code

At ﬁrst, we must encode our qubits, as follows:

becomes

becomes

0
|
i
1
i
|

0L
|
1L
|

000
i
,
111
i

i ≡ |

i ≡ |

so that the qubit

ψ
|

i

0
= α
i
|

+ β

1
i
|

000
is encoded as α
i
|

+ β

.
111
i
|

If we wish to check if some error occurred, we use a measurement called
syndrome diagnosis. Its result is called the error syndrome. We use four
projection operators, each one corresponding to a bit ﬂip in a speciﬁc qubit.

P0

P1

P2

P3

000

100

010

001

000
|
100
|
000
|
000
|

ih

ih

ih

ih

≡ |

≡ |

≡ |

≡ |

+

+

+

+

111
|
011
|
101
|
110
|

ih

ih

ih

ih

111
|
011
|
101
|
110
|

no error occurred

error on 1st qubit

error on 2nd qubit

error on 3rd qubit.

≤

Note that, when we measure an state
using the operator Pi, (0 <
i
3), we obtain 1 if the i-th qubit is corrupted, and 0 otherwise. Similarly,
if we use the operator P0, we obtain 1 if the three qubits are correct, and
0 otherwise. After the measurement, the qubit is not modiﬁed! This is
possible because the syndrome diagnosis does not give us any information
about the qubit per si (i.e., the values of α and β).

ψ
|

i

4.2 The three-qubit phase ﬂip code

The three-qubit bit ﬂip code protects our qubit against the simplest kind of
error. However, as we mentioned before, quantum bits are subject to much
more errors than simple ﬂips. The second type of noise that we will analyze
.
1
0
is the phase ﬂip. This error may change a qubit α
i
|
i
|

0
into α
i −
|

1
i
|

+ β

β

9

The idea behind the three-qubit phase code is very similar to that used
in the three-qubit bit ﬂip code. Instead of encoding the qubit according to
equations 20 and 21, we must use

(26)

(27)

0L
|
1L
|

+ ++

i ≡ |

i
,
i ≡ | − −−i

becomes

becomes

0
|
i
1
i
|
)/√2 and
1
i
|

where

+
|

i ≡

+

0
(
i
|

|−i ≡

)/√2.
1
0
(
i
i − |
|

The only diﬀerence is that, in this code, we use the basis

to
encode the qubit, instead of the basis
. Remember that we can use
,
0
i
{|
the Hadamard operator (eq. 8) to change between one basis and the other.
To perform the syndrome measurement, we only need to use the correct

1
i}
|

|−i}

,
i

+

{|

operators for the new basis.

Pi becomes P

′

i ≡

(H

H

⊗

⊗

H)Pi(H

H

H).

⊗

⊗

(28)

If the reader is interested in demonstrations for the subject exposed so

far in this section, we recommend the references [5] and [11].

4.2.1 The Shor code

The Shor code is a concatenation of the two codes explained before. In the
ﬁrst step, we encode the qubit using the phase ﬂip code (eq. 26 and eq. 27).
Consequently, we will have three qubits4 from this point on. In the second
step, we encode each of the three resulting qubits using the bit ﬂip code
(eq. 20 and eq. 21). Finally, we have nine qubits representing the initial
qubit.

becomes

0L
|

i ≡

000
(
i
|

+

000
)(
111
+
000
)(
111
i
i
|
i
|
|
i
|
2√2

+

)
111
i
|

becomes

1L
|

i ≡

000
(
|

i − |

000
)(
111
|
i

000
)(
111
|
i

i − |

)
111
i

.

i − |
2√2

0
i
|

1
i
|

(29)

(30)

As we can see, this code is very expensive, especially if we consider the
present status of experimental quantum computation. The best quantum
computer ever built had only seven qubits! However, the Shor code is ex-
tremely important because it protects the qubit against arbitrary errors, not
only bit ﬂips or phase ﬂips. The main lesson of this section is that, although
quantum states can present a continuum of errors, they can be repaired by
detecting and correcting only a discrete subset of errors.

4We used three qubits in our example, but we could have used more. The same

comment is valid for the bit ﬂip code. Three is the minimum necessary in both cases.

10

5 Conclusions

This paper is an introduction to one of the most important topics in Com-
puter Science. Whenever we wish to perform a computation, we must know
how to store a certain initial value, and then manipulate it until we achieve
a result, when we can ﬁnally measure the system and obtain an answer.

We began by showing how we can perform simple operations in physical
system, with classical and quantum logic gates. Then, we showed how to
keep it reliable, with error detection and correction codes. Naturally, this
is a vast area of knowledge, which could not be completely described in one
single article. However, our goal here is to introduce this subject in a simple
but eﬀective way, helping to students and researchers from diﬀerent areas of
knowledge.

The references mentioned throughout this paper can be used to improve

the comprehension of the subject.

Acknowledgements

The authors thank Prof. J.A. Helay¨el-Neto (CBPF) and Dr. J.L. Ace-
bal (PUC-Minas) for reading the manuscripts, and for providing helpful
discussions. We thank the Group of Quantum Computation at LNCC, in
particular Drs. R. Portugal and F. Haas, for the courses and stimulating
discussions. We also thank the brazilian institution CNPq and the PIBIC
program, for the ﬁnancial support.

References

[1] Marquezino, F.L. and Mello J´unior, R.R., “Considerations on Classical

and Quantum Bits”. Work in progress.

[2] Lavor, C., Manssur, L.R.U and Portugal, R.,

gorithm:
www.arxiv.org/quant-ph/0301079.

Quantum Database

Search”.

“Grover’s Al-
in

(2003) Available

[3] Turing, A.M., “On computable numbers, with an application to the

Entscheidungsproblem”, Proc.Lond.Math.Soc. 2, 42:230. (1936)

[4] Shapiro, S., “Church’s Thesis”. Encyclopedia of Artiﬁcial Inteligence,

John Wiley & Sons, New York. (1990) pp. 99-100.

[5] Nielsen, M.A. and Chuang, I.L., “Quantum Computation e Quantum

Information”, Cambridge University Press (2000).

[6] WWW

page

at

University

of

Maryland:

http://www.cs.umd.edu/class/spring2003/cmsc311/Notes/.

11

[7] Tanenbaum, A.S., “Structured Computer Organization”. 4th edition,

Upper Saddle River, NJ: Prentice Hall. (1999)

[8] Wooters, W.K. and Zurek, W.H., “A single quantum cannot be cloned”,

Nature, 299, 802-803. (1982)

[9] Barenco, A., Bennett, C.H., Cleve, R., DiVicenzo, D.P., Margolus,
N., Shor, P., Sleator, T., Smolin, J. and Weinfurter, H., “Elementary
gates for quantum computation”, Phys.Rev.A, 52:3457-3467. (1995).
Also available in www.arxiv.org/quant-ph/9503016.

[10] Shor, P.W., “Fault-tolerant quantum computation”. In Proceedings,
37th Annual Symposium on Foundations of Computer Science, pages
56-65, IEEE Press, Los Alamitos, CA. (1996)

[11] Preskill, J., “Lecture Notes for Physics 229: Quantum Information and

Computation”. California Institute of Technology. (1998)

[12] Williams, C.P. and Clearwater, S.H., “Explorations in Quantum Com-

puting”, The Electronic Library of Science, California. (1997)

12

