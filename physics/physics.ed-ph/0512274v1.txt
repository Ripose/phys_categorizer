5
0
0
2
 
c
e
D
 
0
3
 
 
]
h
p
-
d
e
.
s
c
i
s
y
h
p
[
 
 
1
v
4
7
2
2
1
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

A radioactive decay simulation (for Education)

Ihab F. Riad, Mohammed El Shazali Sir Elkatim,
Physics Dept. Faculty of Science, University of Khartoum

Abstract

This article is intended for physics educators and students at school
and undergraduate level. It is used at our department to introduce stu-
dents to simulation and oﬀer a guide in using statistics in physics. The
simulation code was created using Matlab, and was given a friendly
interface with a Labview module.

1

Introduction:

During our teaching for undergraduates of physics we saw a need for an
experiment that can demonstrate the close ties between experiments and
statistical analysis. We also felt the need of introducing the idea of simulating
a physics experiment for the huge and increasing role of simulation in the
diﬀerent ﬁelds of science. We used to have an experiment targeting the
Poisson distribution and Radioactivity, the experiment was performed with
a Geiger counter, so it was a good choice for combining the two ideas. The
simulation code was created with a Matlab script and was then given a
friendly interface with the help of a Labview module. For running the code
you need to have Matlab installed on your system.

1

2 Theory:

The simulation depends on the Normal number generator available through
the Matlab. To simulate the decay behavior of a radioactive sample having
No nuclide, and decay constant λ during a time ∆t No uniform random num-
bers were generated. Each number represent a potential decaying nuclide.
To demonstrate this note that the probability of having a random number x
between a and b such that xo > x > b is given by

P (x > xo) =

dx;

b

1
b − a
Z
xo
(b − xo)
b − a

;

=

setting a = 0 and b = 1, in our case we get

P (x > xo) = 1 − xo.

Noting that the probability of a single nuclei to decay in a time ∆t is λ∆t,
or

λ∆t = 1 − xo,

or

xo = 1 − λ∆t.

i.e any uniform random number grater than xo represent a decaying nuclide.
The Matlab uniform random number generator is used to create No random
number and each is checked with condition equation(3) to identify it as a
non-decaying or decaying nuclei and in such a case counted.

The time ∆t is controlled trough the Labview interface. In the simulation
you are given a number of diﬀerent samples to choose among each represent
a diﬀerent decay constant. You also have three choices of No such that for
small No = 106, medium No = 5 × 106 and large No = 50 × 106. The above
choices were made for the limited computational power of the system used.
The number of trials to be simulated can be also controlled where you can
perform up to a thousand trials. The result of each trial is recorded at a .txt
ﬁle of your choice.

(1)

(2)

(3)

2

3 Application:

The Labview is started, and after making your choices of the diﬀerent vari-
ables press the start bottom. The result of each trial will be recorded at a
ﬁle, which can then be read and the data treated with a data analysis tool.
An example of the simulation the histogram below was created from 851 tri-
als for sample E with medium number of nuclei for a time of 60min for each
trial. Using all this information the half life of the sample can be calculated

1 − e−λ∆t
(cid:16)
Using the value of ¯N collected from the simulation, λ can be found as

¯N = No

(cid:17)

.

(4)

79.189 = 5 × 106

1 − e− λ
(cid:16)

365×24

,

(cid:17)

T 1

2

= 4.990years.

Compare this to the value set in the code.

Note:

If you would like to have the simulation please send me an email and we will
be happy to send it.

3

Sample E

6

N

=5X10

o

Mean =79.189

SD. = 8.854

Variance = 78.394

Number of trials =851

Time = 60min

Half life simulated 4.990 years

Half life set in code 5 years

y
c
n
e
u
q
e
r
f

200

180

160

140

120

100

80

60

40

20

0

50

60

70

80

90

100

110

Counts

4

4 The Simulation:

In this section we include the code and a snapshot of the Labview interface.
Matlab Script

1: format long g 2: if n==0;
3: x= 1-(log(2)/(0.5*24*3600))*1*60*t;
4: elseif n==1;
5: x= 1-(log(2)/(10*24*3600))*60*t;
6: elseif n==2;
7: x= 1-(log(2)/(160*24*3600))*60*t;
8: elseif n==3;
9: x=1-(log(2)/(2*365*24*3600))*60*t;
10: elseif n==4;
11: x=1-(log(2)/(5*365*24*3600))*60*t;
12: end
13: if c==0;
14:d=1000000;
15: elseif c==1;
16: d=5000000;
17: elseif c==2;
18:d=50000000;
19: end
20: z=0;
21: for i=1 : d
22: y=rand;
23: if y¿x
24: z=z+1;
25: else
26: z=z;
27: end
28:end
29: z

5

6

