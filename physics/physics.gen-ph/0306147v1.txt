3
0
0
2
 
n
u
J
 
9
1
 
 
]
h
p
-
n
e
g
.
s
c
i
s
y
h
p
[
 
 
1
v
7
4
1
6
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

The Best Possible Uniﬁcation for
Any Collection of Physical Theories

Robert A. Herrmann

Mathematics Department
U. S. Naval Academy
572C Holloway Rd.
Annapolis, MD 21402-5002

Abstract: It is shown that the set of all ﬁnitary consequence operators
deﬁned on any nonempty language is a join-complete lattice. This re-
sult is applied to various collections of physical theories to obtain an
unrestricted supremum uniﬁcation.

1. Introduction.

In Herrmann (2001a, b), a restricted hyperﬁnite ultralogic uniﬁcation is con-
structed. The restrictions placed upon this construction were necessary in order to
relate the constructed ultralogic directly to the types of ultralogics used to model
probability models (Herrmann 2001c, d). In particular, the standard collections of
consequence operators are restricted to a very special set of operators HX, where
X is itself restricted to the set of all signiﬁcant members of a language Λ. In this
paper, all such restrictions are removed. For reader convince, some of the intro-
ductory remarks that appear in Herrmann (2001a, b) are repeated. Over seventy
years ago, Tarski (1956, pp. 60-109) introduced consequence operators as models
for various aspects of human thought. There are two such mathematical theories
investigated, the general and the ﬁnitary consequence operators (Herrmann, 1987).
Let L be a nonempty language, P be the power set operator and F the ﬁnite power
set operator. There are three cardinality independent axioms.

Deﬁnition 1.1. A mapping C: P(L) → P(L) is a general consequence operator

(or closure operator) if for each X, Y ∈ P(L)

(1) X ⊂ C(X) = C(C(X)) ⊂ L; and if

(2) X ⊂ Y, then C(X) ⊂ C(Y).

A consequence operator C deﬁned on L is said to be ﬁnitary (ﬁnite) if it satisﬁes

(3) C(X) = S{C(A) | A ∈ F (X)}.

Remark 1.2. The above axioms (1), (2), (3) are not independent. Indeed, (1)
and (3) imply (2). Clearly, the set of all ﬁnitary consequence operators deﬁned on a
speciﬁc language is a subset of the set of all general operators. The phrase “deﬁned
on L” means formally deﬁned on P(L).

All known scientiﬁc logic-systems use ﬁnitely many rules of inference and
ﬁnitely many steps in the construction of a deduction from these rules. Hence, as

1

shown in Herrmann (2001a, b), the consequence operator that models such theory
generating thought processes is a ﬁnitary consequence operator. Although many of
the results in this paper hold for the general consequence operator, we are only inter-
ested in collections of ﬁnitary consequence operators. Dziobid (1981, p. 180) states
the Theorem 2.10 below. However, the statement is made without a formal proof
and is relative to a special propositional language. Theorem 2.10 is obtained by
using only basic set-theoretic notions and Tarski’s basic results for any language.
Further, the proof reveals some interesting facts not previously known. Unless
noted, all utilized Tarski (1956, pp. 60-91) results are cardinality independent.

2. The Lattice of Finitary Operators.

Deﬁnition 2.1. In all that follows, any set of consequence operators will be
nonempty and each is deﬁned on a nonempty language. Deﬁne the relation ≤ on
the set C of all general consequence operators deﬁned on L by stipulating that for
any C1, C2 ∈ C, C1 ≤ C2 if for every X ∈ P(L), C1(X) ⊂ C2(X).

Obviously, ≤ is a partial order contained in C × C. Our standard result will show
that for the entire set of ﬁnitary consequence operators Cf ⊂ C deﬁned on L, the
structure hCf , ≤i is a lattice.

Deﬁnition 2.2. Deﬁne I: P(L) → P(L) and U: P(L) → P(L) as follows: for

each X ⊂ L, let I(X) = X, and let U(X) = L.

Notice that I is the lower unit (the least element) and U the upper unit (the greatest
element) for hCf , ≤i and hC, ≤i.

Deﬁnition 2.3. Let C ∈ C. A set X ⊂ L is a C-system or simply a system
if C(X) ⊂ X and, hence, if C(X) = X. For each C ∈ C, let S(C) = {X | (X ⊂
L) ∧ (C(X) = X)}.

Since C(L) = L for each C ∈ C, then each S(C) 6= ∅.

Lemma 2.4 For each C1, C2 ∈ C, C1 ≤ C2 if and only if S(C2) ⊂ S(C1).
Proof. Let any C1, C2 ∈ C and C1 ≤ C2. Consider any Y ∈ S(C2). Then

C1(Y) ⊂ C2(Y) = Y. Thus, C1 ∈ S(C1) implies that S(C2) ⊂ S(C1).

Conversely, suppose that S(C2) ⊂ S(C1). Let X ⊂ L. Then since, by axiom
1, C2(X) ∈ S(C2), it follows, from the requirement that C2(X) ∈ S(C1), that
C1(C2(X)) = C2(X). But X ⊂ C2(X) implies that C1(X) ⊂ C1(C2(X)) = C2(X),
from axiom 2. Hence, C1 ≤ C2 and the proof is complete.

Deﬁnition 2.5. For each C1, C2 ∈ C, deﬁne the following binary relations in
P(L) × P(L). For each X ⊂ L, let (C1 ∧ C2)(X) = C1(X) ∩ C2(X) and (C1 ∨w C2) =
∩{Y ⊂ L | (X ⊂ Y = C1(Y) = C2(Y))} For ﬁnitely many members of C, the
operators ∧, ∨w are obviously commutative and associative. These two relations are
extended to arbitrary A ⊂ C by deﬁning (V A)(X) = V A(X) = T{C(X) | C ∈ A}
and (Ww A)(X) = Ww A(X) = T{Y ⊂ L | X ⊂ Y = C(Y) for all C ∈ A} (Dziobiak,
1981, p. 178). Notice that Ww A(X) = T{Y ⊂ L | (X ⊂ Y) ∧ (Y ∈ T{S(C) | C ∈
A})}.

2

Lemma 2.6. Let A ⊂ C [resp. Cf ] and S′ = {X | (X ⊂ L) ∧ (X = Ww A(X))}.

Then S′ = T{S(C) | C ∈ A}.

Proof. By Tarski’s Theorem 11 (b) (1956, p. 71), which holds for ﬁnitary and
general consequence operators, for each X ⊂ L, X ⊂ Ww A(X) = Y′ ∈ S(C) for
each C ∈ A. Hence, if Y′ ∈ S′, then Ww A(Y′) = Y′ ∈ S(C) for each C ∈ A.
Thus S′ ⊂ T{S(C) | C ∈ A}. Conversely, let Y ∈ T{S(C) | (C ∈ A)}. From the
deﬁnition of Ww, Ww A(Y) = Y and, hence, Y ∈ S′ and this completes the proof.
Lemma 2.7. Let nonempty B ⊂ L have the property that for each X ⊂ L there
exists some Y ∈ B such that X ⊂ Y. Then the operator CB deﬁned for each X ⊂ L
by CB(X) = T{Y | X ⊂ Y ∈ B} is a general consequence operator deﬁned on L.

Proof. Assuming the hypotheses, it is obvious that CB: P(L) → P(L) and X ⊂
CB(X). Clearly, if Z ⊂ X ⊂ L, then CB(Z) ⊂ CB(X); and, for each Y ∈ B, X ⊂ Y
if and only if CB(X) ⊂ Y. Hence, CB(CB(X)) = T{Y | CB(X) ⊂ Y ∈ B} = CB(X).
This completes the proof.

Remark 2.8. The hypotheses of Lemma 2.7 can be weakened. However, our

application does not require such a weakening.

Theorem 2.9. With respect to the partial order relation ≤ deﬁned on L, the

structure hC, ∨w, ∧, I, Ui is a complete lattice with upper and lower units.

Proof. Let A ⊂ C and B = T{S(C) | C ∈ A}. Since L ∈ B, then by Lemma 2.7,
Ww A = CB ∈ C. Moreover, by Lemmas 2.4 and 2.6, CB is the least upper bound
for A with respect to ≤ .

Next, let B = S{S(C) | C ∈ A}. For X ⊂ L, X ⊂ C(X) for each C ∈ A. For
each C ∈ A, there does not exist a YC such that YC ∈ S(C), X 6= YC, YC 6= C(X)
and X ⊂ YC ⊂ C(X). Hence, CB(X) = T{Y | X ⊂ Y ∈ B} = T{C(X) | C ∈ A} =
V A(X). Hence, V A ∈ C and it is obvious that V A is the greatest lower bound for
A with respect to ≤ . This completes the proof.

Although the proof appears in error, (W´ojcicki, 1970) stated Theorem 2.9 for
In what follows, we only investigate the basic lattice

a propositional language.
structure for hCf , ≤i.

Theorem 2.10. With respect to the partial order relation ≤ deﬁned on Cf , the

structure hCf , ∨w, ∧, I, U i is a lattice with upper and lower units.

Proof. It is only necessary to consider two distinct C1, C2 ∈ Cf . As mentioned,
the commutative and associative laws hold for ∧ and ∨w and by deﬁnition each
maps P(L) into P(L). In hC, ≤i, using theorem 2.9, axiom 1 and 2 hold for the
greatest lower bound C1 ∧ C2 and for the least upper bound C1 ∨w C2. Next, we
have that (C1 ∧ C2)(X) = (∪{C1(Y) | Y ∈ F (X)}) T(∪{C2(Y) | Y ∈ F (X)}) =
S{C1(Y) ∩ C2(Y) | Y ∈ F (X)} = S{(C1 ∧ C2)(Y) | Y ∈ F (X)} and axiom 3 holds
and, hence, C1 ∧ C2 ∈ Cf . Therefore, hCf , ∧, I, Ui is, at the least, a meet semi-lattice.
Next, we show by direct means that for each C1, C2 ∈ Cf , C1 ∨w C2 ∈ Cf . Let
(the cardinality of L) |L| = ∆. For each Xi ⊂ L, (i ∈ ∆), let A′(Xi) = {Y | (Xi ⊂

3

Y ∈ S(C1) ∩ S(C2)) ∧ (Y ⊂ L)}. Let T{Y | Y ∈ A′(Xi)} = Yi. By Tarski’s Theorem
11 (1956, p. 71) Xi ⊂ Yi ∈ S(C1) ∩ S(C2), and by deﬁnition Yi = (C1 ∨w C2)(Xi).
Hence, Yi ∈ A′(Xi) and is the least (⊂) element. For Xi ⊂ L, let A′′(Xi) =
{Y | (C1(Xi) ⊂ Y ∈ S(C1) ∩ S(C2)) ∧ (Y ⊂ L)}. Since Xi ⊂ Ck(Xi), k = 1, 2,
then A′′ ⊂ A′. Since L ∈ A′(Xi), A′(Xi) 6= ∅. Indeed, let Y ∈ A′(Xi). Then
Xi ⊂ Ck(Y) = Y, k = 1, 2. Additionally, Xi ⊂ C1(Y) = Y implies that Xi ⊂
C1(Xi) = C1(C1(Xi)) ⊂ C1(C1(Y)) = C1(Y) = Y. Hence, it follows that for any
Xi ⊂ L, A′′(Xi) = A′(Xi). For ﬁxed Xi ⊂ L, let Xj ∈ F (Xi). Let Yj be deﬁned as
above and, hence, Yj is the least element in A′(Xj) = A′′(Xj). Consider D = {Yj |
Xj ∈ F (Xi)}, and, for j = 1, . . . , n, consider Yj ∈ D and the corresponding Xj ⊂ L.
Let Xk = S{Xj | j = 1, . . . , n} ∈ F (Xi). Then Yk = T{Y | Y ∈ A′(Xk)} ∈ D. If Y ∈
A′(Xk), then Y ∈ A′(Xj), j = 1, . . . , n. Hence, Yj ⊂ Yk, j = 1, . . . , n implies that
Y1∪· · ·∪Yn ⊂ Yk. Tarski’s Theorem 12 (1956, p. 71) implies that Y∗ = S{Yj | Xj ∈
F (Xi)} ∈ S(C1)∩S(C2). Also, by deﬁnition, for all Xj ⊂ L, Yj ∈ A′′(Xj) implies that
C1(Xj) ⊂ Yj. The fact that C1 is ﬁnitary yields C1(Xi) ⊂ Y∗. Hence, Y∗ ∈ A′′(Xi).
Since C1(Xj) ⊂ C1(Xi), Xj ∈ F (Xi), then A′′(Xi) ⊂ A′′(Xj), Xj ∈ F (Xi). Thus
Yj ⊂ Yi, Xj ∈ F (Xi). Therefore, Y∗ ⊂ Yi. But, Y∗ ∈ A′′(Xi) implies that Y∗ = Yi.
Re-stating this last result, S{(C1 ∨w C2)(Xj) | Xj ∈ F (Xi)} = (C1 ∨w C2)(Xi) and,
therefore, axiom (3) holds for the binary relation ∨w and hCf , ∨w, ∧, I, Ui is a lattice.
This completes the proof.

Corollary 2.10.1. Let each member of Cf be deﬁned on L and A ⊂ Cf . Then

hCf , ∨w, ∧, I, Ui is a join-complete lattice.

Proof. Simply modify the second part of the proof of Theorem 2.10 by substi-
tuting T{S(C) | C ∈ A} for S(C1) ∩ S(C2) and letting C1 ∈ A. This complete the
proof.

Remark 2.11. It is known, since I is a lower bound for any A ⊂ Cf , that
hCf , ∨w, I, U i is actually a complete lattice with a meet operator generated by the
∨w operator. It appears that the meet operator ∧ for inﬁnite A need not corre-
spond, in general, to the ∨w deﬁned meet operator. W´ojcicki [10] has constructed,
for a set of consequence operators C′, an inﬁnite A ⊂ C′ of ﬁnitary consequence
operators, with some very special properties. However, the general consequence
operator deﬁned for each X ⊂ L by T{C(X) | C ∈ A} is not a ﬁnitary operator.
Thus, in general, hCf , ∨w, ∧, I, U i need not meet-complete lattice. This behavior
is not unusual. For example, let inﬁnite X have an inﬁnite topology T . Then
hT , ∪, ∩, ∅, Xi is a join-complete sublattice of the lattice hP(X), ∪, ∩, ∅, Xi. The
structure hT , ∪, ∅, Xi is actually complete, but it is not a meet-complete sublattice
of complete hP(X), ∪, ∩, ∅, Xi.

3. System Consistent Logic-systems

Let Σ be a non-empty set of science-community logic-systems and let |·| denote
cardinality. In practice, |Σ| ≤ ℵ0. Each logic-system Si ∈ Σ, i ∈ |Σ|, is deﬁned on
a countable language Li and each Si determines a speciﬁc ﬁnitary consequence
operator Ci deﬁned on a language Li. At the least, by application of the insertion

4

of hypotheses rule, for nonempty cardinal ∆ ≤ |Σ|, each member of {Ci | i ∈ ∆}
| i ∈ ∆}. In all that follows, a speciﬁc set of
is deﬁned on the language S{Li
logic-system generated consequence operators {Ci
| i ∈ ∆} deﬁned on a speciﬁc
set of languages {Li | i ∈ ∆} will always be considered as trivially extended and,
hence, deﬁned by the insertion of hypotheses rule on the set S{Li | i ∈ ∆}.
In
general, such a speciﬁc set of consequence operators is contained in the lattice of all
ﬁnitary operators deﬁned on S{Li | i ∈ ∆}. A logic-system S′ and its corresponding
consequence operator is a trivial extension of a logic-system’s S deﬁned on L where,
for a language L′ ⊃ L, S′ is the same as S except that the insertion rule now applies
to L′. The system S′ and its corresponding consequence operator C′ is a non-
trivial extension if it is a extended to L′ by insertion and some other n-ary relations
that contain members of L′ − L are adjoined to those in S or various original n-ary
relations in S are extended by adding n-tuples that contain members from L′−L. For
both the trivial and non-trivial cases and with respect to the language L′, it follows
that C ≤ C′. In the trivial case, if X ⊂ L′, then C(X) = C′(X) = C(X ∩ L) ∪ (X − L).
In practice, a practical logic-system is a logic-system deﬁned for the subsets of
a ﬁnite language Lf . When a speciﬁc deduction is made from a set of hypotheses X,
the set X is ﬁnite. If the logic-system also includes 1-ary sets, such as the logical or
physical axioms, the actual set of axioms that might be used for a deduction is also
ﬁnite. Indeed, the actual set of all deductions obtained at any moment in human
history and used by a science-community form a ﬁnite set of statements that are
contained in a ﬁnite language Lf . (Finite languages, the associated consequence
operators and the like will usually be denoted by a f superscript.) The ﬁnitely
many n-ary relations that model the rules of inference for a practical logic-system
are ﬁnite sets. Practical logic-systems generate practical consequence operators and
practical consequence operators generate eﬀectively practical logic-systems, in many
ways. For example, the method found in  Lo´s, J. and R. Suszko (1958), when ap-
plied to a Cf , will generate eﬀectively a ﬁnite set of rules of inference. The practical
logic-system obtained from such rules generates the original practical consequence
operator. Hence, a consequence operator Cf deﬁned on Lf is considered a practi-
cal consequence operator although it may not correspond to a previously deﬁned
scientiﬁc practical logic-system; nevertheless, it does correspond to an equivalent
practical logic-system.

I point out that my deﬁnition of a physical theory is a reﬁnement of the usual
deﬁnition. Given a set of physical hypotheses, general scientiﬁc statements are
If accepted by a science-community, these statements become natural
deduced.
laws. These natural laws then become part of a science-community’s logic-system.
In Herrmann (2001a, b, a), a consequence operator generated by such a logic-system
is denoted by SN. From collections of such logic-systems, the SN they generate are
then applied to speciﬁc natural-system descriptions X. For scientiﬁc practical logic-
systems, the language and rules of inference need not be completely determinate in
that, in practice, the language and rules of inference are extended.

The complete Tarski deﬁnition for a consequence operator includes ﬁnite lan-
guages (1956, p. 63) and all of the Tarski results used in this paper apply to such

5

ﬁnite languages. Theorem 2.10 holds for any language ﬁnite or not. In the lattice of
ﬁnitary consequence operators deﬁned on Lf , ∨w determines the least upper bound
for a ﬁnite set of such operators. However, it is certainly possible that this least
upper bound is the upper unit U.

Deﬁnition 3.1. Let C be a general consequence operator deﬁned in L. Let

X ⊂ L.

(i) The set X is C-consistent if C(X) 6= L.
(ii) The set X is C-complete if for each x ∈ L, either x ∈ X or C(X ∪ {x}) = L.
(iii) A set X ⊂ L is maximally C-consistent if X is C-consistent and whenever

a set Y 6= X and X ⊂ Y ⊂ L, then C(Y) = L.

Notice that if X ⊂ L is C-consistent, then C(X) is a C-consistent extension of X
which is also a C-system. Further, C-consistent W is C-consistent with respect to
any trivial extension of C to a language L′ ⊃ L.

Theorem 3.2 Let general consequence operator C be deﬁned on L.
(i) The set X ⊂ L is C-complete and C-consistent if and only if X is a maximally

C-consistent.

(ii) If X is maximally C-consistent, then X is a C-system.

Proof. (i) Let X be maximally C-consistent. Then X is C-consistent and, hence,
C(X) 6= L. Hence, let x ∈ L and x /∈ X. Then X ⊂ X∪{x} implies that X∪{x} is not
C-consistent. Thus C(X ∪ {x}) = L. Hence, X is C-complete. Conversely, assume
that X is C-consistent and C-complete. Then X 6= L. Let X ⊂ Y ⊂ L and X 6= Y.
Hence, there is some y ∈ Y − X and from C-completeness L = C(X ∪ {y}) ⊂ C(Y).
Thus, Y is not C-consistent. Hence, X is maximally C-consistent and the result
follows.

(ii) From C-consistency, C(X) 6= L.

If x ∈ C(X) − X, then maximally C-
consistency implies that L = C(X ∪ {x}) ⊂ C(C(X)) = C(X). This contradiction
yields that X is a C-system.

The following easily obtained result holds for many types of languages (Tarski,
1956, p. 98. Mendelson, 1979, p. 66) but these “Lindenbaum” constructions,
for inﬁnite languages, are not considered as eﬀective. For ﬁnite languages, such
constructions are obviously eﬀective.

Theorem 3.3. Let practical consequence operator Cf be deﬁned on arbitrary
Lf . If X ⊂ Lf is Cf -consistent, then there exists an eﬀectively constructed Y ⊂ Lf
such that Cf (X) ⊂ Y, Y is Cf -consistent and Cf -complete.

Proof. This is rather trivial for a practical consequence operator and all of
the construction processes are eﬀective. Consider an enumeration for Lf such that
Lf = {x1, x2, . . . xk}. Let X ⊂ Lf be Cf -consistent and deﬁne X = X0. We now
simply construct in a completely eﬀective manner a partial sequence of subsets of
Lf . Simply consider X0 ∪ {x1}. Since X0 is Cf -consistent, we have two possibilities.
Eﬀectively determine whether Cf (X0 ∪ {x1}) = Lf . If so, let X1 = X0. On the other

6

hand, if Cf (X0 ∪ {x1}) 6= Lf , then deﬁne X1 = X0 ∪ {x1}. Repeat this construction
ﬁnitely many times. (Usually, if the language is denumerable, this is expressed in
an induction format.) Let Y = Xk. By deﬁnition, Y is Cf -consistent. Suppose that
x ∈ Lf . Then there is some Xi such that either (a) x ∈ Xi or (b) Cf (Xi ∪ {x}) = Lf .
For (a), since Xi ⊂ Y, x ∈ Y. For (b), Xi ⊂ Y, implies that L = Cf (Xi ∪ {x}) ⊂
Cf (Y ∪ {x}) = Lf . Hence, Y is Cf -complete and Xi ⊂ Y, for each i = 1, . . . , k. By
Theorem 3.2, Y is a Cf -system. Thus X0 ⊂ Y implies that Cf (X0) ⊂ Cf (Y) = Y,
and this completes the proof.

Corollary 3.3.1. Let practical consequence operator Cf be deﬁned on Lf and
X ⊂ Lf be Cf -consistent. Then there exists an eﬀectively constructed Y ⊂ Lf that is
an extension of Cf (X) and, hence, also an extension of X, where Y is a maximally
Cf -consistent Cf -system.

Let the set Σp ⊂ Σ consist of all of science-community practical logic-systems
i . Each member of Σp corresponds to i ∈ |Σp| and to a
deﬁned on languages Lf
practical consequence operator Cf
i deﬁned on Lf
i . In general, the members of a set
of science-community logic-systems are related by a consistency notion relative to
an extended language.

Deﬁnition 3.4. A set of consequence operators C deﬁned on L is system

consistent if there exists a Y ⊂ L, Y 6= L and Y is a C-system for each C ∈ C.

Example 3.5. Let C be a set of axiomless consequence operators where
each C ∈ C is deﬁne on L. In Herrmann (2001a, b), the set of science-community
consequence operators is redeﬁned by relativization to produce a set of axiomless
consequence operators, the SV
N, each deﬁned on the same language. Any such col-
lection C is system consistent since for each C ∈ C, C(∅) = ∅ 6= L.

Example 3.6. One of the major goals of certain science-communities is to ﬁnd
what is called a “grand uniﬁcation theory.” This is actually a theory that will unify
only the four fundamental interactions (forces). It is then claimed that this will lead,
some how or other, to a uniﬁcation of all physical theories. Undoubtedly, if this
type of grand uniﬁcation is achieved, all other physical science theories would require
some type of re-structuring. The simplest way this can be done is to use informally
the logic-system expansion technique. This will lead to associated consequence
operators deﬁned on “larger” language sets. Let a practical logic-system S0, be
i | i ∈ IN}, IN the set of natural numbers. Let L0 ⊂
deﬁned on Lf
i | i ∈ IN} need not be distinct.]
L1, L0 6= L1. [Note: the remaining members of {Lf
Expand S0 to S1 6= S0 deﬁned on L by adjoining to the logic-system S0 ﬁnitely
many practical logic-system n-ary relations or ﬁnitely many additional n-tuples
to the original S0, but where all of these additions only contain members from
nonempty L − Lf
0. Although S1 need only be considered as non-trivially deﬁned on
Lf
1, if L 6= L1, then the S1 so obtained corresponds to C1, a consequence operator
trivially extended to L. This process can be repeated in order to produce, at the
least, ﬁnitely many distinct logic-systems Si, i > 1, that extend S0 and a set C1 of
distinct corresponding consequence operators Ci. Since these are science-community

0, and L = S{Lf

7

0 that is Cf

logic-systems, there is an X0 ⊂ Lf
an eﬀectively deﬁned set Y ⊂ Lf
with respect to the language Lf
Cf
Ci, L − Lf
and for each X ⊂ L, Ci(X) = C0(X ∩ Lf
for each Ci, Ci(Y′) = C0(Y) ∪ (L − Lf
all Ci is system consistent.

0 such that X0 ⊂ Y and Y is maximally Cf
0(Y) 6= Lf
0. Hence, Cf

0-consistent. By Corollary 3.3.1, there is
0-consistent
0. Further,
0). It follows that for each
0 6= L. By construction, for each Ci, Ci(Y) = Y;
0)). So, let X = Y′. Then
0) = Y′ 6= L. Hence, the set of

0) ∪ Ci(X ∩ (L − Lf

0 is consider trivially extended to L. Let Y′ = Y ∪ (L − Lf
0) ⊂ L − Lf

0) = Y ∪ (L − Lf

0(Y) = Y ⊂ Lf

0 ⊂ Ci(L − Lf

0 and Cf

Example 3.7. Consider a denumerable language L and example 3.2 in Her-
rmann (1987).
[Note: There is a typographical error in this 1987 example. The
expression x /∈ U should read x /∈ U.] Let U be a free-ultraﬁlter on L and let x ∈ L.
Then there exists some U ∈ U such that x /∈ U since T U = ∅ and ∅ /∈ U. Let
B = {x} and C = {P(U, B) | U ∈ U}, where P(U, B) is the ﬁnitary consequence
operator deﬁned by P(U, B)(X) = U ∪ X, if x ∈ X; and P(U, B)(X) = X, if x /∈ X.
[Note: this is the same operator P that appears in the proof of Theorem 6.4 in
Herrmann (2001a, b).] There, at the least, exists a sequence S = {Ui | i ∈ IN} such
that U0 = U and Ui+1 ⊂ Ui, Ui+1 6= Ui. It follows immediately from the deﬁni-
tion that P(Ui+1, B) ≤ P(Ui, B) and P(Ui+1, B)(B) = Ui+1 ∪ B ⊂ Ui ∪ B, for each
i ∈ IN. Hence, in general, P(Ui+1, B) < P(Ui, B) for each i ∈ IN. Let Y = L − {x}.
i ∈ IN. Thus, the collection
Then P(Ui, B)(Y) = Ui ∪ (L − {x}) = L − {x} = Y,
{P(Ui, B) | i ∈ IN} is system consistent.

Theorem 3.8. Consider A ⊂ Cf deﬁned on L and the (≤) least upper bound
Ww A. Then A ∈ Cf and if A is system consistent, then there exists some Y ⊂ L
such that Y = Ww A(Y) = C(Y) 6= L for each C ∈ A and Ww A 6= U. Further, if
X ⊂ L, X 6= L, is a C-system for each C ∈ A, then X = Ww A(X) = C(X) 6= L for
each C ∈ A.

Proof. Corollary 2.10.1 yields the ﬁrst conclusion. From the deﬁnition of system
consistent, there exists some Y ⊂ L such that C(Y) = Y 6= L for each C ∈ A. From
Lemma 2.6, for each C ∈ A, Ww A(Y) = C(Y) 6= L. Hence, Ww A 6= U. The
last part of this theorem follows from Lemma 2.6 and the fact that X is also a
Ww A-system. This completes the proof.
4. Applications

In Herrmann (2001a,b), the relativized set {SV

Ni(X) |
i ∈ IN}| = ℵ0, is introduced. This set is system consistent and is uniﬁed through
application of Theorem 3.8. Assuming system consistency, this also applies to the
unrelativized case where each relativized consequence operator SV
Ni is replaced with
the physical theory consequence operator SNi. Also note that SNi and SV
Ni are
usually considered practical consequence operators.

Ni(X) | i ∈ IN}, when |{SV

Depending upon the set C of consequence operators employed, there are usually
many X ⊂ L, X 6= L such that X is a C-system for each C ∈ C. For example, we
assumed in Herrmann (2001a, b) that there are two 1-ary relations for the science-
community logic-systems. One of these contains the logical axioms and the other

8

contains a set of physical axioms; a set of natural laws. Let {S′
Ni | i ∈ IN} be the
set of science-community corresponding consequence operators relativized so as to
remove the set of logical theorems. Each member of a properly stated set of natural
laws, Nj, used to generate the consequence operators {S′
Ni | i ∈ IN} should be a C-
system for each member of {S′
Ni | i ∈ IN}. As mentioned, the physical theories being
considered here are not theories that produce new “natural laws.” The argument
that the Einstein-Hilbert equations characterize gravitation ﬁelds, in general, leads
to the acceptance by many science-communities of these equations as a “natural
law” that is then applied to actual physical objects. Newton’s Second Law of motion
is a statement about the notion of inertia within our universe. It can now be derived
from basic laboratory observation and has been shown to hold for other physical
models distinct from its standard usage (Herrmann, 1998). The logic-systems that
generate the members of {S′
Ni | i ∈ IN} have as a 1-ary relation a set natural laws.
Then one takes a set of speciﬁc physical hypotheses X that describes the behavior
of a natural-system and applies the logic-system to X. This gives a statement as to
how these natural laws aﬀect, if at all, the behavior being described by X. It is this
approach that implies that each properly described Nj 6= L is a C-system for each
C ∈ {SNi | i ∈ IN}. Hence, Theorem 3.8 applies to C = {S′

Ni | i ∈ IN}.

At any moment in human history, one can assume, due to the parameters
present, that there is, at the least, a denumerable set of science-community logic-
systems or that there exist only a ﬁnite collection of practical logic-systems deﬁned
on ﬁnite Lf . The corresponding set Cf = {Cf
f of practical
i
consequence operators would tend to vary in cardinality at diﬀerent moments in
human history. For the corresponding ﬁnite set of practical consequence operators,
by Theorem 2.10, there is a standard (least upper bound) practical consequence
operator U, and hence “the best” practical logic-system, that uniﬁes such a ﬁnite
set. The following result is a restatement of Theorem 3.8 for such a ﬁnite set of
practical consequence operators.

| i = 1, . . . , n} ⊂ Cf

Theorem 4.1. Let Lf and Cf be deﬁned as above. Suppose that Cf is system

consistent.

(i) Then there exists a practical consequence operator U1 ∈ Cf
f deﬁned on
the set of all subsets of Lf such that U1 6= U, and a W ⊂ L such that, for each
Ci ∈ Cf , Ci(W) = U1(W) = W 6= Lf , where U1(W) ⊂ Lf .

(ii) For each X ⊂ Lf , S{Ci(X) | i ∈ IN} ⊂ U1(X) ⊂ Lf and U1 is the least

upper bound in hCf

f , ∨w, ∧, I, Ui for Cf .

X = Ci(X) = U1(X) 6= Lf , for each i ∈ IN.

(iii) Let X ⊂ Lf and X 6= Lf be a C-system for each C ∈ Cf . Then

Letting ﬁnite Cf contain practical consequence operators either of the type SNi,
Ni or S′
SV
Ni, exclusively, then U1 would have the appropriate additional properties
and would generate a practical logic-system. Corollary 2.10.1 and Theorem 3.8 yield
a more general uniﬁcation Ww A, A ⊂ Cf , as represented by a least upper bound in
hCf , ∨w, ∧, I, Ui, with the same properties as stated in Theorem 4.1. Thus depending
upon how physical theories are presented and assuming system consistency, there

9

are nontrivial standard uniﬁcations for such physical theories. Further, system
consistency is used only so that one statement in Theorem 3.8, Theorem 4.1 and
this paragraph will hold. This one fact is that each of the standard uniﬁcations of
a collection A ⊂ Cf is not the same as the upper unit if and only if the A is system
consistent. Further, an X ⊂ Lf [resp. X ⊂ L] is U1-consistent [resp Ww A-consistent]
if and only if X is C-consistent for each C ∈ C [resp. C ∈ A].

For General Intelligent Design Theory, the uniﬁcation Ww A can be considered
as a restriction of the ultralogic ∗ Ww A and can, obviously, be interpreted as an
intelligence that designs and controls the combined behavior exhibited by members
of C = {S′

Ni | i ∈ IN}, as they are simultaneously applied to a natural-system.

References

Dziobiak, W. (1981), “The lattice of strengthenings of a strongly ﬁnite conse-

quence operation,” Studia Logica 40(2):177-193.

Herrmann, R. A. (2001a). “Hyperﬁnite and Standard Uniﬁcations for Physical

Theories,” Intern. J. of Math. Math. Sci., 28(2):93-102.

Herrmann, R. A. (2001b). “Standard and Hyperﬁnite Uniﬁcations for Physical

Theories,” http://www.arXiv.org/abs/physics/0105012

Herrmann, Robert A. (2001c), “Ultralogics and probability models,” Intern. J.

of Math. Math. Sci., 27(5):321-325.

Herrmann, R. A. (2001d), “Probability Models and Ultralogics,”

http://www.arXiv.org/abs/quant-ph/0112037

Herrmann, Robert A. (1998), “Newton’s second law of motion holds in normed

linear spaces,” Far East J. of Appl. Math. 2(3):183-190.

Herrmann, Robert A. (1993), The Theory of Ultralogics.

http://www.arXiv.org/abs/math.GM/9903081 and/9903082

Herrmann, Robert A. (1987), “Nonstandard consequence operators”. Kobe Jour-
nal of Mathematics 4:1-14. http://www.arXiv.org/abs/math.LO/9911204
 Lo´s, J. and R. Suszko, (1958), “Remarks on sentential logics,” Indagationes

Mathematicae 20:177-183.

Tarski, Alfred. (1956), Logic, Semantics, Metamathematics; papers from 1923 -

1938, Translated by J. H. Woodger. Oxford: Clarendon Press.

W´ojcicki, R. (1973), “On matrix representations of consequence operators on
 Lukasiewicz’s Sentential Calculi,” Zeitschi. f. math. Logik und Grundla-
gen d. Math., 19:239-247.

W´ojcicki, R. (1970), “Some remarks on the consequence operation in sentential

logics,” Fundamenta Mathematicae, 68:269-279.

10

