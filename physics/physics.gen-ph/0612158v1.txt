ANL-HEP-PR-01-025
hep-th/0612158

Numerical Program for Computing Φ3
Amplitudes

Gordon Chalmers

UCLA Physics Department
405 Hilgard Ave
Knudsen Hall
LA, CA 90095-1547
e-mail: chalmers@physics.ucla.edu

Abstract

A computing program in Matlab is given that computes amplitudes in
scalar φ3 theory. The program is partitioned into several parts and a simple
guide is given for its use.

6
0
0
2
 
c
e
D
 
5
1
 
 
]
h
p
-
n
e
g
.
s
c
i
s
y
h
p
[
 
 
1
v
8
5
1
2
1
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

The scattering amplitudes in phi3 are computationally diﬃcult at high
loop orders due to the number of diagrams involved. Their number grows as
(n − 1)! at n-point and at tree level. An automated program is given here
that computes an arbitrary tree amplitude and then sews them together to
obtain the quantum amplitudes. The program is written in Matlab and is
given in several pieces.

The input parameters for the n-point amplitudes are given in the subpro-

gram phi3compute.txt.

The subprogram NMatrix.m must be loaded with the number of external
lines ranging from npointlower to npoint. These numbers span the numbers
of external lines which are used in the trees that are sewn together into the
loop amplitudes.

The subprograms NodalComplex.m, treecall.m, innerproduct.m, and de-
nomcall.m are saved as ﬁles in the directory to which the program can call.
The program RainbowCompute.m is used to call the MonteCarlo simu-

lation that computes the multi loop amplitude.

The input variables are self-explanatory in the subpart Phi3Compute.txt.
They are: kmomol, kmomor delimit the four-point kinematics to the four-
point amplitude, gnumber is the power of the coupling constant, d is the
dimension, kstep and sample are the step size to the partitions of momenta in
the loop and sample is the number of samples of the internal momenta taken.
In the program RainbowCompute.m the variables are MonteRunSet denoting
the number of samples, kmax is the discretized momentum, sampleX is the
number of external momenta data points. The output is delivered in the
array RainbowCompute and there is a subroutine to plot the output.

I typically call all of the programs and then paste in the subprogram
RainbowCompute.m. The time to obtain the output really varies depending
on the parameters and the number of internal loops.

Background algorithms to the computations are obtained in [1], [2]. The

program is contained in the tex source following the bibliography.

Acknowledgements

The work of GC is supported in part by the US Department of Energy,
Division of High Energy Physics, contract .

2

References

physics/0609018.

physics/0604173.

[1] Gordon Chalmers, ”Quantum Solution to Scalar Field Theory Models,”

[2] Gordon Chalmers, ”Tree Amplitudes

in Scalar Field Theories,”

3

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Phi3Compute . t x t
%%

% momentum c o n s e r v a t i o n a t e v e r y node
% ch eck th e redundance o f

th e p h i 3 g r a p h s

%% t h i s

i s

th e h ea d er

to p h i 3 computation

%% be s u r e to p r e l o a d th e N m a tr i x f i r s t with NMatrix ( n p o i n t ) program

gnumber =6;

p p o i n t =2;

q p o i n t =2;

d=4;

c l e a r kmomol ;

c l e a r kmomor ;

k s t e p =2;

sample =100;

f o r

i =1:4

k l o f f s e t ( i ) = . 0 2 3 2 3 2 3 2 3 2 3 ;

k r o f f s e t ( i ) = . 0 1 5 1 5 1 5 1 5 1 5 ;

end

kmomol ( 2 , 4 , 1 0 0 ) =−.004∗ k s t e p ∗ sample / 2 ;
kmomor ( 2 , 4 , 1 0 0 ) =−.004∗ k s t e p ∗ sample / 2 ;

f o r

samplex =1: sample

f o r

i =1:d

f o r

j =1: p p o i n t

end

end

kmomol ( j , i , samplex )=k s t e p ∗ rand+k l o f f s e t ( j ) ;

4

f o r

i =1:d

end

end

;

f o r

j =1:100

t e s t x ( j )=j ;

end

f i g u r e

% gnumber =10;

% p p o i n t =2;

% q p o i n t =2;

l o a d Nmatrix

sampleX =100;

kmomol ( 1 , i , samplex )= k l o f f s e t ( i ) +.004∗ k s t e p ∗ samplex ;
kmomol ( 2 , i , samplex ) =(1−kmomol ( 1 , i , samplex ) ∗kmomol ( 1 , i , samplex ) ) ˆ ( 1 / 2 ) ;

kmomor ( 1 , i , samplex )=k r o f f s e t ( i ) +.004∗ k s t e p ∗ samplex ;
kmomor ( 2 , i , samplex ) =(1−kmomor ( 1 , i , samplex ) ∗kmomor ( 1 , i , samplex ) ) ˆ ( 1 / 2 )−

kmomol ( 1 , i , samplex )−kmomor ( 1 , i , samplex )−kmomor ( 2 , i , samplex ) ;

c l e a r RainbowComputeOne ;

RainbowComputeOne=RainbowCompute( sample , gnumber , p p o i n t , q p o i n t , kmomol , kmomor )

p l o t ( t e s t x , RainbowComputeOne )

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% RainbowCompute .m
%%
%%

f u n c t i o n [ RainbowCompute]=RainbowCompute( sample , gnumber , p p o i n t , q p o i n t , kmomol ,

kmomor )

% had to p r e l o a d th e Nmatrix c o n t a i n i n g th e v a r i a b l e N

% d o e s n t c o n t a i n th e a s t e r i s k e d data i m m ed i a tel y below

% f u n c t i o n d o e s n t work s o p a s t e i n th e i n f o r m a t i o n

[ l i n e c o n f i g , NodeNumberPerm ]= NodalComplex ( gnumber , p p o i n t , q p o i n t ) ;

5

%% kmax i s

th e max v a l u e o f

th e momenta i n d i v i d u a l components

i n th e

% need an o f f s e t

f o r

th e momentum to i s o l a t e uv from i r

r eg i m e

i n t e g r a l

kmax = . 0 1 ;

samplex=sample ;

m=1;

d=4;

% Two Nodes :

I n t e r n a l L i n e s +p p o i n t −2+I n t e r n a l L i n e s +q p o i n t −2=gnumber

I n t e r n a l L i n e s M a x =(gnumber+4−p p o i n t −q p o i n t ) / 2 ;

I n t e r n a l L i n e s M i n =2;

NodeNumberMax =(gnumber−p p o i n t −q p o i n t +2) / 2 ;

%% th e number o f random s a m p l es

i n th e i n t e g r a l

RainbowCompute( sample ) =0;

RainbowComputetwo =0;

%% number o f e x t e r n a l momenta data p o i n t s

sampleX =100;

%% number o f

i n t e g r a l momenta data p o i n t s

MonteRunSet =100;

kmeasure=kmax/ MonteRunSet ;

%%

p l r ( p p o i n t+q p o i n t , d , 1 0 0 ) =0;

t e s t v e c ( p p o i n t , d , 1 0 0 ) =0;

f o r

samplex =1: sampleX

%% p er m u ta ti o n s e t

f o r permmomenta =1:3

% c l e a r data

6

%%%%%%%%%%%%%%%%% s y m m etr i ze i n th e momenta %%%%%%%%%%%

%% r e p e a t many t i m e s

to monte c a r l o s i m u l a t e th e i n t e g r a l s

NodeNumber =1;

c l e a r

i n t e r n a l l i n e s ;

i n t e r n a l l i n e s ( NodeNumberMax ) =0;

c l e a r

I n t e r n a l T e s t ;

I n t e r n a l T e s t =0;

l t e s t =0;

%% t h i s

e v a l u a t e s a l l

th e g r a p h s

i n th e n o d a l complex

f o r MonteRun =1: MonteRunSet ;

f o r permno =1:NodeNumberPerm

j

r a n g e s

from 1 to NodeNumber

%%
%%

c l e a r

i n t e r n a l l i n e s v a l ;

i n t e r n a l l i n e s v a l ( In ter n a l L i n es M a x , d , NodeNumberMax , NodeNumberPerm ) =0;

R a i n b o w I n t e g r a l ( NodeNumberPerm ) =1;

l e f t n o =0;

r i g h t n o =0;

l e f t n o d e n o =0;

r i g h t n o d e n o =0;

maxrightno =1;

c l e a r k ;

%% s t o r e
%% f o r a l l p er m u ta ti o n s e t s

I n t e r n a l L i n e s V a l ( nodenumber , l i n en u m b er , dimension , p e r m c o n f i g )

c o n t r i b u t i n g to th e rainbow g r a p h s

f o r

j =1:NodeNumberPerm

c l e a r momentumsum ;
momentumsum ( NodeNumberMax , d ) =0;

c l e a r NodeNumberMaxTwo=0;
NodeNumberMaxTwo=0;

f o r Dimension =1:d

f o r NodeNumberTwo =1:NodeNumberMax

f o r LineNumber=1: l i n e c o n f i g ( NodeNumberTwo , j )

i f

l i n e c o n f i g ( NodeNumberTwo , j )>0

7

NodeNumberMaxTwo=NodeNumberTwo ;
LineNumberTwo=LineNumber ;

i n t e r n a l l i n e s v a l ( LineNumber , Dimension , NodeNumberTwo , j ) =(rand ∗

kmax−kmax / 2 ) ;

momentumsum ( NodeNumberTwo , Dimension )=momentumsum ( NodeNumberTwo , Dimension )

+i n t e r n a l l i n e s v a l ( LineNumber , Dimension , NodeNumberTwo , j ) ;

t e s t=i n t e r n a l l i n e s v a l ( LineNumber , Dimension , NodeNumber , j

p r o p a g a t o r s v a l ( LineNumber , Dimension , NodeNumber , j ) =1/( t e s t ˆ2+m

%

%

) ;

ˆ 2 ) ;

end

end

end

end

end

f o r NodeNumber =1:NodeNumberMax

c l e a r d i f f ; d i f f ( d ) =0;

i f NodeNumber>1

i f NodeNumber<NodeNumberMax+1

f o r Dimension =1:d

d i f f ( Dimension )=momentumsum ( NodeNumber −1 , Dimension )−

momentumsum ( NodeNumber , Dimension ) ;

momentumsum ( NodeNumber , Dimension )=momentumsum ( NodeNumber ,

Dimension )+ d i f f ( Dimension ) ;

i n t e r n a l l i n e s v a l ( LineNumberTwo , Dimension , NodeNumber , j )= d i f f (
Dimension )+i n t e r n a l l i n e s v a l ( LineNumberTwo , Dimension ,
NodeNumber , j ) ;

end

f o r Dimension =1:d

end

end

end

i f NodeNumber==1

8

f o r

s =1: p p o i n t

f o r Dimension=1: d

i n t e r n a l l i n e s v a l ( LineNumberTwo , Dimension , NodeNumber , j )=

i n t e r n a l l i n e s v a l ( LineNumberTwo , Dimension , NodeNumber , j )+
kmomol ( s , Dimension , samplex ) ;

momentumsum ( NodeNumber , Dimension )=momentumsum ( NodeNumber ,

Dimension )+kmomol ( s , Dimension , samplex ) ;

%

%

%

%

%

%

%

%

%

%

%

%

%

%

%

end

end

end

i f NodeNumber==NodeNumberMax

f o r

s =1: q p o i n t

f o r Dimension =1:d

end

end

f o r Dimension=1: d

i n t e r n a l l i n e s v a l ( LineNumberTwo , Dimension , NodeNumber , j )=
i n t e r n a l l i n e s v a l ( NodeNumber , Dimension )+kmomor ( s , Dimension , samplex ) ;

momentumsum ( NodeNumber , Dimension )=momentumsum ( NodeNumber ,

Dimension )+kmomor ( s , Dimension , samplex ) ;

d i f f ( Dimension )=−momentumsum ( NodeNumber −1 , Dimension )+

momentumsum ( NodeNumber , Dimension )− i n t e r n a l l i n e s v a l ( LineNumberTwo ,
Dimension , NodeNumber , j ) ;

momentumsum ( NodeNumber , Dimension )=momentumsum ( NodeNumber ,

Dimension )+ d i f f ( Dimension )− i n t e r n a l l i n e s v a l ( LineNumberTwo , Dimension ,
NodeNumber , j ) ;

i n t e r n a l l i n e s v a l ( LineNumberTwo , Dimension , NodeNumber , j )= d i f f (

end

f o r Dimension=1: d

Dimension ) ;

end

end

9

%% data o f v a l u e o f
%% th e v a l u e o f

i n t e r n a l
th e p r o p a g a t o r s

l i n e s
i s

s t o r e d i n i n t e r n a l l i n e s v a l

i s
s t o r e d i n th e p r o p a g a t o r s v a l

%% momentum c o n s e r v a t i o n i s ch o s en to change th e l a s t e n t r y which i s n t

%% end NodeNumberPerm

end

implemented y e t

%%
%% t r e e
%%
%%
%%

e v a l u a t i o n

u s e a c a l l i n g f u n c t i o n

%% a t a node t h e r e a r e two s e t s o f momenta

i n t e r n a l l i n e s v a l ( LineNumber , Dimension , NodeNumber , j )
i n t e r n a l l i n e s v a l ( LineNumber , Dimension , NodeNumber +1 , j )

%%
%%

%%
%%

c a r e must be ta k en to d e f i n e th e e x t e r n a l momenta o f

th e rai nbow g r a p h s

a s momenta i s d e f i n e d from th e

l e f t

to th e node

RainbowComputetwo =0;

%% p er m u ta ti o n s e t

f o r

th e f o u r p o i n t

f u n c t i o n

i f permmomenta==1

kmomol ;

kmomor ;

end

%% 1<−>4

i f permmomenta==2

t e s t v e c ( 1 , : , : )=kmomol ( 1 , : , : ) ;
t e s t v e c ( 2 , : , : )=kmomor ( 2 , : , : ) ;

kmomol ( 1 , : , : )=t e s t v e c ( 2 , : , : ) ;
kmomor ( 2 , : , : )=t e s t v e c ( 1 , : , : ) ;

end

%% 4<−>3 which i s an o v e r a l l 1<−>3

i f permmomenta==3

t e s t v e c ( 1 , : , : )=kmomol ( 1 , : , : ) ;
t e s t v e c ( 2 , : , : )=kmomor ( 2 , : , : ) ;

kmomol ( 2 , : , : )=t e s t v e c ( 1 , : , : ) ;

10

kmomor ( 1 , : , : )=t e s t v e c ( 2 , : , : ) ;

end

% gnumber =8;

% p p o i n t =2;

% q p o i n t =2;

c l e a r kmomoleft ;
c l e a r kmomoright ;

kmomoleft ( p p o i n t , d ) =0;
kmomoright ( q p o i n t , d ) =0;

% s e l e c t

th e

l e f t and r i g h t momenta from a s e t kmomol and kmomor

i s a s u b r o u t i n e to compute th e rainbow i t e r a t i o n s %%%%%%

s i d e number p

s i d e number q

i n t e r n a l

l i n e s

l i n e s

from th e

%%%%% t h i s
%%
%% i n p u t e x t e r n a l
%%
%%
%% with th e number o f c o u p l i n g c o n s t a n t s
%%
%%
%% th e o u tp u t
l i n e s

th e t o t a l number o f

th e v a l u e o f

l e f t
r i g h t

th e g r a p h s

t h i s

i s

i s

%%
%% summed o v e r a l l
%%
%
%%%%% t h e s e a r e th e i n p u t s

t h e i r

c o n t r i b u t i o n s

%% p a r t i t i o n i n t o a l l p o s s i b l e rainbow g r a p h s

%% n p o i n t

t r e e has gnumber=n p o i n t −2

s u b j e c t

to th e number o f

i n t e r n a l

%% rainbow graph with gnumber can have p p o i n t+2+q p o i n t+2+nodenumber ∗2
%%
%%

with a l l 4− p o i n t c o u p l i n g s

max number o f c o u p l i n g s

i n th e i n t e r n a l nodes

−4)

%%

%%
%%

with gnumber can have p p o i n t+q p o i n t +(gnumber−p p o i n t −q p p o i n t

with o n l y two nodes and no i n t e r n a l nodes

% Two Nodes :

I n t e r n a l L i n e s +p p o i n t −2+I n t e r n a l L i n e s +q p o i n t −2=gnumber

I n t e r n a l L i n e s M a x =(gnumber+4−p p o i n t −q p o i n t ) / 2 ;

I n t e r n a l L i n e s M i n =2;

% NodeNumber

i s nodes minus one

%% t h i s

i s

th e max number o f nodes a l l

i n t e r n a l

l i n e numbers a r e two

11

%% NodeNumberMax=(gnumber−p p o i n t −q p o i n t +2) /2

NodeNumberMax =(gnumber−p p o i n t −q p o i n t +2) / 2 ;

RainbowTree = 1 . 0 ;

RainbowDenom = 1 . 0 ;

A tr ee = 1 . 0 ;

Denominator = 1 . 0 ;

RainbowTree = 1 . 0 ;

RainbowDenom = 1 . 0 ;

f o r NodeNumber =1:NodeNumberMax−1

l e f t n o=l i n e c o n f i g ( NodeNumber , permno ) ;

r i g h t n o=l i n e c o n f i g ( NodeNumber +1 , permno ) ;

i f

i f

r i g h t n o >0

l e f t n o >0

%%

%% s t o r e i n th e number o f

l i n e s

to th e r i g h t most node

maxrightno=l i n e c o n f i g ( NodeNumber +1 , permno ) ;

c l e a r k ;

k ( l e f t n o+r i g h t n o , d ) =0;

k ( LineNumber , d i n d ex )=i n t e r n a l l i n e s v a l ( LineNumber , di ndex , NodeNumber ,

f o r LineNumber=1: l e f t n o

f o r d i n d ex =1:d

permno ) ;

end

end

f o r LineNumber=1: l i n e c o n f i g ( NodeNumber +1 , permno )

f o r d i n d ex =1:d

k ( LineNumber+l e f t n o , d i n d ex )=i n t e r n a l l i n e s v a l ( LineNumber , dindex ,

NodeNumber +1 , permno ) ;

12

end

end

%%% t h i s has
%%%

f o r

s e t u p th e momenta v a r i a b l e s
c a l l i n g f u n c t i o n

th e t r e e

i n an a r r a y k 1 k 2 e t c k n

%%%

k 1 k 2 . . . k a

l e f t

k { a+1} . . . k n

r i g h t

%% c a l l

i n th e n u m e r i c a l v a l u e s o f

th e t r e e s

A tr ee=t r e e c a l l ( l e f t n o+r i g h t n o , k , N, t r u e n u m b e r t r e e ) ;

RainbowTree=RainbowTree ∗ A tr ee ;

Denominator=d en o m ca l l ( l e f t n o+r i g h t n o , k ) ;

RainbowDenom=RainbowDenom ∗ Denominator ;

RainbowTree=RainbowTree ∗ kmeasure ˆ ( l e f t n o −1) ;

end

end

%% end th e NodeNumber

l o o p

end

% f i r s t

th e

l e f t one

l e f t n o=p p o i n t ;

%% th e two e x t e r n a l

t r e e s have to be i n c l u d e d

r i g h t n o=l i n e c o n f i g ( 1 , permno ) ;

r i g h t n o d e n o =1;

c l e a r k ; k ( l e f t n o+r i g h t n o , d ) =0;

f o r

i =1: l e f t n o

f o r d i n d ex =1:d

end

end

k ( i , d i n d ex )=kmomol ( i , dindex , samplex ) ;

f o r LineNumber=1: l i n e c o n f i g ( 1 , permno )

13

k ( LineNumber+l e f t n o , d i n d ex )=i n t e r n a l l i n e s v a l ( LineNumber , dindex , r i g h tn o d en o ,

f o r d i n d ex =1:d

permno ) ;

end

end

%% c a l l

i n th e n u m e r i c a l v a l u e s o f

th e

l e f t

t r e e

A tr ee=t r e e c a l l ( l e f t n o+r i g h t n o , k , N, t r u e n u m b e r t r e e ) ;

RainbowTree=RainbowTree ∗ A tr ee ;

Denominator=d en o m ca l l ( l e f t n o+r i g h t n o , k ) ;

RainbowDenom=RainbowDenom ∗ Denominator ;

% th e r i g h t

t r e e

r i g h t n o=q p o i n t ;

f o r

i =1:NodeNumberMax

i f

l i n e c o n f i g ( i , permno ) >0;

l e f t n o=l i n e c o n f i g ( i , permno ) ;

l e f t n o d e n o =i ;

end

end

c l e a r k ;

k ( l e f t n o+r i g h t n o , d ) =0;

k ( LineNumber , d i n d ex )=i n t e r n a l l i n e s v a l ( LineNumber , di ndex , l e f t n o d e n o , permno

f o r LineNumber=1: l e f t n o

f o r d i n d ex =1:d

) ;

end

end

f o r

i =1: q p o i n t

f o r d i n d ex =1:d

k ( i+l e f t n o , d i n d ex )=kmomor ( i , dindex , samplex ) ;

14

end

end

%% c a l l

i n th e n u m e r i c a l v a l u e s o f

th e r i g h t

t r e e

A tr ee=t r e e c a l l ( l e f t n o+r i g h t n o , k , N, t r u e n u m b e r t r e e ) ;

RainbowTree=RainbowTree ∗ A tr ee ;

Denominator=d en o m ca l l ( l e f t n o+r i g h t n o , k ) ;

RainbowDenom=RainbowDenom ∗ Denominator ;

RainbowTree=RainbowTree ∗ kmeasure ˆ ( l e f t n o −1) ;

th e t r e e n o d a l complex e v a l u a t i o n f o r

th e perm

th e i n d i v i d u a l g r a p h s

i n th e n o d a l complex t h i s

i s

%% t h i s c o m p l e t e s
c o n f i g u r a t i o n

%% have to sum o v e r
%%

d en o ted by permno

% e v a l u a t e th e graph

% amputate th e e x t e r n a l

l i n e s

denom =1;

f o r

i =1: p p o i n t

f o r

i =1: q p o i n t

end

end

denom =1/(kmomol ( i , : , samplex ) ∗kmomol ( i , : , samplex ) ’+mˆ 2 ) ∗denom ;

denom =1/(kmomor ( i , : , samplex ) ∗kmomor ( i , : , samplex ) ’+mˆ 2 ) ∗denom ;

R a i n b o w I n t e g r a l ( permno )=RainbowTree ∗RainbowDenom ˆ ( 1 / 2 ) /denom ˆ ( 1 / 2 ) ;

% t h e r e
% d o u b l i n g o f

i s a z 2 s i g n a m b i g u i ty t h a t n eed s

to be d eter m i n ed from th e

t h e p r o p a g a t o r s

i n minkowski s p a c e

%% end o f p er m u ta ti o n s e t

end

R a i n b o w I n t e g r a l S c a l a r=0;

%% add up a l l

th e c o n t r i b u t i o n s

from th e m u l t i p l e

c o n f i g u r a t i o n s

15

f o r

j =1:NodeNumberPerm

R a i n b o w I n t e g r a l S c a l a r=R a i n b o w I n t e g r a l S c a l a r+R a i n b o w I n t e g r a l ( j ) ;

RainbowComputetwo=R a i n b o w I n t e g r a l S c a l a r+RainbowComputetwo ;

end

end

end

end

%% end o f monte c a r l o s i m u l a t i o n

%% end th e permmomenta run

RainbowCompute( samplex )=RainbowComputetwo ;

%% end th e samplex momenta run

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% t r e e c a l l .m
%%
%%

f u n c t i o n [ t r e e c a l l ]= t r e e c a l l ( n , k , N, t r u e n u m b e r t r e e )

t r e e s

e x t e r n a l momenta a r e i n p u t s k ( j , d i n d ex )

th e number o f

l e g s

j = 1 , . . . , n

t i ˆ { [ q ] } m a tr i x from which th e t r e e s a r e made

n p o i n t=n ;

%%
%% n u m e r i c a l v a l u e s o f
%%%
%%
%%
%%
%
%%
%%

n p o i n t

N i s

th e

i s

%%%%% d e f a u l t s

m= 1 . 0 ;

d=4;

TotTreeValue =0;

c l e a r kmominit ;

kmominit ( n , d ) =0;

c l e a r kmomo ;

kmomo( n , d ) =0;

c l e a r k i n d ex ;

k i n d ex ( d ) =0;

16

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% i n p u t a Nmatrix and o u tp u t a number

% sum o v e r

th e t r e e s

f o r

j =1: t r u e n u m b e r t r e e ( n p o i n t )

p o l e =0;

f o r a =1: n p o i n t

f o r

j =1:d

kmominit ( a , j )=k ( a , j ) ;

kmomo( a , j )=k ( a , j ) ;

k i n d ex ( j ) =0;

end

end

kprod =1;

f o r a =1: n p o i n t

f o r b =1: n p o i n t −1

f o r

l =1: n p o i n t

f o r

j =1:d

kmominit ( l , j )=k ( l , j ) ;

kmomo( l , j )=k ( l , j ) ;

k i n d ex ( j ) =0;

end

end

p o l e=N( a , b , j , n p o i n t ) ;

i f p o l e >0

k i n d ex ( : )=kmomo( a , : ) ;

f o r c =1:b

i f a+c−1<n p o i n t+1

f o r e =1:d

k i n d ex ( e )=kmomo( a+c −1 , e )+k i n d ex ( e ) ;

17

end

end

i f a+c−1>n p o i n t

f o r e =1: d

end

end

end

end

k i n d ex ( e )=kmomo( a+c−1−n p o i n t , e )+k i n d ex ( e ) ;

kprod=kprod / ( k i n d ex ∗ kindex ’+mˆ 2 ) ;

% s t o r a g e o f d en o m i n a to r s a s a f u n c t i o n o f

s t e p s

end

end

end

TreeValue=kprod ;

% add up th e t r e e v a l u e s

TotTreeValue=TotTreeValue+TreeValue ;

%% r e s u l t

f o r

th e t r e e v a l u e s

i s TotTreeValue

%% rename to t r e e c a l l

t r e e c a l l=TotTreeValue / 2 ;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%
%%
%%
%%

NodalComplex .m

f u n c t i o n [ NodalComplex , NodeNumberPerm ]= NodalComplex ( gnumber , p p o i n t , q p o i n t )

% c l e a r data
NodeNumber =1;

18

NodeNumberMax =(gnumber−p p o i n t −q p o i n t +2) / 2 ;

c l e a r

l i n e c o n f i g ;

c l e a r

l i n e c o n f i g t w o ;

l i n e c o n f i g ( NodeNumberMax , 1 ) =0;

l i n e c o n f i g t w o ( NodeNumberMax , 1 ) =0;

NodeNumberPerm =1;

l t e s t =0;

ptwo =0;

kSampleMax =400;

% Two Nodes :

I n t e r n a l L i n e s +p p o i n t −2+I n t e r n a l L i n e s +q p o i n t −2=gnumber

I n t e r n a l L i n e s M a x =(gnumber+4−p p o i n t −q p o i n t ) / 2 ;

I n t e r n a l L i n e s M i n =2;

%% c o n f i g s a r e s t o r e d i n th e a r r a y i n t e r n a l l i n e s ( j )

f o r NodeNumber =1:NodeNumberMax

f o r ktwo =1: kSampleMax

c l e a r

i n t e r n a l l i n e s ;

f o r a =1:NodeNumber

i n t e r n a l l i n e s ( a ) =0;

end

f o r

j =1:NodeNumber

I n t e r n a l T e s t =0;

w h i l e I n t e r n a l T e s t <2;

end

end

a d d i n t e r n a l =0;

%% a random s a m p l i n g to d e t e r m i n e th e c o n f i g s

I n t e r n a l T e s t=round ( rand ∗ I n t e r n a l L i n e s M a x ) ;

i n t e r n a l l i n e s ( j )=I n t e r n a l T e s t ;

19

f o r

j =1:NodeNumber

end

a d d i n t e r n a l =a d d i n t e r n a l +i n t e r n a l l i n e s ( j ) ;

r e l a t i o n between gnumber and node l i n e

%%
%%
%% p p o i n t+i n t e r n a l l i n e 1 −2 + i n t e r n a l l i n e 1+i n t e r n a l l i n e 2 −2 + l d o t s +
%%
%%
%%
%% gnumber = p p o i n t+q p o i n t −(NodeNumber +1)∗2+\sumˆ{ NodeNumber } 2∗

i n t e r n a l l i n e ( NodeNumber −1)+i n ter n a l l i n eN o d eN u m b e r −2

+ i n t e r n a l l i n e N o d e N u m b e r+q p o i n t −2

c o n f i g u r a t i o n

i n t e r n a l l i n e J

%% a l l d o u b l e i n t e r n a l

gnumber=p p o i n t+q p o i n t −(NodeNumber +1)∗2+NodeNumber

%%

%%

∗2∗2

a d d i n t e r n a l =2∗ a d d i n t e r n a l +p p o i n t+q p o i n t −2∗(NodeNumber +1) ;

NodeNumber =(gnumber−p p o i n t −q p o i n t +2) /2

i f a d d i n t e r n a l==gnumber

ptwo=ptwo +1;

f o r a =1:NodeNumber

l i n e c o n f i g t w o ( a , ptwo )=i n t e r n a l l i n e s ( a ) ;

end

end

%% end random sample

%% end NodeNumber

l o o p

end

end

% 190 to 312

%% e l i m i n a t e th e d u p l i c a t e s and s t o r e i n l i n e c o n f i g

c l e a r

l i n e c o n f i g ;

l i n e c o n f i g ( NodeNumberMax , 1 ) =0;

c l e a r

f l a g n u m b er ;

c l e a r

flagnumbertwo ;

f l a g n u m b er ( ptwo ) =0;

flagnumbertwo ( ptwo ) =0;

NodeNumberPerm =1;

20

t e s t t w o=t e s t t w o+abs ( l i n e c o n f i g t w o ( j , r )−l i n e c o n f i g t w o ( j , s ) ) ;

f o r

r =1: ptwo−1

f o r

s=r : ptwo

t e s t t w o =0;

f o r

j =1:NodeNumberMax

end

i f

t e s t t w o==0

% i f

r<s

i f

flagnumbertwo ( s )==0

f l a g n u m b er ( r ) =1;
flagnumbertwo ( s ) =1;

end

% end

end

end

end

f o r

r =1: ptwo

i f

f l a g n u m b er ( r )==1

l i n e c o n f i g ( : , NodeNumberPerm )=l i n e c o n f i g t w o ( : , r )

NodeNumberPerm=NodeNumberPerm +1;

end

end

NodeNumberPerm=NodeNumberPerm −1;

%%% t h i s c o m p l e t e s
%%% t h i s o r d e r

and

th e p o s s i b l e p e r m u t a t i o n s o f nodes and i n t e r n a l

l i n e s a t

NodeNumberPerm i s

th e number o f p e r m u t a t i o n s

th e v a r i a b l e

%%% a l l p o s s i b l e node c o n f i g u r a t i o n s and i n t e r n a l
%%
%%%
%%%
%%%
%%%
%%%
%%%
%%

NodeNumber=node number

l i n e c o n f i g ( NodeNumber , a )

a=c o n f i g u r a t i o n number up to NodeNumberPerm

l i n e s a r e s t o r e d i n

21

%%%

NodalComplex=l i n e c o n f i g ;

NodalComplexPerm=NodeNumberPerm ;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%
%%
%%
%%

NMatrix .m

f u n c t i o n [ NMatrix , t r u e n u m b e r t r e e ]= NMatrix ( n p o i n t , n p o i n t l o w e r )

n=n p o i n t ;

% n p o i n t l o w e r

i s a n o t h e r u s e f u l d e l i m i t e r

%%
%% t i ˆ { [ q ] } f o r m a t i o n f o r
%%
%%
%%
%%

m a tr i x N i s

n p o i n t

i s

t r e e s

th e m a tr i x o f

t r e e s

th e r e q u i r e d d i m en s i o n and i s

i n p u t

i , q r e p r e s e n t

t i ˆ { [ q ] }

spanned by N( i , q , j ,m) with m c o r r e s p o n d i n g to m−p o i n t

j c o r r e s p o n d s

to th e d i f f e r e n t

t r e e s up to t r u e n u m b e r t r e e (m)

%%
%%
%%
%%
%%

c l e a r N;

c l e a r
treenumber ( n p o i n t ) =0;

treenumber ;

f o r

s p o i n t=n p o i n t l o w e r : n p o i n t

r p o i n t=n p o i n t −s p o i n t+n p o i n t l o w e r ;

n=r p o i n t ;

c l e a r

sigmanumber ;

c l e a r

f l a g n u m b er ;

f o r k =1:Gamma( n+1)

sigmanumber ( 1 , k )=n ;

f o r

j =2:n−2

22

sigmanumber ( j , k ) =0;

x =1;

w h i l e x<2

x=round ( n∗ rand ) ;

sigmanumber ( j , k )=x ;

end

end

end

f o r k =1:Gamma( n+1)

f o r m=1:Gamma( n+1)

f o r

j =1:n−3

end

end

end

end

% r e o r d e r

th e e n t r i e s and e l i m i n a t e redundancy

i f

sigmanumber ( j , k )<sigmanumber ( j +1 ,k )

t e s t 1 =sigmanumber ( j , k ) ;

t e s t 2 =sigmanumber ( j +1 ,k ) ;

sigmanumber ( j , k )=t e s t 2 ;

sigmanumber ( j +1 ,k )=t e s t 1 ;

%% th e redundancy i n sigmanumber

i s

e l i m i n a t e d

%% v a l u e s a r e s t o r e d i n rp

%% n o te t h a t

th e z e r o v e c t o r

i s a l l o w e d

v=s i z e ( sigmanumber ) ; dimp=v ( 2 ) ;

f o r

i =1: dimp

f l a g n u m b er ( i ) =0;

end

23

f o r

i =1: dimp

% redundancy ch eck

f o r m=1: dimp

f l a g n u m b er (m) =1;

i f m==i

end

i f m˜= i

end

end

end

end

t o t a l f l a g n o =0;

f o r

i =1: dimp

t e s t m i n =0;

f o r

j =1:n−2

i f

sigmanumber ( : ,m)==sigmanumber ( : , i )

i f

i >m

e l s e

end

f l a g n u m b er (m) =0;

f l a g n u m b er (m) =1;

i f

sigmanumber ( j , i )==2

t e s t m i n=t e s t m i n +1;

end

end

i f

tes tm i n >1

24

f l a g n u m b er ( i ) =0;

t o t a l f l a g n o=t o t a l f l a g n o+f l a g n u m b er ( i ) ;

end

end

rp ( 1 , 1 ) =0; c l e a r

rp

f o r

i =1: t o t a l f l a g n o

f o r

j =1:n−2

rp ( j , i ) =0;

end

end

k=0;

treenumbertwo =0;

f o r

i =1: dimp

% e l i m i n a t e d u p l i c a t e g r a p h s

i f

f l a g n u m b er ( i )==1

k=k +1;

rp ( : , k )=sigmanumber ( : , i ) ;

treenumbertwo=treenumbertwo +1;

end

end

P=rp ;

treenumber ( r p o i n t )=treenumbertwo ;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% 2 ) deduce th e
%%
%%
%%

s t o r e

i n m a tr i x T( i , q , t r e e n o )

t i ˆ { [ q ] } v a r i a b l e s

c l e a r P ;

25

c l e a r M;

M( n p o i n t , n p o i n t , treenumber ( n p o i n t ) ) =0;

f o r

t r e e n o =1: treenumber ( r p o i n t )

f o r

i =1: n

f o r q =1:n−1

M( i , q , t r e e n o ∗ r p o i n t ) =0;

end

end

end

f o r

t r e e n o =1: treenumber ( r p o i n t )

% f o r b=0:n−2

b=0;

%% f i r s t

c o n s t r u c t

( p , [ p m ] )

s e t s ,

i n P( i , j , t r e e n o ) m a tr i x

f o r

j =1: n

P( j , t r e e n o ) =0;

Qo( j , t r e e n o ) =0;

PP( j , t r e e n o ) =0;

Q( j , t r e e n o ) =0;

end

f o r

j =1: n

f o r

i =1:n−2

i f

rp ( i , t r e e n o )==j

P( j , t r e e n o )=P( j , t r e e n o ) +1;

Qo( j , t r e e n o )=Qo( j , t r e e n o ) +1;

Q( j , t r e e n o )=Qo( j , t r e e n o ) ;

26

end

i f

j <n

i f P( j , t r e e n o )>0

f o r k=j +1: n

PP( k , t r e e n o )=P( j , t r e e n o ) ;

end

end

end

end

end

f o r

j =1: n

end

end

i f P( j , t r e e n o )==0

P( j , t r e e n o )=PP( j , t r e e n o ) ;

%% th e numbers
%% T i s

i n i t i a l i z e d to z e r o

l a b e l i n g th e g r a p h s a r e s t o r e d i n rp ( i , j ) with f i r s t

e n t r y n

%% to f i n d a p o l e n−1=number o f nodes :

s e a r c h f o r

s u b t r e e s

%% s ca n a l l

i n i t i a l

l i n e s

%% f i n a l l i n e −i n i t i a l i n e −1=nodes

i n t r e e between f i n a l l i n e and i n i t i a l l i n e

m=n ;

b=0;

n o d es 1 =0; n o d es 2 =0;

% permute th e roundabout

l a b e l i n g a s 1−>permn

f o r

j =1:n

i f

j+b<n+1

Q( j , t r e e n o )=Qo( j+b , t r e e n o ) ;

27

end

i f

j+b>n

end

end

Q( j , t r e e n o )=Qo( j+b−n , t r e e n o ) ;

f o r

i n i t i a l l i n e =1:n−1

f o r

f i n a l l i n e= i n i t i a l l i n e +1:n

n o d es 1 =0; n o d es 2 =0;

i n i t c o u n t=Q( i n i t i a l l i n e , t r e e n o ) ;

f i n a l c o u n t=Q( f i n a l l i n e , t r e e n o ) ;

Qsum=0;

% around c l o c k w i s e th e t r e e diagram

i f

f i n a l l i n e − i n i t i a l l i n e >1

i f

i n i t c o u n t ==0

i f

f i n a l c o u n t >0

f o r k =1: f i n a l c o u n t

Qsum=0;

f o r a l p h a= i n i t i a l l i n e +1: f i n a l l i n e −1

Qsum=Qsum+Q( alpha , t r e e n o ) ;

end

Qsum=Qsum+k ;

% s k i p p i n g r u l e a p p l i e d h e r e

i f Q( f i n a l l i n e −1 , t r e e n o )==0

% ch eck f o r

s u b t r e e

i f Qsum==f i n a l l i n e − i n i t i a l l i n e

28

i= i n i t i a l l i n e ;

q=f i n a l l i n e − i n i t i a l l i n e +1;

M( i , q , t r e e n o )=b+1;

end

end

end

end

end

end

% f i n a l l i n e − i n i t i a l l i n e =1 c a s e

i f

f i n a l l i n e − i n i t i a l l i n e ==1

i f Q( i n i t i a l l i n e , t r e e n o )==0

i f Q( f i n a l l i n e , t r e e n o )>0

i= i n i t i a l l i n e ;

q=f i n a l l i n e − i n i t i a l l i n e +1;

M( i , q , t r e e n o )=b+1;

end

end

end

% end o f

i n i t a l l i n e and f i n a l l i n e

l o o p

end

end

% end

end

% end o f

th e p er m u ta ti o n

% end th e t r e e graph co u n t

% no end to th e s p o i n t

l o o p y e t

29

% permute th e m a t r i c e s

% w a s t e f u l o f memory

f o r

i =1: r p o i n t

t r e e n o=treenumber ( r p o i n t ) ;

f o r

s =1: treenumber ( r p o i n t )

f o r a =1: r p o i n t

f o r b=1: r p o i n t

M( a+i −1 ,b , ( i −1)∗ t r e e n o+s )=M( a , b , s ) ;

i f a+i −1<r p o i n t +1

end

i f a+i −1>r p o i n t

M( a+i −1−r p o i n t , b , ( i −1)∗ t r e e n o+s )=M( a , b , s ) ;

end

end

end

end

end

% f o r

t r e e n o =1: r p o i n t ∗ treenumber ( r p o i n t )

% f o r

i =1:n

f o r q =1:n−2

i f M( i , q , t r e e n o )==1

M( i+q+1 ,n−q , t r e e n o ) =0;

i f

i+q<n

end

i f

i+q>n

M( i+q−n , n−q , t r e e n o ) =0;

end

end

30

%

%

%

%

%

%

%

%

%

% M( i , r p o i n t , t r e e n o ) =0; M( i , 1 , t r e e n o ) =0; M( i , r p o i n t −1 , t r e e n o ) =0;

%

end

% end

% end

f o r

j =1: r p o i n t ∗ treenumber ( r p o i n t )

f o r k=j +1: r p o i n t ∗ treenumber ( r p o i n t )

t e s t=abs (M( s , t , j )−M( s , t , k ) )+t e s t ;

M( 1 , 1 , k )=M( 1 , 1 , k ) +43∗ rand ;

t e s t =0;

f o r

s =1: r p o i n t

f o r

t =1: r p o i n t

end

end

i f

t e s t ==0

i f k>j

end

end

end

end

% t h e r e c o u l d be an e r r o r

i n th e

t i ˆ { [ q ] } m a tr i x but not

l i k e l y

N b ef o r e ( r p o i n t , r p o i n t , r p o i n t ∗ treenumber ( r p o i n t ) ) =0;

N( r p o i n t , r p o i n t , r p o i n t ∗ treenumber ( r p o i n t ) , r p o i n t ) =0;

n i n d ex =0;

sumM=0;

f o r

s =1: r p o i n t ∗ treenumber ( r p o i n t )

31

f o r

i =1: r p o i n t

f o r

j =1: r p o i n t

sumM=sumM+M( i , j , s ) ;

end

end

end

end

end

i f sumM==r p o i n t −3

n i n d ex=n i n d ex +1;

N b ef o r e ( : , : , n i n d ex )=M( : , : , s ) ;

N ( : , : , : , r p o i n t )=N b ef o r e ( : , : , : ) ;

t r u e n u m b e r t r e e ( r p o i n t )=n i n d ex ;

%%% end l o o p on th e r p o i n t

i n d e x

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% i n n e r p r o d u c t .m
%%
%%

l o a d Nmatrix

f o r

j =1: p p o i n t

end

i n n e r p r o d u c t=t e s t ;

t e s t=t e s t+kmomoleft ( j , : ) ∗ kmomoright ( j , : ) ’ ;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%
%%
%%

d en o m ca l l .m

32

f u n c t i o n [ i n n e r p r o d u c t ]= i n n e r p r o d u c t ( p p o i n t , q p o i n t , kmomoleft , kmomoright )

f u n c t i o n [ d en o m ca l l ]= d en o m ca l l ( n u m b er l i n es , k )

m= 1 . 0 ;

denom =1;

d=4;

f o r

i =1:d

p ( i ) =0;

end

f o r

j =1: n u m b e r l i n e s

f o r

i =1:d

q ( i )=k ( j , i ) ;

end

end

d en o m ca l l=denom ;

denom=denom / ( q∗q ’+mˆ 2 ) ;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

33

