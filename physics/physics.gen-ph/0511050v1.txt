Program for IIB Derivative Corrections

Gordon Chalmers

e-mail: gordon@quartz.shango.com

Abstract

A Matlab program is presented that computes derivative corrections in the S-
dual invariant formulation for IIB graviton scattering to any order in perturbation
theory. The coeﬃcients of the four-point function are produced, pertaining to the
non-logarithmic terms. The program can be modiﬁed to ﬁnd coeﬃcients of the higher-
point functions. Instantons have not explicitly been included.

5
0
0
2
 
v
o
N
 
5
 
 
]
h
p
-
n
e
g
.
s
c
i
s
y
h
p
[
 
 
1
v
0
5
0
1
1
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

The graviton scattering amplitude in IIB superstring theory has been investigated
recently in the context of manifesting S-duality. This manifestly S-dual graviton
scattering has been analyzed systematically in [1], and references therein.

This text contains a computing program that automates the perturbative calcu-
lations. To any order in derivatives this program computes the analytic portion of the
graviton scattering, in the ﬂat ten-dimensional superstring theory. The D-instantons
are allowed to be included, but their form is not placed in the program.

The program is written in Matlab, and follows the procedure in [1] by partitioning

numbers and attaching weighted trees to these numbers.

Given the large number of papers on the topic, the author decided to place it on

the archive. The Matlab program may be found by downloading the TeX source.

The quantum gravitational action may be numerically studied with this program,

at the

kR4 level, with any set of integers k.

References

[1] Gordon Chalmers,
physics/0510233.

Symmetry Algebra

of

IIB Superstring Scattering,

2

Matlab Program

clear all

Nmin=1; Nmax=10;

trialnumber=200;

yp=0; ﬂagno=1;

nullcase=0;

trialnumber=200

for i=Nmin:Nmax

x(1,1)=0; p(1,1)=0; rp(1,1)=0; ﬂagnumber(1)=0;

nullcase=0; a=0; dimp=0; ﬂagno=0; timem=0;

for j=1:round(Nmax/3)

Oone(i)=0; Partitiontype(i,j)=0;

end

end

for N=1:Nmax

for Np=1:round(Nmax/3);

totalﬂagno=0; v(1)=0; yp=0;

clear x,p,rp,ﬂagnumber,nullcase;

clear a,dimp,ﬂagno;

clear timem,totalﬂagno,v,yp;

x(1,1)=0; clear x p(1,1)=0; clear p

clear i

if Np¡=N

for j=1:trialnumber

for i=1:Np

x(i,j)=0; p(i,j)=0;

end

end

3

for j=1:trialnumber

ﬂagno=1; timem=0; nullcase=0;

x(i,j)=2*round(((N-1)/2-1)*rand)+3;

while ﬂagno==1

yp=0;

for i=1:Np

yp=yp+x(i,j);

end

ﬂagno=1;

if yp==N

p(:,j)=x(:,j);

ﬂagno=0;

end

timem=timem+1;

if timem¿trialnumber

ﬂagno=0;

nullcase=1;

end

if nullcase==1

sp=0;

j=101;

end

end

end

if nullcase =1

for j=1:trialnumber

for m=1:trialnumber

for a=1:Np

4

for b=1:Np

if a¡b

if p(a,j)¿p(b,j)

test1=p(a,j); test2=p(b,j);

p(b,j)=test1; p(a,j)=test2;

end

end

end

end

end

end

end

end

end

v=size(p); dimp=v(2);

for i=1:dimp

ﬂagnumber(i)=0;

end

for i=1:dimp

for m=1:dimp

if m==i

ﬂagnumber(m)=1;

end

if m =i

if i¿m

if p(:,m)==p(:,i)

ﬂagnumber(m)=0;

else ﬂagnumber(m)=1;

5

totalﬂagno=totalﬂagno+ﬂagnumber(i);

end

end

end

end

end

end

end

end

end

end

totalﬂagno=0;

for i=1:dimp

rp(1,1)=0; clear rp

for i=1:totalﬂagno

for j=1:Np

rp(j,i)=0;

sp=0; k=0;

for i=1:dimp

if ﬂagnumber(i)==1

k=k+1;

rp(:,k)=p(:,i);

sp=sp+1;

sp2=sp; test=0;

for k=1:sp2

for l=1:Np

test=test+rp(l,k);

sp=test/N

6

Partitiontype(1,i)=0; Partitiontype(2,i)=0;

Partitiontype(N,Np)=sp;

Oone(N)=Oone(N)+Partitiontype(N,j);

for i=1:Np

end

end

end

for j=1:Np

end

end

clear sp;

clear i

tau=i*1;

Nmin=1; Nmax=10;

tau1=real(tau); tau2=imag(tau);

trialnumber=200;

A1=1;A2=1;

for i=1:Nmax

tensorc(i)=1;

end

for i=1:Nmax

for j=1:round(Nmax/3)

Amp(i,j)=0;

end

end

for N=1:Nmax

for Np=1:round(Nmax/3);

if Partitiontype(N,Np) =0

7

yp=0; ﬂagno=1;

nullcase=0;

x(1,1)=0; p(1,1)=0; rp(1,1)=0; ﬂagnumber(1)=0;

nullcase=0; a=0; dimp=0; ﬂagno=0; timem=0;

totalﬂagno=0; v(1)=0; yp=0;

clear x,p,rp,ﬂagnumber,nullcase;

clear a,dimp,ﬂagno;

clear timem,totalﬂagno,v,yp;

if Np¡=N

x(1,1)=0; clear x p(1,1)=0; clear p

for j=1:trialnumber

for i=1:Np

x(i,j)=0; p(i,j)=0;

end

end

for j=1:trialnumber

ﬂagno=1; timem=0; nullcase=0;

x(i,j)=2*round(((N-1)/2-1)*rand)+3;

while ﬂagno==1

yp=0;

for i=1:Np

yp=yp+x(i,j);

end

ﬂagno=1;

if yp==N

p(:,j)=x(:,j);

ﬂagno=0;

end

8

timem=timem+1;

if timem¿trialnumber

ﬂagno=0;

nullcase=1;

end

if nullcase==1

sp=0;

j=101;

end

end

end

if nullcase =1

for j=1:trialnumber

for m=1:trialnumber

for a=1:Np

for b=1:Np

if a¡b

if p(a,j)¿p(b,j)

test1=p(a,j); test2=p(b,j);

p(b,j)=test1; p(a,j)=test2;

end

end

end

end

end

end

v=size(p); dimp=v(2);

for i=1:dimp

9

ﬂagnumber(i)=0;

end

for i=1:dimp

for m=1:dimp

if m==i

ﬂagnumber(m)=1;

end

if m =i

if i¿m

if p(:,m)==p(:,i)

ﬂagnumber(m)=0;

else ﬂagnumber(m)=1;

end

end

end

end

end

end

end

end

totalﬂagno=0;

for i=1:dimp

rp(1,1)=0; clear rp

for i=1:totalﬂagno

for j=1:Np

rp(j,i)=0;

sp=0; k=0;

totalﬂagno=totalﬂagno+ﬂagnumber(i);

10

for i=1:dimp

if ﬂagnumber(i)==1

k=k+1;

rp(:,k)=p(:,i);

sp=sp+1;

end

end

instanton=0;

w=size(rp)

dimbase2N=w(1);

Q=0;

AmpNNp=0;

for m=1:w(2)

R(m)=0; T(m)=1;

for i=1:dimbase2N

S(i)=0; zs(i)=0;

for m=1:w(2)

if rp(:,m) =0

for i=1:dimbase2N

zs(i)=rp(i,m);

end

end

end

for A=1:base2N

Q=A-1;

for l=1:dimbase2N

if l =dimbase2N

Q=P;

11

if l==dimbase2N

end

if Q==1

a(1)=1;

end

if Q==0

a(1)=0;

end

end

end

k=N-3;

s=3/2+(N-3)/2;

if mod(k,2)==0

gmax=1/2*(k+2);

end

end

if mod(k,2)==1

gmax=1/2*(k+1);

for i=1:dimbase2N

if a(i)==0

if instanton==1

S(i)=0;

end

end

S(i)=0;

end

if a(i)==1

if instanton==1

12

T(m)=T(m)*S(i);

R(m)=R(m)+T(m);

for c=1:w(2)

Amp(N,Np)=Amp(N,Np)+R(c);

AmpNNp=AmpNNp+R(c);

for i=1:Nmax

Coeﬀ(i)=0;

for j=1:round(Nmax/3)

Coeﬀ(i)=Coeﬀ(i)+tensorc(i)*Amp(i,j);

end

end

end

end

end

end

end

end

end

end

end

end

end

13

