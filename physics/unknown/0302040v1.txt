A Symbolic-Numerical Approach for the 
Sensitivity Analysis of Dielectric Resonator 
Sensors

Remi Barrere, Pierre Boughedaoui, Michelle Valentin
University of Franche-Comte, ENSMM
26 chemin de l'Epitaphe
F-25000 Besancon, France
rbarrere@ens2m.fr

A theoretical model based on the transverse resonance method is proposed for the description of cylindrical 
multilayer dielectric resonator sensors. From this model, the resonant frequency and the sensitivities with 
respect to geometrical and physical parameters are computed by means of a combination of symbolic and 
numerical procedures. These are gathered together in a package in view of the computer assisted design of this 
range of sensors. On this occasion, a few design patterns for engineering applications are sketched.

February  12, 2003

1.  Introduction

Dielectric resonator sensors

In recent years, considerable attention has been devoted to dielectric resonators with a high permittivity, a low material loss
(hence  high  quality  factor  Q)  and  a  very  low  resonant  frequency  temperature  coefficient.  These  compact  dielectric
resonators  alternate  the  conventional  metallic  resonant  cavities  at  microwave  frequencies.  Figure  1  shows  the  field
distribution of the lowest order mode TE01 d : unlike  a metallic resonator,  the field extends beyond the bulk of the device.
This evanescent field enables external coupling of microwave energy in the vicinity of the dielectric resonator.

Figure  1. Field  distribution  of  the TE01d  mode  of a dielectric  resonator  : magnetic  field lines  are shown  on the  left,  whereas  electric  field lines are shown
on the right.

In applications  such as  low noise  sources  and low  loss filters, the evanescent nature  of the field patterns requires  that the
resonator  is  screened  by  a  metallic  housing  to avoid  radiation  losses  and  environmental  influences.  In  microwave  sensor
applications, dielectric resonators are best suited because of the environmental influence on the resonant frequency and the
high accuracy of frequency measurements.

Modelling and computing

The  theoretical  models  of  electromagnetic  devices  generally  lead  to equations  that  have  no known  exact  solution,  except
for the case of simple structures. That is why physicists or engineers most often resort to numerical techniques, such as the
finite  difference  method  [1]  or  the  finite  element  method  [2].  However,  these  have  drawbacks,  especially  in  the  case  of
sensitivity  analysis;  indeed,  purely  numerical  techniques  entail  repetitive  computations  where  a  single  symbolic  formula
would give the required result.

These  are  the  reasons  why  a  mixed  symbolic-numerical  approach  is  put  forward.  It  is  based  on  the  transverse  resonance
method, which  leads  to a  system of  transcendental  equations.  The computation  of resonant  frequencies,  which  entails the
solution  of  that  system,  rests  on  a  numerical  technique:  either  the  secant  method  or  Newton's  method.  Then,  the
computation of sensitivities, which consists in evaluating partial derivatives, rests on computer algebra capabilities.

2

SensorModelling.nb

These  are  the  reasons  why  a  mixed  symbolic-numerical  approach  is  put  forward.  It  is  based  on  the  transverse  resonance
method, which  leads  to a  system of  transcendental  equations.  The computation  of resonant  frequencies,  which  entails the
solution  of  that  system,  rests  on  a  numerical  technique:  either  the  secant  method  or  Newton's  method.  Then,  the
computation of sensitivities, which consists in evaluating partial derivatives, rests on computer algebra capabilities.

A package for the CAD of dielectric resonator sensors

According  to  the  technical  application,  the  designer  will choose  a  convenient  set  of  geometrical  and  physical  parameters
and compute  the resonant frequency and certain  sensitivities. In order to optimize  this choice, he or she may have to vary
some  of  these  parameters.  A  package  called  SensorDesign  was  created  with  that  purpose,  which  can  thus  be  used  as  a
computer  assisted  design  system  for    this  range  of  sensors.  Its  core  consists  of  an  expression  (a  data  structure)  that
describes the sensor with its parameters, together with the aforementioned numerical and symbolic procedures.

2.  Mathematical model of the sensor

Description of the sensor

The resonator consists of three layers, as shown in Figure 2: 
• a substrate (dielectric cylinder with radius b , height h1  and relative permittivity ∂1 );
• a  median  layer with  a core  (cylindrical  dielectric  resonator  with radius  a , height  h2  and  relative  permittivity ∂dr )  and a
ring (with inner radius a , outer radius b , height h2  and relative permittivity ∂2 );
• an upper layer (dielectric cylinder with radius b , height h3  and relative permittivity ∂3 ).

This  multilayer  structure  is  placed  into  a  cylindrical  metallic  cavity  of  radius  b  and  height  h1 +h2 +h3 ,  which  acts  as  a
shield.  So the  structure  can be  viewed  as  three cylindrical  waveguides  placed ends  on,  a heterogeneous  waveguide being
placed between two homogeneous ones. In a number of applications, ∂2  and ∂3  are identical. In all cases, the materials are
supposed to be homogeneous and isotropic.

Figure 2. Geometrical  structure  and physical  parameters  of the resonator.

A variation of the resonant frequency occurs when h3  or ∂3  varies, i.e., the frequency is a function of the displacement  of
the  upper  plate  or  of  the  material  of  the  upper  layer.  So,  the  system  can  be  viewed  as  a  transducer  that  measures  these
displacements  or  permittivities,  or  other  characteristics  of  the  layers  or  the  structure.  Multiple  applications  are  possible,
such as displacement or pressure sensors, humidity probes or devices for measuring complex electromagnetic parameters.

Modelling the sensor

In  order  to  make  the  model  simple  enough,  a  few  physical  assumptions  are  necessary.  Conductors  and  dielectrics  are
supposed to be lossless. So, lossless propagation along the z-axis is assumed for the median heterogeneous waveguide, with
evanescent waves in the ring. Evanescent waves are supposed to take place in the  homogeneous waveguides at each end of
the  sensor.  So,  the  core  of  the  sensor  is  the  resonant  part  of  the  structure.  This  is  obtained  by  choosing  the  highest
permittivity for it.

Only the first transverse electric (TE01 d ) or magnetic (TM01 d ) modes with cylindrical symmetry (no angular variation) will
be  considered.  Experiments  show  that  these  modes  are  well  isolated  from  higher  order  modes,  thus  avoiding  undesirable
couplings. 

As shown in Figure 3, the volume of the sensor can be divided into 6 zones (3 cylinders C1 , C2 , C3  and 3 rings R1 , R2 ,
R3 )  with  3  surfaces  of  discontinuity:  the  planes  S1  and  S2  and  the  cylinder  S3  (S0  refers  to  the  ground).  The
electromagnetic field is supposed to propagate in the core C2  and to be evanescent inside the cylinders C1  and C3  and the
ring R2 . It is supposed to be zero inside the rings R1  and R3 , except when b/a>1.

SensorModelling.nb

3

As shown in Figure 3, the volume of the sensor can be divided into 6 zones (3 cylinders C1 , C2 , C3  and 3 rings R1 , R2 ,
R3 )  with  3  surfaces  of  discontinuity:  the  planes  S1  and  S2  and  the  cylinder  S3  (S0  refers  to  the  ground).  The
electromagnetic field is supposed to propagate in the core C2  and to be evanescent inside the cylinders C1  and C3  and the
ring R2 . It is supposed to be zero inside the rings R1  and R3 , except when b/a>1.

Figure 3. Three  surfaces  delimiting  six zones, where  different  behaviors  occur.

The choice of the model mainly depends on the ratio b/a. In view of comparisons with experimental data, when the ratio b/a
is close to 1 (b/a≈1), the mediums 1 and 3 are assumed to be cylindrical electric-wall waveguides with radius b. Otherwise,
when b/a is large (b/a>>1), these are assumed to be cylindrical magnetic-wall waveguides with radius a.

From these assumptions, a model of the resonator can be established, based on the transmission line analogy. Each layer is
modeled by a transmission line called TLi  (Figure 4) the characteristics of which are determined below.

Figure 4. The multilayer  sensor  as a transmission  line.

Characteristic equation

The characteristic impedance  Zci  of the ith  equivalent transmission line is expressed from the propagation constant gi  by:
Zci = j w m0
gi  for a TE mode, and Zci = gi / j w ∂0  ∂ri  for a TM mode. For lossless dielectric material, the permeability is
m0  and  the  permittivity  ∂0  ∂ri  is  real.  The  propagation  constants  are  either  imaginary  or  real,  according  to  whether  the
modes are evanescent or propagate; they satisfy the following relationships, where k0  is the wavenumber in vacuum:

g1 =

- k0

2  ∂1

; g3 =

- k0

2 ∂3

; g2 = j

k0

2  ∂dr - x1

2

1ÅÅÅÅÅ2

1ÅÅÅÅÅ2

2

xmÅÅÅÅÅÅÅÅÅÅ
r

1ÅÅÅÅÅ2

2

ê
xmÅÅÅÅÅÅÅÅÅÅ
r

M

JI

The  first  two  relations  which  concern  homogeneous  cylindrical  waveguides  are  well-known  [3].  For  the  median
heterogeneous  waveguide,  the  third  relation  is  obtained  with  the  assumption  that  propagation  occurs  along  the  rod
internally and the fields decay exponentially outside the rod. Moreover, in that case, the characteristic equation connecting
the radial wavenumbers in the dielectric media C2  and R2  respectively can be computed by means of the radial transverse
resonance method [4, 5]:

JI

N

N

H

L

M

+

J0  ´ 
x1  a
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
x1  a
x1  a
J0  ´
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
H
L
x1  a

∂dr  

P0  ´ 
x2 a
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
x2  a

+ ∂ 

x2  a
R0  ´
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
H
L
x2  a

= 0 for a TE0 m  mode

= 0 for a TM0 m  mode.

 

H

L

H

L

where P0 ´

x2  a

 and R0  ´

x2  a

 derive from:

Pn

x2  r
H

= Jn
L

x1  a

 

 In ' 
x2  r
Kn
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
 In ' 
x2  a
Kn
L
H

x2 b
x2 b

ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ

- In
- In

 Kn ' 
x2  r
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
 Kn ' 
x2  a

x2  b
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
x2  b

H

L

H

L

H
H

L
L

H
H

L
L

H
H

L
L

H
H

L
L

SensorModelling.nb

Rn

x2  r

= Jn

x1  a

 

x2  r
 In
Kn
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
 In ' 
x2  a
Kn

x2  b
x2  b

- In
- In

x2  b
 Kn
x2  r
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
ÅÅÅÅÅÅÅÅÅÅÅÅ
x2  b
 Kn
x2  a

ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ

• for the electric-wall model: r = b, xm  is the mth  zero of Jn
H
H
modes (where Jn
H
H
• for the magnetic-wall model: r = a, and the previous eigenvalues are still valid by inverting the TE and TM modes.

H
L
 denotes the nth  Bessel function);
L
H

 for the TEnm  modes and the mth  zero of J´n

H
H

L
L

L
L

H
x

x
L

x

L

H

L

L

 for the TMnm

H

L

H

L

The transverse resonance method
L

H

The  analysis  of  a  multilayer  structure  by  the  transverse  resonance  method  consists  in  determining  an  equivalent
transmission  line  for  the  composite  structure.  The  mode  matching  condition  for the  electromagnetic  field  is  expressed  in
terms of impedance or admittance of the equivalent network on the planes of discontinuity.

The reference plane can be chosen anywhere, but for convenience, it is preferably chosen at a surface of discontinuity. For
instance, in the following, S2  will be selected as the reference plane. Then, Z+  denotes the impedance of the short-cicuited
transmission line TL3 , whereas Z-  denotes the impedance of line TL2  loaded by the shorted-circuited line TL1  (Figure 4).
The resonance condition of the system is obtained from: Z+ + Z- = 0 .

These impedances are derived from the well-known formula of impedance transformation on lines [3]:

Z + = Zc3  th

g3  h3

; Z - = Zc2  

Zc1  th
g1  h1
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
g1  h1
Zc2 + Zc1  th

+ Zc2  th
th

g2  h2
g2  h2

So, the resonance condition Z- + Z+ = 0 can be rewritten:
L
a1
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
a1  h1
b th

H
ßh = arctan 

+ arctan

L
a3
H
L
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
a3  h3
b th

H

H
H
 

L
L

∂rd
ÅÅÅÅÅÅÅÅÅ
b

 

a1ÅÅÅÅÅÅÅ
H
∂1

E
L
a1  h1

 th

A
+ arctan

H

∂rd
ÅÅÅÅÅÅÅÅÅ
b

 

E
a3ÅÅÅÅÅÅÅ
L
 th
∂3

a3  h3

for TEn m p  modes, or:
A

ßh = arctan

for TMn m p  modes.

Computational aspects

A

H

LE

A

H

LE

Finally,  the  resonant  frequency  f  is  determined  from  the  characteristic  equation  and  the  resonance  condition,  that  is  by
solving a system of two transcendental equations.

A  numerical  technique  is  required  to  solve  this  system,  hence  the  name  of  the  function :  NFrequency.  It  directly  uses
FindRoot,  i.e.,  the  secant  method  or  the  Newton  one.  The  former  (the  default  one)  turns  out  to  be  faster,  whereas  the
latter  may  be  used  when  precise  results  are  required.  The  method  is  chosen  by  means  of  an  option  associated  with
NFrequency.

In  the  package,  the  initial  values  of  the  resonant  frequency  f  and  the  eigenvalue  x  for  the  TE01 d  mode  are  respectively
obtained  by  using  the  simplified  physical  model  of  the  cylindrical  dielectric  resonator  of  which  all  surfaces  are  perfect
magnetic-walls [6] and the approximate expression given by [7].

The  following  examples  are  processed  with  a  366MHz  RISC  CPU  running  Mathematica  4.0.  New[Sensor]  creates  a
sensor object with standard default values.

4

 

defaultSensor = New

Sensor

Sensor

h1 Ø 0.00127, h2 Ø 0.015, h3 Ø 0.003,

a Ø 0.0175, b Ø 0.025, ∂dr Ø 37., ∂1 Ø 10.5, ∂2 Ø 1., ∂3 Ø 1.

@

D

@8

<D

SensorModelling.nb

5

Timing

NFrequency

defaultSensor

* Secant Method *

0.116667 Second, 1.90227 µ 109

NFrequency

@

LD
defaultSensor, Method Ø NewtonMethod

D H

0.266667 Second, 1.90227 µ 109

<

Timing
8

@

@

@

DD

8

The values of the parameters are supposed to be given in the SI system and results are then given in the SI system without
specifying  their  associated  units.  However,  in  view  of  the  order  of  magnitude  of  dimensions  and  frequencies,  it  may  be
more practical to use multiples, such as millimeters or gigahertz. The conversion can be made by hand or with the help of
the  command  Convert  from  the  standard  package  Miscellaneous`Units`,  which  is  automatically  loaded  by
SensorDesign.  Convert  yields  the  result  with  its  associated  unit.  So  there  is  in  the  package  a  complementary
command ConversionFactor that gives the numerical conversion factor between two units.

<

NSensitivity

defaultSensor, h3 , Type Ø Absolute

-3.67881 µ 1010

@

Convert

% Hertz

Meter, Mega Hertz

Milli Meter

-

36.7881 Hertz Mega
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
Meter Milli
ê

@

ê H

D

LD

Plot  should be used  with care; indeed,  the default number  of points  to be evaluated is  25, which  may  lead to excessive
durations,  for  the  function  NFrequency  is  then  evaluated  25  times.  Consequently  it  may  be  advisable  to  decrease  the
value of PlotPoints and of PlotDivision to avoid the triggering of the adaptive sampling. This can be done inside
each Plot command or at the beginning of the session with SetOptions. Fortunately, the resulting curves are generally
smooth, so only a few points (7 points for instance) yield satisfactory results.

h_
f
Plot

:= NFrequency
h, 0, 14
f

,

ChangeParameterValues
, PlotPoints Ø 7, PlotDivision Ø 1,
"
"h3

, AxesLabel Ø

", "f

GHz

0, 1.75

defaultSensor, h3 Ø h

10.3

109

mm
@

ê

DD ê

h
AxesOrigin Ø
@
f

D
GHz
@

@

D

8

L

@
<

8

<

8

H

L

H

L

<D

2.05
H
2

1.95

1.9

1.85

1.8

2

4

6

8

10

12

14

ÜGraphicsÜ

h3

mm

H

L

3.  Sensitivity analysis

Mathematical aspects

Let's consider a sensor determined by n (geometrical or physical) parameters denoted  pi , so the resonant frequency f can be
.  Then,  the  absolute  sensitivity  Spi  (respectively  relative
regarded  as  a  function  of  these  n  parameters:   f
sensitivity RSpi , normalized sensitivity NSpi ) with respect to a specific parameter pi  is given by:

p1 , …, pn

H

L

6

SensorModelling.nb

Spi =

 

respectively : R Spi =

; NSpi =

1
ÅÅÅÅÅÅ
f

 

∑ f
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

pi
ÅÅÅÅÅÅÅÅ
f

 

∑ f
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

=

∑ ln f
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
∑ ln pi

∑ f
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

To  compute  the  sensitivities,  we  must  go  back  to  the  system  of  two  equations  in  two  unknowns  f  and  x.  In  fact,  the
N
expressions also depend on the parameters pi , so the system should be written:

J

F1  
F2  

f, x, … pi , …
f, x, … pi , …

ã 0
ã 0

9

L
L

H
H

p1 , …, pn

 is  an  implicit  function;  although  no  exact  symbolic  expression  can  be  found  for  it,  its  partial
The  solution   f
derivatives  can  be  computed  in  a  symbolic  way.  Let   f0  and  x0  be  the  solutions  to  the  system  for  a  particular  set  of
parameters  pi =pi0 .  Whether   f0  and  x0  are  obtained  by  a  numerical  technique  does  not  matter.  Let  us  express  the
differentials of F1  and F2  at the "point pi0 ":
∑ Fk
ÅÅÅÅÅÅÅÅÅÅÅ
∑ f

 dpi k = 1, 2

d Fk = 0 =

∑ Fk
ÅÅÅÅÅÅÅÅÅÅÅ
∑ x

 dx + Si 

 df +

∑ Fk
ÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

H

L

Developing df and dx yields:

" i,

∑ Fk
ÅÅÅÅÅÅÅÅÅÅÅ
∑ f

 

∑f
ÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

+

∑ Fk
ÅÅÅÅÅÅÅÅÅÅÅ
∑ x

 

∑x
ÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

+

∑ Fk
ÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

= 0 k = 1, 2

The previous system can also be written in the following matrix form, with J the Jacobian matrix.

J.

∑ f
∑ x

∑ pi
∑ pi

+

∑ F1
∑ F2

∑ pi
∑ pi

0
0

=

; hence :

∑ f
∑ x

∑ pi
∑ pi

= -J-1 .

∑ F1
∑ F2

∑ pi
∑ pi

J

Only the first equation from the matrix relation is useful in this case, which finally yields:
ê
J
J
N
J
ê
ÅÅÅÅÅÅÅÅ∑ x   ∑ F1
ÅÅÅÅÅÅÅÅ∑ x   ∑ F2
- ∑ F2
∑ F1
ÅÅÅÅÅÅÅÅ
ÅÅÅÅÅÅÅÅ
∑ pi
∑ pi
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
ÅÅÅÅÅÅÅÅ∑ x   ∑ F2
ÅÅÅÅÅÅÅÅ∑ x - ∑ F1
ÅÅÅÅÅÅÅÅ∑ f   ∑ F2
∑ F1
ÅÅÅÅÅÅÅÅ∑ f

ê
ê
∑ f
ÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

Spi =

ê
ê

N

J

N

=

N

ê
ê

N

As a consequence, each absolute sensitivity can be expressed by means of 6 partial derivatives. The relative and normalized
sensitivities derive from the absolute sensitivity.

Sensitivity with respect to temperature

The characteristic  coefficients  of the  sensor also depend  on the temperature T. For each parameter   pi , this dependance  is
characterized by a linear temperature coefficient:

tpi =

1
ÅÅÅÅÅÅÅÅ
pi

 

∑ pi
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
∑ T

In  fact,  for  every  material,  two  coefficients  are  specified  by  the  manufacturer:  a  thermal  expansion  coefficient  and  a
thermal stability coefficient of the permittivity. Then, the (relative) sensitivity of the frequency with respect to temperature
is given by:

RST =

1
ÅÅÅÅÅÅ
f

 

∑ f
ÅÅÅÅÅÅÅÅÅÅÅÅ
∑ T

=

i

 

1
ÅÅÅÅÅÅ
f

 

∑ f
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

 

∑ pi
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
∑ T

=

 

pi
ÅÅÅÅÅÅÅÅ
f

 

∑ f
ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ
∑ pi

i

 tpi =

 NSpi  tpi

i

It derives from the normalized sensitivities (the default ones in the package) and the linear temperature coefficients,  so its
computation is straightforward.

‚

‚

‚

SensorModelling.nb

7

Computational aspects

As  already  mentioned,  the  computation  of  frequencies  relies  on  a  numerical  technique,  whereas  the  computation  of
sensitivities  resorts  to  computer  algebra  capabilities.  Each  sensitivity  is  expressed  by  means  of  a  symbolic  formula
including  partial  derivatives.  These  involve  more  or  less  intricate  expressions,  which  are  determined  by  a  dynamic
programming technique (a "memory function"), so the partial derivatives are evaluated only when needed and at most once
per session.  Then,  they  must  be evaluated  at  a  particular  point,  so  the frequency  must  be computed  jointly.  Actually,  the
auxiliary function Sensitivity returns the (intricate) symbolic expression of the absolute sensitivity with respect to the
specified  parameter,  and  the  function  NSensitivity  computes  its  (more  useful)  numerical  value  at  the  working
frequency of the resonator.

Timing

NSensitivity

defaultSensor, h3

* TypeØNormalized *

0.4 Second, -19.3391

NSensitivity

defaultSensor, h3 , Type Ø Relative
<

0.333333 Second, -0.0580172

H

LDD

NSensitivity

defaultSensor, h3 , Type Ø Absolute

0.333333 Second, -3.67881 µ 1010

<

Timing
8

Timing
8

@

@

@

@

@

@

DD

DD

4.  Design and use of the package
<

8

We are faced with an aspect of the general issue of representing more or less complicated engineering objects. This can be
neglected  when  programs  apply  to  mathematical  problems  of  algorithmic  nature.  However,  engineering  applications  of
Mathematica involve data structures, which induce specific difficulties due to numerous parameters or possible evolutions
of the representation.

Representing a physical system 

From the point of view of a physicist or an engineer (who are assumed to be the potential users), there are two major levels
of abstraction:
• the technical system with its geometrical and physical parameters, which as a rule have both names (symbols) and values.
It is desirable to be able to switch over the nature (symbolic or numerical) of the parameters.
• the theoretical  model giving the required (output) parameters from the data (input parameters). We must be aware that a
single system may behave several models and each model may lead to different computational techniques.

From the computational point of view, these two levels are implemented by means of:
• a data structure (an expression) that describes the sensor with its parameters (symbols and values): 

Sensor[parameters] 

• the algorithms  (the functions)  drawn  from the model for computing  the output parameters (here,  the resonant frequency
and the  sensitivities);  choosing  the model  and the method  is left to the user by  means of options,  with default values [8];
hence the schematic syntax: 

SomeOutputParameter[aSensor,ModelØaModel,MethodØaMethod]

The use of options naturally encapsulates the representation  of the model. Indeed, the "supplier" may add novel models or
methods  and  possibly  novel  options  without  any  change  in  the  interface  (the  pattern),  hence  without  disturbing  the
"customer".

SensorModelling.nb

A data structure for sensors 

Building a data structure with Mathematica  consists in wrapping the elementary data in a list or an expression [9]. In this
last case, the head plays the role both of a type and a constructor. In fact, the notion of a constructor comes from procedural
languages,  so  that  a  separate  constructor  is  most  often  useless  in  Mathematica,  which  uses  the  same  syntax  for  data  and
functions. This functional approach  assures  the referential  transparency  of programs,  for it avoids undesirable  side effects
due to the assignment of individual variables; it urges the user to process the data as a whole, by passing the entire structure
as argument to functions.

However,  specific  problems  emerge  again  in  the  case  of  engineering  applications.  When  the  arguments  are  numerous,  it
may  be  difficult  for  the  user  to  remember  their  position;  hence  the  usefulness  of  named  parameters.  Also,  it  should  be
possible to maintain  and manipulate several sensor representations at the same time. Finally, the user may  wish to choose
(and  possibly change)  not  only the  values but  also the  symbols of  the parameters,  and  possibly  use different  symbols for
different sensors.

Hence  the  idea  of  a  small  database  with  three  fields  (attributes):  the  selectors,  the  symbols  of  the  parameters  and  their
values.  Such  a  data  structure  allows  referring  to  the  parameters  either  by  selectors  or  by  names  (symbols)  and  enables
changing  the names  or the values.  Finally,  the wrapper  Sensor[] types  the list  of parameters  thus restricting  its use to the
particular context of sensor design. 

Edit

defaultSensor, Style Ø Output

@

SubstrateHeight h1
MedianLayerHeight h2
D
UpperLayerHeight h3
InnerRadius a

1.27 µ 10-3
1.5 µ 10-2
3. µ 10-3
1.75 µ 10-2
2.5 µ 10-2
ResonatorRelativePermittivity ∂dr 3.7 µ 101
1.05 µ 101
SubstrateRelativePermittivity ∂1
MedianLayerRelativePermittivity ∂2
1.
UpperLayerRelativePermittivity ∂3
1.

OuterRadius b

Actually, in order to avoid redundant information, the selectors are associated with the symbol Sensor as upvalues, so the
sensor representation  finally amounts  to a table of parameter symbols and values. This table was implemented as a list of
rules. The right-hand member of each rule can be a symbol, possibly the parameter symbol itself.

anIllustrativeSensor = Create

Sensor, Style -> Dialog

Sensor

h1 Ø 0.00127, h2 Ø 0.015, h3 Ø h, a Ø a, b Ø b, ∂rd Ø 37., ∂1 Ø 10.5, ∂2 Ø 1., ∂3 Ø ∂

Modularity and object-oriented features 

@

D

@8

In most cases, the functions NFrequency and NSensitivity will be called only interactively. However, the user may
want  to  program  complementary  functions.  So,  we  should  foresee  and  facilitate  possible  future  evolutions  due  to  more
sophisticated  models  or  more  detailed  representations  of  objects.  This  requires  a  data  encapsulation  technique  that  hides
internal  transformations  of  the  data  structure.  This  is  achieved  by  restricting  access to  data  by  means  of selectors,  which
avoid direct interaction with the internal representation [10, 9].

<D

Nevertheless,  Mathematica  is  an  open  system  so  that  every  part (subexpression)  of  any  object  (expression)  is  accessible,
except for a few atomic objects. As a consequence, encapsulation is a matter of programming style rather than a feature of
the language; in other words, it is based on the user's responsability, who should accede to the data structure only by means
of the selectors provided with in the package. Symmetrically, it is the programmer's responsibility for supplying a complete
set of selectors.

8

 

SensorModelling.nb

9

ResonatorRelativePermittivity

defaultSensor

∂dr Ø 37.

A  generic  selector  that  returns  the  values  of  the  parameters  specified  by  their  symbols  is  included  in  the  package.  Its
behavior is similar to that of Options.

8

<

@

D

Parameters

defaultSensor,

h1 , ∂1

h1 Ø 0.00127, ∂1 Ø 10.5

@

8

<D

8

The  selectors  and  the  other  operators  (e.g.,  InnerRadius,  NFrequency)  are  associated  with  the  symbol  Sensor  as
upvalues, i.e., are methods in object oriented terms. This enables the possible use of the same generic commands for other
types  of  objects.  In  particular,  there  is  in  the  package  a  method  called  New  that  generates  a  default  sensor  with  a  list  of
default  parameters  (symbols  and  values);  New  returns  a  list  of  default  symbolic  parameters  when  used  with  the  option
Symbolic set to True. In the same way, Create directly edits a default sensor (see next section).

<

New

Sensor, Symbolic Ø True

Sensor

h1 Ø h1 , h2 Ø h2 , h3 Ø h3 , a Ø a, b Ø b, ∂dr Ø ∂dr , ∂1 Ø ∂1 , ∂2 Ø ∂2 , ∂3 Ø ∂3

@

D

From  the  object-oriented  point  of  view,  the  head  Sensor  or  more  precisely  the  pattern  Sensor[{__Rule},___]
represents  a  class  of  objects,  whereas  any  particular  sensor  is  an  instance  of  this  class.  The  number  of  parameters  or
possible options may determine subclasses.

<D

@8

Use of the package

This  section  can  be  viewed  as  a  short  user's  guide  for  the  package.  Complementary  information  can  be  found  in  the
notebook "SensorDesign.nb".

In the current model, there are nine geometrical and physical parameters, given as a list of rules that specify their symbols
and values. The command Create puts into an input cell a GridBox were the user can enter these parameters. It contains
default  parameter  symbols  and  values.  Thanks  to  a  TagBox  hidden  inside  the  underlying  expression,  it  is  directly
interpreted as a sensor when evaluated. Removing a value yields a parameter with a symbolic value ; in the example below,
the first three values were removed and the next two parameter symbols modified.

A user may  wish to modify  a previously defined  sensor. This can be done with the command Edit, similar to Create,
which builds an input cell with a GridBox where the user can modify the parameters. The same command outputs a 2-D
tabular form of the parameters when used with the option Style set to Output (see above).

Edit

defaultSensor

Ü Cell Ü

@

D

SubstrateHeight h1
MedianLayerHeight h2
UpperLayerHeight h3

Ñ
Ñ
Ñ
1.75 µ 10-2
2.5 µ 10-2
ResonatorRelativePermittivity ∂dr 3.7 µ 101
1.05 µ 101
SubstrateRelativePermittivity ∂1
1.
MedianLayerRelativePermittivity ∂2
1.
UpperLayerRelativePermittivity ∂3

InnerRadius r

OuterRadius R

Sensor

h1 Ø h1 , h2 Ø h2 , h3 Ø h3 , r Ø 0.0175, R Ø 0.025, ∂dr Ø 37., ∂1 Ø 10.5, ∂2 Ø 1., ∂3 Ø 1.

@8

<D

10

SensorModelling.nb

This  feature  works  only  with  version  3  (or  higher).  For  users  of  older  versions,  the  functions  ChangeParameter-
Symbols, ChangeParameterValues and ClearParameters have a similar effect. 

Finally, the functions NFrequency and NSensitivity have two options for choosing the model (ElectricWall or
MagneticWall)  and  the  numerical  method  (NewtonMethod  or  SecantMethod).  Their  default  values  are
MagneticWall for the former and SecantMethod for the latter.

5.  Comparison with experimental measurements

The model is validated by comparison with experimental data. In the following, theoretical results will be in solid lines and
experimental  data  in  dotted  lines.  The  latter  are  read  from  the  file  "ExperimentalData.txt"  where  the  values  of  the
parameters and the experimental data are stored directly as Mathematica expressions.

Shallow

theseData = << "ExperimentalData.txt"

ParameterValues Ø

á9à

, Frequencies Ø

á25à

, Units Ø

á2à

@
. theseData

Meter Milli, Giga Hertz

Units
8

ê

8

<

8

<

8

<<

D

These data correspond to the resonant frequencies of the TE01 d  mode (in GHz) versus h3  (mm). The remaining parameter
numerical values are associated with the data.

8

<

s

h_

:= ChangeParameterValues

Sensor

ParameterValues

. theseData

,

h

3

Ø h * 10.-3

Now, we can compare the measured frequencies with the theoretical ones, computed by means of a magnetic-wall  model,
which is more suitable when b/a is large.

D

8

@

D

@

D

<D

@

ê

@

g0 = ListPlot

PlotStyle Ø

Frequencies
PointSize
s

h

g1 = Plot

NFrequency

. theseData,
0.01

, DisplayFunction Ø Identity
h, 0, 14

, PlotPoints Ø 5,

;

109 ,

Show

@

ê
PlotDivision Ø 1, DisplayFunction Ø Identity
@
"h3
DD ê

8
g0 , g1 , AxesLabel Ø
@

DisplayFunction Ø $DisplayFunction

D<
", "f
8

GHz
<

mm

"

@

@

;

, AxesOrigin Ø

D
0, 1.06

,

8

H

L

H

L

<

8

<

D

D

f

GHz
@

L

1.25
H
1.225

1.2

1.175

1.15

1.125

1.1

1.075

2

4

6

8

10

12

14

Ü Graphics Ü

h3

mm

H

L

Then,  the  sensitivities  with  respect  to  h3  can  be  computed  from  the  previous  experimental  data  and  compared  with  the
theoretical  ones.  Below,  we  fit  the  data  to  a  polynomial,  then  compute  the  derivative  of  the  resulting  function.  The
coefficient 103  is necessary in g2  because h = 10-3  h3 .

SensorModelling.nb

11

3

@

h_

@
D
g3 = Plot

. theseData, h ^ Range
,

= Fit
Sh
Frequencies
103 D
g2 = Plot
, h
h
Sh
Evaluate
PlotStyle Ø Dashing
0.03, 0.03
D
, h
s
@
PlotPoints Ø 5, PlotDivision Ø 1, DisplayFunction Ø Identity

D
, Type Ø Absolute
@
8
<
@8
g2 , g3 , DisplayFunction Ø $DisplayFunction,
", "Sh3
@

,
, DisplayFunction Ø Identity
3
DD
<D
"
@

ê
NSensitivity
D
@

, AxesOrigin Ø

10-9  
@

AxesLabel Ø

h, 0, 14

0, -45
8
DL

Show

KHz
@
D

0, 4

"h3
H

, h

h
D

mm

mm

D
,

D

@

;

@

@

@

3

;
D

;
h, 0, 14

,

<

D

8

H

L

H

ê

L

<

8

<D

Sh3

mm

KHz
@

0

H

ê

L

-10

-20

-30

-40

Ü Graphics Ü

6.  Conclusion

2

4

6

8

10

12

14

h3

mm

H

L

A  simple  analytical  model  based  on  the  transverse  resonance  method  can  be  used  to  evaluate  the  resonant  frequency  of
cylindrical  multilayer  dielectric  sensors.  This  model  also  enables  the  sensitivity  analysis  with  respect  to  geometrical  or
physical  parameters.  It  is  validated  by  comparison  with  experimental  data.  The  TE01 d  and  TM01 d  modes  are  computed
with a precision of about 1 percent (10 percent in the worst case for the TM01 d  mode).

A package was designed to implement the functions that determine the frequency and the sensitivities from this model. The
computation  of  the  frequency  is  based  on  a  numerical  approximation,  whereas  the  sensitivity  is  obtained  from  a
combination  of  symbolic  and  numerical  computations.  Besides,  we  tried  to  bring  out  a  few  design  patterns  for  the
computational description of a technical system.

The  model  and  the  corresponding  computations  were  useful  to  understand  the  general  properties  of  shielded  cylindrical
multilayer  dielectric  resonators  when  used  as  resonant  transducers.  They  brought  to  the  fore  the  role  of  geometrical  and
physical  parameters.  So,  the  package  can  be  used  for  the  computer  assisted  design  of  this  range  of  sensors.  Possible
applications  range  from  displacement,  thickness  or  pressure  sensors  to  humidity  probes  or  devices  for  measuring  the
electromagnetic parameters of materials. 

The authors wish to thank their colleague Pierre Geveaux for his help to work out the package.

Acknowledgements

Additional Material

The  package  "SensorDesign.m",  the  notebooks  "SensorModelling.nb"  and  "SensorDesign.nb"  (documentation),  and  the
text file "ExperimentalData.txt" are available at the URL http://macmaths.ens2m.fr/Mathematica/packages.

12

SensorModelling.nb

References

[1] J.A. Pereda, L.A. Vielva, A. Vegas, A. Prieto, "The finite difference time-domain (FDTD) method 
applied to the computation of resonant frequencies and quality factors of open dielectric 
resonators", Journal de Physique III (3), 1993, 539-551.

[2] S. Verdeyme, M. Aubourg, "Application de la methode des elements finis à l'etude des resonateurs 

dielectriques", L'onde electrique, 70 (5), 1990, 30-35.

[3] R.E. Collin, Field Theory of Guided Waves, Mc Graw Hill, 1960.
[4] K. A. Zaki, A. E. Atia, "Modes in dielectric-loaded waveguides and resonators", IEEE Transactions 

on Microwave Theory and Techniques, 31 (21), 1983.

[5] P. Boughedaoui, R. Barrere, M. Valentin, "Investigation on Displacement Sensitivity of Cylindrical 
Dielectric Resonators for Sensor Applications", Journal de Physique III (5), 1995, 1245-1253.

[6] F. Gardiol, Hyperfrequences, vol XIII, Editions Georges, 1981.
[7] T. Higashi, I. Makino, "Resonant frequency stability of the dielectric resonator on a dielectric 
substrate", IEEE Transactions on Microwave Theory and Techniques, 29 (10), 1981.

[8] R. Maeder, Programming in Mathematica, Addison-Wesley, 1991.
[9] R. Maeder, The Mathematica Programmer, Academic Press, 1994.
[10] B.J. Cox, Object Oriented Programming. An Evolutionary Approach, Addison-Wesley, 1986.

