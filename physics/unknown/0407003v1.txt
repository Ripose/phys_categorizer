Pressure Model of Soft Body Simulation

Maciej Matyka∗
University of Wrocław, Poland

Mark Ollila †
Link¨oping University, Sweden

The model which we introduce, is in a fact described by two
equations and be very easy implemented into existing spring-mass
systems by adding one additional force - the pressure force.

Abstract

Motivated by existing models used for soft body simulation which
are rather complex to implement, we present a novel technique
which is based on simple laws of physics and gives high quality
results in real-time. We base the implementation on simple thermo-
dynamics laws and use the Clausius-Clapeyron state equation for
pressure calculation. In addition, this provides us with a pressure
force that is accumulated into a force accumulator of a 3D mesh
object by using an existing spring-mass engine. Finally after in-
tegration of Newtons second law we obtain the behavior of a soft
body with ﬁxed or non-ﬁxed air pressure inside of it.

CR Categories:
I.6.8 [Simulation and Modeling]: Types of
Simulation—Animation; I.3.5 [Computer Graphics]: Computa-
tional Geometry and Object Modeling—Physically based model-
ing I.3.7 [Computer Graphics]: Three-Dimensional Graphics and
Realism—Animation

Keywords: physically based modeling, animation

1 Introduction and Background

In this paper we present a model for three dimensional deformable
objects simulation based on simple and fundamental physics prin-
ciples.

We started our research in deformable object animation because
of the complexity and cost of solutions with FEM, FEV (see [1; 15])
and LEM (see [9; 10; 11; 12]) methods. Some attempts with ﬁnite
elements in real time simulations have been made (see [2]), how-
ever, the complexity of given algorithms is still high. Also similar
problems appear with the Green function approach (see [6]) - com-
plexity of implementation is high. Fast realtime pre-computed data-
driven models of interactive physically based deformable scenes
were proposed also in [14]. Methods using Navier-Stokes equations
for Soft Bodies have been presented in [3]. The authors use Navier-
Stokes equations for compressible ﬂuid to compute properties of
compressible ﬂuid enclosed in a mesh. The model gives good soft
behavior but solution speed is not efﬁcient to achieve good results
for real time animation.

In this paper, we introduce a novel idea of using ideal gas law in
calculating pressure force. For pressure calculation we use a simple
ideal gas state equation. Using the ideal gas approximation results
in fast and physically correct animations.

∗e-mail:maq@panoramix.ift.uni.wroc.pl
†e-mail:marol@itn.liu.se

Figure 1: Real time animations created using presented model.
Each ball object contains: 320 faces (162 vertices). Both examples
run realtime on 800Mhz Duron processor machine (approximately
40-50fps, depending on collision detection conﬁguration).

1.1 Particle System

Let us consider the governing elements of simple Spring-Mass
(SM) model (see [4]. We will show how to expand it to simulate
a 3D soft body with deformations. A simple SM engine contains a
couple of obvious techniques, with the most important features to
work with is a simple particle system which uses simple physics
(Newton Laws), compute forces (Gravity, Hooke’s linear spring
force with damping) and makes numerical integration of one equa-
tion1:

~Fi = mi ·

∂2~ri
∂t2

(1)

2 Pressure Based Method for Soft Bodies

2.1 Method

The method presented in this paper is a soft body model based on
classic cloth simulation (see [13]). Applying a wind force to cloth
simulation results in very nice, good looking behavior.

1Where i indexes particles.

Figure 2: Cloth rectangle with ﬁxed edges.

Lets say that we are presented with the situation depicted in ﬁg-
ure (2). A cloth rectangle with ﬁxed edges is placed, where wind,
a force vector, is normal to initial surface of rectangle. What we
obtain from the simulation like this is deformation of cloth under
wind force.

Figure 3: Cloth deformation under wind force.

Observing ﬁgure (3) it becomes apparent that it seems to be very
similar to part of a deformed three dimensional object. Evolving the
model further, we can ”close the object” and put the ”wind source”
within it. Let us deﬁne model of shape as sketched in the ﬁgure (4).

have to multiply ~P by A[m2] - the area of the surface. That gives us
pressure force expression 2:

~FP = ~P · A [N] ,
(3)
Now we will explain how to calculate P - the pressure force

value.

2.3

Ideal Gas Approximation

In our model, we will use thermodynamic approximation known
as ”Ideal Gas Approximation” (see [5] for detailed description of
that approximation). We can use this approximation because our
interest is more in the macroscopic level effects of gas presence. At
this level we can assume that in an object a gas of particles without
interactions exist. We are only interested in the statistical properties
(i.e. average momentum given from particles to the model surfaces
in a speciﬁed incremental time).

The ideal gas approximation gives us simple relationship be-
tween pressure value, temperature of gas, and macroscopic volume
of the body which can be expressed i.e. by the well known Clausius
Clapeyron equation:

PV = nRT,

(4)
where P is pressure value, V is volume of the body, n is gas mol
number, R is the ideal gas constant (R = Nakb, N - Avogardo num-
ber, kb - Boltzmann constants), T is a temperature. From equation
(4) we can easy get an expression for pressure if we know values of
temperature and volume of the body:

−1nRT,

P = V

(5)
In the model presented in this paper we assume that T = const
and only the volume of a soft body changes. Speciﬁed assump-
tions will give us a very clear and easy to implement algorithm of
pressure force calculation.

2.4 Algorithm

Before we dive into implementation details we will show the gen-
eral algorithm of the presented solution. It will help clarify spe-
ciﬁc problems which appear during the implementation. The algo-
rithm is based upon an existing particle spring-mass system with
one modiﬁcation - addition of a pressure force calculation. One
computational step of the algorithm is as follows:

[1.1] Calculate and accumulate gravity and spring forces

1 Loop over all particles:

for all particles.

2 Calculate volume of the soft body

3 Loop over all faces:

[3.1] Calculate pressure force acting on the face
[3.1.1] Calculate ﬁeld of the face
[3.1.2] Calculate the pressure value
[3.1.3] Loop over particles which deﬁne the face:
[3.1.3.] Multiply result by ﬁeld of the face and ˆn
[3.1.3.2] Accumulate ﬁnally pressure force to the parti-

Figure 4: Triangular shape model with both solid and wireframe
views presented.

Now let us imagine that we have some kind of ”wind source” in-
side of that shape, which will introduce that nice deformation effect
from ﬁgure (3) but in all directions. This is the basic idea of the
implementation in this paper.

2.2 The Pressure Force

The simplest deﬁnition of pressure says that pressure is a force, act-
ing on incremental surface elements and is parallel to normal vector
of the surface. We would like to apply the force, which will act on
our shape, and keep the shape geometry, but allow for possible de-
formations. Pressure, is a force that is always acting in a direction
of normal vectors to the surface, so the shape will not deform sig-
niﬁcantly. So far we have only a deﬁnition of the pressure force
vector, and we have to ﬁnd some expressions for the force value.
The expression for pressure in a speciﬁed point in the space acting
on a surface is given by:

~P = P · ˆn

N
m2 (cid:21)

,

(cid:20)

cle.

4 Integrate momentum equation

(2)

5 Resolve collision handling and response.

where P is a pressure value and ˆn is normal vector to surface on
which pressure force is acting. For calculating pressure force we

6 Move particles

2Where [N] means simply a force dimension.

3 Implementation

3.4 Summary of the implementation

3.1 Calculate volume of the soft body

In Step 2 of the presented algorithm we have to calculate volume
of the body. In the presented solution we used a variety of bound-
ing objects to approximate that value. The implementation is well
suited for non-complicated objects, and we will discuss later what
kind of improvement can be done there. Bounding objects are a
well known technique to speed up collision detection systems, and
here we have used it to compute volumes. The type of bounding
object depends strongly on geometry of simulated soft body (i.e. it
is not very good to approximate ball by simple bounding box). In
the model presented here we implemented three different bounding
objects: bounding box, bounding ball, and bounding ellipsoid.

Calculation of the body volume is one of the most important. After
obtaining body volume, and the face ﬁeld, we are able to calculate
pressure force vector. Then basically accumulation of this force is
performed.3

3.5 Collision Detection and Response

Existing techniques for collision detection and response (see [7;
8]) for deformable objects could be applied to described model of
soft body simulation. For our purposes, for collision detection we
use simple techniques of collisions with bounding objects.
It is
big simpliﬁcation, but works very well for objects such as balls,
cones, boxes, and other which are similar to the bounding objects.
However, It is not very accurate, and future research needs to be
performed here. Fortunately the results are rather good with the
sample models used here.

The algorithm ﬁrst detects which objects in the scene can collide.
In the presented solution we used simple bounding boxes for ﬁrst
step of detection of possible contact.

Then a simple test of each point

- bounding (ellip-
soid/ball/box/other) object is applied. For each implicit formulation
of bounding object, a simple value of the function is to be computed
with the tested point. Tests have to be done for every point of one
soft body with bounding objects of another soft body4. After that, if
a point collides, we cut off d~r, the vector of movement (which obvi-
ously is to be given by the integration function to collision handling
procedure). We have also implemented a simple iterative procedure
which corrects the particle position if a particle intersects. That pro-
cedure checks if the point is inside of bounding object of the other
soft body, if yes, then iteratively moves that point outside of the
body as long as it will be outside of that bounding object.

When we recognize a collision, we implement a fairly simple
collision response procedure. We divide the velocity vector of the
particle into two velocities (parallel and tangent to collision surface)
and we reﬂect the tangent part of it. Then both parts of velocity
vector are multiplied by scalar coefﬁcient to get effects of energy
lost of particle during collision.

Figure 5: Three different types of bounding objects applied to the
model.

We know calculating of volumes for bounding boxes, spheres
and ellipsoids is fairly easy. For example, for the ellipsoid with rx,
ry and rz radiuses we have the expression for volume:

Vel =

4
3 (cid:19)

(cid:18)

· π· rxryrz

(6)

4 Results

We use the term ”bounding volume” for this technique of vol-
ume generation. Bounding volumes are not very accurate, but for
a model, only the general change of body volume is needed. Of
course for the hand model presented in the ﬁgure (5) a better ap-
proximation has been made with ellipsoid, and generally the ellip-
soid has the best properties and is the most usable as a bounding
volume.

3.2 Face ﬁeld computation

Face ﬁeld computation is quite simple, especially because of trian-
gulated objects which we use as a models in the simulator. Simple
algebraic vector multiplication of two edges is used here.

3.3 Numerical Methods

In the presented solution no special focus on numerical method has
been done. We have used explicit Euler, Midpoint and RKIV inte-
grators to integrate motion equations for every particle. It appears,
that best choice is to use Mid Point algorithm, since we found that
for some parameters conﬁguration model is stable. All results pre-
sented have been calculated using 2nd Mid Point scheme.

In this section we present the results of the working application
which was based on presented algorithm. In ﬁgures (1), (8) and
(7) examples of working application are shown. All of these are
taken directly from real time working animations. In the ﬁrst two
ﬁgures ﬁve bouncing balls with collisions, are placed in rotating
box. The hanging ball with different pressures is shown in the next
two ﬁgures. One ball object in the simulations contains 162 ver-
tices and 320 faces. The third example in the ﬁgure (8) is a result of
simulation with user interaction, where user can hit the simulated
soft body (a hand in this case) with the rigid ball. The hand object
contains ≈370 vertices with 736 triangles implemented into exist-
ing particle spring-mass engine. The simulations were computed in
real time and run at (40-50 fps) on a Duron 800Mhz with RivaTNT2
graphics card.

In the ﬁgure (6) we present a plot of time needed for computa-
tion of pressure force. We prepared tests for an Athlon XP 1.8Ghz

3Please note that we have to apply force which is parallel to normal
vector of the point (simple calculated by average of normal of its neighbor
faces) and divide by integer value equal to number of faces, which contain
that particle.

4Some tests can be done there, if checking ﬁrst point-bounding box col-
lision, then i.e. point-bounding ellipsoid is faster than checking only point-
bounding ellipsoid intersection.

processor. The sketch shows times in ms for several different num-
ber of particles in the simulation space and average - trend line. We
did not apply collision detection during these tests.

References

[1] J. Teran, S. Blemker, V. Ng Thow Hing, R. Fedkiw, ’Cloth & deformable
bodies: Finite volume methods for the simulation of skeletal muscle’,
Euro. Symp. on Comp. Anim. (SIGGRAPH Proc.), pages 68–74, 2003
G. Debunne, M.

[2] Desbrun, M. P. Cani, and A. Barr. ’Adaptive simulation of soft bodies in

real-time’, Comp. Anim., pages 133–144, May 2000

[3] Nixon, D. and Lobb, R., ’A ﬂuid-based soft-object model’,Comp. Graph.

and App., IEEE , Vol. 22 Iss. 4, pages 68–75, July-Aug. 2002

[4] Witkin, A. and Baraff, D. ’An Introduction to Physically Based Model-

ing’, SIGGRAPH Course Notes, 1993.

[5] Callen, H.B. ’Thermodynamics and an Introduction to Thermostatistics’,

2nd edition, John Wiley & Sons, New York, 1985.

[6] Doug L. James, Dinesh K. Pai, ’ Multiresolution green’s function meth-
ods for interactive simulation of large-scale elastostatic objects’, Jan.
2003, ACM Transactions on Graphics (TOG), Vol. 22 Iss. 1

[7] Steve Capell, Seth Green, Brian Curless, Tom Duchamp, Zoran Popovi´c,
’Collisions and deformations: A multiresolution framework for dynamic
deformations’, Proceedings of the 2002 ACM SIGGRAPH/Eurographics
symposium on Computer animation, July 2002

[8] Matthias M¨uller, Julie Dorsey, Leonard McMillan, Robert Jagnow, Bar-
bara Cutler, ’Collisions and deformations: Stable real-time deforma-
tions’, Proceedings of the 2002 ACM SIGGRAPH/Eurographics sym-
posium on Computer animation, July 2002

[9] Cotin, S. Delingette, H. Ayache, N. , ’Real-time elastic deformations of
soft tissues for surgery simulation ’, Visualization and Computer Graph-
ics, IEEE Transactions on , Vol. 5 Iss. 1 , Jan. - March 1999, pages 62–73

[10] Balaniuk, R. Salisbury, K. , ’Dynamic simulation of deformable objects
using the Long Elements Method’, Haptic Interfaces for Virtual Envi-
ronment and Teleoperator Systems, 2002. HAPTICS 2002. Proceedings.
10th Symposium on, 24-25 March 2002, pages 58–65

[11] Costa, I.F. Balaniuk, R., ’LEM-an approach for real time physically
based soft tissue simulation’, Robotics and Automation, 2001. Proceed-
ings 2001 ICRA. IEEE International Conference on, Vol. 3, 2001, pages
2337–2343

[12] Sundaraj, K., Laugier, C., Costa, I.F., ’An approach to LEM model-
ing: construction, collision detection and dynamic simulation’, ntelli-
gent Robots and Systems, 2001. Proceedings. 2001 IEEE/RSJ Interna-
tional Conference on , Vol. 4, 29 Oct. - 3 Nov. 2001

[13] Xiaoming Wei, Ye Zhao, Zhe Fan, Wei Li, Suzanne Yoakum-Stover,
Arie Kaufman, ’Natural phenomena: Blowing in the wind’, Proceedings
of the 2003 ACM SIGGRAPH/Eurographics Symposium on Computer
Animation, July 2003

[14] Doug L. James, Kayvon Fatahalian, ’Precomputing interactive dy-
namic deformable scenes’, ACM Transactions on Graphics (TOG), Vol.
22 Iss. 3, July 2003

[15] Ralf Rabaetje, ’Real-time simulation of deformable objects for assem-
bly simulations’, Proceedings of the Fourth Australian user interface con-
ference on User interfaces, Vol. 18, 2003

]
s
m

[
 
e
m
T

i

6

5

4

3

2

1

0

0(cid:13)

2000(cid:13)

4000(cid:13)

6000(cid:13)

8000(cid:13)

Number of Vertices

Figure 6: Time of pressure force calculation in ms in a function
of number of vertices. Figure shows increasing of calculation cost,
while number of vertices / triangles increases.

5 Conclusions and Future Work

Here we have presented a model on soft bodies using pressure. The
most important advantages of the model is that it is fast (see ﬁgure
6), stable and can be easily implemented. However, there is signif-
icant future work to be performed. This includes work with more
advanced volume calculation where we believe two methods are
the most interesting to pursue. This includes development of some
kind of bounding primitive subdivision algorithm to reﬁne the vol-
ume representation. An alternative, is to compute volumes of the
bodies with a Monte Carlo integration procedure. However, even
though Monte Caro methods are accurate and converge to good re-
sults, they are rather slow and may not be suitable for real time
applications. Future work will also include investigation into more
complex objects and the suitability of this model with other forms
of model representations such as Hypertextures.

6 Acknowledgements

The hand object presented in results section has been created by
Mariusz Jarosz. Authors wish to also thank Jakub Kominiarczuk
and Marcin Wojciechowski for support of the work. We are also
grateful to an anonymous reviewer who motivated us to make the
paper much better. The paper is the result of project work in the
Modeling and Animation course at Link¨oping University.

Figure 7: Bouncing ball with deformations. Visualization with velocity vectors for better information about physical property of moving
object (i.e. momentum). Frame rate: 50fps. Details: 320 faces (162 vertices).

Figure 8: Hand object in gravity ﬁeld with example of user interaction. Frame rate: 50fps. Details: 768 faces (386 vertices).

