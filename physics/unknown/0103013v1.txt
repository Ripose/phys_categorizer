Probability tree algorithm for general diffusion processes

Lester Ingber1,2 <ingber@ingber.com>, <ingber@alumni.caltech.edu>
Colleen Chen1 <cchen@drwinvestments.com>
Radu Paul Mondescu1 <rmondescu@drwtrading.com>
David Muzzall1 <dmuzzall@drwinvestments.com>
Marco Renedo1 <mrenedo@drwinvestments.com>

1 DRW Inv estments, LLC, 311 S Wacker Dr, Ste 900, Chicago, IL 60606
2 Lester Ingber Research, POB 06440 Sears Tower, Chicago, IL 60606

ABSTRACT
Motivated by path-integral numerical solutions of diffusion processes, PATHINT, we present
a new  tree  algorithm,  PATHTREE,  which  permits  extremely  fast  accurate  computation  of
probability distributions of a large class of general nonlinear diffusion processes.

Ke ywords: path integral; statistical mechanics

PA CS Nos.: 05.10.-a, 02.70.-c, 82.20.Wt, 89.90.+n

1
0
0
2
 
r
a

M
 
6
 
 
 
3
1
0
3
0
1
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Probability tree ...

- 2 -  

Ingber, Chen, Mondescu, Muzzall, Renedo

1.  INTRODUCTION

1.1.  Path Integral Solution of Diffusion Processes

There are three equivalent mathematical representations of a diffusion process, provided of course
that  boundary  and  initial  conditions  can  be  properly  speciﬁed  in  each  representation. In  this  paper  we
refer to all three representations.

The  Langevin  rate  equation  for  a  stochastic  process  in dS can  be  written  as  in  a  prepoint

for  general  drift
f and  standard  deviation g which  may  depend  on S and t, wherein f and g are
understood to be evaluated at the prepoint t. Here, we just consider S dependent, but our algorithm can
easily be extended to time dependent cases and to multivariate systems.

This corresponds to a Fokker-Planck equation representing the short-time conditional probability P

The path-integral representation for P for the short-time propagator is given by

discretization,

dS = fdt + gdW ,

< dW >= 0 ,

< dW (t)dW (t¢ ) >= dtd (t -

t¢ ) ,  

of evolving within time dt,

¶ P
¶ t

¶ 2(g2P)
¶ S2
where the diffusion is given by g2.

¶ ( fP)
¶ S

+ 1
2

= -

,

P(S¢ , t¢ |S, t) =

exp(- Ldt)

1
2p g2D

t

(

dS
dt

L =

2g2

f )2

dS
dt

= S¢

S

dt

, dt = t¢

t .

(1)

(2)

(3)

In the above we hav e explicitly used the prepoint discretization [1].

1.2.  PATHINT Motivation From Previous Study

In the above we hav e explicitly used the prepoint discretization, wherein f and g are understood to
be  evaluated  at  the  prepoint t. In this  paper, we do not  require  multivariate  generalizations,  or  issues
dealing with other discretizations, or explication of long-time path-integral evaluations, or issues dealing
with Riemannian invariance of our distributions.  There exist other references dealing with these issues in
the context of calculations presented here [2-5].

Our  approach  is  motivated  by  a  multivariable  generalization  of  a  numerical  path-integral
algorithm [6-8], PATHINT, used  to  develop  the  long-time  evolution  of  the  short-time  probability
distribution  as  used  in  several  studies  in  chaotic  systems [9,10],  neuroscience [9,11,12],  and  ﬁnancial
markets [4]. These  studies  suggested  that  we  apply  some  aspects  of  this  algorithm  to  the  standard
binomial tree.

1.3.  PATHTREE Algorithms

Tree  algorithms  are  generally  derived from  binomial  random  walks [13]. For many applications,
“tree”  algorithms  are  often  used,  corresponding 
the  above  Langevin  and  Fokker-Planck
equations [14,15]. These algorithms have typically been only well deﬁned for speciﬁc functional forms of

to 

-
-
-
Probability tree ...

- 3 -  

Ingber, Chen, Mondescu, Muzzall, Renedo

f and g.

We  hav e previously presented a powerful PATHINT algorithm to deal with quite general f and g
functions [4]. This  general  PATHTREE  algorithm  can  be  used  beyond  previous  speciﬁc  systems,
affording fast reasonable resolution calculations for probability distributions of a large class of nonlinear
diffusion problems.

1.4.  Organization of Paper

Section  2  describes  the  standard  tree  algorithm. Section  3  develops  our  probability  PATHTREE

algorithm.  Section 4 presents our probability calculations. Section 5 is our conclusion.

2.  STANDARD OPTION TREE ALGORITHM

2.1.  Binomial Tr ee

In a two-step binomial tree, the step up Su or step down Sd from a given node at S is chosen to

match the standard deviation of the differential process. The constraints on u and d are chosen as

ud = 1 ,  

(4)
If we assign probability p to the up step Su, and q = (1 - p) to the down step Sd, the matched mean and
variance are

pSu + (1 - p)Sd = < S(t + D

t) > ,

S2(( pu2 + qd 2 -

( pu + qd)2)) = < ((S(t + D

t) - < S(t + D

t) >))2 > .  

(5)

The right-hand-side can be derived from the stochastic model used.

2.2.  Trinomial Tree

The trinomial tree can be used as a robust alternate to the binomial tree. Assume pu, pm and pd are
the probabilities of up jump Su, middle (no-)jump S and down jump Sd, where the jumps are chosen to
match the standard deviation.  To match the variance of the process, the equations must satisfy

S2(( puu2 + pm + pd d 2 -

( puu + pm + pd d)2)) = < ((S(t + D

t) - < S(t + D

t) >))2 > .  

(6)

pu + pm + pd = 1 ,

S( puu + pm + pd d) = < S(t + D

t) > ,

3.  PROBABILITY TREE ALGORITHM

3.1.  General Diffusion Process

Consider  the  general  Markov  multiplicative  diffusion  process  interpreted  as  an  Itoˆ prepoint
discretized process, Eq. (1) with drift f and diffusion g2. For ﬁnancial option studies the particular form
of  the  drift bS and  diffusion  (s S)2 is  chosen  for  lognormal  Black-Scholes  (BS)  calculations [14].  For
options, the coefﬁcient b is the cost of carry, e.g., b = r, the risk-free rate, when S is a stock price, and
b = 0 when S is a futures price [16].  The case of drift bS and constant diffusion diffusion s 2 corresponds
to the Ornstein-Uhlenbeck (OU) process [17].

Our formalism is general and can be applied to other functional forms of interest with quite general
nonlinear  drifts  and  diffusions,  of  course  provided  that  the  region  of  solution  does  not  violate  any
boundary or initial conditions.

Statistical properties of the dS process and of any derivative one based on nonlinear transformations
applied  to S are  determined  once  the  transition  probability  distribution  function P(S, t|S0, t0) is known,
where  the  0  index denotes  initial  values  of  time  and  of  the  stochastic  variable S. Transformation  are
common and convenient for BS,

Probability tree ...

- 4 -  

Ingber, Chen, Mondescu, Muzzall, Renedo

(7)

z = ln S ,

equation  Eq. 
P(S|S0) = d (S - S0).

yielding a simple Gaussian distribution in z, greatly simplifying analytic and numerical calculations.

The  probability  distribution  can  be  obtained  by  solving  the  associated  forward  Fokker-Planck
initial  condition  must  be  speciﬁed,  e.g.,

(2). Appropriate  boundaries  and 

In  general  cases,  the  Fokker-Planck  equation  is  rather  difﬁcult  to  solve,  although  a  vast  body  of

work is devoted to it [17]. The particular BS and OU cases possess exact results.

Our  goal  is  to  obtain  the  solution  of  Eq.  (1)  for  the  more  general  process. A quite  general  code,

PATHINT [4], works ﬁne, but it is much slower than the PATHTREE algorithm we present here.

‘  ‘
3.2.  Deﬁciency of Standard Algorithm to Order (cid:214)

dt

We brieﬂy describe the CRR construction of the binomial tree approximation [18].
A tree is constructed that represents the time evolution of the stochastic variable S. S is assumed to
take only 2 values, u, (up value), and d (down value) at moment t, giv en the value S at moment t -
t.
The probabilities for the up and down movements are p and q, respectively. The 4 unknowns {u, d, p, q}
are  calculated  by  imposing  the  normalization  of  the  probability  and  matching  the  ﬁrst  two moments
conditioned by the value S at t -
t, using the variance of the exact probability distribution P(S, t|S0, t0).
One additional condition is arbitrary and is usually used to symmetrize the tree, e.g., ud = 1.

The  main  problem  is  that  the  above  procedure  cannot  be  applied  to  a  general  nonlinear  diffusion
process as considered in Eq. (1), as the algorithm involves a previous knowledge of terms of O(D
t) in the
formulas  of  quantities {u, p} obtained  from  a  ﬁnite  time  expansion  of  the  exact  solution P sought.
Otherwise, the discrete numerical approximation obtained does not converge to the proper solution.

This  observation  can  be  checked  analytically  in  the  BS  CRR  case  by  replacing  the  relation
t, and  deriving  the  continuous  limit  of  the  tree. This  also  can  be

t) [15]  with u = 1 + s (cid:214)
‘  ‘

u = exp(s D
checked numerically, as when {u, p} are expanded to O(D

t), the proper solution is obtained.

3.3.  Probability PATHTREE

As mentioned previously, a general path-integral solution of the Fokker-Plank equation, including
the Black-Scholes equation, can be numerically calculated using the PATHINT algorithm. Although this
approach leads to very accurate results, it is computationally intensive.

In  order  to  obtain  tree  variables  valid  up  to O(D

t),  we  turn  to  the  short-time  path-integral
representation  of  the  solution  of  the  Fokker-Planck  equation,  which  is  just  the  multiplicative  Gaussian-
Markovian distribution [1,19]. In the prepoint discretization relevant to the construction of a tree,

P(S¢ , t¢ |S, t) =
‘  ‘

1
‘2p D

tg2

exp

(S¢

S -
2g2D

fdt)2
t

t = t¢

t

valid for displacements S¢ from S “reasonable” as measured by the standard deviation g(cid:214)
‘  ‘
basis for the construction of meshes in the PATHINT algorithm.

The crucial aspects of this approach are: There is no a priori need of the ﬁrst moments of the exact
long-time probability distribution P, as the necessary statistical information to the correct order in time is
contained in the short-time propagator. The mesh in S at every time step need not recombine in the sense
that  the  prepoint-postpoint  relationship  be  the  same  among  neighboring S nodes,  as  the  short-time
probability density gives the correct result up to order O(D
t) for any ﬁnal point S¢ . Instead, we use the
natural metric of the space to ﬁrst lay down our mesh, then dynamically calculate the evolving local short-
time distributions on this mesh.

We construct an additive PATHTREE, starting with the initial value S0, with successive increments

(8)

t, which is the

Si+1 = Si + g(cid:214)
‘  ‘

t , Si > S0

D
D
D
(cid:214)
‘
‘
(cid:230)
(cid:231)
Ł
-
-
(cid:246)
(cid:247)
ł
D
-
D
D
Probability tree ...

- 5 -  

Ingber, Chen, Mondescu, Muzzall, Renedo

where g is  evaluated  at Si. We deﬁne  the  up  and  down  probabilities p and q, resp.,  in  an  abbreviated
notation, as

Si- 1 = Si - g(cid:214)
‘  ‘

t , Si < S0 ,

p =

P(i + 1|i; D

t)

P(i + 1|i; D

t) + P(i - 1|i; D

t)

q = 1 - p .

t,
lim p = 1
tﬁ 0
2

.

where the short-time transition probability densities P’s are calculated from Eq. (8). Note that in the limit
of small D

3.3.1.  Continuous Limit of the PATHTREE Algorithm

In  either  the  upper  or  lower  branches  of  the  tree  (Si > S0 or Si < S0, resp.),  we  always  have  the
lim  of our

postpoint Si– 1 in terms of the prepoint Si, but we also need the inverses to ﬁnd the asymptotic
PATHTREE building technique. For example, for the upper branch case,

0

Si- 1 » Si - g(cid:214)
‘  ‘

t + (g

)D

t + O(D

t3/2) .  

¶ g
¶ S

This expression must be used to extract the down change d (Si- 1 = Si + d), for comparison to the standard
tree algorithm.

The  continuous  limit  of  the  previous  tree  building  procedure  is  obtained  by  Taylor  expanding  all

factors up to terms O(D

t) and as functions of the prepoint Si [15].  This leads to

pu + qd
t

pu2 + qd 2
t

f + O(D

t1/2)

» g2 + O(D

t1/2) ,  

g

¶ g
¶ Si

dt + g(cid:214)
‘  ‘

dt

/Si <<  1 .

from which the correct partial differential equation, Eq. (2), is recovered up to O(D

t).

In implementing the PATHTREE algorithm, good numerical results are obtained in the parameter

region deﬁned by the convergence condition

This insures the proper construction of the tree to order O(D

t).

3.3.2.  Treating Binomial Oscillations

Binomial trees exhibit by construction a systematic oscillatory behavior as a function of the number
of steps in the tree (equivalently, the number of time slices used to build the tree), and the new building
algorithm  based  on  the  short-time  propagator  of  the  path-integral  representation  of  the  solution  of  the
Fokker-Planck equation has this same problem. A common practice [20] is to perform averages of runs
with consecutive numbers of steps, e.g.,

C = C N +1 + C N

,

2

where C N signiﬁes the value calculated with N number of steps.

(9)

(10)

(11)

(12)

(13)

(14)

(15)

D
D
D
ﬁ
D
D
»
D
(cid:230)
(cid:231)
Ł
(cid:239)
(cid:239)
(cid:239)
(cid:239)
(cid:239)
(cid:239)
(cid:246)
(cid:247)
ł
Probability tree ...

- 6 -  

Ingber, Chen, Mondescu, Muzzall, Renedo

3.3.3.  Inappropriate Trinomial Tree

Another type of tree is the trinomial tree discussed above, equivalent to the explicit ﬁnite difference
method [14,15]. If we were to apply this approach to our new PATHTREE algorithm, we would allow the
stochastic variable S to remain unchanged after time step D
t with a certain probability pm. Howev er,  in
our  construction  the  trinomial  tree  approach  is  not  correct,  as  the  deterministic  path  is  dominant  in  the
construction of the probabilities { pu, pm, pd }, and we would obtain

lim pu = pd = 0 ,
tﬁ 0

lim pm = 1 .  
tﬁ 0

(16)

3.4.  Linear and Quadratic Aspects of Numerical Implementation

PATHTREE computes the expected value of a random variable at a later time given the diffusion
process  and  an  initial  point. The  algorithm  is  similar  to  a  binomial  tree  computation  and  it  consists  of
three main steps: computation of a mesh of points, computation of transition probabilities at those points
and computation of the expected value of the random variable.

The  ﬁrst  step  is  the  creation  of  a  one  dimensional  mesh  of  points  with  gaps  determined  by  the
second moment of the short term distribution of the process. The mesh is created sequentially, starting
from the initial point, by progressively adding to the last point already determined (for the upward part of
the  mesh)  the  value  of  the  standard  deviation  of  the  short  term  distribution  with  the  same  point  as
prepoint.  In a similar  fashion  we  create  the  mesh  downwards,  this  time  by  subtracting  the  standard
deviations.  The procedure takes a linear amount of time on the number of time slices being considered
and contributes very little to the overall time of the algorithm.

In  the  second  step  an  array  of  up  and  down  probabilities  is  created. These  probabilities  are  the
values  of  the  short  term  transition  probability  density  function  obtained  by  using  the  current  point  as
prepoint  and  the  two neighboring  points  as  post  points. The  probabilities  are  renormalized  to  sum  to
unity. This  procedure  takes  a  linear  amount  of  time  on  the  number  of  time  slices. Notice  that  the
probabilities  only  depend  on  the  current  point  and  not  on  time  slice,  hence  only  two probabilities  are
computed per element of the array of points.

The third step is the computation of the expected value of the random variable.  For example, the
option  price C is  developed  by  marching  backwards  along  the  tree  and  applying  the  risk-neutral
evaluation

C(Si, t -

t) = e

- rD

t[ pC(Si+1, t) + qC(Si- 1, t)] .

(17)

We  emphasize again that in Itoˆ terms the prepoint value is Si. This part works as a normal binomial tree
algorithm.  The algorithm uses the expected values at one time slice to compute the expected values at the
previous one. The bulk of the time is spent in this part of the algorithm because the number of iterations
is quadratic on the amount of time slices. We  managed to optimize this part by reducing each iteration to
about 10 double precision operations.

In  essence,  this  algorithm  is  not  slower  than  standard  binomial  trees  and  it  is  very  simple  to

implement.

4.  CALCULATION OF PROBABILITY

4.1.  Direct Calculation of Probability

We  can calculate the probability density function by ﬁrst recursively computing the probabilities of
reaching  each  node  of  the  tree. This  can  be  performed  efﬁciently  thanks  to  the  Markov  property. To
compute  the  density  function  we  need  to  rescale  these  probabilities  by  the  distance  to  the  neighboring
nodes: the more spread the nodes are, the lower the density. We can estimate the probability density as
follows:  First  we  compute  the  probability  of  reaching  each  ﬁnal  node  of  the  tree. We  do this
incrementally by ﬁrst computing the probabilities of reaching nodes in time slice 1, then time slice 2 and

D
D
D
Probability tree ...

- 7 -  

Ingber, Chen, Mondescu, Muzzall, Renedo

so forth. At time slice 0, we know that the middle node has probability 1 of being reached and all the
others have probability 0. We  compute the probability of reaching a node as a sum of two contributions
from the previous time slice. We  reach the node with transition pu from the node below at the previous
slice, and with transition pd from the node above. Each contribution is the product of the probability at
the previous node times the transition to the current node. This formula is just a discretized version of the
Chapman-Kolmogorov equation

p(x j, ti) = p(x j- 1, ti- 1) pu j- 1 + p(x j+1, ti- 1) pd j+1 .

(18)

Now that  we  have  computed  the  absolute  probabilities  at  the  ﬁnal  nodes,  we  can  give  a  proper
prepoint-discretized estimation of the density by scaling the probabilities by the spread of the S values.
For the upper half of the tree we divide the probability of each ﬁnal node by the size of the lower adjacent
= pi/(Si - Si- 2).  (Note: We  use  index Si- 2 because  the  binomial  tree  is
interval  in  the  mesh:  densityi
constructed over a trinomial tree. In this way we can keep in memory all the nodes but only half of the
nodes though are true ﬁnal nodes.) If there is a ﬁnal middle node we divide its probability by the average
= pi/((Si+2 - Si- 2)/2).  For  the  lower  half  of  the
of  sizes  of  the  two adjacent  intervals,  that  is:  densityi
mesh we divide the probability by the upper adjacent gap in the mesh: densityi

= pi/(Si+2 - Si).

4.2.  Numerical Derivatives of Expectation of Probability

The probability P can be calculated as a numerical derivative with respect to strike X of a European
Call  option,  taking  the  risk-free  rate r to  be  zero,  given an underlying S0 evaluated  at  time t = 0,  with
strike X, and other variables such as volatility s , cost of carry b, and time to expiration T suppressed here
for clarity, C(S0, 0; X),

P[S(T )|S(t0)]

=
S(T )” X

P[X|S(t0)] =

¶ 2C
¶ X 2

(19)

(20)

This  calculation  of  the  probability  distribution  is  dependent  on  the  same  conditions  necessary  for
any tree algorithm, i.e., that enough nodes are processed to ensure that the resultant evaluations are a good
representation  of  the  corresponding  Fokker-Planck  equation,  addressed  above, and  that  the  number  of
iterations in PATHTREE are sufﬁcient for convergence.

4.2.1.  Alternative First Derivative Calculation of Probability

An alternative method of calculating the probability P a a ﬁrst-order numerical derivative, instead
of  as  second-order  derivative, with  respect  to X is  to  deﬁne  a  function C H using  the  Heaviside  step-
function H(S, X) = 1 if S ‡ X and  0  otherwise,  instead  of  the  Max  function  at  the  time  to  expiration.
This yields

P[S(T )|S(t0)]

=
S(T )” X

P[X|S(t0)] = -

¶ C H
¶ X

Sometimes  this  is  numerically  useful  for  sharply  peaked  distributions  at  the  time  of  expiration,  but  we
have found the second derivative algorithm above to work ﬁne with a sufﬁcient number of epochs.

Our  tests  verify  that  the  three  methods  above  giv e the  same  density. We consider  the  numerical-
derivative  calculations  a  very  necessary  baseline  to  determine  the  number  of  epochs  required  to  get
reasonable accuracy.

4.2.2.  Oscillatory Corrections

Fig. 1 illustrates the importance of including oscillatory corrections in any binomial tree algorithm.
When these are included, it is easy to see the good agreement of the BS PATHTREE and OU PATHTREE
models.

4.3.  Comparison to Exact Solutions

exact analytic solutions.

Fig.  2  gives the  calculated  probability  distribution  for  the  BS  and  OU  models,  compared  to  their

Probability tree ...

- 8 -  

Ingber, Chen, Mondescu, Muzzall, Renedo

5.  CONCLUSION

We  hav e developed  a  path-integral  based  binomial  PATHTREE  algorithm  that  can  be  used  in  a
variety of stochastic models. This algorithm is simple, fast and can be applied to diffusion processes with
quite arbitrarily nonlinear drifts and diffusions.

As expected, this PATHTREE algorithm is not as strong as PATHINT [4], as PATHINT can include

details of an extremely high dimensional tree with complex boundary conditions.

For PATHINT, the  time  and  space  variables  are  determined  independently. I.e.,  the  ranges  of  the
space  variables  are  best  determined  by  ﬁrst  determining  the  reasonable  spread  of  the  distribution  at  the
ﬁnal time epoch. For PATHTREE just one parameter, the number of epochs N , determines the mesh for
both time and the space variables.  This typically leads to a growth of the tree, proportional to (cid:214)
‘  ‘ N , much
faster than the spread of the distribution, so that much of the calculation is not relevant.

However, this PATHTREE algorithm is surprisingly robust and accurate. Similar to PATHINT, we

expect its accuracy to be best for moderate-noise systems.

ACKNOWLEDGMENTS

We thank Donald Wilson for his ﬁnancial support.

Probability tree ...

- 9 -  

Ingber, Chen, Mondescu, Muzzall, Renedo

REFERENCES

1. 

2. 

3. 

4. 

Ingber, Statistical  mechanical  aids  to  calculating  term  structure  models, Phys.  Rev.  A

F. Langouche,  D.  Roekaerts,  and  E.  Tirapegui,  Discretization  problems  of  functional  integrals  in
phase space, Phys. Rev. D 20, 419-432 (1979).
L.
42 (12), 7057-7064 (1990).
L. Ingber and J.K. Wilson, Volatility of volatility of ﬁnancial markets, Mathl. Computer Modelling
29 (5), 39-57 (1999).
L.
283 (3-4), 529-558 (2000).

Ingber, High-resolution  path-integral  development  of  ﬁnancial  options, Physica  A

5.  M. Rosa-Clot and S. Taddei, A path integral approach to derivative security pricing: I. Formalism

and analytic results, INFN, Firenze, Italy, (1999).

6.  M.F. Wehner  and  W.G.  Wolfer, Numerical  evaluation  of  path-integral  solutions  to  Fokker-Planck

equations. I., Phys. Rev. A 27, 2663-2670 (1983).

7.  M.F. Wehner  and  W.G.  Wolfer, Numerical  evaluation  of  path-integral  solutions  to  Fokker-Planck

equations. II. Restricted stochastic processes, Phys. Rev. A 28, 3003-3011 (1983).

8.  M.F. Wehner  and  W.G.  Wolfer, Numerical  evaluation  of  path  integral  solutions  to  Fokker-Planck

9. 

equations. III. Time and functionally dependent coefﬁcients, Phys. Rev. A 35, 1795-1801 (1987).
L. Ingber, Path-integral  evolution  of  multivariate  systems  with  moderate  noise, Phys.  Rev.  E
51 (2), 1616-1619 (1995).

10.  L. Ingber, R. Srinivasan,  and  P.L.  Nunez,  Path-integral  evolution  of  chaos  embedded  in  noise:

Dufﬁng neocortical analog, Mathl. Computer Modelling 23 (3), 43-53 (1996).

11.  L. Ingber, Statistical  mechanics  of  neocortical  interactions:  Path-integral  evolution  of  short-term

memory, Phys. Rev. E 49 (5B), 4652-4664 (1994).

12.  L. Ingber  and  P.L.  Nunez,  Statistical  mechanics  of  neocortical  interactions:  High  resolution  path-

integral calculation of short-term memory, Phys. Rev. E 51 (5), 5074-5083 (1995).

13.  K.

Schulten, 

Non-equilibrium 

statistical 

mechanics, 

Lecture 

Notes

14. 

[http://www.ks.uiuc.edu/˜kosztin/PHYCS498NSM/], U. Illinois, Urbana, IL, (2000).
J.C. Hull, Options, Futures, and Other Derivatives, 4th Edition, Prentice Hall, Upper Saddle River,
NJ, (2000).

15.  Y.K. Kwok, Mathematical Models of Financial Derivatives, Springer-Verlag, Singapore, (1998).
16.  E.G. Haug, The  Complete  Guide  to  Option  Pricing  Formulas, McGraw-Hill,  New York,  NY,

(1997).

17.  H. Risken, The  Fokker-Planck Equation:  Methods  of  Solution  and  Applications, Springer-Verlag,

18. 

Berlin, (1989).
J. C.  Cox,  S.  A.  Ross,  and  M.  Rubenstein,  Option  pricing:  A  simpliﬁed  approach, J.  Fin.  Econ.
7, 229-263 (1979).

19.  R. Graham,  Path-integral  methods  in  nonequilibrium  thermodynamics  and  statistics,  in Stochastic
Processes  in  Nonequilibrium  Systems, (Edited  by  L.  Garrido,  P. Seglar, and  P.J.  Shepherd),  pp.
82-138, Springer, New York, NY, (1978).

20.  M. Broadie  and  J.  Detemple,  Recent  advances  in  numerical  methods  for  pricing  derivative
securities,  in Numerical  Methods  in  Finance, (Edited  by  L.C.G  Rogers  and  D.  Talay),  pp.  43-66,
Cambridge University Press, Cambridge, UK, (1997).

Probability tree ...

- 10 -  

Ingber, Chen, Mondescu, Muzzall, Renedo

FIGURE CAPTIONS

FIG. 1. The oscillatory correction, an average of N and N + 1 iteration solutions, provides a simple
and effective ﬁx to the well-known oscillations inherent to binomial trees. The uncorrected Black-Scholes
binomial  tree  (a)  can  be  compared  to  the  Black-Scholes  tree  with  oscillatory  correction  (b). In  (c),  the
Ornstein-Uhlenbeck binomial tree also be robustly corrected as shown in (d). The BS PATHTREE model
shown in (e) can be compared to the Black-Scholes case shown in (b). The OU PATHTREE model (f) is
equivalent to the Ornstein-Uhlenbeck model in (d). Parameters used in these calculations are: S = 50.0, X
= 55.0, T = 1.0, r = 0.0675, b = 0, s = 0.20, and N = 300.

FIG.  2. Probability  distributions  for  the  PATHTREE  binomial  model  as  described  in  the  text.  In
(a),  bar  graphs  indicate  OU  PATHTREE  agrees  well  with  the  exact  Ornstein-Uhlenbeck  distribution
shown in the black line. In (b), the bar graphs indicate BS PATHTREE agrees well with the exact Black-
Scholes distribution shown in the black line. Parameters are the same as in Fig. 1.

Probability tree ...

- Figure 1 -

Ingber, Chen, Mondescu, Muzzall, Renedo

(a)  Black-Scholes

(b)  Black-Scholes with oscillatory correction

50

100

200

250

300

50

100

200

250

300

(c)  Ornstein-Uhlenbeck

(d)  Ornstein-Uhlenbeck with oscillatory correction

50

100

200

250

300

50

100

200

250

300

(e)  BS PATHTREE with oscillatory correction

(f)  OU PATHTREE with oscillatory correction

50

100

200

250

300

50

100

200

250

300

2.05

2.04

2.03
2.02

2.01

2

1.99
1.98

1.97

1.9
1.89
1.88
1.87
1.86
1.85
1.84
1.83
1.82
1.81
1.8

1.9
1.89
1.88
1.87
1.86
1.85
1.84
1.83
1.82
1.81
1.8

150

N

150
N

150

N

2.05

2.04

2.03
2.02

2.01

2

1.99
1.98

1.97

1.9
1.89
1.88
1.87
1.86
1.85
1.84
1.83
1.82
1.81
1.8

2.05

2.04

2.03

2.02
2.01

2

1.99
1.98

1.97

150

N

150
N

150

N

Probability tree ...

- Figure 2 -

Ingber, Chen, Mondescu, Muzzall, Renedo

(a) Probability Distribution for X-Tree (x=0)

0.05

0.045

0.04

0.035

0.03

0.025

0.02

0.015

0.01

0.005

0.05

0.045

0.04

0.035

0.03

0.025

0.02

0.015

0.01

0.005

0

0

20

40

60

80

100

(b) Probability Distribution for X-Tree (x=1)

0

0

20

40

60

80

100

S0

S0

