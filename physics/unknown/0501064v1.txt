1

Integrating transport equations by combining transfer matrices,

transmission-reflection matrices, and Green’s matrices,

in the context of light propagation in foliage

Antoine Royer
Département de Génie Physique, Ecole Polytechnique, Montréal, Québec H3C 3A7, Canada
Sophie Royer
Institut für Botanik, Universität Innsbruck, Austria

The propagation of light in a horizontally homogeneous foliage, modeled as a turbid medium,
may be expressed in terms of a transport equation of the form

Ê
       ∂
Á
z
∂ -
Ë

D

( )
z
ˆ
˜ =
( )
z
¯

U

Ê
Á
Ë

M

M

DD

UD

( )
z
( )
z

M

M

DU

UU

( )
z
ˆ
˜
( )
z
¯

D

U

( )
z
ˆ
˜ +
( )
z
¯

Ê
Á
Ë

E

D

E
U

( )
z
ˆ
˜
( )
z
¯

Ê
Á
Ë

,

U

(

z

)

g

=

R D
g

(

z

g

)

+

E
U

(

z

g

)

z
( )

zg= , and   E( )z   are emissions. The incident ‘down’ flux   D(

Here, z  is height,  D( )z   and   U( )z   are vectors of photon fluxes in various downwards (D) and
upwards (U) discrete directions, matrix  M  expresses scattering by leaves,  R g   reflection by the
ground at  z
)z0   at the top   z0  of the
canopy, and emissions, are known. The usual way to get   D( )z , U( )z   at all  z  is to set initially
U
We present a method which is both faster and more accurate, especially if one must do many
computations on the same canopy, for different incident fluxes and emissions. This method
combines transfer matrices, transmission-reflection matrices, and Green’s matrices (TTRG).
There exist (artificial) extreme light trapping situations for which iterative integration is hardly
practical, while TTRG remains as efficient.    

, integrate   D( )z   numerically from  z0  to  zg, then   U( )z   from  zg  to  z0, and iterate.

zU∫
( )
E

1.   Introduction

s

∂
z
∂

J

( )
z

=

( ) ( )
z
z
M J

E

( )
z

+

In many problems, it is necessary to integrate a transport equation of the form

where   J( )z   and   E( )z   are vectors, s  and   M( )z   matrices. Typically, the ‘scattering matrix’

M( )z   and ‘source’  E( )z   are known, while   J( )z , or part of it, is known at some point   z

and we want   J( )z   at other values of  z.

The method of numerical integration we present can presumably be adapted to various

problems. Here we treat specifically light propagation in a horizontally homogeneous foliage

(the ‘canopy’), modeled as a turbid medium [1-3]. This has the advantage of being easily

visualized, and fairly general in that   M( )z   and   E( )z   have no special symmetries.

  

(1)

z= 0 ,

2

The vector   J( )z   of (vertical) photon fluxes (or radiances) separates into two subvectors,

D( )z   and  U( )z , of ‘downward’ and ‘upward’ propagating fluxes. Equation (1) then has the
more explicit form, if we denote   ˙f

∫ ∂ ∂ :
z
f

˙ ( )
z
D
z
U
(
˙ ( )
z
U

g

E
D
E
U

( )
z
z
(

+
)

g

=
)

=

M

+

( )
z
D
DD
z
R D
(
g

g

z
( )
)

M

+

DU

z
( )

U

z
( )

= -

E
U

z
( )

-

M

UD

z
( )

D

z
( )

M

UU

-

z
( )

U

z
( )

( )
a
b
( )

c
( )

(2)

where (b) describes reflection and emission by the ground at   z

zg= . In practice, only the ‘down’

flux   D(

)z0   at the top   z0  of the canopy is known. The usual way to compute   D( )z , U( )z   at all

heights  z  is by iteration [1-4]: Set   U

z
( )

zU∫
E
( )

integrating (a) numerically from   z0  to   zg ; reflect   D(

  (or simply   U( )z ∫ 0) and compute   D( )z   by
)zg   off the ground with (b); then compute

new values of   U( )z   by integrating (c) from   zg   to   z0 . Repeat using the new values of   U( )z ,

and so on until   D( )z   and   U( )z   stabilize.

Each iteration in effect allows photons to undergo additional scatterings. For visible and

thermal radiation, which are strongly absorbed by leaves (above  80%), photons have a high

probability of getting absorbed at each scattering, so that convergence is fast (4 or 5 iterations

suffice); for near-infra-red light (NIR), absorption is less than 20%, and more iterations are

required. One can devise (artificial) extreme light trapping situations requiring any number of

iterations (hundreds of thousands), and for which, moreover, specifying a convergence criterium

is problematic, so that iterative integration is hardly practical. Monte Carlo calculations [5],

whereby histories of many individual photons are computed, fare even worse. But the method

presented in this paper remains as fast and accurate.

This method combines transfer matrices, transmission-reflection matrices, and Green’s

matrices (TTRG). All these matrices are specific to the canopy, hence need to be computed only

once. They are then applied to vectors comprised of incident and emitted radiances, to quickly

yield the light climate (the set of fluxes everywhere).This is especially advantageous if one has to

do many computations on the same canopy, for different incident radiances and/or leaf thermal

emissions. Indeed, the latter depend non-linearly on leaf temperatures, which themselves depend

non-linearly on leaf absorption rates, so that the only feasible way to determine leaf temperatures

is by iteration. Whence repeated computations of the thermal light climate.

3

Transfer matrices can be used alone for moderately thick canopies, but run into numerical

problems with thick canopies. Aronson and coworkers [6] formulated a transfer matrix method

applicable to optically thick media, but for cases that   M( )z   is constant over sizable  z  intervals,

and the symmetries   M

MDU
=

UD

,  M

MUU
=

DD

  hold. These conditions are not met in our

problem, as leaf densities vary with  z, and the top and bottom of leaves have different optical

properties. Transmission-reflection matrices [7], as well as Green’s matrices, can also be used

alone, but are not optimal, as will be described onwards. It is more efficient to suitably combine

the use of these different types of matrices.

The paper has three parts. Part I establishes the light transport equation (LTE). Part II

presents TTRG. Part III describes other methods of numerically integrating the LTE, for

comparison with TTRG. The Conclusion briefly presents results of numerical tests, to be

described in detail elsewhere. Future papers will apply TTRG to real canopies, including

calculations of leaf temperatures and rates of photosynthesis.

We start with a general discussion of the problem (section 2), and then establish the light

Part I   Starting equations

transport equation (section 3).

2   General aspects

The foliage is modeled as a turbid medium of infinitesimal leaf elements, described by volume

densities of leaf areas of various kinds and orientations [1-4]. Photons are scattered, absorbed or emitted

by leaves and the ground below. We wish to calculate the light climate inside the canopy, namely the set

of photon fluxes   J(

, )W r   in all directions  W, at every point   r = ( ,
of sun and sky light into the canopy, and from thermal emissions by leaves and ground.

, )

x y z , resulting from the penetration

Consider a narrow beam of light entering the canopy in direction  Wi. When a photon hits

a leaf, it is either absorbed, or scattered into any one of a continuum of directions  Wf . So when
the light beam, comprised of myriad photons, strikes a leaf, part is absorbed, and the rest fans out

into a continuum of scattered beams. All these beams likewise fan out as they in turn hit other

leaves, and so on. On this account, calculating   J(

, )W r   seems a formidable affair.

One way to tackle the problem is to follow individual photons rather than light beams.

Each scattering now has a single random outcome, so that a given photon can have many

different histories. By calculating and combining many such histories, one reproduces the

4

multiple fanning out of a beam. Doing this for many different incident directions  Wi   and points
of entry into the canopy, and finally summing, one obtains   J(

, )W r   to any accuracy, in

principle. Such ‘Monte-Carlo’ calculations [5] are of course very time consuming.

Another approach is to break up   J(

, )W r ,  k = 0 1 2, ,
comprising photons that reached  r  after scattering  k  times off leaves or ground. Then,

, )W r   into subclimates   J k( )(

,...

J

r
, )
(
W =

J

0
( )

r
, )
(
W +

J

r
, )
(
W +

J

1
( )

2
( )

r
, )
(
W +

...

(3)

The   J k( )  can be calculated recursively in a straightforward manner [8]. Convergence of the

multiple-scattering expansion (3) is rapid if absorption is strong (visible and thermal radiation),

less so otherwise (near-infrared), and hopelessly slow in cases of extreme light trapping.

Still another approach, and the one we use, is to deal directly with the whole light climate

, )W r , and obtain for it an integro-differential equation called the light transport equation
J(
(LTE) [9]. That it is possible to do so is due to the fact that over an infinitesimal distance   dl, a
photon can hit at most one leaf element (to first order in  dl), so that the photon flux is affected

in a simple way. Integrating the LTE iteratively in fact reproduces the series (3).

3   The light transport equation (LTE)

           We let the positive  z  direction point downwards. We deal with a set of discrete directions

W j

= (

q j ,  j

)

,

j

j

= 1 2,

,...,

N J

, and write   j DŒ   or  j UŒ   according as   W j  points downwards or

upwards. Vectors  J, and matrices  M, will often be written in ‘down-up’ block form:

J

=

J

D

J
U

ˆ
˜
¯

Ê
Á
Ë

,

M

=

M

M

Ê
Á
Ë

DD

UD

M

M

DU

UU

ˆ
˜
¯

where   J D   has elements   J j , j DŒ , and   MDU   has elements   M ij ,  i DŒ ,  j UŒ , etc.

Assuming horizontally homogeneous conditions, we denote by  J zj ( )  the vertical flux of

photons  j  (i.e., travelling in direction   W j), so that  J zj ( )  is the number of photons  j  crossing

per second a unit horizontal area at height  z. Consider now a horizontal layer   (

z z1
,

2   of
)

infinitesimal thickness   dz

=

z
2

z
1

-

>

0. Let   gi  be the probability for a photon  i  to hit a leaf

within the layer, and   h fi   that to get scattered into direction  f . Of course, the probability 

to get scattered into any direction is less than that to get intercepted,  gi. The difference

a
i

g
i

=

-

h
≥Â

fi

f

0

(4)

h fi

fÂ

(5)

5

is the probability of absorbtion. Finally, let   e f   be the number of photons emitted per second in

direction  f   by a unit area of the layer. Across the layer, the vertical flux   J

zf ( )  looses photons

due to interception by leaves, but gains photons scattered or emitted in direction  f. Thus,

denoting   J

(

zn

)

=

J

n

(

,
D U
n

n

)

,  n = 1 2,

:

=

D

2

U

1

1

1

D

DU

+

+

=

=

1 g D h D h U e
-(
DD
1 g U h U h D e
-(
U
UU
g

)
)
= d . Clearly,  g h e
,

+

+

+

+

UD

,

U

ij

1

2

2

2

j

D

where   g
ij

  are infinitesimals proportional to   dz :

g G
=

dz

,

h H
=

dz

,

e E
=

dz

                  ( dz

=

z
2

z
1

-

>

0)

where   G H E,

,

  are probabilities (or rates) per unit vertical distance. These are readily calculated

in terms of the volume densities of leaf areas (of various species and orientations), and of the

scattering coefficients and emission rates for individual leaves [1-4]. We may rewrite (6) as

out

J

∫

D

2
U

1

Ê
Á
Ë

ˆ
˜ =
¯

1 M J
)
+(

dz

in

E

dz

,

+

,
M H G

-

∫

in

J

∫

D
1

U

2

ˆ
˜
¯

Ê
Á
Ë

   

Since   (

1 g
-

U

)

1 g
U

ª +

  and   g U g U
U

U

2

1

ª

1
-

  to first order in   dz , (6) may also be written as

D

2

U

2

=

=

D

)

-

(
1 g D h D h U e
DD
(
1 g U h U h D e
U
UU

+

+

+

UD

DU

)

U

1

1

1

1

1

1

D

+

-

-

-

Note that (6),(8) relate the fluxes   Jout   exiting the layer   (

z z1
,

2   to   Jin  entering it, while (9)
)

relates   J

= (

2

,
D U
2

2

)  just below the layer to  J
1

= (

,
D U
1

1

)  just above. Subtituting (7) into (9),

and using   J

J
1-

2

J
(
= ∂ ∂

)z dz , we recover equation (1):

J

( )
z

=

( ) ( )
z
z
M J

E

( ),
z

+

M

( )
z

= -

G

( )
z

+

H

( ),          s
z

∫

(10)

1
0

Ê
Á
Ë

0

ˆ
˜
1
-
¯

s

∂
z
∂

Part II   The TTRG method

We start by describing the transfer matrix method (TMM), and analyze why it fails when

applied numerically to thick canopies. Our remedy is to partition the canopy into moderately

thick ‘medium’ layers, and apply TMM recursively. This amounts to a discrete version of the

‘invariant embedding method’ [10], but like the latter, it only yields the light reflected and

emitted by the canopy. To get the light climate inside the canopy, we first obtain the radiances

between ‘medium’ layers by using transmission-reflection matrices and a Green’s matrix;

(6)

(7)

(8)

(9)

6

radiances within ‘medium’ layers can then be obtained using transfer matrices.

4    Transfer matrix method

            Transfer matrices  T( ,

z z¢   are defined by

)

∂
z
∂

T

( ,
z z

)
¢ =

( )
z
sM T

( ,
z z

),

¢

T

( , )
z z

,
1

=

T

( ,
z z

)
T

(

¢

)
,
z z
¢ ≤ =

T

( ,
z z

)

≤

(11)

If   M

M( )z ∫
z zg
,
0

  is constant between  z   and   z¢, then   T
)

  into  N  ‘thin’ layers   Dzn :

canopy   (

z z
( ,

)
¢ =

e z z
(
- ¢

)

sM

. So let us partition the

(

z z
,
0

g

)

=

(

z z
,
1
0

,...,

z

N

)

,            Dz

n

=

z
n

- -1          ( n

z
n

= 1 2,

,...,

N

)

(12)

with   z0  at the top of the canopy,  z

N

g=   at the bottom. These ‘thin’ layers are chosen thin

z

enough that   M

M( )z
ª

n

  and   E

( )z

E
nª

  if   z

(
z
Œ -
1
n

,

z
n

)

, and also that   Mn ij

, D << 1  for all  n,

nz

i, j. In this way, the thin layer transfer matrices

T T
∫

n

(

,
z z
n
n

)

ª

e

1
-

sM

z
D

n

n

1 sM

= +

n

z
D
n

+

1
2

(

sM

2

)

2
z
D
n

n

+

...

  

(13)

differ little from  1. We have   T

(

z zn
,
0

)

=

T T
n
n

1
-

L .
T
1

Assuming that   J

∫ (
J

0

)z   is known, the solution of (10) may be written as
0

J

z
( )

=

T

z z
( ,
0

) (
J

z
0

)

f

z z
( ,
0

),

+

f

z z
( ,
0

)

∫

dz

¢

T

z z
( ,

)

(
sE

z

)

                        (14)(a,b)

¢

¢

z

Ú

z

0

If   E( )z ∫ 0, then   J

z
( )

=

T

z z
( ,

) (
J

z

0 , showing that   T( ,
)

z z0   ‘propagates’  J(

)

)z0   from  z0  to  z .

0

We call   f( ,

z z0   ‘propagated emissions’, since   T

)

z z
( ,

(
sE
)

z

¢   is the emission at  z¢  propagated
)

¢

to  z. In numerical computations, we only want  J(zn)  at the discrete heights  zn. These are best

obtained recursively, i.e., approximating   f

(

z z
,
n
n

)
- ª1

sE

D :
z
n

n

J

n

T J
n

=

n

-1

se

,

n

+

e

n

=

E

n

z
D
n

,

J

n

∫

J

(

z
n

)

,              ( n

= 1 2,

,...,

N

)

(15)

In practice, only the ‘down’ component   D D0
= (

)z
0

  of  J0  is known, namely the

sunlight and skylight incident on the top   z

z= 0  of the canopy. The ‘up’ component   U

= (
U0

)z
0

(the light reflected and emitted by the canopy) is unknown.

Determination of  U0: Let  T  and  f   pertain to the whole canopy   (

z zg
,
0

)

:

T T
∫

(

z z
,
0
g

) ,

f

∫

f

(

z z
,
0
g

)

(16)

Putting   J

(

z0

)

=

J

0

=

(

,
D U
0

0

)

, etc., write (14) for   z

zg=   as   J

g =

TJ

+0

f

, that is:

7

D

U

Ê
Á
Ë

g

g

ˆ
˜ =
¯

Ê
Á
Ë

T

T

DD

UD

T

T

DU

UU

D

U

ˆ
˜
¯

Ê
Á
Ë

0

0

ˆ
˜ +
¯

Ê
Á
Ë

f

D

f
U

ˆ
˜ =
¯

Ê
Á
Ë

0

DD

+

T D T U f

+
T D T U f
U

DU

UU

UD

0

0

0

D

+

+

ˆ
˜
¯

Of the four fluxes   D U D U

,

,

0

0

,g

g , only  D0  is known. However, we also have at  zg :

U

g

=

R D e
g

g

+

g

,                e

Eg
∫
U

(

gz

)

Substituting   D Ug

,

g

, as given by (17), into (18), and then solving for   U0 , we get:

U

0

=

R D e
0

+

0

0

R

0

=

1
R T

g DU

(

T

UU

-

R T

g DD

T

UD

-

,
)

e

0

=

T

UU

-

1
R T

g DU

(

R f
g D

-

f
U

e

g

+

)

Comparing (19) with (18), we see that  e0  is an ‘up’ emission vector, and  R0  a ‘down-to-up’
z= 0  (thus,   e j0

reflection matrix, from the surface   z

, ≥   and   0

£R ij,

0£

).

0

1

Once  U0, hence the complete   J0, are known, the fluxes  Jn  between thin layers can be

computed recursively using (15). However, in numerical computations on thick canopies,

unphysical negative elements appear in  R0  and   e0, hence in  U0  (negative fluxes). To trace the

origin of this nonsense, let us first define transmission-reflection matrices.   

5   Transmission-reflection matrix, and canopy emission vector

Equation (17) relates   J

= (

,
D U
g

g

g

)  below the canopy to   J

= (

,
D U
0

0

0

)   above. Let us

rather relate   J

out

= (

D U
,
g

)0   coming out of the canopy, to   J

in

= (

,
D U
0

g

)

  coming in. From (17)

we deduce   U

=

0

1
-
UU

T U T D f
-
U

-

UD

(

0

g

), where   T

1
-
UU

(

T

UU

∫

1
-

)

. We can then write:     

out

J

∫

D
U

Ê
Á
Ë

g

0

ˆ
˜ =
¯

Ê
Á
Ë

+

tD rU d
+
0
g
U u
D
+
tt
g

+

rr

0

ˆ
˜ =
¯

in

K J

+

ee,

in

J

∫

D
U

0

g

ˆ
˜
¯

Ê
Á
Ë

where we define the transmission-reflection matrix  K, and canopy emission vector   ee, by

K

∫

T

DD

t

r

Ê
Á
Ë

ˆ
˜ ∫
rr tt
¯

Ê
Á
Ë

T T T

1
-
DU UU UD
1
T T
-
UU UD

-
-

1
T T
-
DU UU
1
T
-
UU

ˆ
˜
¯

,

ee

∫

d

u

Ê
Á
Ë

ˆ
˜ ∫
¯

Ê
Á
Ë

f

D

-
-

tt

rf
U

f
U

ˆ
˜
¯

Considering   D

tD rU d

, we see that  t   is ‘down’ transmission through the canopy, r

=

g

+

0

+

g

is ‘up-to-down’ reflection off the surface   z

zg= , and  d  is ‘down’ emission from  zg. Similarly

for  tttt, rrrr, and  u. Their physical meanings imply that  ej ≥ 0   and   0

£

£Kij

1

. Note that  K, ee

pertain to the canopy alone, and   rr = - -T TUU UD

  and   u

1

= - -

1
T f
UU U

  are identical to  R0  and  e0  in

(17)

(18)

(19)

(20)

(21)

(22)

8

(20), if   R

e
g=

= 0  (as is clear physically). Reciprocally to (22):

g

T

=

T

T

Ê
Á
Ë

DD

UD

T

T

DU

UU

ˆ
˜ =
¯

Ê
Á
Ë

t

r
--11
tt rr
--11
tt rr

-
-

--11

r
tt
--11
tt

ˆ
˜
¯

,

f

=

f

D

f
U

Ê
Á
Ë

ˆ
˜ =
¯

u

--11

d r
tt
-
u
--11
tt
-

Ê
Á
Ë

ˆ
˜
¯

(23)

Indeed, if there are no emissions and   D0

0= , then   U

g

=

T U
UU

=0

T U
tt
UU

g

, so that   T

UUtt =

1

(since   U g   can be any non-negative vector). Hence, since   TUU   and  tt  necessarily exist, so do

TUU

-1   and   tt-1. Also, in (20),  T

UU

R T

g DU

-

=

1 R rg tt
(
)

-

1, by (23), is invertible. Indeed, the series
-

1 R r R rR r
+
g

+

g

g

+

... must converge, as it sums over all back and forth reflections between

ground and canopy, and a finite canopy cannot be perfectly reflecting, so that each reflection

cycle entails some loss (hence no infinite buildup of radiance).

6   Numerical limitations of the transfer matrix method

It is useful to define, for any layer  ( ,

z z¢  of canopy, its leaf area index:

)

LAI = total leaf area inside the layer, per unit horizontal area of canopy

(24)

The transfer matrix method (section 4) is quick and simple in principle. But as already said, in

numerical computations on thick canopies (LAI above ~ 4), there appear negative elements in

R0  and   e0. We can now see why: A realistic thick canopy reflects about 5% of the incident

light, and transmits almost none. This means that the reflection matrices  r  and  rrrr  are fairly

small, and the transmission matrices  t  and  tttt  very small1. It follows that   tt--1  is very large,

whence also all four blocks of  T  in (23). Suppose now zero emissions, and   U g = 0, so that

U

0

= rr

D

0

  and   D

tDg =

0. However, the transfer matrix expression

D

g

=

T D T U
+

DD

DU

0

0

=

(

t

1
r
)
D
-
tt rr

0

(

1
r
)
-
tt rr

D

0

+

-

(25)

expresses the very small flux   D

tDg =

0  as the difference of two very large fluxes. This evidently

yields nonsense if  T  is larger than  10nc , where  nc  is the number of digits carried by the

computer ( nc = 15 in double precision). Similarly, R0, e0  in (20) involve   T

UU

-

R T

g DU

  and

R T

g DD

T

UD

-

, both differences of very large matrices. Clearly then, the simple transfer matrix

method is applicable only to moderately thick canopies.

                                                       

1  The ‘size’ of a matrix or vector is here understood as the size of its largest element.

9

We will give in section 7 a way of obtaining (non-negative)   R e0
,

0

  for thick canopies.

Meanwhile, we warn that even with  U0  known exactly, other problems arise: For when the  Jn

between thin layers are computed recursively using (15), negative values show up in  Un  below a

certain depth (below a cumulative LAI of about 5), even though the numerical pitfall (25) is

avoided since (15) builds up  Dg  step by step. To see what happens, observe that for ‘thin’

layers,  T Tn

=

(

,
z z
n
n

)1 ª +1 Mn zD , by (13), so that equations (15) are of the form (9):

-

D

n

U

n

)

-

(
1 g D
D
(
1 g U
U

)

+

ª

ª

n

1
-

n

1
-

+

-

h D
DD n
h U
UU

n

+

-

1
-

1
-

n

h U
DU
h D
UD n

+

1
-

-

1
-

e

D

e
U

( )
a

( )
b

(26)

where   g h e

,

,

  are much less than one. We now notice that whereas  Dn  gets attenuated (as  n

increases) via multiplication by numbers less than 1 (all coefficients in (26)(a) are non-negative,

and  £ 1), Un  must approach zero by way of substractions, since the elements of the (diagonal)
matrix  1 g+ U   are  ≥ 1. Whence the likelihood of undershooting and going slightly negative at
some point  zc  (and thenceforth more and more negative). One might simply set to zero all

radiances below  zc, since the exact fluxes are anyhow very small there. But this will not do if we

wish to assess the small but extant photosynthesis in the undergrowth.

7   Multistep calculation of  R0  and  e0  for thick canopies

Partition the canopy into  M   ‘medium’ layers   (

z

,

z

m

)

,  m

= 1 2,

m

-1

,...,

M

, with  z0  at the

top,  z

M

g=   at the bottom. These ‘medium’ layers are chosen (LAI less than ~3) such that their

z

transfer matrices have no overly large elements. Denote, for each ‘medium’ layer  m :

(

m

)

T

T

(

z

,

z

m

∫

)

=

m

1
-

T
T

m
(
)
DD
(
)
m
UD

Ê
Á
Ë

T
T

m
(
)
DU
)
(
m
UU

ˆ
˜
¯

,

(

m

)

f

f

(

z

m

,

z

∫

)

=

m

1
-

m

)

m

)

(
f
D
(
f
U

ˆ
˜
¯

Ê
Á
Ë

(27)

Also, let  Rm  be the ‘down-to-up’ reflection matrix, and  em  the ‘up’ emission vector, from the

surface   z

zm=

 (similar to  R0  and  e0 , but for the slab   (

z

zm
,

g   plus ground). Since   R
)

RM
g=

and   e

M

e
g=

  are known, ( R

,

e

M

1
-

M

1
-

),...,  (

R e0
,

)
0   can be computed recursively by using

R

m

1
-

=

)

T

(
m
UU

e

m

1
-

=

)

T

(
m
UU

-

(

(

)
m
m DU

1
R T
-
1
R T

(

)
m
m DU

(

(

R T

)
m
m DD

)

T

(
m
UD

-

)

m

)

(
R f
m D

m

)

(
f
U

-

e

m

+

)

                 m M M=
(

,

-

,...,1

1
)

(28)

wherein  Rm  and  em  play the role of  Rg  and  eg  in (20). Since   R

RM
g=

  and   e

M

e
g=

  are

10

non-negative, so will  R

,

e

M

M

1
-

large; whence also   R

,

e

M

2

-

M

2

-

1
-
0,
, and so on until   R e0

, in practice as well as in principle, since   T(

)M   is not overly

. This multistep calculation of R0, e0

amounts to a discrete version of the invariant embedding method [10] (see section 16).

Discussion: If one is only interested in the ‘up’ light   U

+   reflected and emitted by
the canopy (as in remote sensing), then the above suffices. But if we also need the photon fluxes

R D e
0

=

0

0

0

J( )z   inside the canopy (e.g., to compute rates of photosynthesis), then we want   Jn  between

thin layers. But as explained in section 6, even with  U0  known exactly, negative fluxes  Un  may

show up if  Jn  are computed recursively from  z0  to  zg  using (15).

Our remedy will be to first get   J

∫ (
J

mz

m

)  between medium layers, including  U0  (thus

R0, e0  are not needed, so that (28) is useful only if one only wants  U0). The   Jn  between thin

layers within each medium layer   (

z

,

z

m

)

  can then be computed recursively from   zm -1  to   zm

m

-1

by using (15) (which is no problem over moderately thick layers).

8   Fluxes between ‘medium’ layers, Green’s matrix

Let   Km

m, ee   pertain to ‘medium’ layer  m, so that similarly to (21):

J

out
m

∫

D

m

U

m

1
-

Ê
Á
Ë

ˆ
˜ =
¯

ee

m

+

in
K J
m m

=

d

u

Ê
Á
Ë

m

m

ˆ
˜ +
¯

Ê
Á
Ë

t

m

rr
m

r
m

tt

m

ˆ
˜
¯

Ê
Á
Ë

D

m
U

m

1
-

ˆ
˜
¯

,

J

in
m

∫

1
-

D

m
U

m

ˆ
˜
¯

Ê
Á
Ë

where   J

∫ (
J

mz

m

). We thus have, adding in the ground equation at   z

z
g= :

M

D

U

m

=

d

m

1
-

=

m
u

+

m

t D
1
m m
-
D
rr
m m

+

r U
m

+

+

tt

m

1
-

m
U

m

(

m

=
m

(

,
1 2

,...,

M

)

,
1 2

,...,

M

=

)
1

+

( )
a

( )
b

u

M

1

+

e

,

g

∫

rr
M

1

+

∫

R

,

g

tt

M

1

+

∫

0

where (b) with   m M=

+ 1  is the ground equation   U

M

=

e R D
+
g

g M

.

Green’s matrix: Remember that   J

  is a vector of dimension   N

=

J

N

D

+

N

U

, with

elements   (

)J m j . Let us view  

m j
, )

)
m j

  J (
, )m j   acting as a single vector index. Then, viewing the incident

  as elements of a large vector   J   of dimension

¥

G =

, with the pair  (

N M N J
  
light  D0  as an ‘emission’ at  z0, we may write equations (30) as

,
D U
m

m

)

m

= (
∫ J
(

  J E Q J
+

=

,

U

0

=

u
1

D
rr
1

0

+

U
tt
1

1

+

where the light climate vector   J , ‘emission’ vector    E , and matrix   Q , are given by (we display
the case of three ‘medium’ layers,  M = 3):

(29)

(30)

(31)

(32)

11

,

ˆ
˜
˜
¯

0
r
2
0

J

=

J

J

D

U

ˆ
˜
¯

Ê
Á
Ë

,

D
1

D
D

2

3

ˆ
˜
˜
¯

Ê
Á
Á
Ë

,

J

D

=

  

E

=

E

D

E
U

Ê
Á
Ë

ˆ
˜
¯

,

Q

=

T R

d
R T
⁄

Ê
Á
Ë

Ÿ

u

ˆ
˜
¯

J

U

=

E

D

=

U
U

1

2

U

3

ˆ
˜
˜
¯

Ê
Á
Á
Ë

,

d

1

t D
1

0

Ê
Á
Á
Ë

+
d
d

2

3

E
U

=

Ê
Á
Á
Á
Ë

u
u

2

3

e

g

ˆ
˜˜
˜
˜
¯

0
t

2
0

Ê
Á
Á
Ë

0

0
t

3

0

0

0

ˆ
˜
˜
¯

      

T

d

=

  

,

T

u

=

,

R

Ÿ

=

,

R

⁄

=

0

0

0

Ê
Á
Á
Ë

tt
22
0

0

0

tt
3
0

ˆ
˜
˜
¯

r
1
0

0

Ê
Á
Á
Ë

0

0
r
3

ˆ
˜
˜
¯

rr
22
0

0

Ê
Á
Á
Á
Ë

0

rr
3
0

0

0
R

g

ˆ
˜
˜
˜
¯

The subscripts   Ÿ  and   ⁄  symbolize ‘up-to-down’ and ‘down-to-up’ reflections. Since    E   is
known, (32) yields the light climate between medium layers in the form

  J GE
=

,

G

1
(
∫ -

Q

1,             U
-

)

=

0

u
1

D
rr
1

0

+

U
tt
1

1

+

(34)

1
= +

The series    G
medium layers, hence necessarily converges. Since    Q   is non-negative, so is    G.

...  sums over all possible wanderings of photons among the  M

Q Q
+

    

+

2

Block form of   G:  Note that    T d ,   T u   are nilpotent,   (

)T v

= 0 ,  v

= ,
d u

, so that    (
1

-

M

1
)
-T v

1
  = +

T T
+
v

2
v

...
+ +

T

v

M

1
-

. Explicitly (for   M = 3):

1
-

a

1
∫ -(

T

d

1
-

) =

  

1

t

2
t t
3 2

Ê
Á
Á
Ë

0

1

t

3

0

0

1

ˆ
˜
˜
¯

,

1
-

d

1
∫ -(

T

u

1
-

) =

1

0

0

Ê
Á
Á
Ë

tt
2
1

0

tt tt
2 3

tt
3
1

ˆ
˜
˜
¯

Since    G  and   d -1  exist, one can write    G  in the ‘down-up’ block form [11]:

1
Q

-

=

G
G

Ê
Á
Ë

DD

UD

G
G

DU

UU

,

ˆ
˜
¯

=

1

G
  

1

Q

-

=

1

d

T

-
R

-

⁄

Ê
Á
Ë

R

-
1

-

Ÿ
T

u

ˆ
˜ ∫
¯

a
c

-

Ê
Á
Ë

b
-
d

ˆ
˜
¯

        

DD

=

G
  

1
1
a bd c
-

-

,

Physical meaning of   G:  Observing that

G

UU

=

1
-

d

+

1
d c
-

G

DD

bd

1
,
-

G

DU

G

=

DD

bd

1
,
-

G

UD

=

1
d c
-

G

DD

(37)

J

(

m j
, )

J
  

(

m j
, )

=

=

Â
G
(

G
(

,
m j
≤ ≤

,
m j m j
≤ ≤

, ),(

(

,
m j
≤ ≤

)

E
)

m j m j
,

, ),(

¢

)

¢

if

E

(

,
m j
≤ ≤

)

=

d d
m m
¢

≤

j

j
¢ ≤

a
( )

b
( )

we see that   J  is a sum of subclimates due to each elementary ‘emission’ 

  E(

m j≤ ≤ , while

)

,

m j m j¢
, ),(
,

¢   is the flux in direction  j  at height   zm, due to a unit ‘emission’ in direction   j¢    by

)

  G(

(33)

(35)

(36)

(38)

12

layer  m¢  (the usual meaning of a Green’s matrix). Thus, another way to build   G   is as follows:
Put all  

1= . Then the resulting light climate (computed by

, )m j = 0, except for the first,   E( , )11

  E(

whatever means, for instance by iterating (30)) constitutes the first column of    G. Putting
  E( , )1 2
9   Summary of TTRG

1= , all others zero, yields the second column, and so forth.

We may now summarize TTRG as follows:

(i) Partition the canopy into  N  ‘thin’ layers   (

)

, such that   M( )z   and   E( )z   vary little

z
n

-1

,

z
n

within each ‘thin’ layer, and such that all   Dz

n

nM (
z
ij

) << 1.

(ii) Compute the transfer matrices   T T

(

∫

n

,
z z
n
n

)1
=-

sM
e n

z
D   (which differ little from  1).

n

(iii) Build   T

(

z zn
,
0

)

=

T T
n
n

1
-

L   for   n = 1 2,

T
1

,..., and check at each  n  that no   Tij

(

,
nz z

)0

exceeds some preset maximum  Tmax  (say 108  if double precision is used). If   Tmax  is not

exceeded after all the   Tn ’s  have been multiplied together, yielding the transfer matrix for the

whole canopy, then one can proceed as in section 4. But in general:

(iv) If some   Tij

(

,
nz z

)0

  exceeds   Tmax  at  n

n= 1  say, then call   (

z zn
,
0

1

)

  the first ‘medium’ layer,

with   T

1
( )

∫

T

(

zn
z
,
0

1

)

. Then form    T

(

T
(

n
1

+

l

)

n
1

l
1
)
+ -

L

T
(

,  l = 1 2,

n
1

1
)

+

,..., checking again for large

matrix elements. If   Tmax  is again exceeded, at   n
1

l
+ =

n
2

  say, then call   (

,z zn
n

1

2

)

  the second

‘medium’ layer, with   T

2
( )

∫

T

(

zn
,
z
n
1

2

)

. And so on until the whole canopy has been partitioned

into  M  ‘medium’ layers, with transfer matrices   T(

)m .

(v) If only the ‘up’ flux   U0   at the top   z0  is required, compute   R0 , e0  by the ‘discrete

invariant embedding method’ of section 7, and deduce   U

=

0

R D e
0

+ .

0

0

(vi) If   J( )z   at all heights  z  are required, compute transmission-reflection matrices and

emission vectors for the ‘medium’ layers, and construct    Q . Then compute the Green’s matrix
  G

1, and apply it to the ‘emission’ vector    E   to get the fluxes between medium layers.

1
(
= -

Q

)

-

(vii) Finally, determine the fluxes between thin layers, within each medium layer, by using the

transfer matrix equation (15) recursively.

    

13

Part III   Other methods for numerically integrating the LTE

This part describes other ways of computing light climates, for comparison with TTRG.

We mostly discuss the widely used iterative integration method. That method produces the

multiple-scattering expansion (or variants of it), which allows to estimate its rate of convergence.

We also explain why a pure Green’s matrix approach is not interesting, and discuss the invariant

embedding method (which concerns only light reflected by the canopy).

10   Pure Green’s matrix approach

Equations identical to (30) of course also hold for the fluxes  Jn  between the  N  thin

layers throughout the canopy. That is, putting   u

+ ∫1

N

e

g

,  rrN

+ ∫1 R ,  ttN + ∫1

g

0 :

D d
=
n

t D
n

+

r U
n

+

U

n

1
-

=

+

rr
n

n

+

tt

n

1
-

1
n
-
D

n

n
u

n
U

n

(

n

(

n

=

=

,
1 2

,...,

N

)

,
1 2

,...

N

)
1

+

( )
a

( )
b

Again, a Green’s matrix    G thin  may be used to solve (39). Once    G thin  is known, it can be
applied to any ‘emission’ vector    E thin   to yield at once all the fluxes  Jn :

(39)

(40)

thin
( , )
n j

J
  

J

∫ (

) =
n j

¢Â

n j
,
¢

G

thin
( , ),(
n j

E
)

thin
n j
(
,
¢

)

¢

n j
,
¢

¢

A first drawback, however, is that    G thin  is a  
N M N J
much larger than 
  

  in (34) (since   N

N
  

G =

¥

thin
G

thin

N
G¥

  matrix, where  

thin
G =

N
  

N N
¥

J

  is

M>>

), which may stress machine capabilities.

More importantly, using    G thin  would be much more time-consuming than using the medium
layer Green’s matrix   G, followed by the recursion (15) inside each medium layer. Indeed,  Jn j,
depends on all the elementary ‘emissions’  

  in (40), but only on   Jn-1  and   en  in

thin
n j
,
¢

)

¢

E(
  

J

n

T J
n

=

+-1

n

se

n

, implying much fewer multiplications if used recursively (unless ‘emission’

occurs in only a few thin layers, e.g., if there is only incident light).

11   Multiple-scattering expansion (MSE)

An expansion of the light climate in numbers of scatterings suffered will now be written

down. Viewing  D0  and  eg  as ‘emissions’, and  Rg  as reflection, from the ‘edges’  z0  and  zg  of

the canopy, we define a ‘total’ emission   Etot , and ‘total’ scattering matrix   Htot , by

∫

E

D

( )
z

D

(
d
0

z

-

+

z
0

),

tot
E
U

( )
z

∫

E
U

( )
z

e

(
d
g

z

-

+

z

g

)

E

tot
D

( )
z

H

tot
UD

( )
z

∫

H

UD

( )
z

R

(
d
g

z

-

+

z

g

)

(41)

Unscattered light: Recall that a photon travelling in direction  j  has probability   G z dz

  to hit a

j ( )

14

z

¢Ú

z

f ( ,
leaf over an infinitesimal vertical distance  dz . It follows that its probability  W z z

j

)¢   to go

freely from height   z¢  to  z  satisfies  d dz W

j

f

f

G W
j

j

= -

(

)

, hence is given by

f
( ,
W z z

j

)
¢ =

e

-

L

j

z z
( ,

)

¢

,

L

j

( ,
z z

)
¢ ∫

(
dz G z

j

≤

)

≤

Thus, the unscattered light  J( )( )

0 z , namely light that got directly to  z  after being ‘emitted’,

without suffering any scatterings by leaves or ground, is given by

0
( )

D

z
( )

=

dz e
¢

D
L

-

z z
( ,

)

¢

E

tot
D

(

z

),

¢

z

Ú

z

0

0
( )

U

z
( )

z

g

=

Ú

z

dz e
¢

U
L

-

z z
( ,

)

¢

tot
E
U

(

z

)

¢

Multiple-scattering expansion: We now express the light climate as a sum

 

  J

z
( )

0
( )

J

z
( )

=

+
k z ,  k = 1 2,

where   J( )( )

1
( )

J

z
( )

J

+

2
( )

z
( )

+

K

,..., is light that got scattered  k  times before reaching  z . These are

generated by the physically obvious recursions, for   k = 1 2,

,...:

k
( )

D

z
( )

=

dz e
¢

D
L

-

z z
( ,

)

¢

H

DD

(

z

¢

)
D

(

k

1
)
-

(

z

)
¢ +

H

DU

(

z

¢

)
U

(

k

1
)
-

(

z

¢

z

Ú

z

0

z

g

k
( )

U

z
( )

=

Ú

z

[
[[

U
L

-

z z
( ,

)

¢

dz e
¢

H

tot
UD

(

z

¢

)
D

(

k

1
)
-

(

z

)
¢ +

H

UU

(

z

¢

)
U

(

k

1
)
-

(

z

¢

)
]
)
]

(42)

(43)

(44)

(45)

For instance, reading matrix products from right to left,  e

D z z
L ( ,

¢

)

-

H

DU

(

z

¢

U 1
k
(
)
)
-

(

z

)

  is  (

k - 1 -
)

¢

times scattered ‘up’ light that gets scattered once more at  z¢, downwards, and then ‘freely’
propagates to  z.

Number of terms needed: How many terms in (44) are needed for a given precision depends on

how absorbing the leaves and ground are. If absorption is important (more than 80% for visible

and thermal light), then about 3 iterations suffice to get  1%  precision relative to the unscattered

light, since 3 scatterings reduce fluxes by  ( . )
0 2

0 008
.

. With less absorption (about 20% for

3

=

near infrared light), more terms are needed (about 20). Thus, in realistic situations, the numbers

of terms needed are fairly small. However, in (artificial) extreme light trapping situations, these

numbers can get very large (hundreds of thousands); moreover, just specifying a convergence

criterium can become tricky.

12   Iterative integration

Iterative integration consists in iterating the thin layer equations (39) with   d un

,

n

  and

,
t rn
n

,

,rr tt   treated to first order in  Dzn . Of course, one could equally well iterate (39) as it

n

n

stands, or iterate the ‘medium’ layer equations (30).

15

Thin layer approximation: To first order in   Dz, one has in view of (6)-(7):

,
K 1 m
ª +

,
e

ee

ª

m h g
∫ -

(46)

so that   t 1 g

ª -

+D

h

DD ,  r hª DU ,  d eª D , etc. These approximations in effect assume that along

a light beam, the interception and scattering rates remain constant across the layer, whereas in

reality they diminish with the attenuation of the beam. Thus, (46) suppose too much light

blocked or reflected, making transmissions   t, tt  too small, reflections   r,,rr  too large. The
consequence will be, in general, less penetration of incident light into the canopy. The emissions

d, u  can err either way, being increased by the neglect of attenuation on the way out, but

decreased by the neglect of photons emitted in the opposite direction and then reflected back.

Iteration: Set all   U

un
n∫

+1  in (39), and get values for   Dn  by using (a) for   n
N

,...,

get new values for  Un  by using (b) for   n N

,
+ 1
And so on until values stabilize. Finally, get  U0  using (b) with   n = 1. This process generates a
sequence   J{ }k ,  k = 0 1 2, ,

. Repeat using these new values of  Un .

,..., recursively:  D

1, and

,  U

{ }k
0

D

1
}-

u

∫

∫

=

2

{
n

n

0

+

= 1 2,

,...,

N

; then

D

{ }
k
n

U

{ }
k
1
n
-

d

n

u

n

=

=

t D
n

+

r U
n

+

+

tt

n

+

rr
n

{ }
k
1
n
-
{ }
k
U
n

k

}
1
-

{
n
D

{ }
k
1
n
-

(

n

=
n N
=

(

1 2
,

,...,

N

)

  

1
,

N

1
,..., )

+

(47)

Stability: Everything in (47) is non-negative. If   Jn

k{ } and   Jn

k{

}-1   are equal to the exact   Jn

exact ,

then the terms added to  dn  and  un  on the right of (47) are such as to yield again   Dn

exact   and

exact

Un

-1   on the left. So if some   Jn j

{ }  and/or   Jn j

k
,

k
,

{

}-1   are smaller than   Jn j

exact
,

, then the amounts

added are less than should be, so that   Jn

k{ }  on the left remain smaller than   Jn

exact . Yet   Jn

k{ }

increase at each iteration. It follows, since initially   U

1
}-

{
n

∫

u

n

+

1  are smaller than   Un

exact , that

exact   from below as   k Æ •. Hence convergence is assured (as long as the
k{ }  approaches  Jn
Jn
exact   are finite). To estimate how many iterations are needed for a given precision, we must
Jn

analyse the physical meaning of  Jn

k{ }. For this it is easier to first study a variant of (47).

13   A variant producing the multiple-scattering expansion [1]

Refering to (42) and (46), let us write   t

=

n

t

f
n

+ ,  tt
t

s
n

n

f
n

tt

+ , where

tt

s
n

=

t

t

f
n

s
n

D
LL

-

(

z

n

,

z

)

n

1
-

e

∫

t

n

∫

-

t

f
n

h

ª

1
ª -
,

nDD

g

nD

,

f
n

tt

e

∫

U
LL

-

(

z

,

z

n

)

n

1
-

1
ª -

g

nU

s
n

tt

∫

tt

n

-

tt

f
n

h

ª

nUU

(48)

f
so that   t n

f
n

, tt   give the probabilities for a photon to pass freely through ‘thin’ layer  n, without

16

s
hitting a leaf, and   t n

s
n

, tt   those to get scattered onwards by the layer, that is, transmitted after

getting scattered any number ( ≥ 1) of times inside the layer. In the following, ‘scattered’ means
‘scattered by a layer’ in the above sense; it recovers its meaning ‘scattered once’ when

t

s
n

,

s
n

tt

,

r
n

,

rr   are treated to first order in  Dzn .

n

k[
Iteration: Define now a sequence  Jn

],  k = 0 1 2, ,

,..., by   D

]k
[
0

∫

D

0

, and

]

D

[
k
n

=

U

]
[
k
n
1
-

=

d

n
u

n

f
t D
n

+

f
n

+

tt

]
[
k
n
1
-
[
k
U
n

]

s
t D
n

+

s
n

+

tt

]

[
k
1
-
n
1
-
[
k
U
n

1
-

+
]

r U
n

[
k
n
D

+

rr
n

]

[
k
1
-
n
1
-

1
-

]

(

n

=
n N
=

(

0 1 2
, ,

,...,

N

)

1
,

N

1
,..., )

+

or, in an obvious notation following (29):

]

J

,[
out k
n

=

ee

n

+

f
K J
n

,[
in k
n

]

s
K J
n

,[
in k
n

+

1 ,               D
]
-

]k
[
0

D

0

∫

(49)

(50)

Kn

The zeroeth cycle ( k = 0 ) is initialized by   D
]- ∫
s   act on   J

s   then act on   Jn

cycle ( k = 1), Kn

J

in,[

0
( )

0
[ ]

=

1

]

1
[
-
n

∫

U

]

1
[
-
n

∫

0   for all  n. The scattering matrices

0 , so that the zeroeth cycle yields the unscattered light  J( )0 . In the next

, hence produce ‘once-scattered’ light   J( )1 . Thus

1
[ ]

J

0
( )

J

1
( )

J

+

=

. And, in general,  J

[

k

]

0
( )

J

1
( )

J

+

=

...
+ +

J

k
( )

. Explicitly, for   N = 3:

0
[ ]
D
1
D

0
[ ]
3

U

0
[ ]
3

d

1

+

d

3

e

g

+

=

,

=

f
0
( )
t D D
1
1
0
f
f
f
t t d
t d
3 2
3
U
U

2
,

+

0
[ ]
2

0
( )
3

1

=

=

=

=

2

+

d

D

0
[ ]
2

f
t d
=
2
f
f
f
t t t D D
3 2 1
e

=
U

0
( )
3
,

0

( )
0
2

ff
3

g

+

=

tt

+
u

3

+

1

f
f
t t D D
2 1
0

=

0
( )
2

U

[ ]
0
1

u

2

=

+

tt

f
2

u

3

f
tt tt
2

f
3

e

g

+

=

U

( )
0
1

(51)

1

0

(

=

+

d

[ ]
1
D
1

f
t D
1

s
t D r u
+
1

) +

)
) =
, etc., are treated to first order in   Dzn , then these equations actually build
up the integrals (45) according to the mid-point numerical integration rule. The above iterative

and so forth. If   d tn
n,

f
tt tt
2

( )
0
D
1

( )
1
D
1

(

u

+

+

+

tt

e

f
2

f
3

(

g

3

0

1

2

integration provides, in fact, the simplest way of generating the MSE (44).

Number of iterations needed: In (49)-(50), the scattering gains of   Dn

k[ ]  and   Un

[ ]   (the   Ks
k
-1

[
1
k
terms) are computed using   Dn
-
1
-

]  and   Un

k[

]-1   one cycle back. In (47), by contrast, scattering

gains use the ‘newest’ radiances available. Hence,  J{ }k   contains more terms than  J[

]k . For

{ }
0
instance,  D
1

d

1

( )
0
t D r u D
1
1

1 2

0

=

+

+

=

s
t D r u
+
1
0

1

2

+

(

)

1( )
, where the second term is a piece of   D1

(it misses   r u

f
tt
1 2

+

3

f
r
tt tt
1 2

f
3

e

g

  in (51)). In general,  J{ }k   equals   J[

]k   plus pieces of   J(

k l+   for
)

k

l+   up to   2kN . Yet, from the argument after (47), we know that   J{ }k   builds up the correct

0
( )

1
( )

2
( )

J

J

J

+

=

  as   k Æ •. Iteration of (47) or of (49) require the same number of
multiplications per cycle, but in (47) each cycle incorporates more terms. Still, since   J{ }k

...

+

+

J

17

misses pieces of  J(

)

k +1 , the number of iterations of (47) needed for a given precision is roughly

the same as for (49), that is, as the number of terms needed in the MSE (44). Hence, the

discussion at the end of section 11 applies here as well.

14   Multiple-scattering expansion of the Green’s matrix

        The Green’s matrix    G  in (34) is not adapted to getting the MSE. For this one may consider
a different Green’s matrix (which is only of theoretical interest). Rewrite equations (30) as

(52)

(53)

(54)

(55)

=

˜ ˜,
˜
˜
J E Q J
+
  

˜
J

=

D

˜
J
˜
J
U

ˆ
˜
¯

Ê
Á
Ë

,

˜
E

=

D

˜
E
˜
E
U

Ê
Á
Ë

ˆ
˜
¯

,

˜
Q

=

˜
˜
T R
d
˜
˜
R T
u
⁄

Ÿ

Ê
Á
Ë

ˆ
˜
¯

     

0

D
D
1

D

D

2

3

ˆ
˜
˜
˜
˜
¯

,

0

t
1
0

00

0

0

t
2
0

Ê
Á
Á
Á
Á
Ë

Ê
Á
Á
Á
Á
Ë

˜
J

D

=

˜
T
d

=

  

˜
J
U

=

Ê
Á
Á
Á
Á
Ë

0

U
U
1

U

U

2

3

ˆ
˜
˜
˜
˜
¯

,

˜
E

D

=

Ê
Á
Á
Á
Á
Ë

D
d

d

d

0

1

2

3

ˆ
˜
˜
˜
˜
¯

,

˜
E
U

=

Ê
Á
Á
Á
Á
Ë

u
u

u

1

2

3

e

g

ˆ
˜
˜
˜
˜
¯

0

0

0

t

3

0

0

0

0

ˆ
˜
˜
˜
˜
¯

,

˜
T
u

=

0

0

0

0

Ê
Á
Á
Á
Á
Ë

tt
1
0

0

0

0

tt
2
0

0

0

0

tt
3
0

ˆ
˜
˜
˜
˜
¯

,

˜
R

=

Ÿ

0

0

0

0

Ê
Á
Á
Á
Á
Ë

0

r
1
0

0

0

0

r
2
0

0

0

0

r
3

ˆ
˜
˜
˜
˜
¯

,

˜
R

=

⁄

Ê
ÁÁ
Á
Á
Á
Ë

rr
1
0

0

0

0

rr
2
0

0

0

0

rr
3
0

0

0

0

R

g

ˆ
˜
˜
˜
˜
¯

where    

˜ ˜
˜
˜J   includes   D0  and  U0 , unlike    J   in (33). Again,   
J GE=
the breakup (48) of   t, tt  into ‘free’ and ‘scatter’ parts, denote

  with  

1
-

˜
G
  

1
= -(

˜
Q

)

. Using

˜ ,
˜
˜
  
Q Q V
0
  

+

=

˜
Q

0

=

f

˜
T
d
0

Ê
Á
Ë

0
˜
T
u

f

ˆ
˜
¯

,

˜
V

=

˜
˜
s
T R
d
Ÿ
˜
˜
s
R T
u
⁄

Ê
Á
Ë

ˆ
˜
¯

, so that    

˜G0DD   and   

˜G0UU   are similar to (35), but with   t f

f

, tt

Denoting also  

1= -(
instead of   t, tt, write 2

˜
G
0
  

1
-

˜
Q

0

)

˜
G
  

˜ ˜
VG
0

1
-

˜
Q

˜
G
0

1

-(

) =

1
∫ -(
Acting this on    
˜
˜Q Ek
contrast,   
considered ‘scattering’. In (33),   Q Ek
contains   t D1

                                                       

1
-

) =

˜ ˜
˜ ˜
˜
G G VG G VG
0
0
0

˜
0

˜
0

+

+

(

2

) +

...

˜E   yields a multiple-scattering (by layers) expansion of the light climate   
  is  k-times scattered light but with ‘traversing a layer without hitting a leaf’ also

˜J . By

  contains pieces of higher scattering orders since    E

0. Thus, the various iterative integrations, and various Green’s matrix series, all

2 This is simply   (
A 1 BA
A B
-[
-
=
˜ ˜
˜
˜
 , following from   (
G G G VG
+0
  

]
A B
-

˜
0

=

)

)

1
-

1
-

1
-

1
-

  with    A = -1
+

˜Q ,   B =
0
A B A B
)
(
-

A

=

1
-

1
-

1
-

˜
V . Alternatively, iterate
1.
-

18

build up the light climate in different ways. The Green’s matrix    
better for computation since it is smaller.

˜G  is more ‘physical’, but   G   is

15   Composition rules for  K, ee

Consider two layers,  a

= (
Applying (21) to each layer yields:

,
z z
1

2  (above), and   b
)

= (

,
z z
2

3  (below), with   z
)
1

<

z
2

< .
z

3

D

2
U

1

Ê
Á
Ë

ˆ
˜ =
¯

t

a

rr
a

Ê
Á
Ë

r
a

tt

a

ˆ
˜
¯

Ê
Á
Ë

D
1

U

2

ˆ
˜ +
¯

Ê
Á
Ë

d

u

a

a

ˆ
˜
¯

,

D

U

Ê
Á
Ë

3

2

ˆ
˜ =
¯

t

b

rr
b

Ê
Á
Ë

r
b

tt

b

ˆ
˜
¯

Ê
Á
Ë

D

2

U

3

ˆ
˜ +
¯

Ê
Á
Ë

d

b

u

b

ˆ
˜
¯

Let now   K, ee  pertain to the combined pair of layers, namely  (

z z1
,

3 , so that
)

out

J

∫

D

3

U

1

Ê
Á
Ë

ˆ
˜ =
¯

t

r D
Ê
ˆ
1
Á
˜
rr tt
Ë
¯

U

3

Ê
Á
Ë

ˆ
˜ +
¯

Ê
Á
Ë

d

u

ˆ
˜ =
¯

in

KJ

+

ee,

in

J

=

in

D

in

U

Ê
Á
Ë

ˆ
˜ ∫
¯

D
1

U

3

ˆ
˜
¯

Ê
Á
Ë

Using (56), one easily obtains the ‘composition rules’ (that for  K  is well known [7]):

Ê
Á
Ë

=

K
  

t

R
b

t
ab a
R
a

t
rr
ba b a

rr
a

+

tt

r
tt
ab a b

r
b

+

t

R
b
R
a

tt

tt
ba b

,

ˆ
˜
¯

ee

=

d

b

u

a

Ê
Á
Ë

t

R
b

ab

(

d

+

+

tt

R
a

ba

(

r u
a

b

+

+

rr
b

d

a

)

ˆ
˜
)
¯

a
u

b

1
1 r
-

rr
a b

,

ab

∫

R
  

R

ba

∫

1

1

r
rr
b a

-

1
= +

R
rr
b

r
ab a

,

R R
rr
=
b
ab

rr
ba b

The physical meanings are clear: For instance (reading matrix products from right to left), the
‘down’ transmission    t
reflections    R ab
1 r
the outside. The radiances between the two layers,  (

ab aR   is transmission  ta  into the interlayer, followed by multiple

...  between the two layers, and finally transmission  tb  to

r
r
rr rr
a b a b

D U
,
m

t
= b

= +

rr
a b

+

+

(

t

D U
,
2

2 , are
)

)
m ∫

D
m

R

ab

=

in

t D
a

in

r U
tt
a b

d

a

+

+

r u
a

b

 

m

R

U
  
Relation to   R e0
,

=

ba

(
(

0

+
in

t D
rr
b a

in

U

+

tt

b

+

rr
b

d

a

u

b

+

: Observe that

)
)

=
rr rr
a

+

tt

a

1

1

r
rr
b a

-

t
rr
b a

,

u u
=

a

+

tt

a

(

u

b

+

rr
b

d

a

)

1

1

r
rr
b a

-

involve only reflection   rrb  and emission   ub  from the top of layer  b. Thus, if we let  a  be the
canopy, and the top surface of  b  play the role of the ground, then   rr = R0 ,  u e= 0 ,  rrb

g= R ,

u

b

e
g=

, and (61) is equivalent to (20) (via (22)-(23)).

Light climate: The radiances between ‘medium’ layers may now be obtained as follows: Let

(56)

(57)

(58)

(59)

(60)

(61)

19

layer   m   consist of all the canopy below layer  m, and compute   Km

m, ee   recursively by using

(58) with  a m=
for the whole canopy. Then,  D

+ 1,  b m=

+ 1, for  m M

=

-

,
1

M

-

=

g

tD rU d

+

0

+

g

g

=

0

,...,
2

. The last step yields   K K0 = ,  ee
d

, whence

(
tD r R D e

)

+

g

g

+

+

0

g

g

0 =

ee

D

g

=

1
1 rR
-

g

(

tD re
+
0

g

+

d

g

),

U

g

=

R D e
g

g

+

g

(62)

Knowing  D0  and  Ug, deduce  J1  by using (60) for layers  1  and   1.  Then, knowing  D1  and

Ug, get  J2  using (60) for 2 and  2, and so on.

16   Differential equations for  K, ee, invariant embedding method   

By setting   z
2

0= ,  z
z

3 =   and   z

zg

2

z
1

=

dz
0

  in (58), so that  K 1 M

(

a

ª +

)0
z dz

0,

-

eea

ª E(

)0
z dz

0, by (8), one obtains, denoting   ˙g

∫ -

dg dz

0 : 3

˙
K

=

˙
ee

=

˙
˙
r
t
ˆ
Ê
˜ =
Á
˙
˙
rr tt
¯
Ë
˙
d
˙
u

ˆ
˜ =
¯

Ê
Á
Ë

rr

Ê
Á
Ë

Ê
Á
Ë

A

rr

+

tA tB
+
rr rr

rr
B C D
+ +

tB
tt
ˆ
˜
B D
tt
+
¯

,

rr rr tt

M

(

z
0

)

∫

A B
C D

ˆ
˜
¯

Ê
Á
Ë

(63)

tBu tE
+
D
E

+

rr

D

Bu Du
+

,

ˆ
˜
¯

E
U

+

E
(

z
0

)

∫

D

E
E
U

ˆ
˜
¯

Ê
Á
Ë

By rather setting   z
1

0= ,  z
z

2 = ,  z
zg

3

z
2-

=

dzg

 in (58), one finds that   K

K¢ ∫ d

dzg ,  ee

¢ ∫ d dzg
ee

are given by (63) with ‘up’ and ‘down’ interchanged, and  zg  instead of  z0.

Invariant embedding method: Observe from (63) that

˙
=
rr rr

A

B C D
+ +

rr rr

,
rr

+

˙
u

Bu Du
+

rr

+

rr

E

ED
+

U   

=

(64)

involve only  rrrr, u  and   M E
(

z
0

),

(

0 . Indeed, how an additional layer  dz0  affects reflection and
)
z

emission from the top depends only on local quantities at the top, not on what goes on below.

Thus, (64) also hold in the presence of a reflecting and emitting ground below, in which case

rr == R0  and   u e= 0 , see (20). The equation for   ˙
numerical integration is quite stable, and is the basis of the so-called invariant embedding

rr = R0   is a matrix Ricatti equation. Its

˙

method [10]. The multistep calculation of  R0, e0  in section 7, in effect using (61), is clearly an

accelerated ‘large step’ version of that procedure.

Milne problem [9]: In a very thick (realistic) canopy, light penetrates only so far, so that the rest
                                                       

3 Alternatively, use (22) and   ˙T TsM=
(
T T M

˙
T T T

1
1
-
-
UU UU UU

one gets:  ˙
tt

,  ˙f TsE=
-

= -

= -

1
-
UU

DU

UD

, by (11) and (14). For instance, for   tt = -TUU
T M T
+
tt

1
-
UU

M

M

rr

=

UU

UU

DU

UU

tt

)

.

1

20

, ee   from
of the canopy below is irrelevant. One can evaluate   rr == R0,  u e= 0   by integrating   K¢
z0  downwards, or more quickly by adding finite layers below using (58), until   rr, u   stabilize. In
the case of a uniform canopy, one can rather add layers above, starting at  z0  with   R0

¢

0= ,

e0

0= , and use the simpler equations (61) or (64), which do not involve   r

,tt
d,

.

17   Conclusion

We presented a method (TTRG) for numerically integrating the light transport equation,

in a canopy above a reflecting-emitting ground. Other methods were reviewed for comparison.

The focus was on the widely used iterative integration method (ITINT) (which produces the

multiple-scattering expansion). ITINT (to first order in   Dzn ) has the advantage of requiring only
, but at the cost of a loss in precision. The latter can be improved by making
the matrices   G Hn

,

n

Dzn  smaller, which, however, increases computation times. Alternatively, one can include higher
order corrections, for instance use 4   K 1 m m

2,  ee ==
(compare (46)). But then one may as well use the exact  Kn

= +

+

1
2

1
  to second order in   Dz
1 m e
++(
)
2
, ee . Obviously, it is faster to use

n

TTRG, which requires   Km

m, ee   for only a few ‘medium’ layers, and then    G. All these matrices

need to be computed only once for a given canopy, and then applied to various ‘emission’

vectors to rapidly yields light climates.5

We performed a number of numerical tests regarding the speed and accuracy of TTRG,

as compared to ITINT. These tests will be described in detail elsewhere. But we here give the

main points.

We work in double precision (i.e., carrying 15 digits). The number of discrete photon

directions is either   N J = 18  (zenithal inclinations  qj   only, as is usual), or   N J =

18 18
¥

=

324

directions   (

,
q jj

j . Canopies have a leaf area index  LAI = 10   (total leaf area per unit horizontal
)

area of canopy). The propagated emissions  fn  are computed using Simpson’s rule (the transfer

matrix equations (15) are modified accordingly). Note that iterative integration amounts to the

                                                       

4 These are best obtained by using linear fractional maps, as will be described elsewhere.
5  An alternative to using the Green’s matrix    G , to get the radiances between ‘medium’ layers, is the
method described at the end of section 15, using the composition rules for   K, ee.

midpoint or trapezoid rule.6

21

In order to assess the precisions of numerical computations, we considered situations

admitting analytical solutions, specifically: Canopies uniform in  z, with azymuthally isotropic

leaf area densities of non-absorbing (but emitting) Lambertian leaves, with different coefficients

for the top and bottom sides of leaves (allowing to create extreme light trapping situations). In

these cases, the matrices  M  are known analytically, permitting high precision tests.

When there are no leaf emissions, precision with TTRG is better than 10 10-

. With leaf

emissions, overall precision is limited by that of the Simpson’s integration done to get  fn ,
namely between 10 4-   and  10 3-   with ‘thin’ layers of  LAI ª 0 1.   (better with thinner layers).
Such high precisions cannot be contemplated with ITINT (especially with grazing sunlight).

With ITINT, precision is less than 10% if thin layers have   LAI ª 0 1. , and  0.5%  with thin layer
LAI ª 0 01.
. In general, ITINT reduces penetration of incident light into the canopy, because thin
layer transmissions   t n

, tt   are too small, and reflections  rn

n,rr  too large, when treated to first

n

order in  Dzn  (as explained in section 12).

Concerning speed, let us first discuss TTRG applied to a realistic canopy of   LAI = 10 ,
. We only mention

using   N J = 324   angular sectors. We use   N = 100   thin layers of   LAI = 0 1.
those quantities which take a significant time to compute.7  Each thin layer transfer matrix

T
n

=

m
e n

  takes ~1.6 seconds, for a total of 160 secs if all the thin layers are different (in practice,

field data separates the canopy into about 10 homogeneous layers, so that only 10 different  Tn

need to be computed, hence ~16 secs). Computing   T(
)m   for 5  ‘medium’ layers of   LAI = 2   (by
multiplying thin layers   Tn  together) takes  ~16 secs; getting   Km  and    G  takes another 15 secs.
Once all these matrices are known, getting a light climate takes ~0.5 secs.

ITINT does not require all these matrices. However, getting a light climate using 100

thin layers of   LAI ª 0 1.   takes ~2 secs for visible light (high absorption), 11 secs for NIR (low
absorption), but precision is less than 10%  as said above. If  1000  thin layers of   LAI ª 0 01.
used, then precision is better than  0.5%, but computations times are  44 secs for visible, 221 secs

  are

                                                       

6 According as one puts   e

= (
En

z
n

)D   or   e

z
n

n

=

1
2

(

(
E

z
n

)

+

(
E

z
n

1

+

) D   in (46).
)

z
n

7  The computation times quoted are for a 2.66 GHz Pentium IV, with 1 GB of RAM. The matrix

exponentiations and inversions are done in MATLAB.

22

for NIR.

fast and precise.

With   N J = 18  angular sectors, TTRG takes a fraction of a second (including

computation of all matrices). ITINT takes comparable times for realistic canopies. But in

artificial situations of extreme light trapping, ITINT may take on the order of hours, for a

precision of 1%. Also, specifying a convergence criterium becomes tricky. But TTRG remains as

Thus, for realistic canopies and  N J = 18  angular sectors, computation time by either
method is not a significant issue if only a few light climates are needed. But ITINT is not too

reliable (unless one checks convergence as   Dzn Æ 0, which takes time). Time becomes an issue
if the number of angular sectors  N J   is large (since the number of multiplications scales roughly

as  N J

2). In any case, TTRG is much more accurate, and has a definite speed advantage whenever

many light climates must be computed for the same canopy (as when iterating over leaf

temperatures).

Acknowledgments: We thank A. Cernusca and U. Tappeiner for suggesting the problem and,

together with G. Wohlfahrt, for useful discussions.

23

[1]  J. Goudriaan, Crop Micrometeorology: A Simulation Study, Pudoc, Wageningen (1977)

[2]  R.B. Myneni, J. Ross, G. Asrar, A review on the theory of photon transport in leaf canopies,

Agricultural and Forest Meteorology, 45 (1989), 1-153

[3]  Photon-Vegetation Interactions, edited by R.B. Myneni and J. Ross, Springer 1991

[4]  G. Wohlfahrt, M. Bahn, U. Tappeiner, A. Cernusca, Agricultural and Forest Meteorology

106 (2001) 261-287; G. Wohlfahrt, M. Bahn, C. Newesely, S. Sapinsky, U. Tappeiner,

A.Cernusca, Ecological modelling 170 (2003) 407-426

[5]  J. Ross, A. Marshak, Monte Carlo Methods, in Ref.[3]

[6]  R. Aronson, D.L. Yarmush, J. Math. Phys. 7 (1966) 221; J. Math. Phys. 11 (1970) 931; Nucl.

Sci. Eng. 51 (1973) 157; R. Aronson, N. Corngold, J. Opt. Soc. Am. A 16 (1999) 1066

[7]    I.P. Grant, G.E. Hunt, Proc. Roy. Soc. Lond. A. 313 (1969) 183-197; ibid. 199-216

     R. Redheffer, J. Mathematics and Physics, 41 (1962) 1-41

 [8]   H.C. van de Hulst, Multiple Light Scattering, Academic Press 1980.

 [9]  S. Chandrasekhar, Radiative Transfer, Oxford U.P., 1950.

        J.J. Duderstadt and W.R. Martin, Transport Theory, Wiley-Interscience 1979

[10]   V.A. Ambartsumian, Theoretical Astrophysics, Pergamon Press, New York 1958.

        R. Bellman. Introduction to Matrix Analysis, 2nd edition, siam 1997, Ch. 18.

       H.H. Natsuyama, S. Ueno, A.P. Wang, Terrestrial Radiative Transfer, Springer 1998.

[11]   D.A. Harville, Matrix Algebra from a Statistician’s Perspective, Springer 1997, p. 99.

