Solution to two-dimensional Incompressible Navier-Stokes Equations with
SIMPLE, SIMPLER and Vorticity-Stream Function Approaches.
Driven-Lid Cavity Problem: Solution and Visualization.

by

Maciej Matyka

Computational Physics Section of Theoretical Physics
University of Wrocław in Poland
Department of Physics and Astronomy

Exchange Student at University of Link¨oping in Sweden

maq@panoramix.ift.uni.wroc.pl
http://panoramix.ift.uni.wroc.pl/∼maq

30 czerwca 2004 roku

Streszczenie

In that report solution to incompressible Navier - Stokes equations in non - dimensional form will be presented.
Standard fundamental methods: SIMPLE, SIMPLER (SIMPLE Revised) and Vorticity-Stream function approach are
compared and results of them are analyzed for standard CFD test case - Drived Cavity ﬂow. Diﬀerent aspect ratios
of cavity and diﬀerent Reynolds numbers are studied.

1

Introduction

The main problem is to solve two-dimensional Navier-
Stokes equations. I will consider two diﬀerent mathemati-
cal formulations of that problem:

(cid:15) u, v, p primitive variables formulation

(cid:15) ζ, ψ vorticity-stream function approach

will be solved on rectangular, staggered grid. Then, solu-
tion on non-staggered grid with vorticity-stream function
form of NS equations will be shown.

2 Math background

I will provide full solution with both of these methods.
First we will consider three standard, primitive component
formulations, where fundamental Navier-Stokes equation

We will consider two-dimensional Navier-Stokes equations
in non-dimensional form1:

1We consider ﬂow without external forces i.e. without gravity.

∂−→u
∂t

= −(−→u ∇)−→u − ∇ϕ +

∇2−→u

1
Re

D = ∇−→u = 0

Guess:
(P*) n,(U*)n,(V*) n

Solve (3),(4) for:
(U*)n+1 ,(V*) n+1

Where equation (2) is a continuity equation which has

to be true for the ﬁnal result.

Solve (6) for:
(P’)

3 Primitive variables formulation

First we will examine SIMPLE algorithm which is ba-
sed on primitive variables formulation of NS equations.
When we say ”primitive variables” we mean u, v, p where
u = (u, v) is a velocity vector, and p is pressure. We can
rewrite equation (1) in diﬀerential form for both velocity
components:

∂u
∂t

∂v
∂t

= −

∂u2
∂x

−

∂uv
∂y

−

+

1
Re

(

∂2u
∂x2 +

∂2v
∂y2 )

= −

∂v2
∂y

−

∂uv
∂x

−

+

1
Re

(

∂2u
∂x2 +

∂2v
∂y2 )

∂p
∂x

∂p
∂y

We rewrite continuity equation in the following form:

∂u
∂x

+

= 0

∂v
∂y

These equations are to be solved with SIMPLE method.

3.1 SIMPLE algorithm

SIMPLE algorithm is one of the fundamental algorithm to
solve incompressible NS equations. SIMPLE means: Semi
Implicit Method for Pressure Linked Equations.

Algorithm used in my calculations is presented in the
ﬁgure (1). First we have to guess initial values of the pres-
sure ﬁeld2 (P ∗)n and set initial value of velocity ﬁeld -
(U ∗)n, (V ∗)n. Then equation (3) and (4) is solved to ob-
tain values of (U ∗)n+1, (V ∗)n+1. Next we have to solve
pressure-correction equation:

∇2p′ =

(∇ · V )

1
∆t

(6)

Next - a simple relation to obtain corrected values of
pressure and velocity ﬁelds is applied (see appendix A for
details about velocity correction calculaion). At the end of
time step we check if solution coverged.

2Subscripts denote computational step, where ”n+1” means cur-

rent step.

Calculate
(U'),(V') - Appendix A

Visualization

P n+1 =(P*) n+(P’)

Un+1 =(U*)n+(U’)
V n+1 =(V*) n+(V’)

Rysunek 1: SIMPLE Flow Diagram

3.2 Numerical Methods in SIMPLE

3.2.1 Staggered Grid

For discretization of diﬀerential equations I am using stag-
gered grid. In the ﬁgure (2) staggered grid for rectangular
area is sketched. Primitive variables are placed in diﬀerent
places. In points i, j on a grid pressure P values, in points
i + 0.5, j u x-velocity components and in points i, j + 0.5
v y-velocity components are placed. That simple model of
staggered grid gives us possibility to use simple discreti-
zation with second order accuracy which will be discussed
later.

p0,0

u0.5,0

v0,0.5

ui-0.5,j

pi,j

ui+0.5,j

v i,j-0.5

v i,j+0.5

Rysunek 2: Staggered grid: ﬁlled circles P , outline circles
U x-velocity, cross V y-velocity component.

(1)

(2)

(3)

(4)

(5)

2

Diﬀerential

Discretization

Type

un+1−un
∆t

forward, O(h)

b1 = −

(v2)n

i,j+1.5 − (v2)n
2 · ∆y

i,j−0.5

−

(v ˙u)n

i+1,j+0.5 − (v ˙˙u)n
2 · ∆x

i−1,j+0.5

∂u
∂t

∂2u
∂x2

∂u2
∂x

∂p
∂x

∂p
∂y

(12)

(13)

(14)

(15)

(16)

(17)

(18)

(19)

(20)

ui+1,j −2∗ui,j +ui−1,j
(∆x)2

central, O(h2)

u2
i+1,j −u2
(2·∆x)

i−1,j

central, O(h2)

pi+1,j −pi,j
(∆x)

forward, O(h)

pi,j+1−pi,j
(∆y)

forward, O(h)

i+1.5,j − 2 · un
un

i+0.5,j + un

i−0.5,j

(a3) =

i+0.5,j+1 − 2 · un
un

(a4) =

(∆y)2
i,j+1.5 − 2 · vn
vn

(b3) =

i+1,j+0.5 − 2 · vn
vn

(b4) =

(∆x)2
i+0.5,j + un

i+0.5,j−1

i,j+0.5 + vn

i,j−0.5

(∆y)2
i,j+0.5 + vn

i−1,j+0.5

(∆x)2
Now we have deﬁned almost everything. Dotted velo-
cities should be also deﬁned. I use simple expressions for
it:

Tabela 1: Discretizations used in SIMPLE algorithm

3.2.2 Discretization Schemes

Let us now examine some numerical methods used in pre-
sented solution. For algorithm presented in the ﬁgure (1)
we have only three equations which have to be discretized
on a grid. First we have momentum equations (3) and (4).
Discrete schemes used in discretization of momentum
equations are presented in a table (1). Using presented
discrete form of derivatives I obtain numerical scheme for
momentum equations exactly in the form presented in [1].
Equations (3) , (4) discretized on staggered grid can be
written3 as follows4:

un+1
i+0.5,j = un
vn+1
i,j+0.5 = vn
where A and B are deﬁned as:

i+0.5,j + ∆t · (A − (∆x)−1(pi+1,j − pi,j)) (7)
i,j+0.5 + ∆t · (B − (∆y)−1(pi,j+1 − pi,j)) (8)

A = −a1 + (Re)−1 · (a3 + a4)

B = −b1 + (Re)−1 · (b3 + b4)

(9)

(10)

and respectively we deﬁne:

3.2.3 Poisson Equation

For equation I use simple iterative procedure. In the ﬁgure
(3) points used for calculation of pressure at each (i, j) grid
points are marked.

˙u = 0.5 · (ui−0.5,j + ui−0.5,j+1)

˙˙u = 0.5 · (ui+0.5,j + ui+0.5,j+1)

˙v = 0.5 · (vi,j+0.5 + vi+1,j+0.5)

˙˙v = 0.5 · (vi,j−0.5 + vi+1,j−0.5)

Pi-1,j

Pi,j

Pi+1,j

Pi,j-1

Pi,j+1

a1 = −

(u2)n

i+1.5,j − (u2)n
2 · ∆x

i−0.5,j

−

(u ˙v)n

i+0.5,j+1 − (u ˙˙v)n
2 · ∆y

i+0.5,j−1

3Please note than cited [1] reference contains some print mistakes

there.

4Generally I show there only an idea how to write discretized equ-
ations, they should be rewritten with ”*” and ”’” chars for concrete
steps of the algorithm

Rysunek 3: Points on a grid used in iterative procedure
for Poisson equation solving.

(11)

I use simple 4 points scheme for Laplace operator. Di-
rectly from [1] expression for one iterative step of poisson
equation solver can be written as follows:

i,j = −a−1(b · (p′
p′

i+1,j + p′

i−1,j) + c · (p′

i,j+1 + p′

i,j−1) + d)
(21)

3

where

4 Vorticity-Stream Function ap-

a = 2∆t

1
∆x2 +

1
∆y2 (cid:21)

(cid:20)

proach

b = −

c = −

∆t
∆x2

∆t
∆y2

1
∆y

d =

[ui+0.5,j − ui−0.5,j]+

[vi,j+0.5 − vi,j−0.5] (25)

1
∆x

That iterative procedure is rather simple - we use equ-
ation (21) for all interior points on a grid. After that one
step of iterative procedure is done. Then we check if so-
lution coverges. We can do it simply to check maximum
change of pressure on a grid. If it is bigger than ǫ we conti-
nue iterative process. Solution should ﬁnish when pressure
ﬁeld is exactly coverged ǫ = 0, but in practice I use diﬀe-
rent value of ǫ for diﬀerent physical properties of simulated
models - it will be discussed later.

3.3 SIMPLE Revised algorithm

Guess
(U^) n,  (V^) n

Solve Momentum
eq. (without P)
(U^) n+1,  (V^) n+1

Solve Poisson eq.
for (P n+1) using
(U^) n+1 ,  (V^) n+1

Solve Momentum
eq. (using P n+1 )
(U*) n+1 ,  (V*) n+1

Solve Poisson eq.
for (P’(cid:13)) using(cid:13)
(U*) n+1 ,  (V*) n+1

If not coverged

Un+1 = (U*) n + (U’)
Vn+1 = (V*) n + (V’)

If coverged

Visualize Results

(22)

(23)

(24)

Vorticity-Stream Function approach to two-dimensional
problem of solving Navier-Stokes equations is rather easy.
A diﬀerent form of equations can be scary at the beginning
but, mathematically, we have only two variables which ha-
ve to be obtained during computations: stream vorticity
vector ζ and stream function Ψ.

First let us provide some deﬁnition which will simplify
NS equation. The main goal of that is to remove explici-
tly Pressure from N-S equations. We can do it with the
procedure as follows.

First let us deﬁne vorticity for 2D case:

ζ = |ζ| = |∇ × V | =

∂v
∂x

−

∂u
∂y

And stream function deﬁnition is:

(26)

(27)

(28)

∂Ψ
∂y

= u

∂Ψ
∂x

= −v

We can combine these deﬁnitions with equations (3) and
(4). It will eliminate pressure from these momentum equ-
ations. That combination will give us non-pressure vorti-
city transport equation which in non-steady form can be
written as follows:

∂ζ
∂t

+ u

+ v

=

∂ζ
∂y

1
Re

(

∂2ζ
∂x2 +

∂2ζ
∂y2 )

∂ζ
∂x

(29)

Having combined equations (26), (27) and (28) we ob-

tain poisson equation for the Ψ variable:

∇2Ψ =

∂2Ψ
∂x2 +

∂2Ψ
∂y2 = −ζ

(30)

Now we have all deﬁnitions and equations which are ne-
eded for vorticity-stream solution. We will solve vorticity
transport equation, then new values of ζ will be used to
solve equation (30).

Rysunek 4: Flow chart for SIMPLER algorithm.

4.1 Non-Staggered Grid

In the ﬁgure (4) I present SIMPLE Revised algorithm.
It is easy to extend existing SIMPLE solution to be SIM-
PLER one.

Instead of using staggered grid in Vorticity-Stream appro-
ach, we will place both ζ and Ψ variables in the same place
as it is shown in the ﬁgure (5)

Treating the boundary conditions and numerical me-
thods used in SIMPLER solution is almost the same as in
SIMPLE, so I will not repeat myself.

Discretization is straightforward and easier to imple-
ment in a non-staggered grid than in a staggered grid for
the SIMPLE algorithm.

4

Set initial

Solve Vorticity
Transport eq.

If not coverged

Solve Poisson eq.
for

Obtain U,V

If coverged

Visualize Results

Rysunek 5: ζ and Ψ variables in non staggered grid.

Diﬀerential

Discretization

Type

ζn+1−ζn
∆t

forward, O(h)

ζi+1,j −2∗ζi,j +ζi−1,j
(∆x)2

central, O(h2)

∂ζ
∂t

∂2ζ
∂x2

∂ζ
∂x

∂2Ψ
∂x2

Rysunek 6: Algorithm of Vorticity-Stream solution.

5 Two-dimensional

Driven-Lid

ζi+1,j −ζi−1,j
(2·∆x)

central, O(h2)

Cavity

Ψi+1,j −2∗Ψi,j +Ψi−1,j
(∆y)2

central, O(h2)

Let us now provide some examples of practical calculation
for implemented methods6. I will show results of Driven-
Lid Cavity ﬂow - a standard CFD test case to check the
solution.

Tabela 2: Discretizations used in Vorticity-Stream algori-
thm

u

4.2 Discretization

We will use several schemes to discretize diﬀerential equ-
ation (26). For Poisson equation we will use the same tech-
nique which was presented in the SIMPLE algorithm de-
scription, so we will not repeat formulas5.

4.3 Vorticity-Stream function algorithm

Algorithm of solution for VS function solution is simplier
than for SIMPLE method. It is sketched in the ﬁgure (6).
First we have to set initial values for ζ and Ψ. I arbitrary
set these values to 0. Then Vorticity Transport Equation
is solved and new ζn+1 values are obtained. After that
simple iterative procedure is applied to solve the poisson
equation. Finally, new values of velocities are easily found
from (27) and (28) equation.

Rysunek 7: Driven Cavity (lid moving with u constants
velocity.

Driven Cavity problem is sketched in the ﬁgure (7). Up-
per lid is moving with u velocity. Main goal is to solve NS
equations inside the cavity to obtain velocity ﬁeld (steady
state). First of all we have to decide about boundary con-
ditions for both: SIMPLE and VS approaches which will
be quite diﬀerent.

5Formulas for poisson equation will be a little bit diﬀerent but it
is rather easy to obtain it by simple discretization of equation (30).

6In that section also boundary conditions will be provided, be-

cause they are speciﬁed especially for the given problem.

5

5.1 Boundary Conditions - SIMPLE and

5.2 Boundary Conditions - Vorticity Stre-

SIMPLER

am

For SIMPLE(R) method we will use BC as follows: First
we have to clear pressure values for all boundaries. We use
simple expression:

In vorticity-stream formulation I use simple ﬁrst order
expressions for ζ derivatives at the wall. First, we have
to set Ψ = 0 at all boundaries. Then for NOSLIP boun-
dary walls we use expression (i.e. for j = ny − 1 row):

ζi,0 = 2.0 ·

Ψi,0 − Ψi,1
∆y2

(38)

where n is normal to the wall. It means that for all

i = 0 . . . N X − 1 points of a grid we apply:

(31)

(32)

(33)

(34)

(35)

∂p
∂n

= 0

pi,0 = pi,1

v0,j = 0

vnx−1,j = 0

and

and

and

pi,ny−1 = pi,ny−2

We apply that procedure for upper and lower wall re-
spectively7. Then we have to take care of velocities. We
would like to apply NOSLIP boundaries for Driven Cavi-
ty non-moving walls, so we have to zero values of velocities
on every wall. First let us make trivial operation: for every
j = 0 . . . N Y − 1 set

The same work should be done for u velocities, for i =
0 . . . N X − 1 and for j = N Y − 1. Especially for driven
cavity problem we also have to set u velocity equal to 1.0
at j = 0 row, which is done in a straightforward way.
One problem is to set boundary conditions at other walls,
where no velocity grid points are present. We can do it
with a simple linear interpolation of near velocities i.e. for
u velocity, for every j = 0 . . . N Y − 1 we set:

u0,j = −(2.0/3.0) · u1,j

(36)

unx−2,j = −(2.0/3.0) · unx−3,j

(37)

The same condition is used for other walls and v velocity

components.

7For corners simple diagonal values are taken, i.e. p0,0 = p1,1

6

6 Results

In that section some numerical results of calculations with three diﬀerent techniques will be presented. Since results of
calculations are the same I will try to show and compare diﬀerences between methods (accuracy, convergence speed).
Please note that all comments are under ﬁgures.

6.1 Vorticity-Stream, Driven Cavity, Re = 500, Grid: 40x40

Rysunek 8: Streamlines plot for driven cavity with Re = 500 and 1 : 1 aspect ratio, grid size 40x40. Two vortexes are
found in the corners of the Cavity, computed with the Vorticity-Stream approach. Solution visualized with Streamline
plot technique.

7

6.2 Diﬀerent Visualization Techniques, Driven Cavity, Re = 500, Grid: 40x40

Stream
 Function Distribution

Vorticity
 Function Distribution

Stream
 Function Contour Plot

Red - U velocity
Green - V velocity

Rysunek 9: There are presented diﬀerent types of visualizations generated by my solver. Computations as above -
Re = 500 and other parameters are the same. (That is only a part of possibility visualizations, more will be available
on my web page soon).

8

6.3 SIMPLE, SIMPLER, Driven Cavity, Re = 100, Grid: 21x21

40x40, Aspect Ratio 1:1

30x60, Aspect Ratio 1:2

40x60, Aspect Ratio 2:3

Rysunek 10: Streamlines plot for SIMPLE (and SIMPLER - because they are the same) calculation of driven cavity
with Re = 100 and diﬀerent grid sizes and aspect ratios.

6.4 Convergence for SIMPLE and Vorticity-Sream algorthms

9

 0

 10000

 20000  30000  40000  50000
time step

 60000  70000

Rysunek 11: That ﬁgure shows how convergence changes during iteration steps. On y axis we have |vn+1|

|vn| variable.

SIMPLE

Vorticity-Stream

e
c
n
e
g
r
e
v
n
o
c

e
c
n
e
g
r
e
v
n
o
c

 1.5

 1.4

 1.3

 1.2

 1.1

 1

 0.9

 0.8

 1.5

 1.4

 1.3

 1.2

 1.1

 1

 0.9

 0.8

 0

 10000

 20000  30000  40000  50000
time step

 60000  70000

Rysunek 12: That ﬁgure shows how convergence changes during iteration steps. On y axis we have |vn+1|

|vn| variable.

10

6.5 Convergence comparision

SIMPLE
SIMPLE Revised
Vorticity-Stream

 1

 0.9

 0.8

 0.7

 0.6

 0.5

 0.4

 0.3

 0.2

 0.1

e
c
n
e
g
r
e
v
n
o
c

 200

 400

 600

 800

 1000

 1200

time step

Rysunek 13: Convergence test for three solution algorithms. A lot of problems appeared there. Convergence speed
depends on a lot of things, so for diﬀerent properties of calculation (Reynolds numbers, spatial grid resolution, poisson
equation accuracy etc.) diﬀerent results appears. That results computed for Re = 300 and grid 30x30 shows that
Vorticity-Stream function solver converge faster than SIMPLER and SIMPLE. Anyway - more carefully study should
be made there to make sure about that results. On the y axis we have |vn−1 − vn| convergence coeﬃcient.

11

7 Calculation For Flows over Obstacles

In that section I present some calculations made to test my SIMPLE solver for problems other than Driven Cavities.
There were some problems with boundary conditions and still more work is needed there, but fortunately results are
really nice.

Rysunek 14: Flow of Incompressible ﬂuid over set of holes. Calculation made for Re = 250 and grid size 60x40.

Rysunek 15: A Vortex-Karmann Street. Calculation made for Re = 400 and grid size 119x40.

More results and an application ”Hydrodynamica” for Windows operating system you can download free of a home

page of an author.

12

8 Conclusion

I have developed three diﬀerent methods for calculation of incompressible ﬂuid ﬂow. Tests for simple Driven Cavity
problem were made. I compared convergence speed for all the methods and it seems that convergence speed depends
on problem formulation and physical properties of simulated system. For future I will try to concern more on how
to treat boundary conditions for both - pressure based and vorticity-stream function methods. Also some kind of
user-friendly software will be released in near future. I would like to thank Grzegorz Juraszek for English language
checking.

A Appendix A

To calculate primed velocity correction values we use approximate forms of the momentum equations:

If we assume that velocity correction are zero at the previous time step, we can get straightforward expressions for

velocity corrections at current time step:

1
∆t
1
∆t
Then, those two equations are discretized and we obtain simple expressions for calculation of velocity corrections:

u′ = −

v′ = −

∂p′
∂x
∂p′
∂y

(42)

(41)

∂u′
∂t
∂v′
∂t

= −

= −

∂p′
∂x
∂p′
∂y

u′ = −

v′ = −

1
∆t · ∆x
1
∆t · ∆y

(P ′

i+1,j − P ′

i,j )

(P ′

i,j+1 − P ′

i,j )

(39)

(40)

(43)

(44)

Literatura

[1] John D. Anderson, Jr. ’Computational Fluid Dynamics: The Basics with Applications’, McGraw-Hill Inc, 1995.

[2] Ryszard Grybos, ’Podstawy mechaniki plynow’ (Tom 1 i 2), PWN 1998.

[3] David Potter ’Metody obliczeniowe ﬁzyki’, PWN 1982.

[4] James D. Bozeman, Charles Dalton, ’Numerical Study of Viscous Flow in Cavity’, Journal of Computational

Physics, vol. 12, 1973.

[5] J.C. Tannehill, D.A. Anderson, ’Computational Fluid Mechanics and Heat Transfer, Second Edition’, Series in

Computational and Physical Processes in Mechanics and Thermal Sciences .

[6] C.A.J. Fletcher, ’Computational Techniques for Fluid Dynamics, Volume 2’, Springer .

[7] F. H. Harlow, John P. Shannon, ’The Splash of Liquid Drop’, Journal of Applied Physics (vol. 38, n.10 Sept.

[8] J. Welch, F. Harlow, J. Shannon, ’The MAC Method’, Los Alamos Scientiﬁc Laboratory of the University of

1967).

California (1965).

[9] N.Foster, D.Metaxas, ’Realistic Animation of Liquids’, Center for Human Modeling and Simulation.

13

