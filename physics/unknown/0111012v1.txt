THAP002

DESIGN OF A DISTRIBUTED CONTROL SYSTEM BASED ON CORBA
AND JAVA FOR A NEW RIB FACILITY AT LNL

Stefania Canella, Giorgio Bassato, L.N.L. - I.N.F.N.  Legnaro (Pd), Italy
canella@lnl.infn.it, bassato@lnl.infn.it

1
0
0
2
 
v
o
N
 
5
 
 
 
2
1
0
1
1
1
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Abstract

(RIBs)  originated  by 

SPES  (Study  for  the  Production  of  Exotic  Species)
[1] is a L.N.L. project that will produce by the end of
this  year  the  design  of  a  facility  for  Radioactive  Ion
fragments
Beams 
produced  by 
it  will  be
secondary  neutrons; 
characterized by moderate size, performance and cost
and  will    produce  also  intense  neutron  beams  for
activities  both  in  fundamental  and  applied  Nuclear
Physics.

fission 

In  the  context  of  this  design  study  and  tightly
related  to  the  medium  size  of  this  facility,  the
architecture  of  a  distributed  control  system  using  the
Common  Object  Request  Broker  Architecture
(CORBA,  [2])  as  middleware  framework  and  Java  as
main  programming  language  was  investigated  for  the
core  components  (diagnostics,  optics,  RF-control)  of
the primary accelerator.

The  performances  of  CORBA  middleware  for  the
high  level  control  system  were  measured  in  different
conditions    and  showed  to  be  sufficient  to  cover  the
requirements  for  remote  operations  (all    feedback
loops  will  be 
in  specialized
  performed  either 
hardware  or  by  dedicated 
real-time  embedded
controllers).

A  minimal  programming  effort,  a  good  level  of
modularity  and  long-term  maintenance  were  some  of
the  reasons  to  choose  Java  [3]  and  its  related
Integrated  Development  Environments  (IDEs)  as  the
main  programming  language  and  as  a  software
platform  for  the  Graphical  User  Interface  (GUI)  and
the middleware implementations of this  project.

1 SPES PRIMARY ACCELERATOR
The primary accelerator of SPES is a LINAC  for  a
high intensity proton beam (1-30 mA) up to an energy
of  100  MeV.  Fission  fragments    (RIBs)  produced  by
the  flux  of  neutrons  will  be  then  boosted  by  RFQs
(Radio Frequency Quadrupole) structures and injected
in an L.N.L. LINAC operating since 1995.

The base components of this primary accelerator:

 
 

(cid:131)
(cid:131)

a proton source (up to 80 mA) at 80 KV;
a normal conductive  RFQ at 5 MeV as low
energy booster for a 30 mA proton beam;

 
(cid:131)

an ISCL (Independently phased Superconducting
Cavity Linac) up to the final energy of 100MeV.
The  primary  accelerator  detailed  design  and
construction will be performed in 2 steps: the first up
to an energy of 10 MeV and the second upgrading the
final energy from 10 to 100 MeV.

By the end of this year a final approval for the first

step is expected.

2 THE CONTROL SYSTEM OF THE
PRIMARY ACCELERATOR

2.1 General Layout

computers,  modular 

The  core  components  (beam  diagnostics,  beam
optics, RF-control)  of  the  primary  accelerator  will  be
controlled  by  a  distributed  system,  that  is  by  a  set  of
heterogeneous 
systems,
embedded controllers and field devices whose objects
(data,  commands,  trends,  alarms  ...)  have  to  be
sharable  among  local  operators  and  (with  some
restrictions, to be defined)  remote users.
2.2  Hardware architecture

From the hardware (HW) point of view, a  standard

three-level architecture is foreseen.

PCs and/or Workstations (WS), at the top level, will
be  used  through  graphic  interfaces  by  local  operators
and remote users, for data storage and general services
such  as  network 
firewall,  on-line
routing  and 
documentation and printing.

At  the  middle  level  there  will  be  VME  based
systems with PowerPC processor boards and any other
specialized  board  suitable  to  manage  IN/OUT  analog
and digital signals directly connected to the field.

Embedded  controllers  and  field  devices  at  the
bottom  level  will  perform  local  self-contained  tight
interactive activities and fast feedbacks.

The  connection  between  top  and  middle  level  is
planned  through  a  standard  fast  ethernet  (switched
100BaseT), while different heterogeneous connections
(thin  wire  ethernet,
using  different  protocols 
fieldbuses,  serial  lines)  will  be  used  between  middle
level  systems  and 
field  devices  or  embedded
controllers.

2.3  Software architecture

systems 

Different  operating 

(Solaris,  Linux,
Windows) will be equivalent environments for the top
level  systems,  while  VxWorks  will  be  used  as  the
main  real-time  operating  system  for  the  middle  level
layer and for embedded controllers.

Java applications and applets on PCs and WSs (Java
platforms)  will  establish  the  SW  framework  for  the
GUI and  general services. C or C++ will be the basic
programming languages for  applications  for  real-time
VME systems and for embedded controllers.

Communications  on  the  network  will  be  based  on
CORBA middleware. Low level transport mechanisms
such as BSD sockets will be also used, if necessary.

2.4 Reasons for CORBA and Java IDL

There are several reasons to use CORBA:

(cid:131)

  CORBA is a standard developed  since 1989 to
operate across different networks and operating
systems;

(cid:131)

  CORBA objects may be located anywhere on a
network and may communicate each other no
matter where they are located, this makes it an
ideal framework for distributed applications;

  CORBA components may be supplied by
different vendors, as a standard Interface
Definition Language (IDL) has to be used to
define the interfaces to CORBA objects;
  CORBA objects may be written in different

languages (Java, C++, C).

(cid:131)

(cid:131)

Some  good  reasons  lead  also  to  use  Java  IDL,    at

least for top level applications:

  Java IDL is an ORB (Object Request Broker)
provided with the Java 2 Platform: it can be
directly used to define, implement and access
CORBA objects from the Java programming
language;
together with Java IDL, a Transient Name Server
(tnameserv) is provided on any Java2 Platform.
Java IDL ORB is then a simple tool to test CORBA

 

[4]  middleware prototypes and their performances.

2.5 Reasons for Java

There are many reasons to use Java, where possible,

(cid:131)

in place of traditional procedural languages:
 

Java is object-oriented and designed for network
based distributed software;
Java bytecode is directly usable on any Java
platform (Java compiled applications are really
portable across multiple HW-SW platforms);

(cid:131)

 

 
(cid:131)

 
(cid:131)

Java is multithreaded, that is suited for
applications performing multiple concurrent
activities;
Java is an ideal language for CORBA
programming as CORBA objects may be
immediately created and used on a Java 2
Platforms.

Besides  all  this,  Java  includes  many  libraries  of
objects  providing  extended  functionalities  on  I/O,
network interfaces, data base access,  graphics.

2.6 IDEs for Java Platforms

Today  there  are  many  IDEs  available  for  medium-
large  software  projects  on  Java  Platforms,  especially
to produce sophisticated GUIs.
The  most  promising 

for  CORBA-Java
distributed  applications  is  probably  JB4  (JBuilder  4)
from  Borland  and  Forte  from  SUN.  JB4  and
Visibroker  ORB  are  currently  under  test  for  SPES.
Forte for JAVA will be also tested in the next months.

IDE 

2.7 Performances of CORBA on Java
Platforms

In order to test  CORBA middleware and Java IDL
environment  some  Java  tasks  were  implemented,  the
most  interesting  of  them  being  a  client-server  couple
including  the  capability  to  measure  the  elapsed  time
of  a  typical  control  transaction:  the  trip-time  of  a
message  between  CORBA-based  Java  applications,
eventually on the network (the trip being the transit of
a message from the client to a server and back). These
special couple of tasks was developed to  measure  the
typical  delay  that  has  to  be  expected  for  a  service
request in a CORBA-based distributed control system.
This  application  includes  an  IDL  module  describing
the  available  interface,  a  transient  server  (a  program
IDL
that  contains 
interface), and  the  code  of  a  CORBA  client  invoking
the  available  operations  on    distributed  objects.  As
naming  service  the  standard  tnameserv  utility  was
used.  The  length  of  the  message  was  changed  in  a
wide  range  of  meaningful  values.    This  test  tool  was
used in four different HW-SW configurations:
  Test n. 2: all tasks (nameserver, server and client)
(cid:131)
running on the same Sun-Solaris8 ULTRA10 WS;

implementations  of 

the 

the 

  Test  n. 3: server and nameserver running on a
(cid:131)
Sun-Solaris8 ULTRA10 WS, client running on
another  Sun-Solaris8 ULTRA10 WS, the two
WS connected by a 10 Mb/s ethernet link with no
other traffic;

  Test n. 4: server, nameserver and client running
(cid:131)
on a PC-linux (with an old 200MHz processor);

¤
¤
(cid:131)

  Test n. 5: server and nameserver running on a PC-
linux (200MHz processor), client running on Sun-
Solaris8 ULTRA10 WS, the two computers
connected by a 10 Mb/s ethernet link with no
other traffic.

All  tests  were  performed  by  a  client  sending  a
message  of  fixed  length  and  receiving  its  echo  from
the server: the trip-time was taken by the client as the
elapsed  time  between  the  send  operation  and  the
receive operation. Each test was repeated 500 times to
have  a  reasonable  statistics.  The  results  (mean,
minimum  and  maximum  elapsed  times  in  ms)  are
summarized in Table 1.

3 SUMMARY
The  performances  of  CORBA  middleware  in  the
above described tests proved to be sufficient  to  cover
the  requirements  for  remote  operations:  a  typical
message of 1 Kbyte (a request with some parameters)
will  travel  forward  from  the  client  to  a  server  and
back (with the answer to the request of service) in an
average  time  not  greater  than  10  ms,  in  all  the  four
configurations.  A  greater  delay  may  be  noticed  from
time  to  time  due  to  the  concurrent  activities  of  the
systems, but always above the acceptable limit of 100
ms.

From  the  above  described  basic  choices  (CORBA,
Java, IDEs) a number of benefits are expected for the
control system of SPES primary accelerator:
1.  a long lifetime (over 10 years) both from the HW

and SW point of view;

2.  HW components at the top and middle levels will
be available from a wide range of manufacturers;

3.  high SW reliability because compile-time and
run-time extensive checking will help to have a
fast and extensive code debugging;

4.  Java automatic memory garbage collection will

also help to produce reliable code;

5.  minimum time to repair (HW) and/or for

maintenance (HW/SW)

6.  uniform  code  (and  bytecode)  for  different  Java
platforms  greatly  simplify  SW  updating  and
maintenance.

REFERENCES
[1] SPES - Project Study of an Advanced Facility for
Exotic Beams at LNL, L.N.L.-I.N.F.N. (REP)
145/999 (http://www.lnl.infn.it/~spes)

[2] OMG home page - http://www.omg.org
[3] JAVA home page - http://java.sun.com
[4]   Introduction to CORBA -
http://developer.java.sun.com/developer/onlineTrainin
g/corba

Test n. 2 (1 W S S un)

Test n. 3 (2 W S S un + net)

M sg length M ean [ms] M in [m s] M ax [ms] M ean [ms] M in [m s] M ax [ms]

133

255.69

1M  byte 

575.34

1127

2726.44

2553

3363

Test n. 4 (1 P C linux)

Test n. 5 (1 W S +  1 P C +  net)

M sg length M ean [ms] M in [m s] M ax [ms] M ean [ms] M in [m s] M ax [ms]

1 byte 

10 byte 

100 byte 

1K  byte 

10K  byte 

100K  byte 

1 byte 

10 byte 

100 byte 

1K  byte 

2.58

2.19

2.73

1.89

5.95

58.2

4.73

4.12

4.81

4.74

41

553

1

1

1

1

4

3

3

3

4

151

27

42

17

60

55

93

313

40

244

752

2.18

2.03

2.54

5.57

25.67

3.35

3.32

3.98

8.15

49.9

781.75

23

219

1

1

1

5

2

2

3

7

47

495

13

23

97

12

124

400

57

46

99

14

74

910

6953

10K  byte 

22.09

100K  byte 

487.46

19

448

1M  byte 

2710.68

2646

5651

6150.69

5763

Table 1 - Test results (trip-time for messages of different lengths) for CORBA-Java based applications in 4 different

configurations

