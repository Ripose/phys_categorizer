BAYES-LIN: An object-oriented environment for Bayes
linear local computation

Darren J. Wilkinson∗
Copyright c(cid:13) 1997

May 1, 2011

The latest version of the BAYES-LIN software and documentation (including the latest
version of this document), can be obtained from the BAYES-LIN WWW page:

\protect\vrule width0pt\protect\href{http://www.ncl.ac.uk/\strin

Abstract

BAYES-LIN is an extension of the LISP-STAT object-oriented statistical computing envi-
ronment, which adds to LISP-STAT some object prototypes appropriate for carrying out local
computation via message-passing between clique-tree nodes of Bayes linear belief networks.
Currently the BAYES-LIN system represents a rather low-level set of tools for a back-end
computational engine, together with diagnostic graphics for understanding the effects of ad-
justments on the moral graph. A GUI front end, allowing interactive formulation of DAG
models could be easily added, but is currently missing from the system. This document pro-
vides a very brief introduction to the system, by means of a work-through of two example
computations, followed by a list of variables, functions, objects and methods provided by the
system.

7
9
9
1
 
t
c
O
 
6
1
 
 
]
n
a
-
a
t
a
d
.
s
c
i
s
y
h
p
[
 
 
1
v
5
1
0
0
1
7
9
/
s
c
i
s
y
h
p
:
v
i
X
r
a

∗Department of Statistics, University of Newcastle, Newcastle upon Tyne, NE1 7RU, ENGLAND. Email:

d.j.wilkinson@ncl.ac.uk WWW: http://www.ncl.ac.uk/˜ndjw1/

1

Contents

1 Introduction

1.1 Bayes linear methods .
1.2 LISP-STAT . .
.
. .
1.3 Local computation .
.
1.4

.
.
.
Installing and running BAYES-LIN .

. .
. .
. .

. .
. .
. .

.
.
.

.
.
.

.
.
.

.

. .
. .
. .
. .

2 A “toy” dynamic linear model
2.1 Description of the model
. .
2.2 Graphical models . .
.
. .
. .
2.3 Deﬁning the clique-tree .
2.4 Deﬁning the moral graph . .
2.5 Adjustments . .
. .
2.6

. .
. .
. .
. .
. .
.
Interpreting the graphics window .

.
.
.
.
.

. .

.

.

.

3 Computation for a large multivariate DLM

. .
3.1 Description of the model
. .
.
3.2 Graphical models . .
. .
3.3 Some constants .
.
. .
3.4 Deﬁning the clique-tree .
. .
3.5 Deﬁning the moral graph . .
. .
3.6 Adjustments . .

. .

.
.

.

.

.

.
.
.
.
.
.

. .
. .
. .
. .
. .
. .

4 Important note/Disclaimer

5 Command reference

.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

.
.
.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .

. .
5.1 Global variables .
. .
5.2 Global functions .
5.3 Object prototypes . .

. .
.
.
. .
. .
.
.
. .
. .
.
.
. .
5.3.1 tree-node-proto slots and methods
. .
5.3.2 moral-node-proto slots and methods
. .
5.3.3 moral-plot-proto slots and methods
. .
5.3.4 global-moral-plot-proto slots and methods .

. .
. .
. .
. .
. .
. .

. .
. .
. .

. .
. .
. .

.
.
.
.
.
.

.
.
.
.
.
.

.
.
.
.

.
.
.

.
.
.

.
.
.

.
.
.

.
.
.

.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.
.

. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .
. .

.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.
.

.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.
.

. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .
. .

.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.

.
.
.
.
.
.
.

. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .

. .
. .
. .
. .
. .
. .
. .

3
3
3
3
3

4
4
5
5
6
6
9

.
.
.
.

.
.
.
.
.
.

9
.
9
. 10
. 11
. 12
. 13
. 15

17

18
. 18
. 18
. 18
. 19
. 19
. 20
. 20

2

1 Introduction

1.1 Bayes linear methods

Bayes linear methods are a form of Bayesian statistics, which acknowledge the difﬁculties asso-
ciated with the full modelling, speciﬁcation, and conditioning required by distributional Bayesian
statistics, and instead try to make best possible use of partial speciﬁcations, based on means, vari-
ances and covariances. Unsurprisingly, much of the theory is formally identical to inference in
multivariate Gaussian Bayesian networks, but interpretation of results is generally different. This
document assumes a working knowledge of the basic tools of the Bayes linear methodology. An
introduction to Bayes linear methods is given in [1]. An introduction to (non-local) computational
issues can be found in [6]. The foundations of the theory are discussed in [5], [3], and [2]. On-line,
an introduction to the theory can be found in [4], from the Bayes Linear Methods WWW home
page: http://fourier.dur.ac.uk:8000/stats/bayeslin/

1.2 LISP-STAT

LISP-STAT is an interpreted, object-oriented environment for statistical computing, described in
[8]. This document assumes a working knowledge of LISP-STAT, and the basics of object-oriented
programming. On-line, LISP-STAT information is available from the LISP-STAT WWW home
page: http://www.stat.umn.edu/˜luke/xls/xlsinfo/xlsinfo.html

1.3 Local computation

BAYES-LIN carries out local computation via message-passing between adjacent nodes of a clique-
tree representing the statistical model of interest. Again, local computation in Bayesian networks
is a huge area, and this document assumes a working knowledge of graphical models, conditional
independence and some of the ideas behind local computation. The best introduction to all of these
areas is [7]. In particular, Chapter 3 of that volume deals with all of the relevant graph-theoretic
concepts, and Section 7.2 gives an introduction to graphical Gaussian models.

1.4 Installing and running BAYES-LIN

You need a working LISP-STAT system installed before you attempt to install BAYES-LIN. The
following instructions are for a UNIX system with an XLISP-STAT installation, but installing on
other systems should be similar. Note that the graphics work best on systems with at least a 16 bit
colour display. If you only have an 8 bit display (256 colours), make sure that most are free for
use by BAYES-LIN. The graphics will not work on displays poorer than 8 bit colour. Create a new
directory for the BAYES-LIN system. Download the BAYES-LIN software from the BAYES-
LIN WWW page: http://www.ncl.ac.uk/˜ndjw1/bayeslin/ and put into the new
directory. In this new directory type:

You should then be able to run LISP-STAT with the BAYES-LIN extensions simply by running

% gunzip blin01a.tar.gz
% tar -xvf blin01a.tar
% gzip blin01a.tar

% xlispstat

3

from within this directory. You can check that the extensions are loaded by typing in some of the
following commands in the LISP-STAT listener window.

> (help ’create-tree-node)
> (send moral-node-proto :help)
> (send tree-node-proto :help :observe)

In general, to make sure the extensions are loaded, use the expression

> (require "bayeslin")

When you are satisﬁed that the extensions are loaded, exit BAYES-LIN.

In order to run the examples, simply call LISP-STAT with the example as ﬁrst argument. eg.

> (exit)

% xlispstat ex-dlm

or

% xlispstat ex-mdlm

These two examples will be explained in the following sections.

2 A “toy” dynamic linear model

2.1 Description of the model

The BAYES-LIN code for this example can be found in the ﬁle ex-dlm.lsp, which is part of the
standard BAYES-LIN distribution. The example concerns a very simple model for 3 observations
in time. The model can be written in the form of a locally constant DLM.

Xt = q
t = q

t + n
t
t−1 + w

t

t and w

t. The variables n

Xt denotes the observation at time t (t = 1, 2, 3), which is dependent on the state of the system at
time t, q
t are incidental noise terms. The model is initialised by specifying
beliefs about the initial state of the system; in this case, E (q 1) = 1, Var (q 1) = 1, and the variance
of the noise terms; in this case, Var (w
t) = 1. Of course, for such a simple model, a non-
local analysis is trivial, since the expectation vector for the entire system, and the variance matrix
for the entire system can be written down and worked with directly. E (q 1, q 2, q 3, X1, X2, X3) =
(1, 1, 1, 1, 1, 1)T,

t ) = Var (n

Var (q 1, q 2, q 3, X1, X2, X3) =

1 1 1 1 1 1
1 2 2 1 2 2
1 2 3 1 2 3
1 1 1 2 1 1
1 2 2 1 3 2
1 2 3 1 2 4





















4

However, for the example in the next section, such explicit non-local analysis will not be possible.

q
2.2 Graphical models

The graph for this model is shown below.

q1

q2

q3

X1

X2

X3

mT1

mT2

mT3

q1

q2

q3

X1

mX1

X2

mX2

X3

mX3

Since there are no unmarried parents, this graph can be moralised simply by dropping arrows.

Now, since there are no cycles, this graph is already triangulated, so the clique tree may be

formed as follows.

tT12

q1,q2

tT23

q2,q3

q1,

X1

tX1

q2,

X2

tX2

q3,

X3

tX3

2.3 Deﬁning the clique-tree

BAYES-LIN carries out computation on the clique-tree, and displays results on the moral graph.
Therefore, both need to be introduced to the BAYES-LIN system. Since all information and com-

5

putations are carried out on the clique-tree (in fact, computations can be carried out without deﬁn-
ing a moral graph at all), this is deﬁned ﬁrst. Appropriate code for deﬁning the tree nodes is shown
below.

(create-tree-node ’tX1 ’(t1 x1) #(1 1) #2a((1 1) (1 2)) ’(tT12))
(create-tree-node ’tX2 ’(t2 x2) #(1 1) #2a((2 2) (2 3)) ’(tT23))
(create-tree-node ’tX3 ’(t3 x3) #(1 1) #2a((3 3) (3 4)) ’(tT23))
(create-tree-node ’tT12 ’(t1 t2) #(1 1) #2a((1 1) (1 2)) ’(tX1 tT23))
(create-tree-node ’tT23 ’(t2 t3) #(1 1) #2a((2 2) (2 3)) ’(tT12 tX2 tX3))

The global function create-tree-node is used to deﬁne each node in turn. The function
expects ﬁve arguments. The ﬁrst argument is a symbol to point to the resulting tree-node object.
The second is a list of variables which the node contains. The third and fourth are the expectation
vector and variance matrix for the variable list, and the ﬁfth is a list of neighbouring tree nodes.
Next, the moral nodes are deﬁned.

2.4 Deﬁning the moral graph

(create-moral-node ’mX1 ’(x1) ’tX1 "mX1" ’(mT1))
(create-moral-node ’mX2 ’(x2) ’tX2 "mX2" ’(mT2))
(create-moral-node ’mX3 ’(x3) ’tX3 "mX3" ’(mT3))
(create-moral-node ’mT1 ’(t1) ’tX1 "mT1" ’(mX1 mT2))
(create-moral-node ’mT2 ’(t2) ’tX2 "mT2" ’(mX2 mT1 mT3))
(create-moral-node ’mT3 ’(t3) ’tX3 "mT3" ’(mX3 mT2))

The global function create-moral-node is used to deﬁne each node in turn. The ﬁrst is
a symbol to bind the object to. The second is a variable list. The third is a clique-tree node which
contains all of the variables at this node (such a node always exists). The fourth is a string to be
used for plotting purposes, and the ﬁfth is a list of neighbouring moral graph nodes. Next, some
plotting positions are deﬁned by sending a :location message to each moral node object.

This step may be omitted if one is not interested in plotting of results. The locations are on a (0, 1)
scale for x and y coordinates, respectively. The origin is the top-left of the plot window. The model
is now completely speciﬁed. Before carrying out adjustment, we create plot windows to show
diagnostic information.

(send mX1 :location ’(0.2 0.8))
(send mX2 :location ’(0.5 0.8))
(send mX3 :location ’(0.8 0.8))
(send mT1 :location ’(0.2 0.2))
(send mT2 :location ’(0.5 0.2))
(send mT3 :location ’(0.8 0.2))

2.5 Adjustments

(create-moral-plot ’myplot)
(create-global-moral-plot ’myplot2)

6

This creates a plot window with the name myplot to show partial adjustment information, and
another, myplot2, to show global adjustment information. Note that high-quality colour Encap-
sulated PostScript output is produced for each plot after each redraw of the screen, and stored in
the ﬁles mpw.eps and gmpw.eps respectively.

We are now in a position to carry out adjustments. Suppose that variable X1 is observed to be
x1 = 3. This information can be introduced into the graph by sending the following message to the
appropriate moral graph node.

(send mx1 :observe ’(x1) #(3))

In general, one can observe a list of variables, provided all variables are contained in the moral
graph node receiving the message. The message is passed on to the appropriate clique-tree node,
and then propagated around the clique-tree. We can tell our plot object to gather information from
the tree for display, as follows.

(send myplot :record)

The plot should now show how information ﬂows around the moral graph (more on this later). Note
that although information has been introduced into the graph, it has not been absorbed into it, and
that further information can not be introduced until it has. This can be understood by sending some
messages to the graph, and looking at the return values. If the expectation and variance of the ﬁrst
observable node is examined

it can be seen that it retains its a priori values. However, one can also ask for adjusted expectations
and variances.

Similar queries can be sent to the third moral graph node.

When we are ﬁnished examining the effects of the current adjustment, and wish to add further
information into the graph, the current information should be absorbed.

The absorbing makes the adjusted information the new prior information, ready for the next adjust-
ment. This can be veriﬁed by looking at the new expectation and variance for the third observation.

Finally, we can introduce new information, record it, and then absorb it, before examining the
results.

7

(send mx1 :ex)
(send mx1 :var)

(send mx1 :aex)
(send mx1 :avar)

(send mx3 :ex)
(send mx3 :var)
(send mx3 :aex)
(send mx3 :avar)

(send mx1 :absorb)

(send mx3 :ex)
(send mx3 :var)

(send mx2 :observe ’(x2) #(-1))
(send myplot :record)
(send mx2 :absorb)

(send mx3 :var)
(send mx3 :ex)

The two plot windows should now look similar to the following.

mT1

mT2

mT3

mX1

mX2

mX3

mT1

mT2

mT3

mX1

mX2

mX3

8

2.6 Interpreting the graphics window

Whenever an observation is made and recorded, a portion is removed from the outside of each
node. The area removed is proportional to the variance resolved by the adjustment. Consequently,
the radius removed is proportional to the standard deviation resolved. Therefore, when a node is
fully observed, there is no dark centre left remaining. For other nodes, the size of the dark centre
is proportional to the proportion of original uncertainty left remaining. For multivariate nodes, the
Bayes linear concept of resolution is used.

The additional red and blue shadings give an indication of the changes in expectation, relative
to a priori uncertainty. Red shadings indicate changes larger than expected, and blue shadings
represent changes in expectation smaller than expected∗. The amount of red and blue shading
increases as the “degree of surprisingness” increases. The amount of shading is a transformation
of the Bayes linear concept of size-ratio. The transformation can be user-speciﬁed by redeﬁning
the plot-object’s :sr-map method appropriately.

3 Computation for a large multivariate DLM

3.1 Description of the model

The BAYES-LIN code for this example can be found in the ﬁle ex-mdlm.lsp, which is part of
the standard BAYES-LIN distribution. The following data represent weekly sales of six soft drinks
packs from a wholesale depot.

4 6 3
51 27 1
7 15 4
113 55 0
103 71 0 10 16 7
. . .
. . .

. .
. .

.
.

Clearly a multivariate time series model is required for such data. The following multivariate
locally constant DLM is adopted.

This is the same model as used in the last example, but here all of the variables denote random
vectors of dimension six. The model is speciﬁed in the following way. There are 35 observa-
tions, and so t runs from 1 to 35 for the actual observations. However, for this model, it was felt
more convenient to initialise the model at t = 0. The initial state of the system was speciﬁed as
E (q 0) = (50, 50, 50, 50, 50, 50)T and Var (q 0) = diag(900, 900, 900, 900, 900, 900). The covariance
∗Note that changes in expectation smaller than expected can still be of concern, since they are indicative of a

possible under-utilisation of prior information.

Xt = q
t = q

t + n
t
t−1 + w

t

9

q
structure for the noise terms was speciﬁed to be Var (n

t) = V, Var (w

t) = W , where

V =

W =











71.51 23.48
1.26
3.58

3.85
3.85 30.79
71.51
23.48
3.27

2420.36 387.33 20.39 165.27 44.56 58.61
3.27
387.33 263.85
20.39
5.99
3.58 139.72 23.12 11.33
165.27
23.12 50.01
1.26
44.56
4.78
4.78 44.21
11.33
5.99
58.61
1112.49 272.47 22.52 66.45 31.56 27.84
272.47 195.50 11.53 30.07 18.51 15.37
6.28
22.52
8.03
66.45
31.56
7.32
7.32 32.97
27.84

4.67
5.54
5.54 78.91 14.04
4.67 14.04 40.50
8.03
6.28

11.53 29.64
30.07
18.51
15.37































See [9] for an explanation of the given speciﬁcation. These speciﬁcations determine the model, but
note that there are 6 × 4 × 35 + 6 = 846 variables in this problem (assuming that we are interested
in the noise terms). This problem is about at the limit of the size which can be tackled by a brute
force approach, making a local computation approach particularly attractive.

3.2 Graphical models

We are interested in making inferences about the noise terms in this example (in order to help
diagnose deﬁciencies of the model), and so the noise terms need to be included in the model. The
ﬁrst part of the DAG for this structure is therefore as follows (note that the DAG nodes are all
multivariate).

w1

w2

w3

w4

q0

q1

q2

q3

q4

n1

n2

n3

n4

X1

X2

X3

X4

Marrying parents and dropping arrows gives the moral graph for the problem (note that the

moral graph nodes are all multivariate).

10

w1

w2

w3

w4

q0

q1

q2

q3

q4

n1

n2

n3

n4

X1

X2

X3

X4

Again we are fortunate in the sense that the moral graph is ready-triangulated, and so the

clique-tree can be directly constructed as follows.

A1

q0,w1,q1

A2

q1,w2,q2

A3

q2,w3,q3

n1,q1,   1

X

B1

n2,q2,   2

X

n3,q3,   3

X

B2

B3

3.3 Some constants
The code for such a problem can be constructed as follows. First, the data is read, turned into a
matrix, and some constants are deﬁned.

(def mydata (read-data-columns "ex-mdlm.dat"))
(def data (make-array ’(6 35) :initial-contents mydata))

(def v
#2a(

)

)

(def w
#2a(

(
(
(
(
(
(

(
(
(
(
(
(

2420.36
387.330
20.3907
165.274
44.5645
58.6081

1112.49
272.473
22.5176
66.4472
31.5611
27.8440

)

)

387.330
263.850
3.85480
71.5054
23.4794
3.26543

272.473
195.499
11.5298
30.0701
18.5065
15.3737

20.3907
3.85480
30.7910
3.58376
1.25836
5.98943

22.5176
11.5298
29.6411
5.53985
4.66797
6.27591

165.274
71.5054
3.58376
139.715
23.1193
11.3268

66.4472
30.0701
5.53985
78.9076
14.0421
8.03411

11

44.5645
23.4794
1.25836
23.1193
50.0087
4.78345

31.5611
18.5065
4.66797
14.0421
40.5035
7.32038

58.6081
3.26543
5.98943
11.3268
4.78345
44.2135

27.8440
15.3737
6.27591
8.03411
7.32038
32.9728

)
)
)
)
)
)

)
)
)
)
)
)

(def e0 (coerce (repeat 50 6) ’array))
(def ee0 (coerce (append (repeat 50 12) (repeat 0 6)) ’array))
(def w0 (diagonal (repeat 900 6)))
(def zero66 (diagonal (repeat 0 6)))

These are all self-explanatory.

3.4 Deﬁning the clique-tree

We can now create the type B cliques as follows.

(dolist (i (iseq 1 35))

(create-tree-node

(intern (format nil "b˜a" i))
(list (intern (format nil "x1.˜a" i))

(intern (format nil "x2.˜a" i))
(intern (format nil "x3.˜a" i))
(intern (format nil "x4.˜a" i))
(intern (format nil "x5.˜a" i))
(intern (format nil "x6.˜a" i))
(intern (format nil "theta1.˜a" i))
(intern (format nil "theta2.˜a" i))
(intern (format nil "theta3.˜a" i))
(intern (format nil "theta4.˜a" i))
(intern (format nil "theta5.˜a" i))
(intern (format nil "theta6.˜a" i))
(intern (format nil "nu1.˜a" i))
(intern (format nil "nu2.˜a" i))
(intern (format nil "nu3.˜a" i))
(intern (format nil "nu4.˜a" i))
(intern (format nil "nu5.˜a" i))
(intern (format nil "nu6.˜a" i))
)

ee0
(bind-rows (bind-columns
(+ w0 (* w i) v)
(+ w0 (* w i))
v)

(bind-columns

(+ w0 (* w i))
(+ w0 (* w i))
zero66)

(bind-columns

v
zero66
v)

)

(if (= i 35)

(list (intern (format nil "a˜a" i)))

(list (intern (format nil "a˜a" i))

(intern (format nil "a˜a" (+ i 1))))

)

))

(dolist (i (iseq 1 35))

(create-tree-node

(intern (format nil "a˜a" i))
(list (intern (format nil "theta1.˜a" (- i 1)))
(intern (format nil "theta2.˜a" (- i 1)))
(intern (format nil "theta3.˜a" (- i 1)))
(intern (format nil "theta4.˜a" (- i 1)))
(intern (format nil "theta5.˜a" (- i 1)))
(intern (format nil "theta6.˜a" (- i 1)))
(intern (format nil "theta1.˜a" i))

12

Note that the expression (intern (format nil "b˜a" i)) means “create the Lisp
symbol bi, where i is a variable”. This trick is used a lot for the construction of big models with a
repetitive structure. Next, the type A cliques can be constructed, in a very similar way.

(intern (format nil "theta2.˜a" i))
(intern (format nil "theta3.˜a" i))
(intern (format nil "theta4.˜a" i))
(intern (format nil "theta5.˜a" i))
(intern (format nil "theta6.˜a" i))

(intern (format nil "omega1.˜a" i))
(intern (format nil "omega2.˜a" i))
(intern (format nil "omega3.˜a" i))
(intern (format nil "omega4.˜a" i))
(intern (format nil "omega5.˜a" i))
(intern (format nil "omega6.˜a" i))
)

ee0
(bind-rows (bind-columns
(+ w0 (* w (- i 1)))
(+ w0 (* w (- i 1)))
zero66)

(bind-columns

(+ w0 (* w (- i 1)))
(+ w0 (* w i))
w)

(bind-columns

zero66
w
w)

)

(if (= i 1)

)

))

(list (intern (format nil "b˜a" i)))

(list (intern (format nil "b˜a" i))

(intern (format nil "b˜a" (- i 1))))

3.5 Deﬁning the moral graph

Next, moral graph nodes need to be created, for diagnostic plotting purposes. Since there isn’t
room on the average computer screen for the moral graph for all 35 time point, the structure will
only be constructed for the ﬁrst 8 time points only.

(send (symbol-value (intern "theta.0")) :location (list (/ 1 (+ plotnum 2)) 0.4))
(dolist (i (iseq 1 plotnum))
;; create the theta node
(create-moral-node (intern (format nil "theta.˜a" i))

(list (intern (format nil "theta1.˜a" i))

;; number of moral nodes to create and plot
(def plotnum 8)
(create-moral-node (intern "theta.0")

(list (intern "theta1.0")

(intern "theta2.0")
(intern "theta3.0")
(intern "theta4.0")
(intern "theta5.0")
(intern "theta6.0"))

(intern "a1")
"Theta(0)"
(list (intern "theta.1")

(intern "omega.1"))

)

(intern (format nil "theta2.˜a" i))
(intern (format nil "theta3.˜a" i))
(intern (format nil "theta4.˜a" i))
(intern (format nil "theta5.˜a" i))
(intern (format nil "theta6.˜a" i)))

(intern (format nil "b˜a" i))
(format nil "Theta(˜a)" i)
(if (< i plotnum)

(list (intern (format nil "omega.˜a" i))

(intern (format nil "nu.˜a" i))
(intern (format nil "x.˜a" i))

13

(intern (format nil "theta.˜a" (- i 1)))
(intern (format nil "theta.˜a" (+ i 1)))
(intern (format nil "omega.˜a" (+ i 1)))
)
(list (intern (format nil "omega.˜a" i))

(intern (format nil "nu.˜a" i))
(intern (format nil "x.˜a" i))
(intern (format nil "theta.˜a" (- i 1)))
)

)

)

(send (symbol-value (intern (format nil "theta.˜a" i))) :location

(list (* (+ i 1) (/ 1 (+ plotnum 2))) 0.4)
)

;; create the omega node
(create-moral-node (intern (format nil "omega.˜a" i))

(list (intern (format nil "omega1.˜a" i))

(intern (format nil "omega2.˜a" i))
(intern (format nil "omega3.˜a" i))
(intern (format nil "omega4.˜a" i))
(intern (format nil "omega5.˜a" i))
(intern (format nil "omega6.˜a" i)))

(intern (format nil "a˜a" i))
(format nil "Omega(˜a)" i)
(list (intern (format nil "theta.˜a" i))

(intern (format nil "theta.˜a" (- i 1))))

(send (symbol-value (intern (format nil "omega.˜a" i))) :location

(list (* (+ i 0.5) (/ 1 (+ plotnum 2))) 0.2)
)

;; create the nu node
(create-moral-node (intern (format nil "nu.˜a" i))

(list (intern (format nil "nu1.˜a" i))

(intern (format nil "nu2.˜a" i))
(intern (format nil "nu3.˜a" i))
(intern (format nil "nu4.˜a" i))
(intern (format nil "nu5.˜a" i))
(intern (format nil "nu6.˜a" i)))
(intern (format nil "b˜a" i))
(format nil "Nu(˜a)" i)
(list (intern (format nil "theta.˜a" i))

(intern (format nil "x.˜a" i)))

(send (symbol-value (intern (format nil "nu.˜a" i))) :location

(list (* (+ i 0.5) (/ 1 (+ plotnum 2))) 0.6)
)

;; create the x node
(create-moral-node (intern (format nil "x.˜a" i))

(list (intern (format nil "x1.˜a" i))

(intern (format nil "x2.˜a" i))
(intern (format nil "x3.˜a" i))
(intern (format nil "x4.˜a" i))
(intern (format nil "x5.˜a" i))
(intern (format nil "x6.˜a" i)))
(intern (format nil "b˜a" i))
(format nil "X(˜a)" i)
(list (intern (format nil "theta.˜a" i))

(intern (format nil "nu.˜a" i)))

(send (symbol-value (intern (format nil "x.˜a" i))) :location

(list (* (+ i 1) (/ 1 (+ plotnum 2))) 0.8)
)
)

The plots can now be created in the usual way.

(create-moral-plot ’myplot)
(create-global-moral-plot ’myplot2)

)

)

)

14

3.6 Adjustments

The ﬁrst 6 weeks of observations will be added into the model.

;; Sequentially introduce the data
(dolist (i (iseq 1 6))
(format t "˜&Data for week ˜a" i)
(send (symbol-value (intern (format nil "b˜a" i))) :observe

(list

(intern (format nil "x1.˜a" i))
(intern (format nil "x2.˜a" i))
(intern (format nil "x3.˜a" i))
(intern (format nil "x4.˜a" i))
(intern (format nil "x5.˜a" i))
(intern (format nil "x6.˜a" i))

)

(select (column-list data) (- i 1))
)

(send myplot :record)
(send (symbol-value (intern (format nil "b˜a" i))) :absorb)
)

The resulting plot windows give a good impression of the adjustment process, and the way

information ﬂows forward and backwards through time in such models.

15

Omega(1)

Omega(2)

Omega(3)

Omega(4)

Omega(5)

Omega(6)

Omega(7)

Omega(8)

Theta(0)

Theta(1)

Theta(2)

Theta(3)

Theta(4)

Theta(5)

Theta(6)

Theta(7)

Theta(8)

Nu(1)

Nu(2)

Nu(3)

Nu(4)

Nu(5)

Nu(6)

Nu(7)

Nu(8)

X(1)

X(2)

X(3)

X(4)

X(5)

X(6)

X(7)

X(8)

16

Omega(1)

Omega(2)

Omega(3)

Omega(4)

Omega(5)

Omega(6)

Omega(7)

Omega(8)

Theta(0)

Theta(1)

Theta(2)

Theta(3)

Theta(4)

Theta(5)

Theta(6)

Theta(7)

Theta(8)

Nu(1)

Nu(2)

Nu(3)

Nu(4)

Nu(5)

Nu(6)

Nu(7)

Nu(8)

X(1)

X(2)

X(3)

X(4)

X(5)

X(6)

X(7)

X(8)

The ﬁle included as part of the distribution then goes on to extract the adjusted expectations of

the residuals, and plot them on a line graph. See the example source ﬁle for more details.

4 Important note/Disclaimer

It is important to note that BAYES-LIN is a rapidly developing prototype system, and does contain
many bugs. You should not rely on BAYES-LIN producing correct output, and should verify parts
of calculations as far as possible, using alternative software, such as [B/D] (see [10]). The author
accepts no liability whatsoever regarding the use of BAYES-LIN, errors or losses arising from the
use of BAYES-LIN, etc. Feel free to check the source code, correct it, and email the corrections to
the author.

17

5 Command reference

This section lists all global variables, functions, object prototypes and methods deﬁned by the
BAYES-LIN system. On-line help is available. To obtain help on a global function, eg. create-
moral-node use the expression (help ’create-moral-node) To obtain help for a method,
eg. the :observe method of the moral-node-proto object, use the expression
(send moral-node-proto :help :observe).

5.1 Global variables

Variable

Description

*tree-nodes* A list of symbols representing instances of tree-node objects cre-

ated using the create-tree-node global function.

*moral-nodes* A list of symbols representing instances of moral-node objects

created using the create-moral-node global function.

5.2 Global functions

Function

Description

create-tree-node A function to create and initialise clique-tree objects.
create-moral-node A function to create and initialise moral graph objects.
create-moral-plot A function to create a graphics window for illustrating and diag-

ginv

nosing Bayes linear adjustments.
Function to return the Moore-Penrose generalised inverse of a real
square symmetric matrix.

5.3 Object prototypes

Object prototype
tree-node-proto

moral-node-proto

moral-plot-proto

Description
The prototype for objects representing clique-
tree nodes.
The prototype for objects representing moral
graph nodes.
The prototype for a graphics window object for
the displaying of information relating to current
Bayes linear adjustments.

global-moral-plot-proto A plot to summarise the partial adjustments

shown on the moral-plot-proto plots.

18

5.3.1 tree-node-proto slots and methods

Slot
name
variables
neighbours
variance

Description
The name of the object.
List of random variables associated with this tree-node object.
List of neighbouring junction tree nodes.
Variance matrix associated with the variable list.

expectation Expectation vector associated with the variable list.

Var (D) −1
var-d-inv
cov-d-self Cov (D, ·)

obs-vars
obs-d-ed
location

D
d − E (D)
On a (0, 1) × (0, 1) scale for plotting.

Method
:absorb
:aex
:avar
:cov
:ex
:info
:location
:observe
:positions
:propagate

Description
Absorb information from last :observe ready for next observe.
Adjusted expectation.
Adjusted variance.
Current covariance.
Current expectation.
Prints some information relating to the object.
Accessor method.
Method to introduce data to the tree.
Variable positions.
Method used to propagate information around the tree.

:remove-neighbour Remove a neighbour from the list.

:resolution
:rvar
:size-ratio
:transform
:var

Partial resolution for the current adjustment.
Resolved variance matrix.
Partial size-ratio for the current adjustment.
Partial resolution transform for the current adjustment.
Current variance matrix.

5.3.2 moral-node-proto slots and methods

Slot
name
variables
tree-node

Description
Name of the object.
List of random variables associated with this moral node object.
Name of a tree-node which contains all of the variables in this
moral node.
A string for plotting purposes.
A list of neighbouring moral graph nodes.
On a (0, 1) × (0, 1) scale for plotting.
Inverse of the a priori variance matrix for the variables repre-
sented by this node.
The prior expectation vector for this node.
List of resolutions for the partial adjustments.
List of partial size-ratios for the adjustments.
global-size-ratios List of global size-ratios for the adjustments.

print-name
neighbours
location
var_b_inv

ex_b
resolutions
size-ratios

19

Method
:absorb
:aex
:avar
:bearing
:ex
:info
:location
:observe

Description
Absorb info ready for next :observe.
Adjusted expectation vector.
Adjusted variance matrix.
Bearing vector.
Current expectation vector.
Prints some info about the object.
Accessor method.
Introduce data into the graph.

:remove-neighbour Remove a node from the neighbour list.
Partial resolution wrt a priori structure.
Partial resolved variance matrix.
Partial size-ratio.
:global-size-ratio Global size-ratio.

:resolution
:rvar
:size-ratio

:transform
:tree-node
:var

Partial resolution transform.
Accessor method.
Current variance matrix.

5.3.3 moral-plot-proto slots and methods

This object inherits all slots and methods from graph-window-proto, but also has the follow-
ing.

Slot
nodes

Description
List of nodes to be plotted.

real-size Window size.

radius

Node radius (scaled).

diagnostics Flag for diagnostic plotting.
node-labels Flag for node label printing.

outlines

Flag for node outline printing.

Method
:plot-arcs
:plot-node
:r-to-s
:record
:redraw
:resize
:s-to-r
:sr-map

Description
Draw the arcs associated with a given node.
Draw the given node, and all its shadings.
Take “real” (screen) coords to scaled coords.
Record current adjustment information for inclusion in the plot.
Guess!
Recalculate scale parameters.
Scaled to real coord transform.
Function which maps (0, ¥ ) to (−1, 1) monotonically, mapping 1
to 0. This is the function used to transform size ratios for red and
blue diagnostic shadings.

:diagnostics Set and unset diagnostics plotting.
:node-labels Set and unset node label printing.
Set and unset node label printing.

:outlines

5.3.4 global-moral-plot-proto slots and methods

This object inherits all slots and methods from moral-plot-proto and has no others.

20

References

130, 1981.

[1] M. Farrow and M. Goldstein. Bayes linear methods for grouped multivariate repeated mea-

surement studies with application to crossover trials. Biometrika, 80(1):39–59, 1993.

[2] M. Goldstein. Revising previsions: a geometric interpretation. J. R. Statist. Soc., B:43:105–

[3] M. Goldstein. Revising exchangeable beliefs: subjectivist foundations for the inductive ar-
gument. In P. Freeman and A.F.M. Smith, editors, Aspects of Uncertainty: A Tribute to D. V.
Lindley. Wiley, 1994.

[4] M. Goldstein. Bayes linear methods I - Adjusting beliefs: concepts and properties. Technical

Report 1995/1, Department of Mathematical Sciences, University of Durham, 1995.

[5] M. Goldstein. Prior inferences for posterior judgements. In M. L. D. Chiara et al., editors,

Structures and norms in science. Pordrecht Kluwer, 1997.

[6] M. Goldstein and D. A. Wooff. Bayes linear computation: concepts, implementation and

programming environment. Statistics and Computing, 5:327–341, 1995.

[7] J. Pearl. Probabilistic reasoning in intelligent systems. Morgan Kaufmann, 1988.

[8] L. Tierney. LISP-STAT: An object oriented environment for statistical computing and dynamic

graphics. Wiley, 1990.

[9] D. J. Wilkinson and M. Goldstein.

for multivariate dynamic linear models.
http://www.ncl.ac.uk/˜nstat/preprints/, 1997.

Bayes linear covariance matrix adjustment
U. Ncle. Stats. Tech. report STA97,12,

[10] D. A. Wooff and M. Goldstein. [B/D] — Beliefs adjusted by Data: Bayes linear methods pro-
gramming language. Internet site http://fourier.dur.ac.uk:8000/stats/bd/,
1995.

21

