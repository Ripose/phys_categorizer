The PAX Toolkit and its Applications
at Tevatron and LHC

Steffen Kappler, Martin Erdmann, Ulrich Felzmann, Dominic Hirschb¨uhl,
Matthias Kirsch, G¨unter Quast, Alexander Schmidt and Joanna Weng

5
0
0
2
 
c
e
D
 
3
2
 
 
]
n
a
-
a
t
a
d
.
s
c
i
s
y
h
p
[
 
 
1
v
2
3
2
2
1
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Abstract— At the CHEP03 conference we launched the Physics
Analysis eXpert (PAX), a C++ toolkit released for the use in
advanced high energy physics (HEP) analyses. This toolkit allows
to deﬁne a level of abstraction beyond detector reconstruction
by providing a general, persistent container model for HEP
events. Physics objects such as particles, vertices and collisions
can easily be stored, accessed and manipulated. Bookkeeping
of relations between these objects (like decay trees, vertex and
collision separation, etc.) including deep copies is fully provided
by the relation management. Event container and associated
objects represent a uniform interface for algorithms and facilitate
the parallel development and evaluation of different physics
interpretations of individual events. So-called analysis factories,
which actively identify and distinguish different physics processes
and study systematic uncertainties, can easily be realized with the
PAX toolkit.

PAX is ofﬁcially released to experiments at Tevatron and
LHC. Being explored by a growing user community, it is applied
in a number of complex physics analyses, two of which are
presented here. We report the successful application in studies of
t¯t production at the Tevatron and Higgs searches in the channel
t¯tH at the LHC and give a short outlook on further developments.

Index Terms— particle physics analysis, reconstruction of com-

plex events, event container model, C++ toolkit;

I. INTRODUCTION

P HYSICS analyses at modern collider experiments enter

a new dimension of event complexity. At the LHC, for
instance, physics events will consist of the ﬁnal state products
of the O(20) collisions taking place during each readout
cycle. In addition, a number of physics questions is studied
in channels with complex event topologies and conﬁguration
ambiguities occurring during event analysis.

One item in the long list of examples is a channel of t-
quark associated Higgs production, t¯tH with H → b¯b (see
Fig. 1.a). The event topology of four b-jets, two light-quark-jets,
an isolated muon, missing energy and possible additional jets
from initial state radiation (ISR) and ﬁnal state radiation (FSR)
imposes highest demands on detectors and reconstruction al-
gorithms. In addition, non-trivial ambiguities must be resolved
during event analysis. Even if all ﬁnal state products could

Manuscript submitted to IEEE Trans. Nucl. Sci., November 15, 2004, revised

July 22, 2005.

S. Kappler, M. Erdmann and M. Kirsch are with III. Physikalisches Insti-

tut A, RWTH Aachen, Germany.

U. Felzmann, D. Hirschb¨uhl, G. Quast, A. Schmidt and J. Weng are with
Institut f¨ur Experimentelle Kernphysik, Universit¨at Karlsruhe (TH), Germany.

Contact: steffen.kappler@cern.ch

Fig. 1
A) ASSOCIATED HIGGS PRODUCTION IN THE CHANNEL t¯tH WITH H → b¯b
AND t¯t → W W b¯b → qq′ µ¯νµ b¯b. B) THE VISIBLE RECONSTRUCTED
PARTONS OF THIS CHANNEL.

be reconstructed perfectly (as illustrated in Fig. 1.b) and no
ISR or FSR effects occured, at least 24 different conﬁgurations
would be possible. Finite jet resolutions, limited efﬁciency and
purity of the b-tagging as well as the presence of additional jets
complicate ambiguity resolution and signal identiﬁcation.

This task can be approached with a likelihood method based
on characteristical event variables, where each possible event
conﬁguration is developed individually and rated with the
likelihood function; the most probable of all interpretations
ﬁnally is selected.

Such an approach can be implemented by object-oriented
coding and suggests the use of a class collection, that provides
event containers for the reconstructed objects (muons, jets,
missing energy, vertices, collisions, etc.) and handles relations
between the individual objects (as, for instance, vertex relations
for particle decays). Due to the large number of ambiguities
occurring during the reconstruction of t¯tH events, these classes
are required to offer automated copy functionality for contain-
ers, objects and corresponding relations.

The application of a generalized event container comes with
a number of desirable side-effects. If used to deﬁne an abstrac-
tion interface between the output of event generator, simulation
or reconstruction software and the physics analysis code, the
latter is protected from changes in the underlying software
packages to a large extent. This reduces code maintainance and
increases code lucidity. In addition, unnecessary duplication

of the analysis code can be avoided: so can the inﬂuence of
detector effects (studied by direct comparison of the results on
generator, simulation and on real data level) be investigated ad
hoc, i.e. with the same analysis source code.

the same runtime,

Analysis factories, in which a number of analyses are ex-
ecuted at
identifying and distinguishing
different physics processes or studying systematic uncertainties,
can easily be realized when using common physics objects and
a common event container model in each of the analyses.

Analysis environments based on a well-deﬁned, generalized
event container also provide a basis for efﬁcient team work.
Collaboration in (and supervision of) groups of students is facil-
itated, and knowledge transfer between subsequent generations
of analysts as well as between different experiments is fostered.
In this article, we present the Physics Analysis eXpert (PAX),
a C++ toolkit for particle physics analysis that provides such
a generalized event container together with various built-on
functionalities.

II. THE PAX CLASS STRUCTURE

The PAX kernel, introduced in the year 2002 [1] and released
at the CHEP03 conference in 2003 [2], is currently available
as 2.00 version. For the convenience of connecting to existing
software packages, PAX is realized in the C++ programming
language [3]. It provides additional functionality in top of the
vector algebra of the widely-spread libraries CLHEP [4] or
ROOT [5].1 The PAX container model as well as ﬁle I/O are
based on the C++ Standard Template Library (STL) [3].

The PAX toolkit provides three types of generalized physics

objects:

tex,

• particles (or reconstructed objects), i.e. Lorentz-vectors,

represented by the class PaxFourVector,

• vertices, i.e. three-vectors, represented by the class PaxVer-

• and collisions, represented by the class PaxCollision.
These objects are able to establish relations, and can be
stored and managed in event containers, represented by the
PaxEventInterpret class.

A. Physics objects

The PaxFourVector class (see Fig. 2) represents particles or
reconstructed objects (such as muons, electrons, missing en-
ergy, jets etc.). It inherits its basic Lorentz-vector characteristics
from the well-known libraries CLHEP or ROOT. Commonly
needed, additional properties such as particle-id, status, charge
etc. can be stored in data members. Speciﬁc information (such
as b-tags, jet cone sizes or energy corrections, for instance)
can be stored in the so-called user records. User records
are collections of string-double pairs, meant to hold object
information complementary to data members.

PaxLorentzVector

PaxFourVector

getPaxId()
getPaxName()
getParticleId()
getStatus()
getCharge()
getMass()
getSimulated()
getBoostVector()
getWorkflag()

setPaxName(string)
setParticleId(int)
setStatus(int)
setCharge(double)
setMass(double)
setSimulated(int)
setBoostVector(...)
setWorkflag(int)

getUserRecords()
findUserRecord(...)
removeUserRecord(...)
setUserRecord(...)

print()
printDecayTree()
printFourVector()

getCollisionRelations()
getBeginVertexRelations()
getEndVertexRelations()
getFourVectorRelations()
...

lock()
unlock()
IsLocked()

...

PaxCollisionRelations

PaxBeginVertexRelations

PaxFourVectorRelations

PaxEndVertexRelations

Fig. 2
THE PaxFourVector CLASS EXTENDS THE BASIC FUNCTIONALITIES OF THE

PaxLorentzVector IN ORDER TO REPRESENT PARTICLES IN HEP DECAYS.

All PAX physics objects own user records (instances of the
class PaxUserRecord) and provide methods for quick access
to individual user record entries. Each instance of a PAX
physics object carries an unique integer key (the so-called
PaxId) and a string name (the so-called PaxName). An integer
workﬂag facilitates tagging of individual objects. Print methods
are provided to allow monitoring of object state and established
relations on various verbosity levels. Copy constructors are
provided to perform deep copies of PAX physics objects.

The PaxVertex class, sketched in Fig. 3, represents the spatial
point of decays in particle reactions. Thus, in analogy with the
PaxFourVector, it obtains its basic three-vector characteristics
also from the CLHEP or ROOT package.

The PaxCollision class (see Fig. 4) allows the separation of
collisions in multicollision events, as they occur at high-rate
hadron colliders. It provides the relation management necessary
to associate PaxVertex and PaxFourVector objects with different
collisions in the event.

B. Access to primordial C++ classes

1At compile-time, the user can choose between the vector algebra packages
of CLHEP [4] (default) or ROOT [5]. Depending on a compiler switch, the
two type deﬁnitions PaxLorentzVector and PaxThreeVector are set to Hep-
LorentzVector and Hep3Vector of CLHEP or to TLorentzVector and TVector3
of ROOT.

Each PAX physics object can record pointers to an arbitrary
number of instances of arbitrary C++ classes. This way, the
user can keep track of the data origin within the detector
reconstruction software, for instance. Access to the pointers

PaxThreeVector

PaxVertex

getPaxId()
getPaxName()
getStatus()
getWorkflag()

setPaxName(string)
setStatus(int)
setWorkflag(int)

getUserRecords()
findUserRecord(...)
removeUserRecord(...)
setUserRecord(...)

print()
printDecayTree()
printVertex()

getCollisionRelations()
getVertexRelations()
getIncomingFourVectorRelations()
getOutgoingFourVectorRelations()
...

lock()
unlock()
IsLocked()

...

PaxCollisionRelations

PaxVertexRelations

PaxIncomingFourVectorRelations

PaxOutgoingFourVectorRelations

Fig. 3
THE PaxVertex CLASS EXTENDS THE BASIC FUNCTIONALITIES OF THE

PaxThreeVector IN ORDER TO REPRESENT VERTICES IN HEP PARTICLE

DECAYS.

PaxCollision

getPaxId()
getPaxName()
getStatus()
getWorkflag()

setPaxName(string)
setStatus(int)
setWorkflag(int)

getUserRecords()
findUserRecord(...)
removeUserRecord(...)
setUserRecord(...)

getCollisionRelations()
getVertexRelations()
getFourVectorRelations()
...

print()
printDecayTree()
printCollision()

lock()
unlock()
IsLocked()

...

PaxCollisionRelations

PaxVertexRelations

PaxFourVectorRelations

Fig. 4
THE PaxCollision CLASS REPRESENTS COLLISIONS IN BUNCH CROSSINGS

AT HIGH LUMINOSITY COLLIDERS. BESIDES STORAGE OF GENERAL
PROPERTIES, THE PaxCollision ALLOWS THE USER TO ESTABLISH AND

MANAGE RELATIONS TO PaxVertex AND PaxFourVector OBJECTS.

PaxExperimentClass

virtual clone()

PaxExperiment<    >

Type

PaxExperiment(      ptr)
Type* getData()
clone()

Type*

THE CLASSES PaxExperimentClass AND PaxExperiment<Type> PROVIDE

RECORDING OF ARBITRARY POINTERS WITH PAX OBJECTS.

Fig. 5

is possible at the same runtime during any later stage of the
analysis. A typical use case is the need to re-ﬁt a track which
requires access to the hits in the tracking chamber. The PAX
object that represents this track, i.e. a PaxFourVector instance,
provides the two template methods addPointer<Type>(name,
ID, pointer) and ﬁndPointer<Type>(name, ID). The argument
name is supposed to correspond to the C++ class name, e.g.
Type, the argument ID is a unique integer identiﬁer for the
referenced instance of the C++ class Type, and the third
argument is a pointer to this instance.

The mechanism behind is sketched in Fig. 5. The class
template PaxExperiment<Type> provides storage, access, and
clone of the pointer of type Type. Its base class PaxExperi-
mentClass is used as the interface to the PAX classes which
are enabled to store and access the pointer through the C++
dynamic_cast operator.

When copying a PAX physics object, all pointers are copied

as well by making use of the clone() method.

C. Relation management

The principal duty of the PAX relation management
is
handling of decay trees. The manager is based on the Mediator
design pattern, described in detail in reference [6]. In this design
all relations are kept locally (i.e. every object knows about all
their directly related objects), so that global relation directories
can be avoided.

Speaking of PAX physics objects, this means, that each Pax-
Collision object owns relation managers (see Fig. 6) that carry
pointers to the related PaxVertex and PaxFourVector objects.
At the same time, the PaxVertex objects hold pointers to their
related PaxCollisions as well as to their incoming and outgoing
PaxFourVectors. By the same token, PaxFourVectors know
about their related PaxCollisions and about their begin and end
PaxVertex objects. With this functionality, PAX allows to store
complete multicollision events from parton to stable particle
level, including four-momenta and spatial vertex information.
In addition, the PAX relation management is used to record
analysis histories: each object, which is copied via copy con-
structors, keeps pointers to its original instances. This way the
user may always go back and ask for original properties of

PaxRelationManager <key, item>

PaxEventInterpret

PaxCollisionRelations

PaxFourVectorRelations

PaxVertexRelations

PaxIncomingFourVectorRelations

PaxBeginVertexRelations

PaxOutgoingFourVectorRelations

PaxEndVertexRelations

Fig. 6
THE PAX CLASSES FOR RELATION MANAGEMENT INHERIT FROM THE

CLASS PaxRelationManager.

Fig. 7
THE PAX CONTAINER CLASSES INHERIT FROM THE CLASS PaxMap.

getPaxId()
getPaxName()
getWorkflag()

setPaxName(string)
setWorkflag(int)

getUserRecords()
findUserRecord(...)
removeUserRecord(...)
setUserRecord(...)

print()

isolate()

add(...)
create(...)

getVertices()
findVertex(...)

getCollisions()
findCollision(...)
...

getFourVectors()
findFourVector(...)

...

PaxFourVectorMap PaxVertexMap PaxCollisionMap

Fig. 8
THE PaxEventInterpret CLASS REPRESENTS THE GENERALIZED CONTAINER

FOR COMPLETE HEP EVENTS. IT STORES AND HANDLES MULTIPLE

COLLISIONS, VERTICES AND PARTICLES AS WELL AS EVENT SPECIFIC
INFORMATION IN THE USER RECORDS.

objects which might have changed during the development of
the analysis.

A powerful feature, implemented by means of the relation
management, is the so-called locking mechanism. It is imple-
mented to enable the user to exclude parts of decay trees from
the analysis (i.e. excluding a lepton from a jet ﬁnding algorithm,
etc.). If one particle or vertex is locked, all the objects down
the decay tree (and the history) will be locked, too. Locking
and unlocking are relaized by setting or removing the lock-ﬂag
owned by each PAX physics object.

D. Maps & object containers

The PAX kernel provides the base classes PaxMap<key,
item> and PaxMultiMap<key, item>, which inherit from the
STL classes map<key, item> and multimap<key, item>, re-
spectively. The explicit inheritance has been chosen to provide
the use of existing STL objects and methods with these PAX
classes. This way, iterations of PAX maps can be performed by
using either the PAX iterator classes (PaxIterator, PaxMapIt-
erator, PaxMultiMapIterator) or the commonly known STL
iterators. All PAX classes which serve as containers are based
on the class PaxMap (see Fig. 7).

E. Event container

illustrated in Fig. 8,

The PaxEventInterpret class,

is the
generalized event container provided by PAX. By incorporating
the previously described functionalities, it is capable of holding
the complete information of one multicollision event with
decay trees, spatial vertex information, four-momenta as well
as additional reconstruction data in the user records. Physics
objects (i.e. instances of the classes PaxFourVector, PaxVertex

and PaxCollision) can be added or created with the Pax-
EventInterpret::add() and PaxEventInterpret::create() methods.
Depending on the object type, a pair of PaxId and Pointer to the
individual object is stored in one of three maps (PaxFourVec-
torMap, PaxVertexMap or PaxCollisionMap). Access to these
maps as well as direct access to the physics objects is guaran-
teed via methods such as PaxEventInterpret::getFourVectors()
and PaxEventInterpret::ﬁndFourVector(). At deletion of a Pax-
EventInterpret instance, all contained physics objects will be
deleted, too.

The PaxEventInterpret class is so named, because it
is
intended to represent a distinct interpretation of an event conﬁg-
uration (e.g. connecting particles to the decay tree according to
one out of a number of hypotheses, applying different jet energy
corrections, etc.). To facilitate the development of numerous
parallel or subsequent event interpretations, the PaxEventInter-
pret class features a copy constructor, which provides a deep
copy of the event container with all data members, physics
objects, and their (redirected) relations.

F. PAX ﬁle I/O

The PAX toolkit offers a ﬁle I/O scheme for persistent
storage of the event container, based on STL streams. It allows
the user to write the contents of PaxEventInterpret instances
with all contained physics objects2 as well as their relations to
PAX data ﬁles. When restoring the data from ﬁle, an empty
PaxEventInterpret instance is ﬁlled with the stored data and
objects and all object relations are reproduced.

2For obvious reasons, pointers recorded with PAX physics objects by means
of the PaxExperimentClass functionality (as described in section II-B) are not
stored to disk.

The PAX data ﬁle format provides multi-version and multi-
is built of a hierarchy of binary
platform compatibility. It
data chunks: the top level unit is an event, which consists
of an arbitrary number of event
interpretations. The event
interpretation chunk consists of data members, user records as
well as chunks for each of the contained physics objects. Each
chunk carries header information (one byte for unit type and
four bytes for data amount information) and the actual binary
data. This allows ﬁle structure checks and fast positioning.
Therefore, the user can quickly skip arbitrary numbers of events
in PAX data ﬁles, without having to sequentially read and
discard.

PAX also provides the possibility to write event units to
strings (and to restore the PaxEventInterpret instances from
those strings). This way, the user can store PAX objects to
any data format supporting strings or binary data ﬁelds (like
databases or experiment speciﬁc data formats).

G. Accessories and interfaces

As a complement

to the PAX kernel, we released two
accessory packages for reading standard event generator ﬁle
formats. The PaxTuple package provides transﬁlling of decay
trees stored in the HEPEVT or ROOT Ntuple data formats
to PaxEventInterpret containers. Accordingly, the PaxHepMC
package gives access to HepMC ﬁles.

In addition, interfaces developed and posted by PAX users,
that ﬁll PAX objects with speciﬁc data of HEP experiments,
are available via the PAX web page [7].

H. Software development procedure

The PAX kernel and its ofﬁcially supported accessories
are coded and maintained by a core group of currently six
developers at CERN and the Aachen and Karlsruhe universities.
New developments and code modiﬁcations pass a certiﬁcation
procedure and are discussed and adopted in regular video
meetings. As a guideline, new developments focus on aspects of
performance improvement and on user feedback. New releases
are to be backward compatible. Version management of the
software project
is handled with a web-browsable Version
Control System (CVS) [8] [9].

I. Availability, documentation and support

The continuously updated PAX web page [7] provides down-
load of the various versions of PAX kernel and accessories
(based on the aforementioned web-browsable CVS repository).
It also provides the PAX Users Guide [10], a comprehensive
text documentation of the PAX toolkit, as well as class refer-
ence and fast navigator pages for download or online use. The
web page also offers access to mailing lists, in which PAX users
are informed about new developments and in which technical
issues of PAX analyses can be discussed.

Fig. 9

ONE POSSIBLE REALIZATION OF A PHYSICS ANALYSIS WITH PAX; A
DEDICATED, EXPERIMENT-SPECIFIC CLASS FOR FILLING THE PAX

CONTAINERS REPRESENTS THE INTERFACE BETWEEN DETECTOR

RECONSTRUCTION SOFTWARE AND PAX-BASED PHYSICS ANALYSIS. THE
PAX PERSISTENCY SCHEME IS USED TO STORE THE DATA TO PAX DATA

FILES FOR LATER USE.

a)

b)

job control

job control

PAX-containers
filling class

Monte Carlo
event generator

PAX-containers
& PAX-objects

 

i

l

o
c
a

P
A
X

p
e
r
s

s
t
e
n
c
y

PAX-containers
& PAX-objects
h
a
r
d
d
s
s
k
t
o
PAX-based
r
a
physics analysis
C
g
e
D
R
O
O
T

e
t
c

l
 

Signal+Background

.

i

Background

2)

Background

Signal+Background

2)

PAX-based
physics analysis

h
a
r
d
d
s
k

 

i

C
D

l

o
c
a

l
 

s
t
o
r
a
g
e

p
e
r
s

i

s
t
e
n
c
y

P
A
X

e
t
c

.

R
O
O
T

Fig. 10
A) EXCHANGEABILITY OF THE FILLING CLASS ALLOWS PAX PHYSICS

ANALYSES TO BE APPLIED TO VARIOUS INPUT SOURCES, E.G. TO MONTE

CARLO EVENT GENERATOR DATA. B) THE USE OF PAX DATA FILES

ALLOWS FAST ANALYSIS OF THE RECONSTRUCTION DATA DECOUPLED

FROM THE EXPERIMENT-SPECIFIC ENVIRONMENT.

III. HOW PAX PHYSICS ANALYSES CAN BE STRUCTURED

To exploit the features offered by the PAX toolkit, physics
analyses might be realized, for instance, according to the
example structure illustrated in Fig. 9.

There, a dedicated, experiment-speciﬁc interface class for
ﬁlling the PAX containers (i.e. PaxEventInterpret instances)
represents the interface between detector reconstruction soft-
ware and PAX-based physics analysis. Once all relevant infor-
mation is ﬁlled, the analysis code is called, and the PAX objects
(as obtained by the ﬁlling class or at any subsequent stage of
the event analysis) can be stored persistently to PAX data ﬁles
for later use. Analysis results might be further processed with
help of the ROOT package.

With an analysis consistently formulated with PAX objects,
the ﬁlling class can be exchanged easily, and the identical
analysis code can be applied, for instance, directly to the output
of a Monte Carlo event generator or a fast simulation software,
see Fig. 10.a. Furthermore, the use of PAX data ﬁles, which
provide the distilled experimental event information, allows
fast analysis of the reconstruction data decoupled from the

experiment-speciﬁc software and data storage environment, see
Fig. 10.b.

IV. IMPLEMENTATION OF PAX INTO EXPERIMENT SPECIFIC
SOFTWARE ENVIRONMENTS

PAX has been made available within the software environ-
ments of the experiments CDF, D03 (both Tevatron) and CMS
(LHC).

Following the same principles, the integration of PAX into

the latter is described as a general example.

The PAX toolkit is provided by the CMS software environ-
ment as an external package [11], enabling the physicists inside
the CMS collaboration to use PAX without having to care about
installation or setup of the package.

An extensive example analysis for the use of PAX with the
detector reconstruction software ORCA [12] is included in the
CMS CVS repository [13]. In this example, the (ambiguous)
reconstruction of the partonic process of the decay W → µ¯νµ
is carried out by using reconstructed muons and missing trans-
verse energy. The missing information about the longitudinal
component of the neutrino momentum is obtained with a W -
mass constraint, which yields (up to) two analytical solutions,
and thus two possible event interpretations. Subsequently, both
interpretations are developed in two separate PaxEventInterpret
instances, and a number of example histograms is ﬁlled.

The class design of this example analysis is based on the
structure described in the previous section, including interface
classes for ﬁlling PaxEventInterpret containers with the recon-
structed objects of ORCA.

To facilitate the start-up for new PAX users, a tutorial video
for this example plus supplementary material can be found in
the CMS section of the PAX web page [14].

V. PAX PHYSICS ANALYSES FOR TEVATRON AND LHC

Provided for the software environments of the CDF, D0 and
CMS experiments, PAX is being explored by a growing user
community. In the following, two successful applications of
PAX in complex physics analyses are presented.

A. A PAX-based t¯t analysis for CDF

In this section, an analysis of top-antitop-quark events (t¯t
events) with the CDF experiment at Tevatron is described [15].
As illustrated in Fig. 11, the electron-plus-jet decay channel
shows similar combinatorial tasks as the aforementioned t¯tH
channel.

In this t¯t study, an analysis factory based on the PAX event
interpretation concept is used to perform complete reconstruc-
tion of the partonic scattering process and to optimize the
separation of signal and background processes.

The partonic process of the decay ¯t → W ¯b → e¯νe¯b is recon-
structed as follows. First, the W-boson decaying into electron
and neutrino is reconstructed. From the W-mass constraint two
possible solutions can be deduced for the longitudinal neutrino

3Interfaces to the D0 software are available as β-version since April 2005.

Fig. 11
THE CHANNEL t¯t ON PARTON LEVEL (A) AND THE VISIBLE
RECONSTRUCTED PARTONS OF THIS CHANNEL (B).

momentum. This results in two event interpretations for the W-
boson. Combining each of those with one of the jets leads to
the interpretations for the t-quark (with different kinematics and
reconstructed masses). The remaining part of the process, i.e.
t → W b → q ¯q′b, is reconstructed from three of the remaining
jets. Consequently, in a four jet t¯t event, 24 interpretations
can be constructed. The most likely t¯t event interpretation
is selected by ﬁrst demanding non-zero b-probability for one
of the jets of one of the t-quark candidates. Finally, one of
these solutions is selected by evaluating the most likely event
interpretation based on kinematic properties, the reconstructed
mass of the W boson decaying to q ¯q′, and the mass difference
of the two reconstructed t-quarks. The resulting example plots
are shown in Fig. 12.

B. A PAX-based t¯tH analysis for CMS

The channel of associated Higgs production, t¯tH with H →
b¯b, by means of which the requirements to a particle physics
analysis toolkit have been motivated in the introduction of this
article, is studied in the CMS experiment at the LHC [18] [19],
for instance.

The most recent of these studies makes use of the PAX event
interpretation concept to develop possible event interpretations
in a manner similar to the one described in the previous CDF
example. After development of all interpretations, a likelihood
function is used to select the most probable one by rating the
different conﬁgurations on the basis of kinematics variables and
masses of the two t-quarks and their decay products.

Fig. 13 illustrates the performance of this method in simu-
lations with and without detector effects. Please notice, that
Fig. 13.a and Fig. 13.b have been produced with the identical
analysis code, by simply exchanging the interface classes (com-
pare Fig. 9 and Fig. 10). In this way, a good measure for how
detector and reconstruction methods inﬂuence the results can
directly be obtained – with almost no analysis code duplication.

VI. CONCLUSIONS

The PAX toolkit is designed to assist physicists at modern
collider experiments in the analysis of complex scattering

[16] G. Corcella, I.G. Knowles, G. Marchesini, S. Moretti, K. Odagiri, P.
Richardson et al., HERWIG 6, JHEP 01 (2001) 010, hep-ph/0011363, 2001.
[17] E. Gerchtein, M. Paulini, CDF detector simulation framework and perfor-
mance, Proceedings of the 2003 Computing in High Energy and Nuclear
Physics (CHEP03), La Jolla (CA), USA, March 2003, physics/0306031,
2003.

[18] S. Abdullin, S. Banerjee, L. Bellucci, C. Charlot, D. Denegri, M. Dittmar
et al., Summary of the CMS Potential for the Higgs Boson Discovery,
CERN, CMS NOTE 2003/033, 2003.

[19] S. Kappler, Higgs Search Studies in the Channel t¯tH with the CMS
IEKP-KA

the LHC, PhD thesis at Karlsruhe university,

Detector at
2004/17, part I, 2004.

[20] T. Sj¨ostrand, P. Ed´en, C. Friberg, L. L¨onnblad, G. Miu, S. Mrenna,
E. Norrbin, High-Energy-Physics Event Generation with PYTHIA 6.1”,
hep-ph/0010017, 2001.

[21] Documentation online available: http://cmsdoc.cern.ch/cmsim/cmsim.html

processes. PAX provides a generalized HEP event container
with three types of physics objects (particles, vertices and
collisions), relation management and ﬁle I/O scheme.

The PAX event container is capable of storing the complete
information of multicollision events (including decay trees with
spatial vertex information, four-momenta as well as additional
reconstruction data). An automated copy functionality for the
event container allows the user to consistently duplicate event
containers with physics objects and relations. The PAX ﬁle
I/O scheme can be used to write (and read) complete event
containers to (from) disk ﬁle; this offers an easy realization
of distilled experiment data streams. By structuring physics
analyses based on PAX objects, the identical source code can
be applied to various data levels. This adds a desirable aspect
of ﬂexibility to the software-side of particle physics analysis.
PAX is available within the software environments of exper-
iments at Tevatron and LHC, where it is applied in a number
of physics analyses. Two thereof are outlined in this article,
demonstrating typical use cases and successful applications of
the PAX toolkit. Evident advantages arising from the usage of
the PAX toolkit are avoidance of code duplication, increased
code lucidity, uniﬁed data model and nomenclature, and there-
fore more efﬁcient team work in the complex physics analyses
at modern HEP experiments.

ACKNOWLEDGMENT

The authors would like to thank Rene Brun, Anne-Sylvie
Giolo-Nicollerat, Christopher Jung, Yves Kemp, Klaus Rab-
bertz, Jens Rehn, Sven Schalla, Patrick Schemitz, Thorsten
Walter, and Christian Weiser for helpful contributions and
feedback.

REFERENCES

[1] M. Erdmann et al., Physics Analysis Expert. Proceedings of the 14th
Topical Conference on Hadron Collider Physics, HCP2002, Karlsruhe,
Germany, 2002.

[2] M. Erdmann, D. Hirschb¨uhl, C. Jung, S. Kappler, Y. Kemp, M. Kirsch
et al., Physics Analysis Expert PAX: First Applications, physics/0306085,
2003.

[3] B. Stroustrup, The C++ Programming Language, Addison Wesley, ISBN

0-201-88954-2, 1997.

[4] Documentation online available: http://proj-clhep.web.cern.ch/proj-clhep/
[5] R. Brun et al., ROOT, an object oriented data analysis framework,
Proceedings of the 23rd CERN School of Computing, Marathon (Greece),
2000.

[6] E. Gamma et al., Design Patterns, Addison-Wesley, ISBN 0-201-63361-2,

1994.

[7] M. Erdmann, S. Kappler, M. Kirsch, A. Schmidt, PAX – Physics Analysis

eXpert, online documentation and support: http://cern.ch/pax

[8] Documentation online available: http://www.cvshome.org/
[9] CVS repository online available:

http://isscvs.cern.ch/cgi-bin/viewcvs-all.cgi/?cvsroot=pax

[10] M. Erdmann, S. Kappler, M. Kirsch, A. Schmidt, PAX Users Guide,

online available: http://cern.ch/pax

[11] Package available on AFS: //afs/cern.ch/cms/external/pax/
[12] Documentation online available: http://cmsdoc.cern.ch/orca/
[13] CVS repository online available: http://cmsdoc.cern.ch/swdev/viewcvs/

viewcvs.cgi/ORCA/Examples/ExPaxAnalysis/?cvsroot=ORCA

[14] M. Erdmann, S. Kappler, A. Schmidt, PAX Tutorial,

online available: http://cern.ch/pax

[15] D. Hirschb¨uhl, PhD thesis in preparation at Karlsruhe university.

Fig. 12
VERIFICATION OF THE t-QUARK RECONSTRUCTION IN GENERATED t¯t
EVENTS. THE FULL HISTOGRAMS SHOW RECONSTRUCTED PROPERTIES OF
THE EVENT INTERPRETATION WHICH REPRODUCES THE PARTONIC t¯t STATE
BEST. FURTHER INFORMATION RESULTS FROM THE SELECTION

PROCEDURE USING RECONSTRUCTED QUANTITES OF THE EVENT ONLY:
THE SYMBOLS REPRESENT THE SELECTED EVENT INTERPRETATION, THE

DASHED HISTOGRAM SUMMARIZES THE OTHER POSSIBLE

INTERPRETATIONS. A) RECONSTRUCTED MASS OF THE t-QUARK WITH A

SUBSEQUENT LEPTONIC W -DECAY. B) ANGULAR DISTRIBUTION OF THE

W -BOSON IN THE REST FRAME OF THE t-QUARK. C) ANGULAR

DISTRIBUTION OF THE CHARGED LEPTON IN THE REST FRAME OF THE

W -BOSON. (FOR THIS STUDY, THE HERWIG MONTE CARLO GENERATOR

[16] AND CDF DETECTOR SIMULATION [17] HAVE BEEN USED.)

Fig. 13
RECONSTRUCTED HIGGS MASS IN THE CHANNEL t¯tH WITH H → b¯b ON
GENERATOR (A) AND FULL SIMULATION LEVEL (B). THE GRAY SHADED

AREA CORRESPONDS TO THE COMBINATORIAL BACKGROUND, I.E. TO
THOSE EVENTS, IN WHICH A WRONG H → b¯b CONFIGURATION WAS
SELECTED. (FOR THIS STUDY, THE PYTHIA MONTE CARLO GENERATOR

[20] AND CMS DETECTOR SIMULATION [21] HAVE BEEN USED.)

