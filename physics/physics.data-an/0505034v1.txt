5
0
0
2
 
y
a
M
 
4
 
 
]
n
a
-
a
t
a
d
.
s
c
i
s
y
h
p
[
 
 
1
v
4
3
0
5
0
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Chapter 1

No need to blur the picture

Axel G. Rossberg
Yokohama National University, Japan
rossberg@ynu.ac.jp

A formalism specifying eﬃcient, “emergent” descriptions of experimental systems
is developed. It does not depend on an a priori assumption of limited available data.

1.1

Introduction

A complex systems can become an economical problem. Understanding its in-
ternal machinery, describing it, and predicting its future behaviour can be ex-
pensive. The problem of ﬁnding simple, accurate, and eﬃcient descriptions is a
central aspect of the work on complex systems. Perhaps it is the unifying aspect
of complex-systems science.

Interestingly, this practical problem is closely related to the philosophical
problem of emergence [8, 4]. Stated in its weakest form, this is the question
why, if the basic laws of physics are so simple, the world around us appears to
have such a rich structure. A partial answer that easily comes to mind is this: If
we would try to apply the basic laws every time we interpret the world around
us, it would just take too much time. Instead we are using other descriptions
that are more eﬃciently. But each applies only to a particular part of the world,
so we need many of them. In the language of computer science [7], we are trading
computation time for description length. Apparently, this is a good deal. The
structure of the world as we see it is a result of solving just the economic problem
mentioned above. We are reducing the cost of describing the complex system
“world”.

This is only a partial answer to the problem of emergence. Many questions
remain unanswered, such as, “Why are there distinct parts for which eﬃcient
descriptions exist?” or “Can eﬃcient descriptions be found systematically, and,

2

No need to blur the picture

if yes, how?”. But it is this partial answer that will be of interest here, for it is
itself incomplete.

Eﬃcient, simpliﬁed descriptions are rarely perfectly precise, and somehow a
decision has to be made which information about the thing described the descrip-
tion should reproduce, and which may be ignored. The conventional strategy to
proceed when arriving at this part of the problem (e.g.
[1, 2, 9]) is to presup-
posed that the information regarding the thing described is incomplete anyway,
and only the available information must be reproduced. This blurring of the
picture comes under many diﬀerent names: ﬁnite samples of noisy data, coarse
graining, partitioning of the state space, e.t.c.. As a result, the choice of the
simpliﬁed description becomes essentially a function of the mode of observation.
But does this correspond to the facts? The history of science knows many exam-
ples of simpliﬁed descriptions (and related concepts) that have been introduced
long before the things described could be observed. Obvious examples are de-
scriptions in terms of quasi-particles such as “holes” and “phonons” used in solid
state physics. On the other hand, descriptions that are much coarser than any
reasonable limit of observation are also frequently used. One might just think
of a description of traﬃc ﬂow in terms of atomic “cars”.

Shalizi and Moore [10] suggested a solution of this problem based on causal
states [3]. Here, a diﬀerent argument for reducing the information to be repro-
duced by a description is explored. Information regarding the thing described is
dropped not because it is unavailable, but for the sake of an eﬃcient and simple
description. Central to this argument is the distinction between two kinds of
descriptions: models, that produce data somehow similar to present or future
real data, and characterizations that summarize some aspects of data.

Predictions about complex systems generally require both: a model that is
used for the prediction, and a characterization that speciﬁes what aspects of
the real data the model is supposed to reproduce. By the condition that model
and characterization are both simple and eﬃcient, particular choices for the
information to be retained by the descriptions are singled out. This part of the
information is “relevant” for a simple reason: it can be predicted within given
cost constraints.

In the remainder of this work, it is shown that this approach can be taken be-
yond hand-waving. Formal deﬁnitions of basic notions are introduced. Desider-
ata for economic descriptions are summarized under the notion of basic model-
specifying characterizations (b.m.s.c.), and it is shown that nontrivial b.m.s.c.
exist. They are by far not unique. The accuracy and detail of preferred descrip-
tions depends on the available resources, and the formalism is taking this into
account. Results are illustrated by a minimal example.

1.2 The formalism

For the formal analysis, both models and characterizations are represented by
computer programs. The complex system to be described is represented by
a computer-controlled experiment. Fig. 1.1 illustrates the interaction between

No need to blur the picture

3

(a)

Control

Parameter

x ∈ C

rerun

Test

t

(cid:1)
(cid:0)
(cid:0)
(cid:1)

x ∈ C

y ∈ D

D/A

Experiment

A/D

(b) Control

x ∈ C

Parameter

x ∈ C

Model

g

rerun

Test

t

y ∈ D

Figure 1.1: (a) Generic setup of a computer-controlled experiment. (b) Data ﬂow in
a test of a computational model.

experimenter (the “Control Parameter” terminal), experiment, model, and char-
acterization. A characterization of data is given by a statement saying the data
passes a certain test; a statistical test in general.

Throughout the theory, assume a control parameter format C ⊂ {0, 1}n
and a data format D ⊂ {0, 1}m to be ﬁxed, with {0, 1}k denoting the set of
all binary strings of length k and n, m ∈ N0. Given a control parameter value
x ∈ C and being run, the experiment (including the D/A and A/D conversion)
produces an output value y ∈ D. Input and output data can be sets of numbers,
images, time-series, e.t.c.. The only major limitation is that both C and D are
ﬁnite sets. The A/D conversion of the experimental output naturally involves
some loss of information. But below it is argued that the information passing
through the A/D converter can be much richer than the information tested for
and being reproduced in the model. The information loss at the A/D converter
is not decisive for determining the “emergent” description.

In general, the complex system involved in the experiment is not determin-
istic. The experimental output y is a realization of a random variable Y with
values in D. The experiment is assumed reproducible in the sense that repeated
runs of the experiment (with identical x) yield a sequence Y1, Y2, . . . of statisti-
cally independent, identically distributed (i.i.d.) results.

Deﬁnition 1 For a given (deterministic) machine model, a test t is a program
that takes a control parameter x ∈ C as input, runs, and then halts with output
0, 1, or e. When the output is not e, the test can request several data samples
before halting (“rerun” in Fig. 1.1). Then execution of the test is suspended
until a sample y ∈ D is written into a dedicated storage accessible by the test.
The number of samples requested can depend on the sampled y but is ﬁnite for
any sequence of successive samples.

4

No need to blur the picture

By the output e the tests t indicates that x is not within the range of validity
C[t] := {x ∈ C|output of t with input x is not e} of the corresponding charac-
terization. The outputs 1 or 0 indicate that the null hypothesis (see below) is
accepted or rejected by the test, respectively.
Models are represented by generators.

Deﬁnition 2 Given a machine model, generator g is a program that takes a
control parameter x ∈ C as input, runs, outputs data y ∈ D and halts. The
program has access to a source of independent, evenly distributed random bits
in an otherwise deterministic machine.

Now a cost functions is introduced which measures the cost involved in run-
ning models g and tests t, constructing and evaluating them, and perform-
ing experiments. We assume that this cost can be expressed in terms of the
lengths L(t), L(g) ∈ N0 of the programs t and g, their average execution times
T (g), T (t) ∈ R≥0, and the average number N (t) ∈ R≥0 of experimental runs
required by t. To be speciﬁc, deﬁne T (·) as the maximum of the expectation
value of the runtime over all x ∈ C and all distributions of input data, N (·)
analogously. It can be shown that T (t) and N (t) are always ﬁnite. As conven-
tional, the number of tests or generators q with L(q) ≤ n is assumed to be ﬁnite
all n ∈ N0.

Deﬁnition 3 A cost function K is a mapping K : N0 × R≥0 → R≥0 or
K : N0 × R≥0 × R≥0 → R≥0 that increases strictly monotonically in all its
arguments. The abbreviation K(t) stands for K[L(t), T (t), N (t)] if t is a test
and K(g) stands for K[L(g), T (g)] if g is a generator.

In practice, the cost of descriptions depends strongly on the circumstances. The
theory should therefore be independent of the particular choice of the cost func-
tion. For this purpose, as is made clear by Theorem 3 below, the following
deﬁnition is convenient.

Deﬁnition 4 Let p1 and p2 be two tests or two generators. Then the relations
(cid:22) (always cheaper or equal) and ≺ (always cheaper) are deﬁned by

p1 (cid:22) p2

def
⇔ L(p1) ≤ L(p2) and T (p1) ≤ T (p2) and N (p1) ≤ N (p2)

(1.1)

(for generators without the last condition) and

p1 ≺ p2

def
⇔ p1 (cid:22) p2 and not p2 (cid:22) p1.

(1.2)

A test or generator p is said to be ≺-minimal in a set P of tests or generators

if p ∈ P and there is no p′ ∈ P such that p′ ≺ p.

Lemma 1 Relation (cid:22) is transitive and reﬂexive, relation ≺ is transitive and
antireﬂexive.

(Since (cid:22) is not antisymmetric, it is not a partial order.) The proof is standard.

No need to blur the picture

5

Lemma 2 For any two tests or generators p1, p2, and any cost function K,
p1 ≺ p2 implies K(p1) < K(p2).

Proof Assume that p1 and p2 are generators. Then L(p1) ≤ L(p2) and
T (p1) ≤ T (p2) and either L(p1) < L(p2) or T (p1) < T (p2), since if both
were equal the last part of condition (1.2) would be violated. Thus, using
the strict monotony of K, one has either K[L(p1), T (p1)] < K[L(p2), T (p1)] ≤
K[L(p2), T (p2)] or K[L(p1), T (p1)] ≤ K[L(p2), T (p1)] < K[L(p2), T (p2)]. Both
imply K(p1) < K(p2). For tests the proof is analogous.

Theorem 3 Let P be a set of tests or generators. p ∈ P is ≺-minimal in P if
and only if there is a cost function K that attains its minimum over P at p.

Proof The “if” part: If some K would attain its minimum over P at p but p
was not ≺-minimal, there would be a p′ ∈ P such that p′ ≺ p and, by Lemma 2,
K(p′) < K(p). But this contradicts the premise. So p is ≺-minimal.

The “only if” part: Assume p is ≺-minimal in a set of generators P . We show
that there is a cost function that attains its minimum over P at p by explicit
construction. K(l, t) := κ(l, L(p)) + κ(t, T (p)) with κ(z, z0) = z for z ≤ z0 and
κ(z, z0) = L(p) + T (p) + z for z > z0 does the job. Obviously K satisﬁes strict
monotony. And any p′ ∈ P that does not have L(p′) = L(p) and T (p′) = T (p)
[and hence K(p′) = K(p)] must have either a larger L or a larger T than p,
otherwise p would not be ≺-minimal. But then K(p′) ≥ L(p) + T (p) = K(p).
So K(p) is the minimum of K over P . For tests the proof is analogous.

Lemma 4 Every nonempty set P of tests or generators contains an element p
which is ≺-minimal in P .

Proof Assume that P has no ≺-minimal element. Then for every element
p ∈ P there is a p′ ∈ P such that p′ ≺ p. Thus an inﬁnite sequence of successively
always-cheaper (≺) elements of P can be constructed. Because ≺ is transitive
and antireﬂexive, such a sequence contains each element at most once. Let
q be the ﬁrst element of such a sequence. Since by deﬁnition p ≺ q implies
L(p) ≤ L(q), and there is only a ﬁnite number of programs q with L(q) ≤ L(p),
the number of successors of p cannot be inﬁnite. So the premise that P has no
≺-minimal element is wrong for any nonempty P .

The ≺-minimal element is generally not unique. Diﬀerent ≺-minima minimize
cost functions that give diﬀerent weight to the resources length, time, and, ex-
perimental runs used. On the other hand, it turns out that in practice the
machine dependence of relation ≺ for implementations of algorithms on diﬀer-
ent processor models is weak. Therefore, instead of cost functions, relation ≺ is
used below.

A central element of statistical test theory [6] is the power function. It is
deﬁned as the probability that the test rejects data of a given (usually parameter-
ized) distribution. The goal of statistical test theory is to ﬁnd tests who’s power

6

No need to blur the picture

function is below a given signiﬁcance level α if the null-hypothesis is satisﬁed,
and as large as possible otherwise.

Denote by the test function tx({yi}) the output of the test t at control
parameter x ∈ C[t] when applied to the sequence of experimental results {yi} ∈
D∞ (for formal simplicity, the sequences {yi} are assumed inﬁnite, even though
tests use only ﬁnite subsequences).

Deﬁnition 5 For any test t, the power of the test function tx, when applied
to the random sequence {Yi} with values in D∞, is the probability of rejecting
{Yi}, i.e.,

pow(tx, {Yi}) := Pr[tx({Yi}) = 0]

(x ∈ C[t]).

(1.3)

Unlike in conventional test theory, there is no independent null hypothesis H0
here that states the distribution or the class of distributions of {Yi} that is
tested for. Instead, given a test function tx, the null hypothesis, i.e., the class
of distributions, is deﬁned by the condition

pow(tx, {Yi}) ≤ α,

(1.4)

where 0 < α < 1 is a ﬁxed1 signiﬁcance level.

Now the concepts from statistics and computer science introduced above are
combined. Denote by gx the sequence {Yi} of random outputs of generator g at
control parameter x.

Deﬁnition 6 A generator g is an optimal generator relative to a test t and
a power threshold 1 > γ > α (notation: optγ

t g) if

1. pow(tx, gx) ≤ α for all x ∈ C[t] and

2. for every generator g′ ≺ g there is a x ∈ C[t] such that pow(tx, g′

x) > γ.

This implies that g is ≺-minimal in {g′|pow(tx, g′
x) ≤ α for all x ∈ C[t]}. Hence
g is, for some cost function, the minimal (-cost) model for the property that t
is testing for. Condition 2. can be satisﬁed only for particular choices of t. It
requires a minimal power γ from t to distinguish the models that it characterizes
from those is does not. Constructing tests that maximize γ leads to results
similar to the locally most powerful tests of statistical test theory [6].

For an i.i.d. random sequence {Yi} denote by p[{Yi}] the distribution function

of its elements, i.e., p[{Yi}](y) := Pr[Y1 = y] for y ∈ D.

Deﬁnition 7 Call a generator g an optimal implementation with respect
to a set ˜C ⊂ C if it is ≺-minimal in {g′|p[g′
x] ≡ p[gx] for all x ∈ ˜C} (the set of
generators that do exactly the same).

Theorem 5 For every ˜C ⊂ C, every optimal implementation g with respect to
˜C, and every 1 > γ > α there is, a test t such that optγ

t g and C[t] = ˜C.

1From tx tests for the same H0 at other signiﬁcance levels can be constructed.

No need to blur the picture

7

Proof An explicit construction of t is outlined: x ∈ ˜C can be tested for by
keeping a list of ˜C in t. Since there is only a ﬁnite number of g′ (cid:22) g, the test
must distinguish p[gx] from a ﬁnite number of diﬀerent distributions p[g′
x] for all
x ∈ ˜C, with power γ. This can be achieved by comparing a suﬃciently accurate
representation of p[gx], stored in t for all x ∈ ˜C, with a histogram obtained from
suﬃciently many samples of g′
x.

Deﬁnition 8 Call a pair (t, g) a basic model-specifying characterization
(b.m.s.c.) if t is ≺-minimal in {t′|optγ
t′ g and C[t] ⊂ C[t′]} for some 1 > γ > α.

That is, for some cost function the test t gives the minimal characterization re-
quired to specify g (given power threshold γ and range of validity C[t]). Some-
times there are other generators which are similar to g but cheaper. Then t
must be very speciﬁc to characterize the particularities of g. In other cases, the
output of g has an essentially new, “striking” property which cannot be obtained
with cheaper generators. If the property is really “striking”, a rather cheap and
generic test t is suﬃcient to detect it. Thus t can ignore all other information
contained in the output of g. Such an approximate characterization is most likely
to apply also to the data of an actual experiment. Then the b.m.s.c. (t, g) pro-
vides a speciﬁc but economic description. After verifying the b.m.s.c. for some
control parameters x ∈ C[t], approximate predictions of experimental results for
other parameters can be obtained from g by the usual (though philosophically
opaque) method of induction.

A trivial b.m.s.c. is given by a test t that always outputs 1 and some generator
g ≺-minimal among all generators. But the following makes clear that the world
of b.m.s.c. is much richer.

Theorem 6 There is, for every ˜C ⊂ C and every optimal implementation g
with respect to ˜C, a test t such that (t, g) is a b.m.s.c. and ˜C ⊂ C[t].
Fix some 1 > γ > α. By Theorem 5, the set S := {t′|optγ
t′ g and ˜C ⊂
Proof
C[t′]} is nonempty. Theorem 6 is satisﬁed by any t which is ≺-minimal in S.
By Lemma 4 such an element exists.

1.3 A simple example

As a minimal, analytically traceable example, consider an experiment without
control parameters C = ∅ in which only a single bit is measured, D = {0, 1}.
The probability p for the cases y = 0 to occurs is exactly p = 0.52 and the
“complexity” of the systems consists just in this nontrivial value. With α = 0.1,
the following pair (t, g) is a b.m.s.c.: A generator g [with L(g) = 52 byte and
T (g) = 56 υ on the mmix model processor [5]; the unit of time reads “oops”]
that outputs y = 0 and y = 1 with exactly equal probability p = 1/2, and a test
t (L(t) = 104 byte and T (t) = 255 υ) that veriﬁes if among N = 5 samples both
y = 0 and y = 1 occur at least once. This test is the cheapest test that accepts
the model g (pow(t, {g}) = 1/16 ≤ α) and rejects all cheaper models, namely

8

No need to blur the picture

generators g′ that always output the same value [one ﬁnds L(g′) = 28 byte,
T (g′) = 38 υ, pow(t, {g′}) = 1 > α]. But t also characterizes all experiments
for which pow(t, {Yi}) = pN + (1 − p)N ≤ α, such as our case p = 0.52, where
pow(t, {Yi}) ≈ 0.064.

There are other b.m.s.c. for the experiment. For example, a generator g∗
that computes a 8-bit random integer in the range 0, ..., 28 − 1, and uses it to
output y = 0 with probability p = 133 × 2−8 = 0.5195 and y = 1 otherwise
[L(g∗) = 76 byte and T (g∗) = 225 υ]; and a test t∗ that veriﬁes if within 962
samples between 437 and 487 cases y = 0 occur [L(t∗) = 112 byte, T (t∗) =
40430 υ]. One ﬁnds pow(t∗, {g∗}) = 0.099834 ≤ α = 0.1 and pow(t∗, {Yi}) =
0.099832 ≤ α for the experimental data. The next cheapest generators, which
have p = 132 × 2−8 = 0.5156 or p = 134 × 2−8 = 0.5234, and are faster because
they require only 6-bit or 7-bit random numbers respectively, are rejected with
a power larger than γ = 0.108576 > α. A cheaper test could not reach this γ.

One might think of g, g∗, and some exact g∗∗ as a primitive from of diﬀerent

levels of description for the same experiment.

Bibliography

[1] Castellani, E., “Reductionism, emergence, and eﬀective ﬁeld theories”,
Studies in History and Philosophy of Science Part B 33, 2 (2002), 251–267.

[2] Crutchfield, J. P., “The calculi of emergence: Computation, dynamics,

and induction”, Physica D 75 (1994), 11–54.

[3] Crutchfield, J. P., and K. Young, “Inferring statistical complexity”,

Phys. Rev. Lett., 63 (1989), 105–108.

[4] Damper, R. I., “Emergence and levels of abstraction”, International Jour-
nal of Systems Science 31, 7 (2000), 811–818, Editorial for the Special Issue
on ‘Emergent Properties of Complex Systems’.

[5] Knuth, D. E., MMIXware: A RISC Computer for the Third Millennium,
No. 1750 in Lecture Notes in Computer Science, Springer Heidelberg (1999).

[6] Lehmann, E. L., Testing Statistical Hypotheses 2nd ed., Springer Heidel-

berg (1997).

[7] Li, Ming, and P. Vit´anyi, An introduction to Kolmogorov complexity and

its applications 2nd ed., Springer New York (1997).

[8] O’Connor, Timothy, and Hong Yu Wong, “Emergent properties”, The

Stanford Encyclopedia of Philosophy, (E. N. Zalta ed.). (2002).

[9] Rissanen, J., Stochastic Complexity in Statistical Inquiry, World Scientiﬁc

Singapore (1989).

[10] Shalizi, C. R., and C. Moore, “What is a macrostate? Subjective obser-
vations and objective dynamics”, arXiv:cond-mat/0303625v1 (2000-2004).

