5
0
0
2
 
r
a

M
 
4
 
 
]
n
a
-
a
t
a
d
.
s
c
i
s
y
h
p
[
 
 
1
v
6
3
0
3
0
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Finding local community structure in networks

Aaron Clauset
Department of Computer Science,
University of New Mexico, Albuquerque NM 87131
aaron@cs.unm.edu
(Dated: February 2, 2008)

Although the inference of global community structure in networks has recently become a topic of
great interest in the physics community, all such algorithms require that the graph be completely
known. Here, we deﬁne both a measure of local community structure and an algorithm that infers
the hierarchy of communities that enclose a given vertex by exploring the graph one vertex at a time.
This algorithm runs in time O(k2d) for general graphs when d is the mean degree and k is the number
of vertices to be explored. For graphs where exploring a new vertex is time-consuming, the running
time is linear, O(k). We show that on computer-generated graphs this technique compares favorably
to algorithms that require global knowledge. We also use this algorithm to extract meaningful local
clustering information in the large recommender network of an online retailer and show the existence
of mesoscopic structure.

I.

INTRODUCTION

Recently, physicists have become increasingly inter-
ested in representing the patterns of interactions in com-
plex systems as networks [1, 2, 3, 4]. Canonical examples
include the Internet [5], the World Wide Web [6], social
networks [7], citation networks [8, 9] and biological net-
works [10].
In each case, the system is modeled as a
graph with n vertices and m edges, e.g., physical con-
nections between computers, friendships between people
and citations among academic papers.

Within these networks, the global organization of ver-
tices into communities has garnered broad interest both
inside and beyond the physics community. Convention-
ally, a community is taken to be a group of vertices in
which there are more edges between vertices within the
group than to vertices outside of it. Although the par-
titioning of a network into such groups is a well-studied
problem, older algorithms tend to only work well in spe-
cial cases [11, 12, 13, 14, 15]. Several algorithms have re-
cently been proposed within the physics community, and
have been shown to reliably extract known community
structure in real world networks [16, 17, 18, 19, 20, 21].
Similarly, the computer science community has proposed
algorithms based on the concept of ﬂow [22].

However, each of these algorithms require knowledge of
the entire structure of the graph. This constraint is prob-
lematic for networks like the World Wide Web, which for
all practical purposes is too large and too dynamic to ever
be known fully, or networks which are larger than can be
accommodated by the fastest algorithms [21]. In spite of
these limitations, we would still like to make quantita-
tive statements about community structure, albeit con-
ﬁned to some accessible and known region of the graph
in question. For instance, we might like to quantify the
local communities of either a person given their social
network, or a particular website given its local topology
in the World Wide Web.

Here, we propose a general measure of local commu-
nity structure, which we call local modularity, for graphs

in which we lack global knowledge and which must be
explored one vertex at a time. We then deﬁne a fast
agglomerative algorithm that maximizes the local modu-
larity in a greedy fashion, and test the algorithm’s perfor-
mance on a series of computer-generated networks with
known community structure. Finally, we use this algo-
rithm to analyze the local community structure of the on-
line retailer Amazon.com’s recommender network, which
is composed of more than 400 000 vertices and 2 million
edges. Through this analysis, we demonstrate the ex-
istence of mesoscopic network structure that is distinct
from both the microstructure of vertex statistics and the
global community structure previously given in [21]. In-
terestingly, we ﬁnd a wide variety of local community
structures, and that generally, the local modularity of
the network surrounding a vertex is negatively correlated
with its degree.

II. LOCAL MODULARITY

The inference of community structure can generally be
reduced to identifying a partitioning of the graph that
maximizes some quantitative notion of community struc-
ture. However, when we lack global knowledge of the
graph’s topology, a measure of community structure must
necessarily be independent of those global properties. For
instance, this requirement precludes the use of the mod-
ularity metric Q, due to Newman and Girvan [17], as it
depends on m.

Suppose that in the graph G, we have perfect knowl-
edge of the connectivity of some set of vertices, i.e., the
known portion of the graph, which we denote C. This
necessarily implies the existence of a set of vertices U
about which we know only their adjacencies to C. Fur-
ther, let us assume that the only way we may gain addi-
tional knowledge about G is by visiting some neighboring
vertex vi ∈ U, which yields a list of its adjacencies. As
a result, vi becomes a member of C, and additional un-
known vertices may be added to U. This vertex-at-a-time

discovery process is directly analogous to the manner in
which “spider” or “crawler” programs harvest the hyper-
link structure of the World Wide Web.

The adjacency matrix of such a partially explored

graph is given by

Aij = 


1

0



if vertices i and j are connected,
and either vertex is in C
otherwise.

(1)

If we consider C to constitute a local community, the
most simple measure of the quality of such a partitioning
of G is simply the fraction of known adjacencies that are
completely internal to C. This quantity is given by

1

=

(2)

Aij ξ(i, j) ,

2m∗ X
ij

Pij Aijξ(i, j)
Pij Aij
where m∗ = 1
Pij Aij , the number of edges in the partial
2
adjacency matrix, and ξ(i, j) is 1 if both vi and vj are
in C and 0 otherwise. This quantity will be large when C
has many internal connections, and few connections to
the unknown portion of the graph. This measure also
has the property that when |C| ≫ |U|, the partition will
almost always appear to be good.

If we restrict our consideration to those vertices in the
subset of C that have at least one neighbor in U, i.e., the
vertices which make up the boundary of C (Fig. 1), we
obtain a direct measure of the sharpness of that bound-
ary. Additionally, this measure is independent of the size
of the enclosed community. Intuitively, we expect that a
community with a sharp boundary will have few connec-
tions from its boundary to the unknown portion of the
graph, while having a greater proportion of connections
from the boundary back into the local community In the
interest of keeping the notation concise, let us denote
those vertices that comprise the boundary as B, and the
boundary-adjacency matrix as

(3)

(4)

Bij = 


1

0



if vertices i and j are connected,
and either vertex is in B
otherwise.

I
T

Thus, we deﬁne the local modularity R to be
R = Pij Bij δ(i, j)

=

,

Pij Bij
where δ(i, j) is 1 when either vi ∈ B and vj ∈ C or vice
versa, and is 0 otherwise. Here, T is the number of edges
with one or more endpoints in B, while I is the number of
those edges with neither endpoint in U. This measure as-
sumes an unweighted graph, although the weighted gen-
eralization is straightforward [23].

A few comments regarding this formulation are worth-
while before proceeding. By considering the fraction
of boundary edges which are internal to C, we ensure
that our measure of local modularity lies on the inter-
val 0 < R < 1, where its value is directly proportional

2

U

B

B

C

U

FIG. 1: An illustration of the division of an abstract graph
into the local community C, its boundary B and the edges
which connect B to the largely unknown neighbors U.

to sharpness of the boundary given by B. This is true
except when the entire component has been discovered,
at which point R is undeﬁned.
If we like, we may set
R = 1 in that case in order to match the intuitive no-
tion that an entire component constitutes the strongest
kind of community. Finally, there are certainly alterna-
tive measures that can be deﬁned on B, however, in this
paper we consider only the one given.

III. THE ALGORITHM

For graphs like the World Wide Web, in which one
must literally crawl the network in order to discover the
adjacency matrix, any analysis of local community struc-
ture must necessarily begin at some source vertex v0. In
general, if the explored portion of the graph has k ver-
tices, the number of ways to partition it into two sets,
those vertices considered a part of the same local com-
munity as the source vertex and those considered outside
of it, is given by 2k−2 − 1, which is exponential in the size
of the explored portion of the network. In this section,
we describe an algorithm that only takes time polyno-
mial in k, and that infers local community structure by
using the vertex-at-a-time discovery process subject to
maximizing our measure of local modularity.

Initially, we place the source vertex in the community,
v0 = C, and place its neighbors in U. At each step, the
algorithm adds to C (and to B, if necessary) the neighbor-
ing vertex that results in the largest increase (or smallest
decrease) in R, breaking ties randomly. Finally, we add
to U any newly discovered vertices, and update our esti-
mate of R. This process continues until it has agglomer-
ated either a given number of vertices k, or it has discov-
ered the entire enclosing component, whichever happens
ﬁrst. Pseudocode for this process is given in Algorithm 1.
As we will see in the two subsequent sections, this algo-

Algorithm 1: The general algorithm for the greedy maximiza-
tion of local modularity, as given in the text.

add v0 to C
add all neighbors of v0 to U
set B = v0
while |C| < k do

for each vj ∈ U do
compute ∆Rj

end for
ﬁnd vj such that ∆Rj is maximum
add that vj to C
add all new neighbors of that vj to U
update R and B

end while

rithm performs well on both computer-generated graphs
with some known community structure and on real world
graphs.

The computation of the ∆Rj associated with each vj ∈
U can be done quickly using an expression derived from
equation (4):

∆Rj =

x − Ry − z(1 − R)
T − z + y

,

(5)

where x is the number of edges in T that terminated at
vj, y is the number of edges that will be added to T by
the agglomeration of vj (i.e., the degree of vj is x + y),
and z is the number of edges that will be removed from
T by the agglomeration. Because ∆Rj depends on the
current value of R, and on the y and z that correspond
to vj, each step of the algorithm takes time proportional
to the number of vertices in U. This is roughly kd, where
d is the mean degree of the graph; we note that this will
be a signiﬁcant overestimate for graphs with non-trivial
clustering coeﬃcients, signiﬁcant community structure,
or when C is a large portion of the graph. Thus, in gen-
eral, the running time for the algorithm is O(k2d), or
simply O(k2) for a sparse graph, i.e., when m ∼ n. As it
agglomerates vertices, the algorithm outputs a function
R(t), the local modularity of the community centered on
v0 after t steps, and a list of vertices paired with the time
of their agglomeration.

The above calculation of the running time is somewhat
misleading as it assumes that the algorithm is dominated
by the time required to calculate the ∆Rj for each ver-
tex in U; however, for graphs like the World Wide Web,
where adding a new vertex to U requires the algorithm
to fetch a web page from a remote server, the running
time will instead be dominated by the time-consuming
retrieval. When this is true, the running time is linear in
the size of the explored subgraph, O(k).

A few comments regarding this algorithm are due. Be-
cause of the greedy maximization of local modularity, a
neighboring high degree vertex will not be agglomerated
until the number of its unknown neighbors has decreased
suﬃciently. It is this behavior that allows the algorithm
to avoid crossing a community boundary until absolutely

3

necessary. Additionally, the algorithm is somewhat sen-
sitive to the degree distribution of the source vertex’s
neighbors: when the source degree is high, the algorithm
will ﬁrst explore its low degree neighbors. This implicitly
assumes that high degree vertices are likely to sit at the
boundary of several local communities. While certainly
not the case in general, this may be true for some real
world networks. We shall return to this idea in a later
section.

Finally, although one could certainly stop the algo-
rithm once the ﬁrst enclosing community has been found,
in principle, there is no reason that it cannot continue
until some arbitrary number of vertices have been ag-
glomerated. Doing so yields the hierarchy of commu-
nities which enclose the source vertex. In a sense, this
process is akin to the following: given the dendrogram of
the global community hierarchy, walk upward toward the
root from some leaf v0 and observe the successive hier-
archical relationships as represented by junctions in the
In that sense, the enclosing communities
dendrogram.
inferred by our algorithm for some source vertex is the
community hierarchy from the perspective of that vertex.

IV. COMPUTER-GENERATED GRAPHS

As has become standard with testing community in-
ference techniques, we apply our algorithm to a set of
computer-generated random graphs which have known
community structure [17]. In these graphs, n = 128 ver-
tices are divided into four equal-sized communities of 32
vertices. Each vertex has a total expected degree z which
is divided between intra- and inter-community edges such
that z = zin +zout. These edges are placed independently
and at random so that, in expectation, the values of zin
and zout are respected. By holding the expected degree
constant z = 16, we may tune the sharpness of the com-
munity boundaries by varying zout. Note that for these
graphs, when zout = 12, edges between vertices in the
same group are just as likely as edges between vertices
that are not.

Figure 2 shows the average local modularity R as a
function of the number of steps t, over 500 realizations
of the graphs described above. For the sake of clarity,
only data series for zout ≤ 6.0 are shown and error bars
are omitted. Sharp community boundaries correspond to
peaks in the curve. As zout grows, the sharpness of the
boundaries and the height of the peaks decrease propor-
tionally. When the ﬁrst derivative is positive everywhere,
e.g., for zout > 5, the inferred locations of the community
boundaries may be extracted by ﬁnding local minima in
the second derivative, possibly after some smoothing.

From this information we may grade the performance
of the algorithm on the computer-generated graphs. Fig-
ure 3 shows the average fraction of correctly classiﬁed
vertices for each of the four communities as a function of
zout, over 500 realizations; error bars depict one standard
deviation. As a method for inferring the ﬁrst enclosing

4

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

R

l

 
,
y
t
i
r
a
u
d
o
m

 
l

a
c
o

l

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

y
l
t
c
e
r
r
o
c
 
d
e

l

i
f
i
s
s
a
c
 
s
e
c
i
t
r
e
v
 
f

 

o
n
o

i
t
c
a
r
f

0
1

z
out
z
out
z
out
z
out
z
out
z
out

 = 1.0
 = 2.0
 = 3.0
 = 4.0
 = 5.0
 = 6.0

community 1
community 2
community 3
community 4

0
0

16

32

48

64
join number, t

80

96

112

128

2

3

4

5

6

number of inter−community edges per vertex, z

7

out

8

FIG. 2: Local modularity R as a function of the number of
steps t, averaged over 500 computer-generated networks as
described in the text; error bars are omitted for clarity. By
varying the expected number of inter-community edges per
node zout, the strength of the community boundaries are var-
ied.

FIG. 3: Fraction of correctly classiﬁed nodes, by commu-
nity, as a function of the number of inter-community edges
zout. Although there the variance increases as the commu-
nity boundaries become less sharp, the average behavior (over
500 realizations) degrades gracefully, and compares favorably
with methods which use global information.

community, our algorithm classiﬁes more than 50% of the
vertices correctly even when the boundaries are weak,
i.e., when zout = 8. Although the variance in the quality
of classiﬁcation grows as zout approaches zin, this is to be
expected given that the algorithm uses only local infor-
mation for its inference, and large local ﬂuctuations may
mislead the algorithm. For computer-generated graphs
such as these, the performance of our algorithm compares
favorably to that of more global methods [17, 18, 19].

Recently, another approach to inferring community
structure using only local
information appeared [24].
This alternative technique relies upon growing a breadth-
ﬁrst tree outward from the source vertex v0, until the rate
of expansion falls below an arbitrary threshold. The uni-
form exploration has the property that some level in the
tree will correspond to a good partitioning only when v0
is equidistant from all parts of its enclosing community’s
boundary. On the other hand, by exploring the surround-
ing graph one vertex at a time, our algorithm will avoid
crossing boundaries until it has explored the remainder
of the enclosing community.

V. LOCAL CO-PURCHASING HABITS

In this section, we apply our local

inference algo-
rithm to the recommender network of Amazon.com, col-
lected in August 2003, which has n = 409 687 vertices,
m = 2 464 630 edges and thus a mean degree of 12.03. We
note that the degree distribution is fairly right-skewed,
having a standard deviation of 14.64. Here, vertices are
items such as books and digital media sold on Ama-
zon’s website, while edges connect pairs of items that

are frequently purchased together by customers.
It is
this co-purchasing data that yields recommendations for
customers as they browse the online store. Although in
general, the algorithm we have described is intended for
graphs like the World Wide Web, the Amazon recom-
mender network has the advantage that, by virtue of be-
ing both very large and fully known, we may explore
global regularities in local community structure without
concern for sampling bias in the choice of source vertices.
Additionally, we may check the inferred the community
structures against our, admittedly heuristic, notions of
correctness.

As illustrative examples, we choose three qualita-
tively diﬀerent items as source vertices:
the compact
disc Alegria by Cirque du Soleil, the book Small Worlds
by Duncan Watts, and the book Harry Potter and the
Order of the Phoenix by J.K. Rowling. These items have
degree 15, 19 and 3117 respectively. At the time the net-
work data was collected, the Harry Potter book was the
highest degree vertex in the network, its release date hav-
ing been June 2003. For each of these items, we explore
k = 25 000 associated vertices. Figure 4 illustrates the
local modularity as a function of the number of steps t for
each item; an analogous data series for a random graph
with the same degree distribution [25] has been plotted
for comparison. We mark the locations of the ﬁve prin-
ciple enclosing communities with large open symbols.

These time series have several distinguishing features.
First, Alegria has the smallest enclosing communities,
composed of t = {10, 30, 39, 58, 78} vertices, and these
communities are associated with high values of local mod-
ularity. The ﬁrst ﬁve enclosing communities all have R >
0.62, while the third community corresponds to R = 0.81,

R

l

 
,
y
t
i
r
a
u
d
o
m

 
l

a
c
o

l

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0
0
10

"Alegria", Cirque du Soleil [music]
"Small Worlds", Watts [book]
"Order of the Phoenix", Rowling [book]
 random graph

5

  

1

3

2

4

1
10

2
10

join number, t

3
10

4
10

FIG. 4: Local modularity R for three items in the Ama-
zon.com recommender network, shown on log-linear axes. For
comparison, the time series for a random graph with the same
degree distribution is shown. The large open symbols indicate
the locations of the ﬁve strongest enclosing communities.

indicating that only about 20% of boundary edges reach
out to the rest of the network. In contrast, the communi-
ties of Small Worlds contain t = {36, 48, 69, 82, 94} ver-
tices, while the Harry Potter book’s communities are ex-
tremely large, containing t = {607, 883, 1270, 1374, 1438}
vertices. Both sets have only moderate values of local
modularity, R ≤ 0.43. It is notable that the local mod-
ularity functions for all three items follow relatively dis-
tinct trajectories until the algorithm has agglomerated
roughly 10 000 items. Beyond that point, the curves be-
gin to converge, indicating that, from the perspectives
of the source vertices, the local community structure has
become relatively similar.

To illustrate the inferred local structure, we show the
partial subgraph that corresponds to the ﬁrst three en-
closing local communities for the compact disc Alegria in
Figure 5. Here, communities are distinguished by shape
according to the order of discovery (circle, diamond and
square respectively), and vertices beyond these commu-
nities are denoted by triangles. Items in the ﬁrst enclos-
ing community are uniformly compact discs produced by
Cirque du Soleil. Items in the second are slightly more di-
verse, including movies and books about the troupe, the
Cirque du Soleil compact disc entitled Varekai, and one
compact disc by a band called Era; the third group con-
tains both new and old Cirque du Soleil movies. Varekai
appears to have been placed outside the ﬁrst commu-
nity because it has fewer connections to those items
than to items in the subsequent enclosing communities.
Brieﬂy, we ﬁnd that the enclosing local communities of
Small Worlds are populated by texts in sociology and
social network analysis, while the Harry Potter book’s
communities have little topical similarity.

In Figure 5, the labels 1 and 4 denote the items Ale-

FIG. 5: The ﬁrst three enclosing communities for Cirque
du Soleil’s Alegria in Amazon.com’s recommender network;
communities are distinguished by shape (circles, diamonds,
squares respectively). Connections to triangles represent con-
nections to items in the remaining unknown portion of the
graph. Alegria and Order of the Phoenix are denoted by 1
and 4 respectively.

gria and Order of the Phoenix, respectively. It is notable
that these items are only three steps away in the graph,
yet have extremely diﬀerent local community structures
If an item’s popularity is reﬂected by its de-
(Fig. 4).
gree, then it is reasonable to believe that the strength
of the source vertex’s local community structure may be
inversely related to its degree. That is, popular items
like Order of the Phoenix may tend to link many well-
deﬁned communities by virtue of being purchased by a
large number of customers with diverse interests, while
niche items like Cirque du Soleil’s Alegria exhibit stronger
local community structure as the result of more speciﬁc
co-purchasing habits. Such structure appears to be dis-
tinct from both the macroscopic structure discovered us-
ing global community inference methods [21], and the
microscopic structure of simple vertex-statistics such as
clustering or assortativity.

With the exception of social networks, the degree of
adjacent vertices appears to be negatively correlated in
most networks. This property is often called “disas-
sortative” mixing [26], and can be caused by a high
clustering coeﬃcient, global community structure or a
speciﬁc social mechanism [27]. However, for the Ama-
zon recommender network, we ﬁnd that the assorta-
tivity coeﬃcient is not statistically diﬀerent from zero,
r = −3.01 × 10−19 ± 1.49 × 10−4, yet the network exhibits
a non-trivial clustering coeﬃcient, c = 0.17 and strong
global community structure structure with a peak mod-
ularity of Q = 0.745 [21]. Returning to the suggestion
above that there is an inverse relationship between the
degree of the source vertex and the strength of its sur-
rounding community structure, we sample for 100 000
random vertices the average local modularity over the

amazon0803
random

0.6

0.5

0.4

0.3

0.2

0.1

d
 
t
s
a
e
l
 
t
a
 
e
e
r
g
e
d
 
f
o
 
s
e
c
i
t
r
e
v
 
r
o
f
 

R
 
n
a
e
m

0
0
10

1
10

2
10
degree, d

3
10

4
10

FIG. 6: The average local modularity over the ﬁrst 250 steps
for source vertices with degree at least d. The “knee” in
the upper data series is located at d = 13; the mean degree
for the network is 12.03. The logarithmic falloﬀ illustrates
the negative correlation between source vertex degree and the
strength of the surrounding local community.

ﬁrst k = 250 steps. We ﬁnd the average local modular-
ity to be relatively high, ¯Ramzn = 0.49 ± 0.08, while a
random graph with the same degree distribution yields
¯Rrand = 0.16 ± 0.01. The variance for the Amazon graph
is due to the contributions of high degree vertices.
In
Figure 6, we plot from our random sample, the average
local modularity for all source vertices with degree at
least d. Notably, the average is relatively constant until
d = 13, after which it falls oﬀ logarithmically. This sup-
ports the hypothesis that, in the recommender network,
there is a weak inverse relationship between the degree
of the source vertex and the strength of its surrounding
local community.

Naturally, there are many ways to use the concept of
local community structure to understand the mesoscopic
properties of real world networks. Further characteri-
zations of the Amazon graph are beyond the scope of
this paper, but we propose a rigorous exploration of the
relationship between the source vertex degree and its sur-
rounding local community structure as a topic for future
work.

VI. CONCLUSIONS

Although many recent algorithms have appeared in the
physics literature for the inference of community struc-

6

ture when the entire graph structure is known, there has
been little consideration of graphs that are either too
large for even the fastest known techniques, or that are,
like the World Wide Web, too large or too dynamic to
ever be fully known. Here, we deﬁne a measure of com-
munity structure which depends only on the topology
of some known portion of a graph. We then give a sim-
ple fast, agglomerative algorithm that greedily maximizes
our measure as it explores the graph one vertex at a time.
When the time it takes to retrieve the adjacencies of a
vertex is small, this algorithm runs in time O(k2d) for
general graphs when it explores k vertices and the graph
has mean degree d. For sparse graphs, i.e., when m ∼ n,
this is simply O(k2). On the other hand, when visiting a
new vertex to retrieve its adjacencies dominates the run-
ning time, e.g., downloading a web page on the World
Wide Web, the algorithm takes time linear in the size
of the explored subgraph, O(k). Generally, if we are in-
terested in making quantitative statements about local
structure, that is, when k ≪ n, it is much more reason-
able to use an algorithm which is linear or even quadratic
in k, than an algorithm that is linear in the size of the
graph n. Finally, we note that our algorithm’s simplicity
will make it especially easy to incoporate into web spider
or crawler programs for the discovery of local community
structures on the World Wide Web graph.

Using computer-generated graphs with known commu-
nity structure, we show that our algorithm extracts this
structure and that its performance compares favorably
with other community structure algorithms [17, 18, 19]
that rely on global information. We then apply our al-
gorithm to the large recommender network of the online
retailer Amazon.com, and extract the local hierarchy of
communities for several qualitatively distinct items. We
further show that a vertex’s degree is inversely related to
the strength of its surrounding local structure. This dis-
covery points to the existence of mesoscopic topological
regularities that have not been characterized previously.
Finally, this algorithm should allow researchers to char-
acterize the structure of a wide variety of other graphs,
and we look forward to seeing such applications.

Acknowledgments

The author is grateful to Cristopher Moore for his per-
sistent encouragement and guidance, Mark Newman for
helpful discussions about community structure, and to
Amazon.com and Eric Promislow for providing the rec-
ommender network data. This work was supported in
part by the National Science Foundation under grants
PHY-0200909 and ITR-0324845.

[1] S. H. Strogatz, Exploring complex networks. Nature 410,

268–276 (2001).

[2] R. Albert and A.-L. Barab´asi, Statistical mechanics of
complex networks. Rev. Mod. Phys. 74, 47–97 (2002).

[3] S. N. Dorogovtsev and J. F. F. Mendes, Evolution of
networks. Advances in Physics 51, 1079–1187 (2002).
[4] M. E. J. Newman, The structure and function of complex

networks. SIAM Review 45, 167–256 (2003).

[5] M. Faloutsos, P. Faloutsos, and C. Faloutsos, On power-
law relationships of the internet topology. Computer
Communications Review 29, 251–262 (1999).

[6] J. M. Kleinberg, S. R. Kumar, P. Raghavan, S. Ra-
jagopalan, and A. Tomkins, The Web as a graph: Mea-
surements, models and methods. In Proceedings of the
International Conference on Combinatorics and Comput-
ing, number 1627 in Lecture Notes in Computer Science,
pp. 1–18, Springer, Berlin (1999).

[7] S. Wasserman and K. Faust, Social Network Analysis.

Cambridge University Press, Cambridge (1994).

[8] D. J. de S. Price, Networks of scientiﬁc papers. Science

149, 510–515 (1965).

[9] S. Redner, “Citation Statistics From More Than a Cen-

tury of Physical Review.” preprint 2004,
physics/0407137

[10] T. Ito, T. Chiba, R. Ozawa, M. Yoshida, M. Hattori,
and Y. Sakaki, A comprehensive two-hybrid analysis to
explore the yeast protein interactome. Proc. Natl. Acad.
Sci. USA 98, 4569–4574 (2001).

[11] B. W. Kernighan and S. Lin, An eﬃcient heuristic proce-
dure for partitioning graphs. Bell System Technical Jour-
nal 49, 291–307 (1970).

[12] M. Fiedler, Algebraic connectivity of graphs. Czech.

Math. J. 23, 298–305 (1973).

[13] A. Pothen, H. Simon, and K.-P. Liou, Partitioning sparse
matrices with eigenvectors of graphs. SIAM J. Matrix
Anal. Appl. 11, 430–452 (1990).

[14] J. Scott, Social Network Analysis: A Handbook. Sage,

London, 2nd edition (2000).

[15] M. E. J. Newman, Detecting community structure in net-

7

works. Eur. Phys. J. B 38, 321–330 (2004).

[16] M. Girvan and M. E. J. Newman, Community structure
in social and biological networks. Proc. Natl. Acad. Sci.
USA 99, 7821–7826 (2002).

[17] M. E. J. Newman and M. Girvan, Finding and evaluat-
ing community structure in networks. Phys. Rev. E 69,
026113 (2004).

[18] F. Radicchi, C. Castellano, F. Cecconi, V. Loreto, and
D. Parisi, Deﬁning and identifying communities in net-
works. Proc. Natl. Acad. Sci. USA 101, 2658–2663
(2004).

[19] M. E. J. Newman, Fast algorithm for detecting com-
munity structure in networks. Phys. Rev. E 69, 066133
(2004).

[20] F. Wu and B. A. Huberman, Finding communities in
linear time: A physics approach. Eur. Phys. J. B 38,
331–338 (2004).

[21] A. Clauset, M. E. J. Newman and C. Moore, “Finding
community structure in very large networks.” Phys. Rev.
E 70, 066111 (2004)

[22] G. W. Flake, et al, “Self-Organization and Identiﬁca-
tion of Web Communities.” IEEE Computer 35(3), 66-71
(2002).

[23] M. E. J. Newman, “Analysis of weighted networks.”

Phys. Rev. E 70, 056131 (2004).

[24] J. P. Bagrow and E. M. Bollt. “A Local Method for De-
tecting Communities.” preprint 2004 cond-mat/0412482

[25] B. Bollob´as, Random graphs. Academic Press, 1985.
[26] M. E. J. Newman, “Mixing patterns in networks.” Phys.

Rev. E 67, 026126 (2003).

[27] M. E. J. Newman and J. Park, “Why social networks are
diﬀerent from other types of networks.” Phys. Rev. E 68,
036122 (2003).

