2
0
0
2
 
t
c
O
 
8
1
 
 
]
n
a
-
a
t
a
d
.
s
c
i
s
y
h
p
[
 
 
1
v
2
7
0
0
1
2
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

NeXus Software Status
Mark K¨onnecke, Uwe Filges
Laboratory for Neutron Scattering
Paul Scherrer Institute
CH–5232 Villigen–PSI
Switzerland

Abstract

NeXus is a joint eﬀort of both the synchrotron and neutron scattering community
to develop a common data exchange format based on HDF. In order to simplify access
to NeXus ﬁles a NeXus-API is provided. This NeXus-API has been restructured and
expanded to cover both HDF versions 4 and 5. Only small changes to the API were
necessary in order to accomplish this. A foundation was laid to extend the NeXus-API
to further ﬁle formats. A new NeXus-API for IDL based on the IDL C interface has been
implemented. Thus both HDF-4 and HDF-5 NeXus ﬁles can be processed from IDL.
The time-of-ﬂight data analysis program IDA has been adapted to support NeXus. The
neutron ray tracing package McStas from Risoe has been updated to write NeXus ﬁles
through the NXdict-API.

1 Introduction

NeXus1 aspires to become a common data format for both the synchrotron and neutron
scattering community. The aim of the NeXus proposal is to provide an eﬃcient and
platform independent self describing data exchange format. The NeXus proposal has ﬁve
levels:

• A physical ﬁle format.

• A Application Programmer Interface (API) for accessing data ﬁles.

• A ﬁle structure.

• Rules for storing single data items.

• A dictionary of parameter names.

As physical ﬁle format the hierachical data format (HDF)2 from the National Cen-
ter for Supercomputing Applications (NCSA) was choosen. This is a binary, platform
independent, self describing data format. HDF is well supported by major data analysis
packages. HDF ﬁles are accessed through a library of access functions. This library is
public domain software. Libraries are available for the ANSI–C, Fortran77 and Java pro-
gramming languages on all important computing platforms. The HDF–4 library supports
a lot of diﬀerent content types such as scientiﬁc datasets, groups, images, tables etc. Of
these NeXus only uses the scientﬁc dataset and the group structures. HDF–4 groups allow
to order information hierarchically in a HDF ﬁle, much like directories in a ﬁlesystem. As
the HDF library is also fairly complex a NeXus-API was deﬁned which facilitates access
to NeXus HDF ﬁles.

The ﬁle structure part of the NeXus deﬁnition provides application programs with the
information where to ﬁnd certain data elements in the ﬁle. NeXus ﬁles are structured into

1

several groups, much like directories in a ﬁle system. The NeXus ﬁle structure provides
for multiple datasets in a single ﬁle and easy retrieval of plottable information. NeXus
encourages users to include all necessary information about an experiment in one ﬁle and
not to distribute such information across multiple ﬁle. Therefore the NeXus ﬁle structure
provides for a complete description of an instrument used for an experiment.

The rules for storing individual data items in a NeXus ﬁle provide the infrastruture for
locating the axises of multi–dimensional datasets and require the user to store the units
of measurement with each data item.

The NeXus dictionary, the least developed area of the NeXus standard, provides names
for data items in a NeXus ﬁles and ﬁles structures for known instrument types. More
information about NeXus can be found at the NeXus WWW-sites:

http://www.neutron.anl.gov/nexus and http://lns00.psi.ch/NeXus.

2 A New NeXus-API

The original NeXus-API as described above had been developed to support the then
prevalent HDF version 4.1 (HDF–4). Over time the HDF–4 library had become overly
complex and also imposed certain limitations on users. Therefore the NCSA decided to
redesign HDF. This brought a new version of HDF, HDF version 5, into existence which
has a diﬀerent access library and a diﬀerent, incompatible ﬁle format. HDF version 5
(HDF–5) maintained all the advantages of the HDF version 4 format. But a couple of
important limitations of HDF–4 were levied:

• HDF–4 limits the number of objects in a HDF ﬁle to 20000. This sounds much, but

isn’t because most HDF-4 content types consist of multiple objects.

• File size was restricted to 2GB.

• HDF–4 is not thread safe.

Some of these limitations of HDF–4 were already hit by NeXus users. Though NCSA
commited itself to maintaining HDF–4 for some time to come, the need was felt to move
to HDF–5 as the physical ﬁle format for NeXus.

Therefore the NeXus design team decided to program a new API with following design

goals:

• Support for both HDF–4 and HDF–5.

• API compatibility to the old version.

In order to achieve this goal a framework was developed for adding further ﬁle formats,
for example XML, to the NeXus-API.

After some trouble with the HDF–5 libraries the new NeXus–API version 2.0 was
released. This version can be built to support either HDF–4, HDF–5 or both. The goal
of API compatibility was achieved with three exceptions:

• Due to technical reasons, the mechanism for the creation of compressed datasets

had to change.

2

• When creating a new ﬁle a user has to select if a HDF–4 or HDF–5 is to be created.

• In HDF–4 groups are ordered in the sequence of their creation in the data ﬁle. In
HDF–5 an alphabetical order is imposed. Thus the order of groups in HDF–4 and
HDF–5 NeXus ﬁles is not identical. The HDF–5 team at NCSA promised to do
something about this.

A little problem was posed by NeXus classes. NeXus uses the class name of a group
and its name for identiﬁcation. In HDF–5 the concept of a group class was abandoned.
However, HDF–5 brought us arbitrary attributes to groups. The problem was thus solved
by storing the NeXus class in a group attribute with the name NXclass. So, the news is
that there is no news! The NeXus-API stayed the same. The new API is stable and is
already in production use at the SINQ–instruments TRICS and AMOR at PSI.

The new NeXus–API is available for the programming languages:

• ANSI–C and C++

• Fortran 77

• Fortran 90

• Java

It has been tested on True64Unix 5.1, Linux, Mac-OS 10 and Windows operating systems
so far.

It is now recommended to use the newer HDF–5 ﬁle format wherever possible. Con-
versions from HDF–4 to HDF–5 and back can be performed with a set of utilities provided
by NCSA. This conversion does not produce valid NeXus ﬁles though. The NCSA utility
for converting from HDF–4 to HDF–5, h4toh5, was made NeXus compliant with a little
patch. This utility also converts links properly. The corresponding utility h5toh4, for con-
version from HDF–5 to HDF–4 ﬁles, can not be that easily patched to work with NeXus
because h5toh4 changes the ﬁle structure. There also exists a Java utility for conversion
from HDF–4 NeXus ﬁles to HDF–5 NeXus ﬁles and back. This utility cannot be used in
production use, though, because it duplicates linked datasets.

3 A New NeXus IDL API

There has always been a NeXus–API for RSI’s Interactive Data Language (IDL) data
treatment program. This NeXus–API for IDL (NIDL) was based on the HDF–4 access
functions provided by IDL. As HDF–5 support is not yet available for IDL, this approach
was not feasible for the new NeXus–API. Moreover, a reimplementation using IDL HDF–
5 access functions would have meant a complete reimplementation and duplicated code.
Therefore it was choosen to integrate the new NeXus–API into IDL through IDL’s native
function ANSI–C interface. This would also save work in the case of further extensions
to the NeXus ﬁle format list. This approach, a IDL NeXus API through IDL’s native
functions, has been implemented. It currently is known to work well under True64Unix
version 5.1. As IDL standardizes many aspects of the native function interface ports to
other unix like operating system should not be a big deal, a port to Microsoft Windows
type operating systems may require only a little more work.

3

4 New NeXus Aware Software

4.1 Browsers and Utilities

Browsers allow to view the content of a NeXus ﬁle and sometimes even edit it. The
simplest of such applications is the command line browser NXbrowse which is distributed
with the NeXus package. It can browse both NeXus HDF–4 and NeXus HDF–5 ﬁles.

Very new is the HDFView3 program from NCSA. This is a merged version of the older
jhv and h5view applications from NCSA. HDFview can display the hierarchy of a NeXus
ﬁle and give some basic renditions of data. HDFview also allows for editing of HDF ﬁles.
HDFview works with both HDF–4 and HDF–5. HDFview is written in Java and thus
available for a variety of platforms.

There is also a new NeXus Explorer program written in Visual Basic for Windows
by Albert Chan at ISIS. Besides browsing, this application can also edit the NeXus ﬁle.
With the help of IDL the application is able to do 2D plots of data. The NeXus Explorer
is only available for the Windows platform from

http://www.isis.rl.ac.uk/geniebinaries/NexusExplorerBits.zip

A couple of new NeXus utilities have been developed and been included into the

NeXus–API package:

NXtree Manuel Lujan from APNS provided NXtree which displays the structure of a

NeXus ﬁle as a tree. Output can be in text, html or latex format.

NXtoXML is an experimental utility which converts a NeXus binary ﬁle into a XML

ﬁle. The xml format has still to be ﬁnalised through.

NXtoDTD is another experimental program which documents the structure of a NeXus
program as a XML data Type deﬁnition (DTD). This tool shall help in the process
of deﬁning the NeXus dictionary and instrument type speciﬁcations. Both XML
utilities were contributed by Ray Osborn, APNS.

4.2 Data Analysis Programs

4.2.1 General Data Analysis Programs

Besides the known NeXus supporting data analysis tools IDL, opengenie and Lamp there
is now a new system named openDave brought to us by the FRM–2 reactor group in
munich. OpenDave has a modulare architecture which allows to process data from a
selection of sources through various ﬁlters and output them to various types of sinks,
including graphics. OpenDave is written in C++ with the QT toolkit and is thus restricted
to operating systems supported by QT. Unfortunately, QT requires a developers license
on a lot of platforms

4.2.2 TOF Data Analysis Programs

Besides the programs inx, nathan and Isaw, the IDA program from Andreas Meyer, TU
munich was adapted to support NeXus ﬁles as produced by the FOCUS instrument at
PSI.

4

4.2.3 Filters to Other Packages

In this section ﬁlters to and from NeXus to other data formats are discussed. For the
small angle scattering community two such tools exist:

psitohmi converts PSI–SANS NeXus ﬁles to a format suitable for the SANS data pro-
cessing suite from the Hahn Meitner Institute in berlin. This utility was provided
by Joachim Kohlbrecher, PSI.

nx2ill Ron Gosh wrote nx2ill in order to convert SANS NeXus ﬁles to the format under-

stood by the ILL SANS data processing tools.

There exists also a small utility which combines powder diﬀraction NeXus data ﬁles
into a large powder diagram which is then stored in a format suitable for the Rietveld
program fullprof.

4.2.4 Single Crystal Diﬀractometer Data Analysis

At PSI a new program for the integration of single crystal diﬀraction data collected with a
PSD with the name anatric was written. This program is optimised for the SINQ single
crystal diﬀractometer TRICS. TRICS is a four circle diﬀractometer with a conventional
eulerian cradle and three position sensitive detectors positioned on a movable detector
arm at 0, 45 and 90 degrees oﬀset. Typical measurements involve omega scans across a
given omega range with all other angles ﬁxed. TRICS saves its data in HDF–5 NeXus
ﬁles.

Anatric is able to perform two operations:

Reﬂection location anatric locates reﬂections in the data without prior knowledge
about the crystal through a local maximum search. Reﬂection positions are de-
termined through a center of gravity calculation. The output of this step is a list of
reﬂections to be used for indexing or UB matrix reﬁnement.

Reﬂection integration anatric can integrate reﬂection intensities for further processing

with a crystal structure data determination package.

Anatric has been designed to cope with two TRICS speciﬁc problems. The ﬁrst is that
measurements are performed at low and at high two theta at the same time. This together
with the resolution of the instrument has the consequence, that reﬂection positions shift
by up to 2.5 pixels between omega frames at the high two theta detector. Moreover at
TRICS reﬂections show up as rather large features on the detector. These two factors
combined would make rectangular reﬂection boxes for integration excessively large and
thus impractical. Anatric now takes this shift into account and extracts data to integrate
along an arbitrary axis through the reﬂection. This axis is determined experimentally
from strong reﬂections in the reﬂection location step.

The second problem is the large size of the reﬂections at TRICS in relation to the size
of the position sensitive detectors ( 20x20cm). A reﬂection box for integration must be
large enough to enclose strong reﬂections completely. Using such a large reﬂection box for
all reﬂections however would kill oﬀ many perfectly well measured smaller reﬂections at
the border of the detectors due to the necessary border tests. In order to cope with this,

5

anatric determines for each reﬂection the size of the necessary integration box individually.
If the reﬂection is to weak for this to work, a minimum integration box is used.

The actual integration of intensities is then performed with a variation of the dynamic
mask procedure as described by Sj¨olin and Wlodawer5. Anatric has been written in C++.
It is more or less ﬁnished, however the program still needs to be veriﬁed against a full
structure reﬁnement.

4.3 Monte Carlo Simulation Packages

Monte Carlo simulations of instruments become an increasingly valuable tool for instru-
ment design, instrument optimisation and measurement planning. The NeXus ﬁle format
can oﬀer full documentation of the simulation run and eﬃcient transfer of large simulated
datasets to such packages. Moreover it could also become possible to simulate data ﬁles
for testing of data analysis programs. Currently only one Monte Carlo simulation pro-
gram, McStas6, has been ported to use NeXus for data ﬁle storage by Emmanuel Farhi
at ILL. As of now, only a XML format is supported but support for binary NeXus ﬁles
will follow soon. Such binary NeXus ﬁles will be written through the NeXus dictionary
API. This allows the user to customize the NeXus ﬁle structure to his demands. NeXus
support for the simulation package Vitess7 is in early stages.

5 Future Developments of NeXus

Most eﬀort in developing the NeXus standard should now go into the reﬁnement of the
dictionary and the deﬁnition of NeXus ﬁle structures and content for a couple of diﬀerent
instrument types. It would also be good to set up a kind of scheme for standardizing such
deﬁnitions.

The other thing which needs to be done is to make the NeXus installation and linking
easiser. Feedback from users show that many have diﬃculties when juggling with all the
diﬀerent libraries, NeXus, HDF–4 and HDF–5, when compiling and linking programs.
Possible solutions could be autoconf scripts for platforms which support this and perhaps
the automatic generation of a shell script for linking against NeXus.

One main objection against NeXus is:

it is not ASCII, I cannot edit my data! A
possible answer to this objection would be a XML NeXus format. XML means eXtended
Markup Language and is a scheme for deﬁning a markup language in ASCII. The best
known example of a markup language is html which is driving the WWW. A XML NeXus
format is in the process of being deﬁned. It is suggested to extend the NeXus–API to
support XML as well.

It would also be helpful to provide NeXus support for some more general data analysis

packages, especially free ones such as octave and scilab.

6 Conclusion

With the inclusion of the new HDF–5 ﬁle format into the NeXus–API, this API is well
braced for the future. More and more NeXus aware data analysis software is being written
and the software already available covers a wide area of applications.

6

7 Acknowledgements

The port of the NeXus–API to HDF–5 was supported through the european SCANS-
network program. The SCANS RTD network was supported under the Access to Research
Infrastructure activity, Improving Human Potential Program of the European Commis-
sion under contract number HPRI–CT–1999-50013 and the Bundesamt f¨ur Bildung un
Wissenschaft, Berne, Switzerland under contract number BBW Nr.: 00.0208. This sup-
port is gratefully acknowledged.

8 References

1. P. Klosowski, M. Koennecke, J. Z. Tischler and R. Osborn: NeXus: A common
data format for the exchange of neutron and synchrotron data. Physica B 241–
243, 151–153, (1998)

2. HDF: http://hdf.ncsa.uiuc.edu

3. http://hdf.ncsa.uiuc.edu/hdf-java-html/hdfview/index.html

4. openDave,

5. L. Sj¨olin, A. Wlodawer, Improved Technique for Peak Integration for Crystallo-
graphic Data Collected with Position–Sensitive Detectors: A Dynamic Mask Pro-
cedure, Acta Cryst. A37, 594–604, (1981)

6. K. Lefmann, K. Nielsen, McStas , Neutron News 10/3, 20, (1999)

7. D. Wechsler, G. Zsigmond, F. Streﬀer, F. Mezei: VITESS: Virtual Instrumentation

Tools for Pulsed and Continuour Sources, Neutron News 11/4, 25–28 (2000)

7

