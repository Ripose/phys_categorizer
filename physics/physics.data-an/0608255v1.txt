6
0
0
2
 
g
u
A
 
5
2
 
 
]
n
a
-
a
t
a
d
.
s
c
i
s
y
h
p
[
 
 
1
v
5
5
2
8
0
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Maximizing Modularity is hard⋆

Ulrik Brandes1, Daniel Delling2, Marco Gaertler2, Robert G¨orke2, Martin Hoefer1⋆⋆,
Zoran Nikoloski3, and Dorothea Wagner2

1 Department of Computer & Information Science, University of Konstanz, Germany
2 Faculty of Informatics, Universit¨at Karlsruhe (TH), Germany
3 Department of Applied Mathematics, Faculty of Mathematics and Physics,
Charles University, Prague, Czech Republic

Abstract. Several algorithms have been proposed to compute partitions of networks into
communities that score high on a graph clustering index called modularity. While publi-
cations on these algorithms typically contain experimental evaluations to emphasize the
plausibility of results, none of these algorithms has been shown to actually compute optimal
partitions. We here settle the unknown complexity status of modularity maximization by
showing that the corresponding decision version is NP-complete in the strong sense. As a
consequence, any eﬃcient, i.e. polynomial-time, algorithm is only heuristic and yields sub-
optimal partitions on many instances.

1 Introduction

Partioning networks into communities is a fashionable statement of the graph clustering
problem, which has been studied for decades and whose applications abound.

Recently, a new graph clustering index called modularity has been proposed [10]. It
immediately prompted a number of follow-up studies concerning diﬀerent applications
and possible adjustments of the measure (see, e.g., [3, 4, 7, 13]). Also, a wide range of
algorithmic approaches approaches has been considered, for example based on a greedy
agglomeration [1, 8], spectral division [9, 12], simulated annealing [6, 11] and extremal
optimization [2].

None of these algorithms, however, has been shown to be produce optimal partitions.
While the complexity status of modularity maximization is open, it has been speculated [9]
that it might be NP-hard due to similarity with the MAX-CUT problem.

In this paper, we provide the ﬁrst complexity-theoretic argument as to why the prob-
lem of maximizing modularity is intractable by proving that it is NP-complete in the
strong sense. This means that there is no correct polynomial-time algorithm to solve this
problem for every instance unless P = NP. Therefore, all of the above algorithms even-
tually deliver suboptimal solutions, and there is no hope for an eﬃcient algorithm that
computes maximum modularity partitions on all problem instances. In a sense, our result
thus justiﬁes the use of heuristics for modularity optimization.

2 Modularity

Modularity is a quality index for clusterings deﬁned as follows. We are given a simple
graph G = (V, E), where V is the set of vertices and E the set of (undirected) edges. If not
⋆

This work was partially supported by the DFG under grants BR 2158/2-3, WA 654/14-3, Research
Training Group 1042 “Explorative Analysis and Visualization of Large Information Spaces” and by EU
under grant DELIS (contract No. 001907).
Direct all correspondence to hoefer@inf.uni-konstanz.de

⋆⋆

(1)

(2)

stated otherwise, n = |V | and m = |E| throughout. The degree deg(v) of a vertex v ∈ V
is the number of edges incident to v. A cluster or community C ⊆ V is a subset of the
vertices. A clustering C = {C1, . . . , Ck} of G is a partition of V into clusters such that each
vertex appears in exactly one cluster. With a slight disambiguation, the modularity [10]
Q(C) of a clustering C is deﬁned as

Q(C) =

C∈C "
X

|E(C)|
m

−

|E(C)| +

(cid:18)

P

C′∈C |E(C, C ′)|
2m

2

,

#

(cid:19)

where E(C, C ′) denotes the set of edges between vertices in clusters C and C ′, and E(C) =
E(C, C). Note that C ′ ranges over all clusters, so that edges in E(C) are counted twice
in the squared expression. This is to adjust proportions, since edges in E(C, C ′), C 6= C ′,
are counted twice as well, once for each order of the arguments. Note that we can rewrite
Eq. (1) into the more convenient form

Q(C) =

C∈C "
X

|E(C)|
m

−

v∈C deg(v)
2m

2

.

#

(cid:19)

(cid:18) P

It reveals an inherent trade-oﬀ: to maximize the ﬁrst term, many edges should be contained
in clusters, whereas minimization of the second term is achieved by splitting the graph
into many clusters of small total degrees. In the remainder of this paper, we will make use
of this formulation.

3 NP-Completeness

To formulate our complexity-theoretic result, we need to consider the following decision
problem underlying modularity maximization.

Problem 1 (Modularity) Given a graph G and a number K, is there a clustering C
of G, for which Q(C) ≥ K?

Note that we may ignore the fact that, in principle, K could be a real number in the range
[0, 1], because 4m2 · Q(C) is integer for every partition C of G and polynomially bounded
in the size of G.

Note also that modularity maximization cannot be easier than the decision problem,
because determining the maximum possible modularity index of a graph immediately
yields an answer to the decision question.

Our hardness result for Modularity is based on a transformation from the following

decision problem.

Problem 2 (3-Partition) Given k positive integer numbers a1, . . . , ak, is there a par-
tition of these numbers into three sets S1, S2, S3, such that the numbers in each set sum
up to the same amount?

We will show that an instance A = {a1, . . . , ak} of 3-Partition can be transformed into an
instance (G(A), K(A)) of Modularity, such that G(A) has a clustering with modularity

k
i=1 ai

P

at least K(A), if and only if a1, . . . , ak can be partitioned into three sets of sum 1
3
each.

It is crucial that 3-Partition is strongly NP-complete [5], i.e. the problem remains NP-
complete even if the input is represented in unary coding. This implies that no algorithm
can decide the problem in time polynomial even in the sum of the input values, unless
P = N P . More importantly, it implies that our transformation need only be pseudo-
polynomial.

The reduction is deﬁned as follows. From an instance A of 3-Partition, construct a
graph G(A) with three cliques (completly connected subgraphs) H1, H2, H3 of size a =
k
i=1 ai each. For each element ai ∈ A we introduce a single element vertex, and connect
it to ai vertices in each of the three cliques in such a way that each clique member is
P
connected to exactly one element vertex. It is easy to see that each clique vertex then
has degree a and the element vertex corresponding to element ai ∈ A has degree 3ai. The
number of edges in G(A) is m = 3
2 a(a + 1). See Fig. 1 for an example. Note that the size

Fig. 1. An example graph G(A) for the instance A = {1, 1, 2, 2, 3, 3} of 3-Partition. Edge colors indicate
edges to and within the three cliques H1 (black), H2 (red), and H3 (blue). Vertex labels indicate the
corresponding numbers ai ∈ A.

of G(A) is polynomial in the unary coding size of A, so that our transformation is indeed
pseudo-polynomial.

Before specifying bound K(A) for the instance of Modularity, we will show three
properties of maximum modularity clusterings of G(A). Together these properties establish
the desired characterization of solutions for 3-Partition by solutions for Modularity.

Lemma 1. In a maximum modularity clustering of G(A), none of the cliques H1, H2, H3
is split.

Proof. We consider a clustering C that splits a clique H ∈ {H1, H2, H3} into diﬀerent
clusters and then show how to obtain a clustering with strictly higher modularity. Suppose
that C1, . . . , Cr ∈ C, r > 1, are the clusters that contain vertices of H. For i = 1, . . . , r we
denote by

– ni the number of vertices of H contained in cluster Ci,
– mi = |E(Ci)| the number edges between vertices in Ci,
– fi the number of edges between vertices of H in Ci and element vertices in Ci,
– di be the sum of degrees of all vertices in Ci.

The contribution of C1, . . . , Cr to Q(C) is

r

1
m

i=1
X

mi −

1
4m2

d2
i .

r

i=1
X

1, . . . , C ′

r, such that C ′ contains exactly the vertices of clique H, and each C ′

r
i=1 fi, because all vertices from H are removed from the clusters C ′

Now suppose we create a clustering C′ by rearranging the vertices in C1, . . . , Cr into clusters
C ′, C ′
i, 1 ≤ i ≤
r, the remaining elements of Ci (if any). In this new clustering the number of covered edges
reduces by
i. This
labels the edges connecting the clique vertices to other non-clique vertices of Ci as inter-
r
j=i+1 ninj edges that are now additionally
cluster edges. For H itself there are
covered due to the creation of cluster C ′. In terms of degrees the new cluster C ′ contains
P
a vertices of degree a. The sums for the remaining clusters C ′
i are reduced by the degrees
of the clique vertices, as these vertices are now in C ′. So the contribution of these clusters
to Q(C′) is given by

r
i=1

P

P

mi +

ninj − fi

−

a4 +

(di − nia)2

,

r

1
m

i=1
X





r

j=i+1
X

1
4m2

 





r

i=1
X

!

so that

Q(C′) − Q(C) =

r

r

r

ninj − fi

+



1
4m2

2dinia − n2

i a2

− a4

!

!

1
m 


1

i=1
X

j=i+1
X
r

r

=

4m

4m2 

  

i=1
X

r


ninj − 4m

r

i=1
X

j=i+1
X


r
i=1

r
j=i+1 ninj =

r
i=1

fi +

ni

2dia − nia2

− a4

i=1
X

 

i=1
X

(cid:0)
j6=i ninj, substituting m = 3

(cid:1)

2 a(a + 1)

!





Q(C′) − Q(C) =

−a3 − 6(a + 1)

fi +

ni

2di − nia + 3(a + 1)

nj

Using the fact that 2
and rearranging terms we get
P

P

4m2 

a

a





P

r

i=1
X
r

i=1
X

P

r

i=1
X
r

i=1
X









≥

4m2 

−a3 − 6(a + 1)

fi +

ni

nia + 6fi + 3(a + 1)

nj

.

j6=i
X
r

Xj6=i

















For the last inequality we use the fact that di ≥ nia + 3fi. This inequality holds because
Ci contains at least the ni vertices of degree a from the clique H. In addition it contains
both the clique and element vertices for each edge counted in fi. For each such edge there
are two other edges connecting the element vertex to the two other cliques. Hence, we get
a contribution of 3fi in the degrees of the element vertices. Combining the terms ni and
one of the terms

j6=i nj we get

Q(C′) − Q(C) ≥

−a3 − 6(a + 1)

fi +

ni

a

nj + 6fi + (2a + 3)

nj

r

r

r

−a3 − 6(a + 1)

fi +

ni

a2 + 6fi + (2a + 3)

nj

P
a

4m2 



4m2 

4m2 

a

a

a

4m2 



r

i=1
X
r



i=1
X



=

=

≥

i=1
X
r

i=1
X

i=1
X
r

i=1
X

j=1
X









r

r

i=1
X
r

Xj6=i
r

i=1
X

Xj6=i




,





6fi(ni − a − 1)) + (2a + 3)

ninj

6ni(ni − a − 1) + (2a + 3)

ninj









r

j6=i
X









r

Xj6=i

For the last step we note that ni ≤ a − 1 and ni − a − 1 < 0 for all i = 1, . . . , r. So
increasing fi decreases the modularity diﬀerence. For each vertex of H there is at most
one edge to a vertex not in H, and thus fi ≤ ni.
Rearranging yields

Q(C′) − Q(C) ≥

ni

6(ni − a − 1) + (2a + 3)

nj

,

r

j6=i
X





a
4m2

r

i=1
X
r

=

a
4m2







i=1
X

a
4m2 (2a − 9)

≥

> 0,

ni

−6 + (2a − 3)

nj

,

r

Xj6=i





r

r

i=1
X

j6=i
X

ninj,

as we can assume a > 4 for all relevant instances of 3-Partition. This shows that any
clustering can be improved by merging each clique completely into a cluster. This proves
⊓⊔
the lemma.

Next, we observe that the optimum clustering places at most one clique completely

into a single cluster.

Lemma 2. In a maximum modularity clustering of G(A), every cluster contains at most
one of the cliques H1, H2, H3.

Proof. Consider a maximum modularity clustering. The previous lemma shows that each
of the three cliques H1, H2, H3 is entirely contained in one cluster. Assume that there is a
cluster C which contains at least two of the cliques.

Case 1: If C does not contain any element vertices, then the cliques form components in
the cluster. In this case it is easy to see that the clustering can be improved by splitting
C into distinct clusters, one for each clique. In this way we keep the number of edges
within clusters the same, however, we reduce the squared degree sums of clusters.
Case 2: In this case C contains all three cliques completely and in addition some element
vertices of elements aj with j ∈ J ⊆ {1, . . . , k}. Note that inside the three cliques
3
2 a(a − 1) edges are covered. In addition, for every element vertex corresponding to an
element aj there are 3aj edges included. The degree sum of the cluster is given by the
3a clique vertices of degree a and some number of element vertices of degree 3aj. The
contribution of C to Q(C) is thus given by

1
m 

3
2



a(a − 1) + 3

aj

−

j∈J
X





1

4m2 

3a2 + 3

2

aj



.


1 and C ′

j∈J
X

2 such that C ′

Now suppose we create C′ by splitting C into C ′
1 completely
contains a single clique H. This leaves the number of edges covered within the cliques
the same, however, all edges from H to the included element vertices eventually drop
2 to Q(C′)
out. The degree sum of C ′
is given by

1 is exactly a2, and so the contribution of C ′

1 and C ′

a(a − 1) + 2

aj

−

2a2 + 3

aj

+ a4

.

1
m 

3
2



j∈J
X





1

4m2 







2





j∈J
X

Considering the diﬀerence we note that









Q(C′) − Q(C) = −

1
m

1

aj +

4m2 

5a4 + 6a2

aj − a4

j∈J
X

4a4 + 6a2


j∈J aj − 4m

j∈J
X
j∈J aj

4a4 − 6a

P

4m2
j∈J aj

P

=

=

> 0,

4m2
P

as a > 3 for all relevant instances of 3-Partition.

Case 3: In this case C contains two cliques completely and in addition some element
vertices of elements aj with j ∈ J ⊆ {1, . . . , k}. We apply the same construction as for
Case 2 and get with a > 3

Q(C′) − Q(C) = −

3a4 + 6a2

aj − a4

j∈J
X





1
m

aj +

1

4m2 

j∈J
X
2a4 − 6a

j∈J aj



=

> 0.

4m2
P

Since the clustering is improved in each case, it is not optimal. This is a contradiction. ⊓⊔

The previous two lemmas show that any clustering can be strictly improved to a
clustering that contains three clique clusters, such that each one completely contains one
of the cliques H1, H2, H3 (eventually plus some additional element vertices). In particular,
this must hold for the optimum clustering as well. Now that we know how the cliques are
clustered we turn to the element vertices.
As they are not directly connected, it is never optimal to create a cluster consisting only
of element vertices. Splitting such a cluster into singleton clusters, one for each element
vertex, reduces the squared degree sums but keeps the edge coverage at the same value.
Hence, such a split yields a clustering with strictly higher modularity. The next lemma
shows that we can further strictly improve the modularity of a clustering with a singleton
cluster of an element vertex by joining it with one of the clique clusters.

Lemma 3. In a maximum modularity clustering of G(A), there is no cluster composed of
element vertices only.

Proof. Consider a clustering C of maximum modularity and suppose that there is an
element vertex vi corresponding to the element ai, which is not part of any clique cluster.
As argued above we can improve such a clustering by creating a singleton cluster C = {vi}.
Suppose Cmin is the clique cluster, for which the sum of degrees is minimal. We know that
Cmin contains all vertices from a clique H and eventually some other element vertices for
elements aj with j ∈ J for some index set J. The cluster Cmin covers all a(a−1)
edges
j∈J aj edges to element vertices. The degree sum is a2 for clique vertices
within H and
j∈J aj for element vertices. As C is a singleton cluster, it covers no edges and the
and 3
degree sum is 3ai. This yields a contribution of C and Cmin to Q(C) of

P

2

P

1
m 

a(a − 1)
2

+

1

aj

−

4m2 



a2 + 3

aj

j∈J
X





j∈J
X





2





+ 9a2

.

i 



Again, we create a diﬀerent clustering C′ by joining C and Cmin to a new cluster C ′. This
increases the edge coverage by ai. The new cluster C ′ has the sum of degrees of both
previous clusters. The contribution of C ′ to Q(C′) is given by

1
m 

a(a − 1)
2

+ ai +

aj

−

a2 + 3ai + 3

aj

j∈J
X





1

4m2 



2

,





j∈J
X

so that





Q(C′) − Q(C) =

1

ai
m

−

4m2 

6a2ai + 18ai

aj



j∈J
X




6a(a + 1)ai − 6a2ai − 18ai

=

=

1

4m2 



ai
4m2 



6a − 18

aj

.

j∈J
X





aj





j∈J
X

At this point recall that Cmin is the clique cluster with the minimum degree sum. For this
cluster the elements corresponding to included element vertices can never sum to more
than 1
3 a. In particular, as vi is not part of any clique cluster, the elements of vertices in
Cmin can never sum to more than 1

3 (a − ai). Thus,

aj ≤

(a − ai) <

a,

1
3

1
3

j∈J
X

and so Q(C′) − Q(C) > 0. This contradicts the assumption that C is optimal.

⊓⊔

We have shown that for the graphs G(A) the clustering of maximum modularity con-
sists of exactly three clique clusters, and each element vertex belongs to exactly one of the
clique clusters. Finally, we are now ready to state our main result.

Theorem 3. Modularity is strongly NP-complete.

Proof. For a given clustering C of G(A) we can check in polynomial time whether Q(C) ≥
K(A), so clearly Modularity ∈ NP.

For NP-completeness we transform an instance A = {a1, . . . , ak} of 3-Partition into
an instance (G(A), K(A)) of Modularity. We have already outlined the construction
of the graph G(A) above. For the correct parameter K(A) we consider a clustering in
G(A) with the properties derived in the previous lemmas, i.e. a clustering with exactly
three clique clusters. Any such clustering yields exactly 2a inter-cluster edges, so the edge
coverage is given by

|E(C|
m

=

m − 2a
m

= 1 −

4a
3a(a + 1)

= 1 −

4
3(a + 1)

.

C∈C∗
X

Hence, the clustering C = (C1, C2, C3) with maximum modularity must minimize

deg(C1)2 + deg(C2)2 + deg(C3)2.

This requires to equilibrate the element vertices according to their degree as good as
possible between the clusters. In the optimum case we can assign each cluster element
vertices corresponding to elements that sum to 1

3 a. This results in

deg(C1)2 + deg(C2)2 + deg(C3)2 ≥ 3(a2 + a)2 = 3a2(a + 1)2.

Equality holds only in the case, in which an assignment of 1
Hence, if there is a clustering C with Q(C) of at least

3 a to each cluster is possible.

K(A) = 1 −

4
3(a + 1)

−

3a2(a + 1)2
9a2(a + 1)2 =

2
3

−

4
3(a + 1)

then we know that this clustering must split the element vertices perfectly to the three
clique clusters. As each element vertex is contained in exactly one cluster, this yields a solu-
tion for the instance of 3-Partition. With this choice of K(A) the instance (G(A), K(A))
of Modularity is satisﬁable only if the instance A of 3-Partition is satisﬁable.

Otherwise, suppose the instance for 3-Partition is satisﬁable. Then there is a parti-
tion into three sets such that the sum over each set is 1
3 a. If we cluster the corresponding
graph by joining the element vertices of each set with a diﬀerent clique, we get a cluster-
ing of modularity K(A). This shows that the instance (G(A), K(A)) of Modularity is
satisﬁable if the instance A of 3-Partition is satisﬁable. This completes the reduction
⊓⊔
and proves the theorem.

4 Conclusion

We have shown that maximizing the popular modularity clustering index is strongly NP-
complete. These results can be generalized to modularity in weighted graphs. For instance,
we can consider the graph G to be completely connected and use weights of 0 and 1 on each
edge to indicate its presence. Instead of the numbers of edges the deﬁnition of modularity
then employs the sum of edge weights for edges within clusters, between clusters and in
the total graph. This yields an equivalent deﬁnition of modularity for graphs, in which
the existence of an edge is modeled with binary weights. An extension of modularity to
arbitrarily weighted graphs is then straightforward. Our hardness result holds also for the
problem of maximizing modularity in weighted graphs, as this more general problem class
includes the problem considered in this paper as a special case.
Our hardness result shows that there is no polynomial-time algorithm optimizing modular-
ity unless P = NP. Recently proposed algorithms [1, 2, 6, 8, 9, 11, 12] are therefore incorrect
in the sense that they yield suboptimal solutions on many instances. Furthermore, it is
a justiﬁcation to use approximation algorithms and heuristics to cope with the problem.
Future work includes a deeper formal analysis of the properties of modularity and the
development of algorithms with performance guarantees.

References

Rev. E 70, 066111, 2004.

Rev. E 72, 027104, 2005.

1. A. Clauset, M. Newman, and C. Moore Finding community structure in very large networks. Phys.

2. J. Duch and A. Arenas. Community detection in complex networks using extremal optimization. Phys.

3. P. Fine, E. Di Paolo, and A. Philippides Spatially constrained networks and the evolution of modular

control systems. 9th Intl. Conference on the Simulation of Adaptive Behavior (SAB’06).

4. S. Fortunato and M. Barth´elemy. Resolution limit in community detection. arXiv.org physics/0607100,

2006.

5. M. R. Garey and D. S. Johnson. Complexity results for multiprocessor scheduling under resource con-

straints. SIAM Journal on Computing 4:397-411, 1975.

6. R. Guimer`a, M. Sales-Pardo, and L. A. N. Amaral. Modularity from ﬂuctuations in random graphs

and complex networks. Phys. Rev. E 70, 025101, 2004.

7. S. Muﬀ, F. Rao, and A. Caﬂisch. Local modularity measure for network clusterizations. Phys. Rev. E

8. M. Newman. Fast algorithm for detecting community structure in networks. Phys. Rev. E 69, 066133,

9. M. Newman. Modularity and community structure in networks. Proc. Nat. Akad. Sci. USA 103,

10. M. Newman and M. Girvan. Finding and evaluating community structure in networks. Phys. Rev. E

11. J. Reichardt and S. Bornholdt. Statistical mechanics of community detection. arXiv.org: cond-

72, 056107, 2005.

2004.

8577-8582, 2006.

69, 026113, 2004.

mat/0603718, 2006.

12. S. White and P. Smyth. A Spectral Clustering Approach To Finding Communities in Graph. Proc.

13. E. Ziv, M. Middendorf, and C. Wiggins Information-theoretic approach to network modularity Phys.

2005 SIAM Data Mining Conference, 2005.

Rev. E 71, 046117, 2005.

