6
0
0
2
 
y
a
M
 
7
 
 
]
n
a
-
a
t
a
d
.
s
c
i
s
y
h
p
[
 
 
1
v
3
6
0
5
0
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Concepts, Developments and Advanced Applications of the PAX Toolkit

S. Kappler∗, M. Erdmann, M. Kirsch, G. M¨uller (RWTH Aachen university, Germany),
J. Weng (CERN, Geneva, Switzerland), A. Floßdorf (DESY, Hamburg, Germany),
U. Felzmann, G. Quast, C. Saout, A. Schmidt (Karlsruhe university, Germany)

Abstract

The Physics Analysis eXpert (PAX) is an open source
toolkit for high energy physics analysis. The C++ class col-
lection provided by PAX is deployed in a number of analy-
ses with complex event topologies at Tevatron and LHC. In
this article, we summarize basic concepts and class struc-
ture of the PAX kernel. We report about the most recent
developments of the kernel and introduce two new PAX
accessories. The PaxFactory, that provides a class collec-
tion to facilitate event hypothesis evolution, and VisualPax,
a Graphical User Interface for PAX objects.

INTRODUCTION

Physics analyses at modern collider experiments enter a
new dimension of event complexity. At the LHC, for in-
stance, physics events will consist of the ﬁnal state prod-
ucts of the order of 20 simultaneous collisions. In addition,
a number of todays physics questions is studied in channels
with complex event topologies and conﬁguration ambigui-
ties occurring during event analysis.

The Physics Analysis eXpert toolkit (PAX) is a continu-
ously maintained and advanced C++ class collection, spe-
cially designed to assist physicists in the analysis of com-
plex scattering processes [1, 2, 3, 4]. PAX is realized in
the C++ programming language [5]. It provides additional
functionality in top of the vector algebra of the widely-
spread libraries CLHEP [6] (default) or ROOT [7]. The
PAX container model as well as ﬁle I/O are based on the
C++ Standard Template Library (STL) [5].

THE PAX KERNEL

The class collection of the PAX kernel allows the deﬁ-
nition of an abstraction layer beyond detector reconstruc-
tion by providing a generalized, persistent HEP event con-
tainer with three types of physics objects (particles, vertices
and collisions), relation management and ﬁle I/O scheme.
The PAX event container is capable of storing the com-
plete information of multi-collision events (including de-
cay trees with spatial vertex information, four-momenta as
well as additional reconstruction data). An automated copy
functionality for the event container allows the analyst to
consistently duplicate event containers for hypothesis evo-
lution, including its physics objects and relations. PAX
physics objects can hold pointers to an arbitrary number of
instances of arbitrary C++ classes, allowing the analyst to

∗ Corresponding author: Steffen.Kappler@cern.ch

keep track of the data origin within the detector reconstruc-
tion software. Further advantages arising from the usage
of the PAX toolkit are a uniﬁed data model and nomencla-
ture, and therefore increased code lucidity and more efﬁ-
cient team work. The application of the generalized event
container provides desirable side-effects, such as protection
of the physics analysis code from changes in the underly-
ing software packages and avoidance of code duplication
by the possibility of applying the same analysis code to
various levels of input data.

PAX physics objects

The three types of generalized physics objects provided

by the PAX kernel are:

• Particles (or reconstructed objects),

i.e. Lorentz-

vectors, are represented by the class PaxFourVector.

• Vertices, i.e. three-vectors, represented by the class
PaxVertex, are foreseen to realize particle decays.

• Collisions, represented by the class PaxCollision, are
foreseen to allow the separation of multiple interac-
tions in high-luminostity environments.

The vector characteristics of the classes PaxFourVector and
PaxVertex is inherited from the corresponding classes of
the CLHEP or ROOT libraries. Commonly needed, addi-
tional properties such as a name, particle-id, status, charge,
a workﬂag etc. can be stored in data members. Speciﬁc
information complementary to data members, such as b-
tags, jet cone sizes or energy corrections, for instance, can
be stored in the so-called user records (i.e. collections of
string-double pairs).

Each PAX physics object can record pointers to an ar-
bitrary number of instances of arbitrary C++ classes. This
way, the user can keep track of the data origin within the
detector reconstruction software, for instance. Access to
the pointers is possible at the same runtime during any later
stage of the analysis.

Copy constructors are provided to perform deep copies
of PAX physics objects. When copying a PAX physics ob-
ject, all pointers are copied as well. For the convenience
of reconstructing particle decay chains, PAX physics ob-
jects are enabled to establish relations and can be organized
in containers based on the STL class templates map<key,
item> and multimap<key, item>, respectively.

Event container

PAX provides a generalized event container for storage
and handling of the complete information of one multicolli-
sion event including decay trees, spatial vertex information,
four-momenta as well as additional reconstruction data in
the user records.

This container is represented by the class PaxEventIn-
terpret. This class is so named, because it is intended to
represent a distinct interpretation of an event conﬁguration
(e.g. connecting particles to the decay tree according to
one out of a number of hypotheses, applying different jet
energy corrections, etc.). To facilitate the development of
numerous parallel or subsequent event interpretations, the
PaxEventInterpret class features a copy constructor, which
provides a deep copy of the event container with all data
members, physics objects, and their redirected relations.

The PAX toolkit offers a ﬁle I/O scheme for persistent
storage of the event container, based on STL streams. It
allows the user to write the contents of PaxEventInterpret
instances with all contained physics objects as well as their
relations to PAX data ﬁles. When restoring the data from
ﬁle, an empty PaxEventInterpret instance is ﬁlled with the
stored data and objects and all object relations are repro-
duced.

The PAX data ﬁle format is multi-version and multi-
platform compatible and consists of binary data chunks,
that allow ﬁle structure checks and fast positioning.

PAX also provides the possibility to write/read Pax-
EventInterpret instances to/from strings. This way, the user
can store PAX objects to any data format supporting strings
or binary data ﬁelds like databases or experiment speciﬁc
data formats.

All classes of the PAX kernel can be used in compiled
mode within the C-interpreter of ROOT. A more detailed
description of the PAX kernel functionalities can be found
in reference [4].

THE PAX ACCESSORIES

The PAX factory

The PaxFactory is an accessory to the PAX kernel that
facilitates the bookkeeping of event hypothesis evolution.
The class PaxProcess is designed to allow the evolu-
tion of different combinatorial hypotheses (event interpre-
tations) of an event according to a certain physics process.
This task arises during the a priori ambiguous partonic re-
construction of processes with multiple reconstructed ob-
jects of the same type. Figure 1 gives single top production
with leptonic top decay for illustration: permuting the plot-
ted three jets from ﬁgure 1.b at the t→Wb vertex in ﬁgure
1.a provides three different hypotheses.
In addition, the
normally two-fold ambiguity of the longitudinal neutrino
momentum, as provided by a W-mass constraint, doubles
the number of combinatorial hypothesis for the t-quark.
With the PaxProcess class, the analyst can store and man-
age an arbitrary number of event-interpretations including

their physics objects and relations. Like all other PAX ob-
jects, a PaxProcess instance allows to store data in the user
records and can record pointers to an arbitrary number of
instances of arbitrary C++ classes.

Figure 1: a) Schematic view of single top production with
leptonic top decay. b) The visible reconstructed partons of
this channel.

A higher degree of automation at the evolution of com-
binatorial hypotheses is provided by the class PaxAutoPro-
cess. This derivative of the PaxProcess class features au-
tomatic evolution of all possible combinatorial hypotheses
of an event. The rules, according to which these hypothe-
ses are evolved, are deﬁned by user-deﬁned static process-
model, that is passed to the PaxAutoProcess instance at
construction time. This process-model is a PaxEventInter-
pret instance containing a prototype of the process decay-
chain with parameters customizing the behaviour of the
PaxAutoProcess class. The remaining step, to be done by
the analyst, is to further process the evolved event interpre-
tations in standard decision techniques, for instance.

Figure 2: Schematic view of a) single top production and
its main backgrounds b) top-pair production and c) jet-
associated W production.

A further aspect of hypothesis evolution, besides the res-
olution of combinatorial ambiguities, is the parallel evo-
lution of different physics process hypotheses of an event.
As illustrated in ﬁgure 2 for the analysis of single top pro-

duction, the analyst might want to distinguish the signal
channel (ﬁgure 2.a) from its main backgrounds individu-
ally (ﬁgure 2.b and 2.c).

To allow easy management of different physics process
hypotheses of an event, the The class PaxProcessFactory
provides storage and easy access to an arbitrary number of
processes (i.e. instances of the class PaxProcess or deriva-
tives) as well as user records and recording of arbitrary C++
pointers.

While the PaxEventInterpret instances with their physics
objects are intented to remain in memory for one event, the
classes of the PaxFactory accessory are designed for life-
times of up to one computing job. Therefore, the classes
PaxProcess and PaxProcessFactory provide virtual mem-
ber functions to be called at the beginning and end of a job,
at the beginning and end of a run, and, of course, at event
analysis and event ﬁnishing time. By default, the methods
of the PaxProcessFactory class invoke the corresponding
methods of all managed PaxProcess instances.

The PaxFactory accessory provides the class Pax-
EventInterpretTTree, which allows to automatically copy
selected observables from PaxEventInterpret instances on
an event-by-event basis into the TTree of a ROOT ﬁle.
Those observables may be kinematic data or user records of
certain contained physics objects as well as user-records of
the event-interpretation. The automatic copy is performed
according to a user-deﬁned, static copy-model in the form
of a PaxEventInterpret instance, that is passed to the Pax-
EventInterpretTTree instance at construction time.

Figure 3: The Graphical User-Interface of VisualPax al-
lows browsing of PAX I/O ﬁles and editing of PaxEventIn-
terpret instances.

Visual PAX

VisualPax is a recenlty developed accessory to the PAX
kernel that allows browsing of PAX I/O ﬁles and editing of
PaxEventInterpret instances in a Graphical User-Interface.
VisualPax is based on the wxWidgets open source, cross-
platform native user-interface framework [8]. As shown

Figure 4: Example scheme for the use of the PAX kernel
plus accessories in advanced physics analyses. The same
software is used in different conﬁgurations when running
over a) experiment data and b) Monte-Carlo data.

in ﬁgure 3, VisualPax allows to graphically display and
modify event interpretations including properties and de-
cay chains of the contained physics objects. Therefore,
with the help of VisualPax and PAX I/O ﬁles, the process-
models for PaxAutoProcess instances as well as the copy-
models for PaxEventInterpretTTree instances can be man-
aged in a comfortable way.

PAX ADVANCED ANALYSIS EXAMPLE

Advanced physics analyses realized with the PAX kernel
and accessories can be designed according to the schema
shown in ﬁgure 4.

When running over experiment data, a dedicated,
experiment-speciﬁc interface class for ﬁlling the PAX con-
tainers (i.e. PaxEventInterpret instances) represents the in-
terface between detector reconstruction software and the
PAX factory. Once all relevant information is ﬁlled, the ob-
jects are passed to a PaxProcessFactory instance that man-
ages PaxAutoProcess instances for each of the physics pro-
cesses under study. Each of the PaxAutoProcess instances
now evolves the combinatorial hypotheses for each event
according to its process-model, that has been prepared ear-
lier, e.g. with VisualPax. The virtual method ﬁnishEvent()
of the PaxProcessFactory class then can be used to process

[7] R. Brun et al., ROOT, an object oriented data analysis
framework, Proceedings of the 23rd CERN School of Com-
puting, Marathon (Greece), 2000.

[8] wxWidgets: open source, cross-platform native UI frame-
work, online available: http://www.wxwidgets.org/, 2004-
2006.

[9] Borland Together Architect, Borland Software Corporation,
20450 Stevens Creek Blvd., Cupertino, CA 95014, USA,
2005.

[10] M. Erdmann, S. Kappler, M. Kirsch, A. Schmidt, PAX –
Physics Analysis eXpert, online documentation and support:
http://cern.ch/pax, 2006.

[11] M. Erdmann, S. Kappler, M. Kirsch, A. Schmidt, PAX Users

Guide, online available: http://cern.ch/pax, 2006.

[12] CVS - Concurrent Version System, documentation online

available: http://www.nongnu.org/cvs/, 2006.

[13] PAX CVS Repository, online available:

http://isscvs.cern.ch/cgi-bin/viewcvs-all.cgi/?cvsroot=pax,
2006.

the resulting event hypotheses of all processes with deci-
sion techniques such as Likelihood methods, Neural Net-
works, Decision Trees etc. The results of the analysis can
be written to PAX I/O ﬁles or selected observables can be
written to a TTree of a ROOT ﬁle by using the PaxEventIn-
terpretTTree class.

When running over Monte-Carlo data, the generator in-
formation can be passed to the PAX factory in addition.
Furthermore, the PaxProcessFactory can be extended by
PaxProcess derivatives exploiting the Monte-Carlo truth in
order to train the deployed decision techniques in terms of
ambiguity resolution and background-process suppression.
VisualPax can be used at any stage of the analysis to re-

deﬁne process-models or monitor the results.

PAX PROJECT INFRASTRUCTURE

The PAX kernel and its ofﬁcially supported accessories
are continuously maintained and further developed by cur-
rently eight core developers and undergoes regular quality
ensurance [9]. The PAX webpage [10] provides the PAX
Users Guide [11], a comprehensive text documentation of
the PAX toolkit, as well as class reference and fast naviga-
tor pages for download or online use. Version management
of the software project is handled with a web-browsable
Version Control System (CVS) [12][13].

ACKNOWLEDGEMENTS

The authors would like to thank Dominic Hirschbuehl,
Yves Kemp, Patrick Schemitz, and Thorsten Walter, for
helpful contributions and feedback.

REFERENCES

[1] M. Erdmann et al., Physics Analysis Expert, Proceedings of
the 14th Topical Conference on Hadron Collider Physics,
HCP2002, Karlsruhe, Germany, 2002.

[2] M. Erdmann, D. Hirschb¨uhl, C. Jung, S. Kappler, Y. Kemp,
M. Kirsch et al., Physics Analysis Expert PAX: First Ap-
plications, Proceedings of the conference on Computing
in High Energy and Nuclear Physics (CHEP03), La Jolla,
USA, physics/0306085, 2003.

[3] M. Erdmann, U. Felzmann, D. Hirschb¨uhl, C. Jung, S. Kap-
pler, M. Kirsch et al., New Applications of PAX in Physics
Analyses at Hadron Colliders, Proceedings of the confer-
ence on Computing in High Energy and Nuclear Physics
(CHEP04), Interlaken, Switzerland, 2004.

[4] S. Kappler, M. Erdmann, U. Felzmann, D. Hirschb¨uhl,
M. Kirsch, G. Quast et al., The PAX Toolkit and its Appli-
cations at Tevatron and LHC, IEEE Trans. Nucl. Sci., vol.
53, no. 2, 2006.

[5] B. Stroustrup, The C++ Programming Language, Addison

Wesley, ISBN 0-201-88954-2, 1997.

[6] CLHEP

online
http://proj-clhep.web.cern.ch/proj-clhep/, 2006.

documentation

library,

available:

80

70

60

50

40

30

20

10

0

For m at Proble m s, source edited
B ad or no PostScript file

Pages nu m bered/e m pty etc
Figure Proble m s
B ad Fonts
U nreadable disks/missing files
A uthor requested changes
Paper too long
E quation proble m s

A4 paper (21.0 x 29.7 cm)

241mm
9.5 in

)
n
i
 
9
7
.
0
(
 

m
m
0
2

)
n
i
 
1
1
 
x
 
5
.
8
(
 
r
e
p
a
p
 
r
e
t
t
e
l
 
S
U

3.25 in

82.5mm

0.2 in

5.0mm

19mm (0.75 in)

