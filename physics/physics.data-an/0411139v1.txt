4
0
0
2
 
v
o
N
 
5
1
 
 
]
n
a
-
a
t
a
d
.
s
c
i
s
y
h
p
[
 
 
1
v
9
3
1
1
1
4
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

A new set of Monte Carlo moves for lattice
random-walk models of biased diﬀusion

Michel G. Gauthier a, Gary W. Slater a,

aUniversity of Ottawa, 150 Louis-Pasteur, Ottawa, Ontario K1N 6N5, Canada

Abstract

We recently demonstrated that standard ﬁxed-time lattice random-walk models
cannot be modiﬁed to properly represent biased diﬀusion processes in more than
two dimensions. The origin of this fundamental limitation appears to be the fact
that traditional Monte Carlo moves do not allow for simultaneous jumps along each
spatial direction. We thus propose a new algorithm to transform biased diﬀusion
problems into lattice random walks such that we recover the proper dynamics for
any number of spatial dimensions and for arbitrary values of the external ﬁeld.
Using a hypercubic lattice, we redeﬁne the basic Monte Carlo moves, including
the transition probabilities and the corresponding time durations, in order to allow
for simultaneous jumps along all Cartesian axes. We show that our new algorithm
can be used both with computer simulations and with exact numerical methods to
obtain the mean velocity and the diﬀusion coeﬃcient of point-like particles in any
dimensions and in the presence of obstacles.

Key words: Diﬀusion coeﬃcient, biased random-walk, Monte Carlo algorithm.

1 Introduction

Lattice Monte Carlo (LMC) computer simulations are often used to study
diﬀusion problems when it is not possible to solve the diﬀusion equation. If
the lattice mesh size is small enough, LMC simulations provide results that
are in principle arbitrarily close to the numerical solution of the diﬀusion
equation. In LMC simulations, a particle is essentially making an unbiased
random-walk on connected lattice sites, and those moves that collide with

Email addresses: mgauthie@science.uottawa.ca (Michel G. Gauthier),

gslater@science.uottawa.ca (Gary W. Slater).

Preprint submitted to Elsevier Science

2 February 2008

obstacles are rejected [1,2,3,4]. The allowed Monte Carlo moves are usually
displacements by one lattice site along one of the d spatial directions.

In the presence of an external ﬁeld, one must bias the possible lattice jumps in
order to also reproduce the net velocity of the particle. However, this is not as
easy as it looks because one must also make sure that the diﬀusion coeﬃcient
is correctly modelled along each of the d spatial directions. Using a Metropolis
weighting factor [1] does not work because in the limit of large driving ﬁelds,
all the jumps along the ﬁeld axis are in the same direction and hence the the
velocity saturates and the diﬀusion coeﬃcient in this direction vanishes. This
approach is thus limited to weak ﬁelds, at best. A better approach is to solve
the local diﬀusion problem (i.e., inside each lattice cell) using a ﬁrst-passage
problem (FPP) [5,6,7,8] approach, and to use the corresponding probabilities
and mean jumping times for the coarser grained LMC moves. In this case,
the mean jumping times are shorter along the ﬁeld axis, but one can easily
renormalize the jumping probabilities to use a single time step. In a recent
paper [9], we demonstrated that although this method does give the correct
drift velocity for arbitrary values of the driving ﬁeld, it fails to give the correct
diﬀusion coeﬃcient. The problem is due to the often neglected fact that the
variance of the jumping time aﬀects the diﬀusion process in the presence of a
net drift [10]. LMC models do not generally include these temporal ﬂuctuations
of the jumping time, at least not in an explicit way. In the same article [9], we
showed how to modify a one-dimensional LMC algorithm with the addition
of a stochastic jumping time τ ± ∆τ , where the appropriate value of the
standard-deviation ∆τ was again obtained from the resolution of the local
FPP. For simulations in higher spatial dimensions d > 1, it is possible to use
our one-dimensional algorithm with the proper method to alternate between
the dimensions as long as the Monte Carlo clock advances only when the
particle moves along the ﬁeld direction [9].

LMC simulations of diﬀusion processes actually use stochastic methods to re-
solve a discrete problem that can be written in terms of coupled linear equa-
tions. Several years ago, we proposed a way to compute the exact solution of
the LMC simulations via matrix methods, thus bypassing the need for actual
simulations. This alternative method is valid only in the limit of vanishingly
weak driving ﬁelds, but it produces numerical results with arbitrarily high
precision. The crucial requirement of the method is a set of LMC moves that
have a common jumping time. Dorfman [11,12] suggested a slightly diﬀerent
but still exact numerical method, and the two agree perfectly at zero-ﬁeld.
More recently [13], we extended our numerical method to cases with driving
ﬁelds of arbitrary magnitudes; in order to do that, we used LMC moves that
possess a single jumping time for all spatial directions, but this forced us to
neglect the temporal ﬂuctuations discussed above. As a consequence, our nu-
merical method generates exact velocities but fails to provide reliable diﬀusion
coeﬃcients. Again, Dorfman’s alternate method also give the same velocities,

2

but because the LMC moves do not include the proper temporal ﬂuctuations,
neither method can be used to compute the diﬀusion coeﬃcient along the ﬁeld
axis. In summary, a ﬁxed-time LMC algorithm can be used with exact numeri-
cal methods to compute the net velocity, but temporal ﬂuctuations (and hence
computer simulations) must be used to compute the diﬀusion coeﬃcient.

We recently solved the problem of deﬁning a LMC algorithm with both a
ﬁxed time step and the proper temporal ﬂuctuations [9]. This required the
addition of a probability to stay put on the current lattice site during a given
time step (of course, this change also implies a renormalization of the jumping
probabilities). This probability of non-motion has a direct eﬀect on the real
time elapsed between two displacements of the Brownian walker, and this
eﬀect can be adjusted in order to reproduce the exact temporal ﬂuctuations
of the local FPP. We showed that this new LMC algorithm can be used with
Dorfman’s exact numerical method to compute the exact ﬁeld-dependence of
both the velocity and the diﬀusion coeﬃcient of a particle on a lattice in the
presence of obstacles. As far as we know, this is the ﬁrst biased lattice random-
walk model that gives the right diﬀusion coeﬃcient for arbitrary values of the
external ﬁeld. Other models, such as the repton model [2], are restricted to
weak ﬁelds. Several other articles (see, e.g. [14,15,16]) report simulations of
diﬀusive processes, but all of them appear to be limited to small biases.

Unfortunately, our LMC algorithm [9] has a fatal ﬂaw: for dimensions d >
2, some of the jumping probabilities turn out to be negative. This failure
suggests that there is a fundamental problem with this class of models, or more
precisely with standard LMC moves (however, note that it is still possible to
use computer simulations and ﬂuctuating jumping times τ ± ∆τ , as explained
above). In other words, it is impossible to get both the right velocity and the
right diﬀusion coeﬃcient in all spatial directions (if d > 2) when the LMC
jumps are made along a single axis at each step.

In this article, we examine an alternative to the standard LMC moves in
order to derive a valid LMC algorithm with a common time step for spatial
dimensions d > 2. We suggest that a valid set of LMC moves should respect the
fact that motion along the diﬀerent spatial directions is actually simultaneous
and not sequential. As we will show, this resolves the problem and allows us
to design a powerful new LMC algorithm that can be used both with exact
numerical methods and stochastic computer simulations.

2 The biased random-walk in one dimension

As mentioned above, Metropolis-like algorithms are not reliable if one wants
to study diﬀusion via the dynamics of biased random-walkers on a lattice [9].

3

The discretization of such continuous diﬀusion processes should be done by
ﬁrst solving the FPP of a particle between two absorbing walls (the distance
between these arbitrary walls is the step size l of the lattice). Indeed, comple-
tion of a LMC jump is identical to the the ﬁrst passage at a distance l from
the origin. In one dimension, this FPP has an exact algebraic solution, and
the resulting transition probabilities (noted ± for parallel and antiparallel to
the external force F ) are [17]:

p±(ǫ) =

1
1 + e∓2ǫ ,

τ (ǫ) =

tanh ǫ
ǫ

τB ,

where ǫ = F l/2kBT is the (scaled) external ﬁeld intensity, kB is Boltzmann’s
constant and T is the temperature. The time duration of these FPP jumps
is [17]:

where τB, the time duration τ (0) of a jump when no external ﬁeld is applied,
is called the Brownian time.

Although Eqs. 1 and 2 can be used to simulate one-dimensional drift problems
(the net velocity is then correct), they erroneously generate a ﬁeld-dependent
diﬀusion coeﬃcient for a free particle, which is wrong. This failure is due to
the lack of temporal ﬂuctuations in such a LMC algorithm (at each step,
the particle would jump either forward (p+) or backward (p−), and all jumps
would take the same time τ ). As mentioned above, it is possible to ﬁx this
problem [9] with a stochastic time step like τ ± ∆τ where ∆τ can also be
calculated exactly within the framework of FPP’s [17]:

∆τ (ǫ) =

tanh ǫ − ǫ sech2ǫ
ǫ3

s

× τB .

However, the resulting algorithm can only be used in Monte Carlo computer
simulations because exact resolution methods [13,18] require a common time
step for all jumps.

Alternatively, temporal ﬂuctuations can be introduced using a probability s′
to remain on the same lattice site during the duration of a ﬁxed time step
τ ′ [9]. Not moving has for eﬀect to create a dispersion of the time elapsed
between two actual jumps. In order to obtain the right free-solution diﬀusion
coeﬃcient, we must have [9] :

s′(ǫ) =

− csch2ǫ .

coth ǫ
ǫ

4

(1)

(2)

(3)

(4)

This modiﬁcation also forces us to renormalize the other elements of the LMC
algorithm:

± = (1 − s′)p± ,
p′

τ ′ = (1 − s′)τ .

(5)

(6)

Equations 4 to 6 deﬁne a LMC algorithm that can be used with Monte
Carlo simulations (or exact numerical methods) to study one-dimensional
drift and diﬀusion problems. One can easily verify [9] that it leads to the
proper free-solution velocity (v0 = hxi/τ ′ = ǫl/τB) and diﬀusion coeﬃcient
(D0 = h∆x2i/2τ ′ = l2/2τB), while satisfying the Nernst-Einstein relation
D0/v0 = l/ǫ. These equations will thus be the starting point of our new mul-
tidimensional LMC algorithm.

3 Extension to higher dimensions

In principle, we can build a simple model for d > 1 dimensions using the
elements of a one-dimensional biased random walk for the ﬁeld axis and those
of an unbiased random-walk for each of the d − 1 transverse axes. Indeed, it
is possible to fully decouple the motion along the diﬀerent spatial directions
if the ﬁeld is along a Cartesian axis. Such an algorithm is divided into three
steps:

(1) First, we must select the jump axis, keeping in mind that the particle
should share its walking time equally between the d spatial directions. The
probability to choose a given axis should thus be inversely proportional
to the mean time duration of a jump in this direction (note that the time
duration of a jump is shorter in the ﬁeld direction).
(2) Secondly, the direction (±) of the jump must be selected.
(3) Finally, the time duration of the jump must be computed and the Monte

Carlo clock must be advanced.

There are several ways to implement these steps. The easiest way is to use
Eqs. 1 to 3; in this case, the LMC clock must advance by a stochastic increment
τ ± ∆τ each time a jump is made along the ﬁeld axis (in order to obtain
the proper temporal ﬂuctuations, the clock does not advance otherwise). A
slightly more complicated way would be to use Eqs. 4 to 6; again, the clock
advances only when the jump is along the ﬁeld axis, but this choice has the
advantage of not needing a stochastic time increment. Although both of these
implementations can easily be used with computer simulations, they would
not function with exact numerical methods because of the way the clock is
handled.

5

For exact numerical methods, an algorithm with a common time step and
a common clock for all spatial directions is required. We showed that it is
indeed possible to do this if we renormalize Eqs. 1 and 2 properly [13]; this
approach works for any dimension d > 1, but it can only be used to compute
the exact velocity of the particle since it neglects the temporal ﬂuctuations.
In order to also include these ﬂuctuations, one must start from Eqs. 4 to 6
instead. Unfortunately, this can be done only in two dimensions since the
renormalization process gives negative probabilities when d > 2 [9].

Clearly, in order to derive a multi-dimensional LMC algorithm with a ﬁxed
time-step, a common clock and the proper temporal ﬂuctuations, we need a
major change to the basic assumptions of the LMC methodology. In the next
section, we propose to allow simultaneous jumps in all spatial directions. This
is a natural choice since LMC methods do indeed assume that the motion of the
particle is made of d entirely decoupled random-walks. Current LMC methods
assume this decoupling to be valid, but force the jumps to be sequential and
not simultaneous.

4 The need for a new set of moves

In our multi-dimensional algorithm [9], the LMC moves were the standard
unit jumps along one of the Cartesian axes, and a probability to stay put
was used to generate temporal ﬂuctuations. Since moving along a given axis
actually contributes to temporal ﬂuctuations along all the other axes [9], the
method fails for d > 2 because the transverse axes then provide an excess of
temporal ﬂuctuations. This strongly suggests that the traditional sequential
LMC moves are the culprit. Sequential LMC moves are used solely for the sake
of simplicity, but they are a poor representation of the fact that real particles
move in all spatial directions at the same time. This weakness is insigniﬁcant
for unbiased diﬀusion, but it becomes a roadblock in the presence of strong
driving ﬁelds.

In order to resolve this problem, we thus suggest to employ a set of moves that
respect the simultaneous nature of the dynamics along each of the d axes. To
generate a LMC algorithm for this new set of moves, we will use our exact
solution of the one-dimensional problem for each of the d directions.

5 New d-dimensional LMC moves: the free-solution case

Our new LMC moves will include one jump attempt along each of d spatial
directions. The list will thus consist of d ! × 3d diﬀerent moves since we must

6

allow for all possible permutations of the three fundamental jumps (of length
±l and 0) used by the exact one-dimensional model that we will be using for
each axis. Note that the external ﬁeld must be parallel to one the Cartesian
±, s′ and τ ′ in
axes (we choose the x-axis here). The dynamics is governed by p′
the x-direction (Eqs. 4 to 6), whereas we can in principle use p⊥ = 1
2 and τB
for the transverse directions because there is no need to model the temporal
ﬂuctuations when there is no net drift in the given direction [9].

The optimal time step for our new moves is τ ′(ǫ), the duration of the fastest
unit process. We thus have to rescale the transverse probability p⊥ accordingly:

p′
⊥ = p⊥

τ ′
τB

.

⊥ = 1 − 2p′
s′

⊥ .

s′
⊥|ǫ→∞ = 1 ,

This generates an arbitrary probability to stay put in the transverse directions:

In the zero-ﬁeld limit, this probability gives:

s′
⊥|ǫ→0 =

= s′|ǫ→0 .

2
3

Therefore, the probability to stay put is the same in all the directions in this
limit, as it should. In the opposite limit ǫ → ∞, we have:

(7)

(8)

(9)

(10)

and the jumps in the transverse directions become extremely rare, as expected.
Equations 4 to 8 are suﬃcient to build the table of multi-dimensional moves
and their diﬀerent probabilities since the d directions are independent.

Figure 1 illustrates the new LMC moves for the 2D and 3D cases in the
absence of obstacles. The moves, all of duration τ ′, combine d simultaneous
one-dimensional processes and include net displacements along lattice diago-
nals. The d = 2 paths are further deﬁned in Table 1a; such a description of the
trajectories will be essential later to determine the dynamics in the presence of
obstacles. It is straightforward to extend this approach to higher dimensions
(d > 2).

We can easily verify that this new set of LMC moves gives the right free-
solution velocity and diﬀusion coeﬃcients for all dimensions d ≥ 2. If the ﬁeld
is pointing along the x-axis, the average displacement per time step is hXi′ =
−)l, while the average square displacement is hX 2i′ = (p′
(p′
−)l2.

+ − p′

+ + p′

7

Using these results, we can compute the free-solution velocity v0x and diﬀusion
coeﬃcient D0x:

v0x =

hXi′
τ ′ =

lǫ
τB

,

and

D0x =

h∆X 2i′

2τ ′ =

hX 2i′ − hXi′2
2τ ′

=

l2
2τB

.

(11)

(12)

One can also verify that v0⊥ = 0 and D0⊥ = l2/2τB. These are precisely the
results that we expect.

Therefore, the model introduced here does work for all values of the external
ﬁeld ǫ and all dimensions d ≥ 2 in the absence of obstacles. The problems faced
in Ref. [9] have been resolved by making the d directions truly independent
from each other and choosing τ ′ as the fundamental time step of the new LMC
moves.

6 New d-dimensional LMC moves: collisions with obstacles

Since this new model works ﬁne in free-solution, the next step is to deﬁne
how to deal with the presence of obstacles. The rule that we follow in those
cases where a move leads to a collision with an obstacle is the same as before,
i.e., such a jump is rejected and the particle remains on the same site. In our
algorithm, though, this means that one (or more) of the d sub-components of
a d-dimensional move is rejected. Therefore, the list of transition probabilities
must take into account all of the possible paths that the particle can follow
given the local geometry. A two-dimensional example is illustrated in Table 1b.
We see that the two diﬀerent trajectories that previously lead to the upper
right corner (site c) now lead to diﬀerent ﬁnal positions due to the rejection of
one of the two unit jumps that are involved. The ﬁnal transition probabilities
for this particular case are listed in Table 1b. Of course, all local distributions
of obstacles can be studied using the same systematic approach.

7 New d-dimensional LMC moves: the continuum limit

In order to test our new set of LMC moves for systems with obstacles, we will
compare its predictions to those of our previous two-dimensional algorithm [9]

8

since we know that both can properly reproduce the velocity and the diﬀusion
coeﬃcient of a particle in the case of an obstacle-free system. However, the
diﬀerent moves used by these two algorithms means that a true comparison
can only be made in the limit of the continuum since the choice of moves
always aﬀects the result of a coarse-grained approach if there are obstacles.

The exact numerical method that we developed in collaboration with Dorf-
man [18] is not limited to the previous set of LMC moves. It can easily be
modiﬁed to include other LMC moves, including diagonal moves. Combining
Dorfman’s method [18,11,12] and our new LMC moves, we now have a way to
compute the exact velocity and the exact diﬀusion coeﬃcient of a particle in
the presence of arbitrary driving ﬁeld for any dimension d ≥ 2.

We thus studied the system shown in Fig. 2b using both algorithms, and we
repeated the calculation for diﬀerent lattice parameters ξl (with 0 < ξ ≤ 1)
while the obstacle size (l) remained constant (the surface concentration of
obstacles is thus kept constant at C = 1/9). The limit of the continuum
corresponds to ξ → 0. We compared the velocities and diﬀusion coeﬃcients
along the ﬁeld-axis obtained with both algorithms over a wide range of ξ.
Note that the value of the external scaled ﬁeld ǫ, which is proportional to
the lattice parameter (ǫ = F l/2kBT ), has to be rescaled by the factor ξ.
Figure 2a presents the data for both algorithms for a nominal ﬁeld intensity
ǫ = 1. We clearly see that the two approaches converge perfectly in the ξ → 0
limit. Interestingly, the new algorithm converges slightly faster towards the
asymptotic continuum value. This is explained by the fact that the diagonal
transitions reduce the number of successive collisions made by a random-
walker when it is trapped behind an obstacle at high ﬁeld.

8 Conclusion

Conventional three-dimensional LMC algorithms cannot be used to study both
the mean velocity and the diﬀusion coeﬃcient of a Brownian particle if the
time step has to be constant (as required by exact numerical methods). This
limitation is due to the fact that these algorithms only allow jumps to be
made along one axis at each time step. Such unit jumps make it impossible
to obtain the proper temporal ﬂuctuations that are key to getting the right
diﬀusion coeﬃcient.

We propose that LMC moves should actually respect the fact that all of the d
spatial dimensions are fully independent. This means that each move should
include a component along each of these dimensions. This complete dimen-
sional decoupling allows us to conserve the proper temporal ﬂuctuations and
hence to reproduce the correct diﬀusion process even in the presence of an

9

external ﬁeld of arbitrary amplitude. This approach leads to a slightly more
complicated analysis of particle-obstacle collisions, but this is still compatible
with the exact numerical methods developed elsewhere [9].

The new LMC algorithm presented in this paper opens the door to numerous
coarse-grained simulation and numerical studies that were not possible before
because previous algorithms were restricted to low ﬁeld intensities.

This work was supported by a Discovery Grant from the Natural Science and
Engineering Research Council (NSERC ) of Canada to GWS. MGG was sup-
ported by a NSERC scholarship, an excellence scholarship from the University
of Ottawa and a Strategic Areas of Development (SAD) scholarship from the
University of Ottawa.

Acknowledgments

References

[1] K. Binder and D. W. Heermann. Monte Carlo Simulation in Statistical Physics,

2nd Corrected Ed. Springer-Verlag, 1992.

[2] M. E. J. Newman and G. T. Barkema. Monte Carlo Methods in Statistical

Physics. Clarendin Press, 1999.

[3] D. W. Heermann. Computer Simulation Methods in Theoretical Physics, 2nd

Ed. Springer-Verlag, 1990.

[4] K. Binder, editor. Monte Carlo and Dynamics Simulations in Polymer Science.

Oxford University Press, 1995.

[5] S. Redner. A Guide to First-Passage Processes. Cambridge University Press,

2001.

[6] Z. Farkas and T. Fulop. One-dimensional drift-diﬀusion between two absorbing
boundaries: application to granular segregation. J. Phys. A, 34:3191–3198, 2001.

[7] N. G. van Kampen. Stochastic Processes in Physics and Chemistry, pages 347–

355. North-Holland, 1992.

[8] C. W. Gardiner. Handbook of Stochastic Methods for Physics, Chemistry, and

the Natural Sciences. Springer-Verlag, 1983.

[9] M. G. Gauthier and G. W. Slater. Building lattice random-walk models for real

drift and diﬀusion problems. Phys. Rev. E, 70:015103(R), 2004.

10

[10] J.-P. Bouchaud and A. Georges. Anomalous diﬀusion in disordered media -
statistical mechanisms, models and physical applications. Phys. Rep., 195:127–
293, 1990.

[11] K. D. Dorfman. Exact computation of the mean velocity, molecular diﬀusivity,
and dispersity of a particle moving on a periodic lattice. J. Chem. Phys.,
118:8428–8436, 2003.

[12] K. D. Dorfman, G. W. Slater, and M. G. Gauthier. Generalized taylor-aris
dispersion analysis of spatially periodic lattice monte carlo models: Eﬀect of
discrete time. J. Chem. Phys., 119:6979–6980, 2003.

[13] M. G. Gauthier and G. W. Slater. Exactly solvable Ogston model of gel
electrophoresis: IX. Generalizing the lattice model to treat high ﬁeld intensities.
J. Chem. Phys., 117:6745–6756, 2002.

[14] S. Havlin and D. Ben-Avraham. Diﬀusion in disordered media. Advances in

Physics, 51:187–292, 2002.

[15] M. Q. L´opez-Salvans, J. Casademunt, G. Iori, and F. Sagu´es. Dynamics of ﬁnger
arrays in a diﬀusion-limited growth model with a drift. Physica D, 164:127–151,
2002.

[16] S. Bustingorry, E. R. Reyes, and M. O. C´aceres. Biased diﬀusion in anisotropic

disordered systems. Phys. Rev. E, 62:7664–7669, 2000.

[17] G. W. Slater. Theory of band broadening for DNA gel electrophoresis and

sequencing. Electrophoresis, 14:1–7, 1993.

[18] M. G. Gauthier, G. W. Slater, and K. D. Dorfman. Exact lattice calculations
of dispersion coeﬃcients in the presence of external ﬁelds and obstacles. Eur.
Phys. J. E, 2004.

11

Fig. 1. (a) Our new set of probabilities in two dimensions for an obstacle-free case
(right) is the result of the combination of two simultaneous one-dimensional pro-
cesses (left). The grey site represents the position of the random walker before the
transition. (b) Same as in (a) for a three-dimensional system (for clarity, we present
only three of the ﬁnal transition probabilities).

12

x (squares) and diﬀusion coeﬃcient D∗

Fig. 2. (a) Scaled velocity v∗
x (circles) vs the
mesh size ξ for ǫ = 1. These calculations were done using the algorithm presented
in Ref. [18] (ﬁlled symbols) and the one proposed in this paper (empty symbols).
(b) The obstacle is of size l × l, the lattice is of size 3l × 3l (with periodic boundary
conditions), and the particle (not shown) is of size ξl × ξl. The system is shown for
three diﬀerent values of the mesh size parameter ξ.

13

Table 1
Listing of all the possible trajectories and their transition probabilities in two di-
mensions for the free-solution case (a) and an example of obstacle obstruction (b).

(a) Free-solution case

(b) Obstacle case

1st
jump

2nd
jump

ﬁnal
position

transition
probability

1st
jump

2nd
jump

ﬁnal
position

transition
probability

p′
−
p′
⊥
s′
p′
⊥
p′
+
p′
⊥
p′
−
s′
⊥
s′
s′
⊥
p′
+
s′
⊥
p′
−
p′
⊥
s′
p′
⊥
p′
+
p′
⊥

p′
⊥
p′
−
p′
⊥
s′
p′
⊥
p′
+
s′
⊥
p′
−
s′
⊥
s′
s′
⊥
p′
+
p′
⊥
p′
−
p′
⊥
s′
p′
⊥
p′
+

a

b

c

d

e

f

g

h

i

−p′
p′
⊥

s′p′
⊥

+p′
p′

⊥

p′
−s′
⊥

s′s′
⊥

+s′
p′

⊥

−p′
p′
⊥

s′p′
⊥

+p′
p′

⊥

p′
−
p′
⊥
s′
p′
⊥
p′
⊥
p′
−
s′
⊥
s′
s′
⊥
p′
+
s′
⊥
p′
+
p′
−
p′
⊥
s′
p′
⊥
p′
+
p′
⊥

p′
⊥
p′
−
p′
⊥
s′
p′
+
s′
⊥
p′
−
s′
⊥
s′
s′
⊥
p′
+
p′
⊥
p′
⊥
p′
−
p′
⊥
s′
p′
⊥
p′
+

a

b

d

e

f

g

h

i

−p′
p′
⊥

′

′
⊥ +

p

s

⊥

+p′
p′
2

′
+s

′
⊥ +

p

⊥

+p′
p′
2

−s′
p′
⊥

s′s′
⊥

−p′
p′
⊥

s′p′
⊥

+p′
p′

⊥

14

