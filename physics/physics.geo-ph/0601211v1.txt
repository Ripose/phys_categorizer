6
0
0
2
 
n
a
J
 
0
3
 
 
]
h
p
-
o
e
g
.
s
c
i
s
y
h
p
[
 
 
1
v
1
1
2
1
0
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

MovieMaker: A Parallel Movie-Making Software for Large Scale Simulations

Hitoshi Uehara, Shintaro Kawahara, Nobuaki Ohno, Mikito Furuichi, Fumiaki Araki, and Akira Kageyama
Earth Simulator Center,
Japan Agency for Marine-Earth Science and Technology,
3173-25 Showa-machi, Kanazawa-ku,
Yokohama, 236-0001, Japan

We have developed a parallel rendering software for scientiﬁc visualization of large-scale, three-
dimensional, time development simulations. The goal of this software, MovieMaker, is to generate a
movie, or a series of visualization images from totally one TB-scale data within one night (or less than
12 hours). The isocontouring, volume rendering, and streamlines are implemented. MovieMaker is
a parallel program for the shared memory architecture with dynamic load balancing and overlapped
disk I/O.

I.

INTRODUCTION

The output data size of computer simulation is rapidly growing in accordance with the development of high per-
formance computers. On Earth Simulator, it is not seldom that output data reaches more than 1 GB per one time
step for a single variable. Since a typical simulation may produce the output data for several variables for hundreds
or sometimes thousands time steps, the whole data set by one simulation job can reach more than 1 TB in total.

Three dimensional, time development data should be visualized by a series of images, or a movie. However, making
a scientiﬁc visualization movie from 1 TB data in a reasonable time is beyond the ability of commercially available
software today.

Therefore, we have decided to develop such a software by ourselves. The goal of the system, “MovieMaker”, is to
enable us to produce a movie from one TB simulation data within 12 hours, or one night[1]. When the whole data
set consists of 1,024 time steps with 1 GB each, MovieMaker should be able to apply various visualization processes
for each time step within about 40 seconds.

MovieMaker can handle two diﬀerent kinds of visualization methods, the polygon-based method and the volume-
based method. This is useful when one should visualize a mixed set of scalar and vector ﬁelds; for instance, the
volume rendering for a pressure ﬁeld and the streamlines for a ﬂow vector ﬁeld. This can be contrasted with most of
other visualization tools developed so far [2, 3, 4]. Another feature of MovieMaker is its simple disk I/O. Yu et al.[2]
pointed out the disk I/O cost in the parallel rendering system. They solved this problem by using the parallel disk
I/O. On the other hand, we use the standard non-parallel disk I/O.

II. DEVELOPMENT OF MOVIEMAKER

We have designed MovieMaker as a master/slave parallel rendering program for the shared-memory architecture.
As shown in Figure 1, the master process and slave processes share the simulation data stored in the shared memory
area. The master process performs the following multi-tasks; (i) to read a conﬁguration ﬁle, (ii) to read the simulation
data into shared-memory area; and (iii) to control the slave processes keeping a good load balance. Slave processes
perform rendering tasks following commands sent from the master process and then return partial-images back to the
master via shared memory. Interprocess communications (IPC) are performed with Message Passing Interface (MPI).
We have achieved the dynamic load balancing in MovieMaker by an active monitoring and dynamic control of the
slave processes.

In addition to the dynamic load balancing, we have also implemented task overlapping for eﬃcient parallel rendering.
Figure 2 shows a ﬂowchart of MovieMaker. While the slave processes are working for rendering tasks for one speciﬁc
time step of the simulation data, the master process reads data of the next time step. Since it takes about a second
to read a GB scale data for each time step from the hard disk drive, the total read time for the whole movie data
may reach about an hour. We could hide this read time in the rendering time of MovieMaker by applying the task
overlapping method.

MovieMaker is implemented in C++ with OpenGL. OpenGL is used for the oﬀ screen rendering. The present
version of MovieMaker has three visualization methods: 1) Volume-rendering; 2) isocontouring; and 3) streamlines.
The volume rendering and the isocontouring are implemented based on basic algorithms of the ray casting and the
marching-cubes, respectively. These three visualization methods can be used in juxtaposition. Fine-tuning of each
visualization method is possible by controlling visualization parameters speciﬁed by the conﬁguration ﬁle.

2

Master Process

Control Parameters
and Simulation Data

Sub-Image

Sub-Image

Images

Order

Shared Memory

Order

Slave Process

Data Access

Slave Process

FIG. 1: MovieMaker. Master/slave model for the parallel processing on the shared memory architecture is adopted.

Master

Init

Slave

Slave

Slave

Init

Init

Init

F
l
o
w

Read Step.1 Data

Order Step.1 Drawing

Read Step.2 Data

Output Step.1 Image

Order Step.2 Drawing

Read Step.3 Data

Output Step.2 Image

Draw
Step.1
SubImage

Draw
Step.1
SubImage

Draw
Step.1
SubImage

Draw
Step.2
SubImage

Draw
Step.2
SubImage

Draw
Step.2
SubImage

FIG. 2: Flowchart of MovieMaker. Overlapping of data read step and rendering step is achieved.

MovieMaker, in the present version, adopts input data deﬁned in the Cartesian geometry. The grid system should
be rectilinear, i.e., uniform and/or non-uniform in each direction of x, y, and z. The maximum grid number is
constrained only by the shared memory size.

In our computational environment with SGI Onyx 3800 (12CPU, 24GB memory; 11 MPI processes) , MovieMaker
has achieved the target performance, i.e., processing one GB within 40 seconds. A performance test was applied to a
geodynamo simulation data with the grid size 640 × 640 × 640 of 4-byte ﬂoating point. The average processing time

FIG. 3: A sample image generated by MovieMaker using the volume rendering.

3

FIG. 4: Same as Figure 3 viewed from diﬀerent angle.

FIG. 5: A sample image generated by MovieMaker using streamlines.

to generate a single image by the volume rendering, isocontouring, and streamlines are, 40 seconds, 33 seconds, and
10 seconds, respectively.

Figure 3 and 4 show sample images of the volume rendering visualization applied to the temperature distribution
of an MHD simulation of the Earth’s magnetosphere. High temperature regions are emphasized. The grid-size of the
data is 502 × 202 × 202, with the 4-byte ﬂoating-point data. The data size for one step is about 80 MB.

Figure 5 is another sample image generated by MovieMaker. This image shows the velocity of solar wind in the

simulation of the magnetosphere, using the streamlines. The bow shock is clearly seen.

III. CONCLUSION

We have developed MovieMaker, a parallel movie-making software for scientiﬁc visualization of large-scale simula-
tions. The main goal of MovieMaker is to make a movie from a TB data within one night (or less than 12 hours),
and this goal has been successfully achieved for the basic visualization methods including the volume rendering,
isocontouring, and streamlines.

[1] Uehara, H. et al. 2005 “MovieMaker: High Performance Movie-Making System for High-Resolution Data”, Joint Meeting

for Earth and Planetary Science CDROM-proceedings. J031-005.

[2] Yu, H., et al. 2004 “I/O Strategies for Parallel Rendering of Large Time-Varying Volume Data”, In Proc. of Parallel Graphics

and Visualization. 31–40.

[3] Ma, K. L., et al. 2003 “Visualizing Very Large-Scale Earthquake Simulations”, In Proc. of Supercomputing 2003.
[4] Livnat, Y., Tricoche, X. 2004 “Interactive Point Based Isosurface Extraction”, In Proc. of IEEE Visualization 2004. 457–464.

