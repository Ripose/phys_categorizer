Solving seismic wave propagation in elastic media using the matrix exponential
approach

J.S. Kole
Centre for Theoretical Physics and Materials Science Centre
University of Groningen, Nijenborgh 4
NL-9747 AG Groningen, The Netherlands
E-mail: j.s.kole@phys.rug.nl
(dated February 2, 2008)

Three numerical algorithms are proposed to solve the time-dependent elastodynamic equations in
elastic solids. All algorithms are based on approximating the solution of the equations, which can be
written as a matrix exponential. By approximating the matrix exponential with a product formula,
an unconditionally stable algorithm is derived that conserves the total elastic energy density. By
expanding the matrix exponential in Chebyshev polynomials for a speciﬁc time instance, a so-called
“one-step” algorithm is constructed that is very accurate with respect to the time integration. By
formulating the conventional velocity-stress ﬁnite-diﬀerence time-domain algorithm (VS-FDTD) in
matrix exponential form, the staggered-in-time nature can be removed by a small modiﬁcation, and
higher order in time algorithms can be easily derived. For two diﬀerent seismic events the accuracy
of the algorithms is studied and compared with the result obtained by using the conventional VS-
FDTD algorithm.

PACS numbers: 91.30.-f, 02.70.-c

I. INTRODUCTION

An important aid in the understanding of wave propagation in inhomogeneous media is seismic forward modeling.
In all but the simplest cases, an analytical solution of the elastodynamic equations is not available, and one must
resort to numerical solutions. For this, two main strategies can be followed: one solves the elastodynamic equations
either in the strong formulation, where the equations of motion and boundary conditions are written in diﬀerential
form, or in the weak formulation, where the equations of motion are given in integral form. The latter formulation,
implemented by ﬁnite element [1,2], spectral element [3,4] or ﬁnite integral methods [5,6], may be preferred to deal
with complex geometries, or non-trivial free surface boundary conditions.

The ﬁrst strategy (the strong formulation) is followed in the ﬁnite-diﬀerence approach that is based on solving either
the ﬁrst-order velocity-stress diﬀerential equations [7–9], or the second order wave equation [10–12]. In the original
formulation of the velocity-stress ﬁnite-diﬀerence time-domain (VS-FDTD) approach [7,8], space and time are both
discretized using second-order ﬁnite diﬀerences. Many enhancements have been introduced to increase the accuracy
and treatment of special boundary conditions. For example, spectral methods have been employed to increase the
accuracy of the approximation of the spatial derivative operators [13,14]; a rotated staggered spatial grid has been
developed to surmount some instability and lack of spatial accuracy issues [15]; polynomial expansions of the time
evolution operator have been used to increase the accuracy and eﬃciency of the time integration process [14,16].

Although each speciﬁc method cited above oﬀers its own advantages and drawbacks, none of these methods feature
unconditional stability and/or exact energy conservation, which can be useful for long integration times, and high
material contrast situations, where instabilities have been noticed [17]. The algorithms that will be introduced in this
paper, address this issue.

Starting from the velocity-stress ﬁrst-order diﬀerential equations, it can be shown (see section II) that the solution of
these equations can be written as the matrix exponential of a skew-symmetric matrix. This constitutes an orthogonal
transformation, conserving the total energy density. Guided by recent results regarding the numerical solution of
the time-dependent Maxwell Equations [18–23], where the underlying skew-symmetry of the equations of motion
In section III
is exploited in a matrix exponential approach, we apply this framework to the current problem.
this framework is brieﬂy repeated for convenience and three algorithms are derived to solve the time-dependent
elastodynamic equations. The incorporation of the presence of a source is described in section IV. For some typical
examples, the performance and eﬃciency of the algorithms is studied in section V, and the conclusions are summarized
in section VI.

3
0
0
2
 
n
a
J
 
1
2
 
 
]
h
p
-
o
e
g
.
s
c
i
s
y
h
p
[
 
 
1
v
0
5
0
1
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

1

In the absence of body forces, the linearized equation of momentum conservation reads [24]

II. THEORY

ρ

∂2
∂t2 ui =

∂
∂xj

σij ,

j
X

∂
∂t

σ
v

=

(cid:18)

(cid:19)

(cid:18)

0
1
ρ D

CDT
0

−

σ
v

.

(cid:19) (cid:18)

(cid:19)

where ρ is the density, ui is the displacement ﬁeld and σij the stress ﬁeld (i = x, y, z). It can be recast into a coupled
ﬁrst order velocity-stress equation [7], yielding in matrix form

Here, σ = (σxx, σxy, σxz, σyx, σyy, σyz, σzx, σzy, σzz)T ), v = (vx, vy, vz)T is the velocity ﬁeld and D is the matrix
containing the spatial derivatives operators,

D = 

∂
∂x
0
0

1
2
1
2

∂
∂y
∂
∂x
0

1
2

1
2

∂
∂z
0
∂
∂x

1
2
1
2

∂
∂y
∂
∂x
0

0
∂
∂y
0

0
∂
∂z
∂
∂y

1
2
1
2

1
2

1
2

∂
∂z
0
∂
∂x

0
∂
∂z
∂
∂y

1
2
1
2

0
0
∂
∂z

.






Cijkl}

{

relates the stress and strain,



The stiﬀness tensor C =

σij = Cijklekl,

and is symmetric and positive deﬁnite for elastic solids.

Some important symmetries in matrix equation (2) can be made explicit by introducing the ﬁelds

and

w = √ρ v,

s =

1
√C

σ.

The expression √C is valid since C is symmetric and positive deﬁnite.

By deﬁnition, the length of ψ

(s, w)T , given by

≡
ψT ψ dr =

2 =

ψ

k

k

ψ
h

ψ
|

i ≡

ZV
is related to the elastic energy density

ZV

(cid:0)

w2 + s2

dr =

ρv2 + σT C−

1σ

dr

(cid:1)

ZV

(cid:0)

(cid:1)

w

≡

1
2

(cid:0)

of the ﬁelds.

ρv2 + σT C−

1σ

=

ρv2 +

1
2 



(cid:1)

,

Cijkleijekl


Xijkl

In terms of ψ, matrix equation (2) becomes

∂
∂t

ψ =

0
√ρ D√C

1

 

−

√CDT 1
√ρ
0

ψ

!

ψ.

≡ H

Using the symmetric properties of ρ and √C, one can prove that the matrix

is skew-symmetric

0

H

T = 



−

(cid:16)

√CDT 1
√ρ

(cid:17)

T

1

√ρ D√C
0

(cid:17)

T

(cid:16)

=






 

−

H

0
√ρ D√C

1

√CDT 1
√ρ
0

=

,

−H

!

with respect to the inner product as deﬁned in equation (7). The formal solution of equation (9) is given by

ψ(t) = et

Hψ(0)

(t)ψ(0),

≡ U

2

(1)

(2)

(3)

(4)

(5)

(6)

(7)

(8)

(9)

(10)

(11)

FIG. 1. Unit cell of the three-dimensional staggered grid onto which the continuous velocity and stress ﬁelds of the elas-
todynamic equations are mapped in order to conserve the skew-symmetry. Left: grid for elastic isotropic solids. Note: the
Lam´e constants λ and µ coincide with the stress ﬁeld components, and the mass density is only deﬁned on velocity ﬁeld points.
Right: grid for the general anisotropic case (i, j = x, y, z).

where ψ(0) represents the initial state of the ﬁelds and the operator
is skew-symmetric the time evolution operator,

is an orthogonal transformation:

U

determines their time evolution. And, since

U

(t)T =

(
−
and it follows that

U

U

t) =

1(t) = e−

t
H,

−

U

=

|U

hU

(t)ψ(0)

(t)ψ(0)
i

ψ(t)
ψ(t)
i
|
h
Hence, the time evolution operator
. In physical terms,
(t) rotates the vector ψ(t) without changing its length
this means that the total energy density of the ﬁelds does not change with time, as can be expected on physical
grounds [24].

.
ψ(0)
ψ(0)
i
|
h

(13)

=

ψ

U

k

k

In practice, the construction of a numerical algorithm requires to discretize space and time. During both these
procedures, the skew-symmetry of
(during the time
integration) should be conserved. For the discretization of space, this requirement can be met by choosing a staggered
spatial grid [8] and a central diﬀerence approximation for the spatial derivative. This yields a skew-symmetric matrix
H for the discrete analogue of
. A unit cell of the grid is shown in ﬁgure 1. The explicit form of H is derived in the
appendix, in the case of a two-dimensional isotropic elastic solid. Accordingly, the discrete analogue of ψ(t) is given
by vector Ψ(t).

(during the spatial discretization) and the orthogonality of

H

H

U

The continuous problem, deﬁned by

, is now translated to a lattice problem deﬁned by H:

Ψ(t) = exp(tH)Ψ(0)

U (t)Ψ(0).

≡

H

Ψ(t + τ ) = exp(τ H)Ψ(t) = U (τ )Ψ(t).

or, in the time-stepping approach, we have for a small timestep τ

At this point, we invoke three diﬀerent strategies to perform the time integration, i.e. to approximate the matrix
exponential exp(tH). Here, we closely follow the derivation of algorithms to solve the time-dependent Maxwell
equations [18–23], where the problem to be solved is stated in a very similar form, although the underlying physics is
diﬀerent. The ﬁrst algorithm is based on conserving the existing symmetries during the discretization of time, and is
unconditionally stable. Here, the time integration is carried out by a time-stepping procedure. The second algorithm
is based on approximating the solution itself for a particular time instance, by means of a Chebyshev expansion,
and constitutes therefore a “one-step” algorithm. The last algorithm is based on recasting the original velocity-stress
ﬁnite-diﬀerence algorithm into matrix exponential form. This allows to remove the staggered-in-time nature, and
oﬀers an elegant way to derive higher-order in time algorithms. The construction of the algorithms is brieﬂy repeated
in the next section.

III. THE MATRIX EXPONENTIAL APPROACH

A. Unconditionally stable algorithms

A suﬃcient condition for an algorithm to be unconditionally stable is that [25]

U (τ )Ψ(t)

k ≤ k

Ψ(t)
k

.

k

3

H

(12)

(14)

(15)

(16)

Since U (τ ) is an orthogonal transformation (see previous section), we have
, and it is suﬃcient to
conserve the orthogonality of U (t) for an approximation ˜U (t) to U (t), in order to construct an unconditionally stable
algorithm. One way to accomplish this is to make use of the Lie-Trotter-Suzuki formula [26,27] and generalizations
thereof [28,29]. If the matrix H is decomposed, so that H =

U (τ )Ψ(t)
k

Ψ(t)
k

=

k

k

p
i=1 Hi, then

U1(τ ) = eτ H1 . . . eτ Hp,

P

is a ﬁrst order approximation to U (τ ). More importantly, if each matrix Hi is skew-symmetric, then U1(τ ) is orthogonal
by construction, and hence, algorithms based on U1(τ ), are unconditionally stable. Using the fact that both U (τ )
and U1(τ ) are orthogonal matrices, the error on U1(τ ) is subject to the upper bound [30]

U (τ )

U1(τ )

k

−

k ≤

[Hi, Hj]
k

k

,

p

τ 2
2

i<j
X
HjHi.

where [Hi, Hj] = HiHj −
In the appendix, the decomposition of H is carried out for two-dimensional isotropic elastic solids, for which p = 12,
and it is shown that each matrix Hi is block diagonal. The computation of the matrix exponential of a block diagonal
matrix Hi can be performed eﬃciently, as it is equal to the block-diagonal matrix of the matrix exponentials of the
individual blocks. Therefore, the numerical calculation of eτ Hi reduces to the calculation of matrix exponentials of
2

×
In practice, implementation of the ﬁrst order algorithm is all that is required to construct higher order algorithms.
This is due to the fact that in the product-formula approach, the accuracy of an approximation can be improved in a
systematic way by reusing lower order approximations, without changing the fundamental symmetries. For example,
the orthogonal matrix

2 matrices, which are rotations.

U2(τ ) = U1(

τ /2)T U1(τ /2) = eτ Hp/2 . . . eτ H1/2eτ H1/2 . . . eτ Hp/2,

−

is a second-order approximation to U (τ ) [28,29]. A particularly useful fourth-order approximation (applied in for
example [18,19,27–39]) is given by [28]

U4(τ ) = U2(aτ )U2(aτ )U2((1

4a)τ )U2(aτ )U2(aτ ),

−

where a = 1/(4

41/3).

−

B. One-step algorithm

A well-known alternative for timestepping is to use Chebyshev polynomials to construct approximations to time-
evolution operators [40–44]. This approach has also been successfully applied to the problem of seismic wave propaga-
tion [14,16]. However, the main diﬀerences between these implementations and the algorithm explained below, besides
the spatial discretization (which is based here on a central diﬀerence approximation, instead of a spectral method),
is that in the present case, matrix H is explicitly anti-symmetrized, which gives rise to purely imaginary eigenvalues
[45]. This is an important property to justify the validity of the expansion. In the derivation of the current algorithm,
we follow [20–22], a recent implementation of the Chebyshev algorithm to solve electromagnetic wave propagation.

The basic idea is to expand the time evolution matrix U (t) = exp(tH) for a speciﬁc time instance t in matrix valued
Chebyshev polynomials on the domain of eigenvalues of H, which lies entirely on the imaginary axis since H is skew-
1, 1], by considering
symmetric. For proper application of the expansion, the domain of eigenvalues is rescaled to [
, see
Hij |
the matrix B =
i |
[45], and is easy to compute since the matrix H is sparse. Operating on state Ψ(0), the expansion becomes
P

k1 denotes the 1-norm of the matrix. It is given by

k1, where

−
k1 ≡

maxj

iH/

H

H

H

−

k

k

k

Ψ(t) = exp(tH)Ψ(0) = exp(izB)Ψ(0) =

J0(z)I + 2

Jn(z)

Tn(B)

Ψ(0),

"

∞

n=1
X

#

e

where I is the identity matrix, z = t
Chebyshev polynomials, deﬁned by the recursion relation

H

k

k

, Jn are nth order Bessel functions and

Tn(B) = inTn(B) are the modiﬁed

e

(17)

(18)

(19)

(20)

(21)

(22a)

(22b)

(22c)

T0(B)Ψ(0) = Ψ(0),

T1(B)Ψ(0) = iBΨ(0),
e

Tn+1(B)Ψ(0) = 2iB

Tn(B)Ψ(0) +

Tn

1(B)Ψ(0)

for n

1.

e

e

e

−

e

≥

4

Due to the fact that the matrix B is purely imaginary, it follows from the above recursion relation (22) that
and thus Ψ(t) will be real valued and no complex arithmetic is involved, as should be the case.

Tn(B)Ψ(0)

In practice, the summation in Eq. (21) will be truncated at some expansion index m. This number depends on
the value of z, since the amplitude of the coeﬃcients Jn(z) decrease exponentially for n > z; this is explained in
more detail in Refs. [20–22]. Consequently, the computation of one timestep amounts to carrying out m repetitions
of recursion relation Eq. (22) to obtain the ﬁnal state. This is a simple procedure: only the multiplication of a vector
with a sparse matrix and the summation of vectors are involved.

e

C. A modiﬁed VS-FDTD algorithm

In section III A, it was shown that in the product formula formalism, higher-order in time algorithms can be
constructed by reusing the lower order algorithms. This elegant technique to increase the accuracy of time integration
can also be applied to FDTD algorithms (in case of the Maxwell Equations, see [23]), and hence the conventional
VS-FDTD algorithm, if it is recast into an exponent operator form.

The update equations of the VS-FDTD [7,8] algorithm can be written as

σ(t + τ )
v(t + τ /2)

(cid:19)

= (I + τ A)(I + τ B)

σ(t)

v(t

(cid:18)

−

τ /2)

≡

(cid:19)

U1(τ )

σ(t)

v(t

(cid:18)

−

τ /2)

,

(cid:19)

(cid:18)

where

and

A =

(cid:18)

0
0

CDT
0

−

,

(cid:19)

B =

0
0
1
ρ D 0

.

(cid:19)

(cid:18)

Since A2 = B2 = 0, the time evolution operator U1(τ ) is equal to

U1(τ ) = exp(τ A) exp(τ B),

and second-order accurate in time operating on ﬁelds that are deﬁned staggered-in-time. However, if U1(τ ) is inter-
preted as an approximation to the operator exp(τ A + τ B), working on ﬁelds non staggered-in-time, it is a ﬁrst-order
approximation. Furthermore, since the time evolution operator is now expressed in matrix exponential form, the
accuracy can be increased by the same procedure as was used for the unconditionally stable algorithms (cf. eqs. (19)
and (20)). Therefore, the operator

U2(τ ) = exp(τ A/2) exp(τ B) exp(τ A/2),

constitutes a second-order approximation to the exact time evolution operator. And similarly, a fourth order algorithm
can be derived, see Eq. (20).

So, by introducing a small modiﬁcation to the original VS-FDTD algorithm, that would require a minimal change
in existing numerical codes, the staggered-in-time nature is removed, and higher-order in time algorithms are derived.

In the presence of an explosive initial condition, or other time-dependent body force, the equation of motion reads

where the time-dependent source is denoted by the term φ(t). The formal solution is given by

∂
∂t

ψ(t) =

ψ(t) + φ(t),

H

ψ(t) = exp(t

)ψ(0) +

exp((t

u)

)φ(u)du.

H

−

H

t

0
Z

IV. SOURCES

5

(23)

(24)

(25)

(26)

(27)

(28)

(29)

In the time-stepping approach (e.g. the unconditionally stable algorithms), the source term –if its time dependence is
known explicitly– can be integrated for each timestep. For example, a standard quadrature formula can be employed
to compute the integral over u, like the fourth-order accurate Simpson rule [47]

e(t+τ

−

u)

Hφ(u) du

eτ Hφ(t) + 4eτ H/2φ(t + τ /2) + φ(t + τ )

.

t+τ

t
Z

τ
6

≈

(cid:16)

(cid:17)

−

In case of the one-step algorithm, this approach of incorporating the source term is not eﬃcient, as for each value
of t
u the recursion (22) would have to be performed, and a diﬀerent route is taken. Instead, each of the two terms
on the right hand side of equation (29) is expanded in modiﬁed Chebyshev polynomials separately. The expansion of
the ﬁrst term is discussed in section III B. For the second term, the source-term integral, the procedure is carried out
here for a source with Gaussian time dependence,

φ(t) = f (t)S(r) = exp(

α(t

t0)2)S(r),

−
where S(r) denotes the spatial dependence of the source.

−

The source term

h(t, t0, α, H) =

due(t

−

u)Hf (u),

t

0
Z

is expanded in modiﬁed Chebyshev polynomials,

h(t, t0, α, H)S(r) =

b0I +

bk

Tk

S(r),

1
2

 

K

Xk=0

!

e

where the expansion coeﬃcients are given by

bk = i−

h(t, t0, α, cos θ) cos kθdθ.

k 2
π

π

0
Z

The replacement of H by cos θ emphasizes that H should be normalized such that all eigenvalues lie in the range
2
[
1 and
−
x =

1, 1]. We proceed by evaluating h(t, t0, α, H). After substitution of z =

k1, z0 = t0k

k1, β = α/

iH/

H

H

H

H

k

k

k

−

k

k1 normalize the matrix H, we obtain
x2/4β

exp

z0)ix

(z

1
2

π
α

−

−

h(z, z0, β, x) =

(cid:18)
Now we put x = cos θ and the remaining integral over θ in equation (34) is computed by a Fast Fourier transformation:

(cid:19)(cid:21)

p

p

(cid:18)

(cid:19)

(cid:20)

(cid:1)

(cid:0)

r

erf

z0

β

+ erf

(z

z0)

β +

.

(35)

ix
2√β

−

−

ix
2√β

The derivation of the Chebyshev expansion coeﬃcients for a source deﬁned by equation

bk = 2i−

k

e2πink/N h(z, z0, β, cos

2πn
N

).

N

1

−

n=0
X

g(t) =

f (t) =

2α(t

t0) exp(

α(t

−

−

−

−

t0)2).

∂
∂t

is very similar, and will not be treated explicitly here.

V. RESULTS

The performance and accuracy of the algorithms introduced in the previous sections is studied by comparing the
results with a reference solution generated by the one-step algorithm, denoted by ˆΨ(t). This choice is motivated by
the fact that the latter, considering the time integration, produces numerically exact results [14,16,41]. Furthermore,
there are rigorous bounds on the error of the unconditionally stable algorithm (cf. Eq. (18)):
in the presence of a
source φ(t), the diﬀerence between the exact solution Ψ(t) and the approximate solution ˜Ψ(t), obtained by using the
4th order unconditionally stable algorithm, is bounded by [23]

Ψ(t)

k

−

˜Ψ(t)

k ≤

c4tτ 4

Ψ(0)
k

+

du

φ(u)
k

k

,

(cid:19)

0
Z

k
(cid:18)

t

6

(30)

(31)

(32)

(33)

(34)

(36)

(37)

(38)

FIG. 2. The corner-edge system, consisting of two diﬀerent materials. The system size and location of the source (x) are
indicated in the picture. At the top, a free-surface boundary condition is imposed, the other boundaries are rigid. The overall
−1 and
density is ρ = 2500 kgm
vs = 2 kms−1, whereas in the inner material (II), they are vp = 9 kms−1 and vs = 3 kms−1. The source excites the sxx and
syy stress ﬁelds with time dependence g(t) from equation (37) and parameters α = 40 and t0 = 1.5 s.

−3, and the mesh size is δ = 100 m. In the bulk material (I), the wave velocities are vp = 6 kms

FIG. 3. Two snapshots of the kinetic-energy density distribution of the corner-edge system of ﬁgure 2. Left: state at t = 1.8

s, right: state at t = 6.0 s.

where c4 is a constant. For the diﬀerence between the exact solution and the solution obtained by using the one-step
algorithm, we can write using the triangle inequality

Ψ(t)

k

−

ˆΨ(t)

Ψ(t)

˜Ψ(t)
k

−

+

˜Ψ(t)

k

ˆΨ(t)
k

.

−

k ≤ k

vanishes with τ 4, as we will show below,
Using equations (38) and (39) and the fact that the diﬀerence
we can be conﬁdent that the one-step algorithm indeed produces numerically exact results. This justiﬁes to deﬁne
the error as

˜Ψ(t)

−

).

k

/

ˆΨ(t)
k

˜Ψ(t)

The performance of the following algorithms is considered: the original VS-FDTD algorithm, denoted by Vir; the
unconditionally stable algorithms, denoted by LTS-2 and LTS-4, for resp. second and fourth order accuracy in time;
the non staggered-in-time, modiﬁed VS-FDTD algorithm, denoted by VNS-2 and VNS-4, depending on the accuracy
in time.

ˆΨ(t)
k

ˆΨ(t)
k

k

−

k

Consider a rectangular system consisting of two diﬀerent materials, displayed in ﬁgure 2. This system is also
studied in references [8,10], and proved to be a good testing situation for the performance of an algorithm solving the
elastodynamic equations. The time evolution of the velocity and stress ﬁelds is computed using an explosion as initial
condition, modeled by equation (37), up to t = 6 s, with the six diﬀerent algorithms. In ﬁgure 3, the kinetic-energy
density distribution is shown for two diﬀerent time instances.

For the corner-edge system, the errors are listed in table I, and are shown in ﬁgure 4. For the largest timestep,
the VS-FDTD algorithms (Vir,VNS-2,VNS-4) are unstable. This can be expected, since the maximum timestep is
limited by the largest velocity, the vp velocity, and the mesh-size, through the Courant limit [8]

(39)

(40)

τ <

δ
vp√2

.

Furthermore, from table I it is clear that for all algorithms the error scales according to the order of accuracy in
time. We also see that for the corner-edge system, the VS-FDTD algorithms perform much better than the energy-
conserving LTS algorithms, as long as the timestep is smaller than the Courant limit. For timesteps larger than the

7

Time-step (s)
−2
5 · 10
5 · 10−3
−4
5 · 10
−5
5 · 10
5 · 10−6

Vir
∞
1.7 · 10−2
−4
1.7 · 10
−6
1.7 · 10
1.7 · 10−8

VNS-2
∞
1.7 · 10−2
−4
1.7 · 10
−6
1.7 · 10
1.7 · 10−8

VNS-4
∞
4.1 · 10−6
−10
4.1 · 10
−13
2.0 · 10
2.8 · 10−13

LTS-2
3.0 · 100
5.9 · 10−1
−3
6.1 · 10
−5
6.1 · 10
6.1 · 10−7

LTS-4
3.1 · 100
1.6 · 10−4
−8
1.6 · 10
2.0 · 10
-

−10

TABLE I. Error as function of timestep for all timestepping algorithms, for the system deﬁned in ﬁgure 2. An inﬁnite symbol
(∞) denotes that the algorithm was not stable, whereas in one case (-) the computation was not performed. The error in the
staggered-in-time Vir algorithm is determined by averaging the error in the kinetic and potential energy density at respectively
the ﬁnal time instance and the ﬁnal time instance shifted by half a timestep. The time shifting procedure is carried out by the
Chebyshev algorithm and also applied to prepare the initial condition.

FIG. 4. Error as function of timestep for all timestepping algorithms, for the system deﬁned in ﬁgure 2, using the data from

table I.

Courant limit, the LTS algorithms (LTS-2 and LTS-4) are stable, although the error does not (yet) scale according
10), the number of operations the
to the order of accuracy in time [48]. For very accurate results (errors below 10−
achieve this accuracy becomes so large that the error does not scale systematic anymore.

With respect to the eﬃciency of the algorithms, we note that the number of matrix-vector operations W , necessary
to perform one timestep, is 1 for the Vir algorithm, 1.5 for the second-order VNS-2 and LTS-2 algorithms, and 10
for the fourth-order VNS-4 and LTS-4 algorithms. For the speciﬁc example here, the corner-edge system, the one-
step algorithm employs m = 1514 expansion terms. At t = 6 and τ = 0.005, the VNS-2 algorithm already uses
more (namely 1800) matrix-vector operations. Therefore, we draw the conclusion that one-step algorithm should be
preferred to be used to solve the time evolution for this problem. Note that in general, the choice of which algorithm
to use depends heavily on which degree of error is acceptable. In this speciﬁc case, there are values for τ for which
the VNS-2 algorithm uses less matrix-vector operations than the one-step algorithm, but then the error will be larger
than the error for τ = 0.005, and maybe unacceptably high. On the other hand, one VNS-2 or LTS-2 matrix-vector
operation is carried out (in practice) faster than one Chebyshev recursion iteration, although this depends on the
actual implementation.

It is important to note that the initial condition plays an important role in the error of the solution produced by
a speciﬁc algorithm. From the results of the corner-edge system, one might draw the conclusion that the VS-FDTD
algorithms achieve better results than the LTS algorithms for all systems. This is not true. In table II, the error is
listed as function of timestep for all algorithms, as compared with the one-step algorithm, for a system consisting of a

8

Time-step (s)
−2
5 · 10
5 · 10−3
−4
5 · 10
−5
5 · 10
5 · 10−6

Vir
∞
1.3 · 10−1
−3
1.3 · 10
−5
1.3 · 10
1.3 · 10−7

VNS-2
∞
1.3 · 10−1
−3
1.3 · 10
−5
1.3 · 10
1.3 · 10−7

VNS-4
∞
1.6 · 10−5
−9
1.6 · 10
−13
1.6 · 10
1.1 · 10−13

LTS-2
1.2 · 100
5.4 · 10−2
−4
5.4 · 10
−6
5.4 · 10
5.4 · 10−8

LTS-4
−2
5.8 · 10
1.3 · 10−5
−9
1.4 · 10
−11
1.7 · 10
1.7 · 10−10

TABLE II. Error as function of timestep for all timestepping algorithms.

In this case, the one-step algorithm employs
m = 321 expansion terms. The system measures Lx = Ly = 10, with a mesh of δ = 0.1, and the material parameters ρ, λ, µ
vary randomly in space with values distributed randomly in the interval [1, 3]. The error is determined at t = 3. (all quantities
are expressed here in dimensionless units).

FIG. 5. Error as function of timestep for all timestepping algorithms, for a random medium and random initial conditions,

using the data from table II.

random medium (also studied in for example [49]) and starting from a random initial condition. The results are also
shown in ﬁgure 5. From the table and the ﬁgure, it is clear that in this case, the LTS family of algorithms perform
better than the VS-FDTD algorithms. Again we see that the error scales according to the order of accuracy in time,
10). Especially for the LTS-4 algorithm, we see that accumulation of rounding
except for very small errors (below 10−
errors, due to large number of operations, increases the error.

VI. CONCLUSIONS

In this paper, we have introduced algorithms to solve the time-dependent elastodynamic equations, based on a
matrix exponential approach. The conservation of the underlying skew-symmetry of the ﬁrst-order partial diﬀerential
equations while discretizing the spatial operators and ﬁelds, oﬀers a sound starting point to expand the time evolution
operator in Chebyshev polynomials. The resulting one-step algorithm is accurate up to machine precision, and this
statement is justiﬁed by rigorous bounds on the error of the unconditionally stable algorithms. The latter class of
algorithms proved particularly useful if the total energy should be conserved or if a random initial condition is used.
Finally, the original VS-FDTD algorithm is modiﬁed by recasting it into an exponent operator form. In this new
formulation, the staggered-in-time nature is removed and higher-order in time algorithms are derived, based on the
lower-order algorithms. Existing VS-FDTD codes can be modiﬁed with minor eﬀort to beneﬁt from these advantages.
In this paper, only free and rigid boundary conditions are considered. Future research is aimed at incorporating

9

absorbing boundary conditions, and the presence of visco-elastic materials. More sophisticated discretization schemes,
conserving the skew-symmetry, can be easily incorporated [19], and do not require conceptual changes.

The author acknowledges H. De Raedt, M.T. Figge and K. Michielsen for useful discussions. This work is partially

supported by the Dutch ‘Stichting Nationale Computer Faciliteiten’ (NCF).

ACKNOWLEDGEMENTS

APPENDIX: DISCRETIZATION AND DECOMPOSITION OF H FOR TWO-DIMENSIONAL
ISOTROPIC ELASTIC SOLIDS

In this appendix, it is shown how the matrix

=

H

 

0
√ρ D√C

1

−

√CDT 1
√ρ
0

,

!

is discretrized conserving its skew-symmetric properties, for two dimensional isotropic elastic solids. In two dimensional
P-SV wave propagation, no dependency upon y is assumed. For isotropic elastic solids, the stiﬀness matrix is given
in terms of the Lam´e coeﬃcients λ and µ by [24]

in the basis σ = (σxx, σzz, σxz)T . In the skew-symmetric basis, using the variables w = √ρ v and s = C−
needs √C, which reads

1/2σ, one

λ + 2µ
λ
0

λ

0
λ + 2µ 0

0

,

µ 


C =





√C =

α β
0
β α 0
0 0 √µ 


,





where

α =

β =

1
√2
1
√2

λ + µ + √µ

λ + µ

√µ

−

,

.

(cid:17)

(cid:17)

(cid:16)p

(cid:16)p

This gives for the explicit form of the matrix

0
0
0
∂x α 1
∂
√ρ
1
∂
∂z β
√ρ

0
0
0
1
∂
∂x β
√ρ
∂z α 1
∂
√ρ

0
0
0
∂
∂z √µ
∂
∂x √µ

1
√ρ
1
√ρ

=

H











H
1
β ∂
√ρ
∂z
1
α ∂
√ρ
∂z
1
√ρ √µ ∂
∂x
0
0

α ∂
∂x
β ∂
∂x
√µ ∂
∂z
0
0

1
√ρ
1
√ρ
1
√ρ

,











in the basis ψ = (sxx, szz, sxz, wx, wz)T . The discrete analogue of ψ, the vector Ψ, is obtained by mapping the ﬁelds
onto the two-dimensional staggered grid [8] that is shown in ﬁgure 6. We adopt the convention that the sxx and
szz stress ﬁelds are located in the (1, 1) corner of the grid. The values of the discretized ﬁelds f are related to their
continuous counterparts g by

Therefore, using the unit vector e(i, j, k), ﬁelds within the vector Ψ can be indexed on the grid by

f (i, j, t) = g(iδ/2, jδ/2, t).

Ψ(i, j, sxx, t)

eT
i,j,sxx Ψ(t)

sxx(i, j, t),

≡

≡

10

(41)

(42)

(43)

(44)

(45)

(46)

(47)

(48)

FIG. 6. Unit cell of the two dimensional staggered grid onto which the continuous velocity and stress ﬁelds of the elastody-

namic equations are mapped in order to conserve the skew-symmetry.

and analogous equations apply for indexing the other stress and velocity ﬁelds within Ψ.

Due to the staggered nature of the grid and the choice of the origin, the sxx and szz stress ﬁelds are only deﬁned
on the x =odd and z =odd lattice points. Similarly, the wx and wz velocity ﬁelds are deﬁned at respectively the
x =even/z =odd and x =odd/z =even lattice points, and the sxz stress ﬁeld is given at the x =even and z =even
grid entries. Note that all for simplicity of notation the ﬁelds are indexed on the full grid, despite the fact that they
are not deﬁned on each point.

It is assumed that the total number of lattice points in each direction is odd, and also that the boundary is located
at the ﬁrst and last rows/columns of the grid. The free or rigid boundary conditions themselves are implemented by
excluding the ﬁeld points that are located at the boundary and should remain zero during the time integration.

Using this grid and the central-diﬀerence approximation to the spatial derivative, we obtain the spatially discretized

analogue of equation (46), for example

sxx(i, j, t) = α(i, j)

1
δ "

wx(i + 1, j, t)

ρ(i + 1, j) −

wx(i
−
ρ(i

1, j, t)
1, j) #

−

+ β(i, j)

1
δ "

wz(i, j + 1, t)

wz(i, j

ρ(i, j + 1) −

−
ρ(i, j

1, t)
1) #

,

−

(49)

p

p

p

p

wx(i, j, t) =

α(i + 1, j)sxx(i + 1, j, t)

1, j)sxx(i

1, j, t)

β(i + 1, j)szz(i + 1, j, t)
p

1, j)szz(i

1, j, t)

−

−

µ(i, j + 1)sxz(i, j + 1, t)

µ(i, j

1)(sxz(i, j

1, t)

−

−

.

+

+

p

α(i

−
ρ(i, j)
β(i
−
ρ(i, j)

−

−

δ

δ

p
δ

−
ρ(i, j)
p

p

Similar equations hold for szz, sxz and wz. Using this notation, the matrix H can be decomposed into

H = H (x,sxx,wx) + H (x,szz,wx) + H (x,sxz,wz) + H (z,sxx,wz) + H (z,szz,wz) + H (z,sxz,wx),

where, for instance, the explicit form of H (x,sxx,wx) is given by

and

∂
∂t

∂
∂t

H (x,sxx,wx) =

′

e

i,j,sxx

eT
i+1,j,wx −

e

eT

i+1,j,wx

i,j,sxx

ny

nx

−

2

′

j=1
X
ny

i=1
X
1
nx
−

′

′

α(i + 1, j)

δ

ρ(i, j)

(cid:2)

p

α(i, j)

+

δ

ρ(i + 1, j)

j=1
X

i=2
X

= H (x,sxx,wx)

1

(cid:2)
+ H (x,sxx,wx)
p

.

2

e

i,j,sxx

eT
i+1,j,wx −

e

eT

i+1,j,wx

i,j,sxx

(cid:3)

(cid:3)

Here, the prime in the summation indicates that the summation index is increased with strides of two. It is easy
and H (x,sxx,wx)
to convince oneself that the matrices H (x,sxx,wx)
are block diagonal and skew-symmetric. The other
2

1

11

(50)

(51)

(52)

(53)

matrices in equation (51) have similar explicit forms and can also be decomposed into block diagonal parts. Therefore,
a ﬁrst-order approximation to the matrix exponent, as given by equation (17), reads

exp(τ H) =

exp

τ H (x,sxx,wx)

exp

exp

τ H (x,sxz,wz)

exp

2

τ H (x,sxx,wx)
(cid:16)
τ H (x,sxz,wz)

exp

τ H (x,szz,wx)

1

exp

τ H (x,szz,wx)

2

(cid:17)

exp

(cid:16)
τ H (z,sxx,wz)

(cid:17)

1

exp

(cid:16)
τ H (z,sxx,wz)

(cid:17)

2

(cid:16)

(cid:16)

1

1

1

·

·
+

(cid:16)
(τ 2).

O

exp

τ H (z,szz,wz)

(cid:16)
τ H (z,szz,wz)

(cid:17)

exp

exp

(cid:17)

(cid:17)

(cid:17)

2

2

(cid:16)

(cid:17)

(cid:16)
τ H (z,sxz ,wx)
(cid:16)

1

(cid:17)

(cid:17)

exp

(cid:16)
τ H (z,sxz ,wx)
(cid:16)

2

(cid:17)

(cid:17)

(54)

1957, (1984).

889–901, (1986).

(1995).

(1987).

[1] J. Lysmer and L. Drake, “A ﬁnite element method for seismology”, in Methods in Computational Physics 11 (Academic

[2] H. Boa et al, “Large-scale simulation of elastic wave propagation in heterogenous media on parallel computers”, Comp.

[3] A.T. Patera, “A spectral method for ﬂuid dynamics: laminar ﬂow in a channel expansion”, J. Comput. Phys. 54, 468–488,

Press, New York, 1972).

Meth. appl. Mech. Eng. 152, 85–102, (1998).

(1984).

[4] D. Komatitsch, “M´ethodes spectrales et ´el´ements spectraux pour l’´equation de l’´elastodynamique 2D et 3D en milieu

h´et´erog`ene”, PhD thesis, Institute de Physique du Globe de Paris, Paris (1997).

[5] P. Fellinger et al, “Numerical modeling of elastic wave propagation and scattering with EFIT - elastodynamic ﬁnite

integration technique”, Wave Motion 21, 47–66, (1995).

[6] G.V. Konyukh, Y.V. Kritsov and B.G. Mikhailenko, “Numerical-analytical algorithm of seismic wave propagation in

inhomogeneous media”, Appl. Math. Lett. 11, 99–104, (1998).

[7] J. Virieux, “SH-wave propagation in heterogeneous media: velocity-stress ﬁnite diﬀerence method”, Geophysics 49, 1933–

[8] J. Virieux, “P-SV wave propagation in heterogeneous media: velocity-stress ﬁnite diﬀerence method”, Geophysics 51,

[9] A.R. Levander, “Fourth-order ﬁnite-diﬀerence P-SV seismograms”, Geophysics 53, 1425–1436 (1988).
[10] K.R. Kelly et al, “Synthetic seismograms: a ﬁnite diﬀerence approach”, Geophysics 41, 2–27, (1976).
[11] M.A. Dablain, “The application of high-order diﬀerencing to the scalar wave equation”, Geophysics 51, 54–66, (1987).
[12] H. Igel, P. Mora and B. Riollet, “Anisotropic wave propagation through ﬁnite-diﬀerence grids”, Geophysics 60, 1203–1216

[13] D. Kosloﬀ and E. Baysal, “Forward modeling by a Fourier method”, Geophysics 47, 1402–1412, (1982).
[14] H. Tal-Ezer, D. Kosloﬀ and Z. Koren, “An accurate scheme for seismic forward modelling”, Geophys. Prosp. 35, 479–490,

[15] E.H. Saenger, N. Gold and S.A. Shapiro, “Modeling the propagation of elastic waves using a modiﬁed ﬁnite-diﬀerence

[16] H. Tal-Ezer, J.M. Carcione and D. Kosloﬀ, “An accurate and eﬃcient scheme for wave propagation in linear viscoelastic

[17] I. Opr˘sal and J. Zahradn´ik, “From unstable to stable seismic modeling by ﬁnite-diﬀerence method”, Phys. Chem. Earth

[18] J.S. Kole, M.T. Figge and H. De Raedt, “Unconditionally stable methods to solve the time-dependent Maxwell Equations”,

grid”, Wave Motion 31, 77–92, (2000).

media”, Geophysics 55, 1366–1379, (1990).

(A) 24, 247–252, (1999).

Phys. Rev. E 64, 066705-1–066705-14, (2001).

[19] J.S. Kole, M.T. Figge and H. De Raedt, “Higher-order nconditionally stable methods to solve the time-dependent Maxwell

Equations”, Phys. Rev. E 65, 066705-1–066705-12, (2002).

[20] H. De Raedt, K. Michielsen, J.S. Kole, and M.T. Figge, “Chebyshev Method to solve the Time-Dependent Maxwell
Equations”, to appear in Computer Simulation Studies in Condensed-Matter Physics XV, D.P. Landau et al. (Eds.),
Springer Proceedings in Physics, (Springer, Berlin, 2002).

[21] H. De Raedt, J.S. Kole, K. Michielsen and M.T. Figge, “Solving the Maxwell Equations by the Chebyshev method: A

one-step ﬁnite-diﬀerence time-domain algorithm”, preprint available at http://arxiv.org/abs/physics/0208060.

[22] H. De Raedt, J.S. Kole, K. Michielsen and M.T. Figge, “One-step ﬁnite-diﬀerence time-domain algorithm to solve the

Maxwell Equations”, submitted to Phys. Rev. E.

12

1–72, (1987).

Pure Appl. Math. 31, 205–256, (1978).

operators”, Physica A 211, 234–254, (1994).

[23] H. De Raedt, J.S. Kole, K. Michielsen and M.T. Figge, “Numerical methods for solving the time-dependent Maxwell

Equations”, preprint available at http://arxiv.org/abs/physics/02010035.

[24] L.D. Landau and E.M. Lifshitz, Theory of Elasticity, (Pergamon Press, Oxford, 1986).
[25] G.D. Smith, Numerical solution of partial diﬀerential equations, (Clarendon, Oxford, 1985).
[26] H.F. Trotter, “On the product of semi-groups of operators”, Proc. Am. Math. Soc. 10, 545–551, (1959).
[27] M. Suzuki, S. Miyashita, and A. Kuroda, “New method of Monte Carlo simulations and phenomenological theory”, Prog.

Theor. Phys. 58, 1377–1387, (1977).

[28] M. Suzuki, “Decomposition formulas of exponential operators and Lie exponentials with some applications to quantum
physics”, J. Math. Phys. 26, 601–612, (1985); ibid, “General theory of fractal path integrals with applications to many-body
theories and statistical physics”, J. Math. Phys. 32, 400–407, (1991).

[29] H. De Raedt and B. De Raedt, “Applications of the generalized Trotter formula”, Phys. Rev. A 28, 3575–3580, (1983).
[30] H. De Raedt, “Product formula algorithms for solving the time dependent Schr¨odinger equation”, Comp. Phys. Rep. 7,

[31] A.J. Chorin, T.J.R. Hughes, M.F. McCracken, and J.E. Marsden, “Product formulas and numerical algorithms”, Comm.

[32] H. Kobayashi, N. Hatano, and M. Suzuki, “Study of correction terms for higher-order decompositions of exponential

[33] H. De Raedt, K. Michielsen, “Algorithm to solve the time-dependent Schr¨odinger equation for a charged particle in an

inhomogeneous magnetic ﬁeld: Application to the Aharonov-Bohn eﬀect”,Comp. in Phys. 8, 600–607, (1994).

[34] A. Rouhi, J. Wright, “Spectral implementation of a new operator splitting method for solving partial diﬀerential equations”,

Comp. in Phys. 9, 554–563, (1995).

[35] B.A. Shadwick and W.F. Buell, “Unitary integration: a numerical technique preserving the structure of the quantum

Liouville equation”, Phys. Rev. Lett. 79, 5189–5193, (1997).

[36] M. Krech, A. Bunker, and D.P. Landau, “Fast spin dynamics algorithms for classical spin systems”, Comp. Phys. Comm.

[37] P. Tran, “Solving the time-dependent Schr¨odinger equation: suppression of reﬂection from the grid boundary with a ﬁltered

split-operator approach”, Phys. Rev. E 58, 8049–8051, (1998).

[38] K. Michielsen, H. De Raedt, J. Przeslawski, and N. Garcia, “Computer simulation of time-resolved optical imaging of

objects hidden in turbid media”, Phys. Rep. 304, 89–144, (1998).

[39] H. De Raedt, A.H. Hams, K. Michielsen, and K. De Raedt, “Quantum computer emulator”, Comp. Phys. Comm. 132,

111, 1–13, (1998).

1–20, (2000).

[40] C. Leforestier, R.H. Bisseling et al, “A comparison of diﬀerent propagation schemes for the time-dependent Schr¨odinger

equation”, J. of Comp. Physics 94, 59–80, (1991).

[41] H. Tal-Ezer, “Spectral methods in time for hyperbolic equations”, SIAM. J. Numer. Anal. 23, 11–26, (1986).
[42] Y.L. Loh, S.N. Taraskin and S.R. Elliot, “Fast time-evolution method for dynamical systems”, Phys. Rev. Lett. 84,

2290–2293, (2000).

equation”, Phys. Rev. E 56, 1222–1229, (1997).

entropy”, Phys. Rev. E 56, 4822–4829, (1997).

[43] T. Itaka et. al., “Calculating the linear response functions of noninteracting electrons with a time-dependent Schr¨odinger

[44] R.N. Silver and H. R¨oder, “Calculation of densities of states and spectral functions by Chebyshev recursion and maximum

[45] J.H. Wilkinson, The Algebraic Eigenvalue Problem, (Clarendon Press, Oxford, 1965).
[46] M. Abramowitz and I. Stegun, Handbook of mathematical functions, (Dover, New York, 1964).
[47] K.E. Atkinson, An introduction to numerical analysis, (Wiley, New York, 1989).
[48] This behavior is also noticed when unconditionally stable algorithms are used to solve the time-dependent Maxwell Equa-

tions, see [19].

[49] G. Kneip and C. Kerner, “Accurate and eﬃcient seismic modeling in random media”, Geophysics 58, 576–588, (1993).

13

