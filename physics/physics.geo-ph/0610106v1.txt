6
0
0
2
 
t
c
O
 
6
1
 
 
]
h
p
-
o
e
g
.
s
c
i
s
y
h
p
[
 
 
1
v
6
0
1
0
1
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

ON EXACT SOLUTIONS AND NUMERICS FOR
COLD, SHALLOW, AND THERMOCOUPLED ICE SHEETS

ED BUELER AND JED BROWN

Abstract. This three section report can be regarded as an extended appendix to (Bueler, Brown &
Lingle 2006). First we give the detailed construction of an exact solution to a standard continuum
model of a cold, shallow, and thermocoupled ice sheet. The construction is by calculation of
compensatory accumulation and heat source functions which make a chosen pair of functions for
thickness and temperature into exact solutions of the coupled system. The solution we construct
here is “Test G” in (Bueler et al. 2006) and the steady state solution “Test F” is a special case.
In the second section we give a reference C implementation of these exact solutions. In the last
section we give an error analysis of a ﬁnite diﬀerence scheme for the temperature equation in the
thermocoupled model. The error analysis gives three results, ﬁrst the correct form of the Courant-
Friedrichs-Lewy (CFL) condition for stability of the advection scheme, second an equation for error
growth which contributes to understanding the famous “spokes” of (Payne et al. 2000), and third
a convergence theorem under stringent ﬁxed geometry and smoothness assumptions.

1. Derivation of the exact solution

1.1. Review: Equations of the continuum model. The ﬂat bed, frozen base case of the cold
shallow ice approximation is, for the purposes of this paper, taken to be the equations in the
“Continuum Model” part of (Bueler et al. 2006); that paper is hereafter referred to as “BBL.” The
notation used in, the physics of, and the boundary conditions for the continuum model are all laid
out in BBL. The equations are repeated here for convenience:

mass-balance:

temperature:

eﬀective shear stress:

= M − ∇ · Q,

∂H
∂t
∂2T
∂T
∂z2 − U · ∇T − w
∂t
hσxz, σyzi = −ρg(H − z)∇H,

k
ρcp

=

∂T
∂z

+ Σ.

σn−1,

−Q
RT

(cid:18)
z

(cid:19)

constitutive function:

F (T, σ) = A exp

horizontal velocity:

U = −2ρg∇H

F (T, σ)(H − ζ) dζ,

map-plane ﬂux:

vertical velocity:

∇ · U dζ,

0
Z

H

U dz,

Q =

0

Z
w = −

z

0
Z

(1)

(2)

(3)

(4)

(5)

(6)

(7)

DRAFT date: July 30, 2013.
Dept. of Mathematics and Statistics, University of Alaska, Fairbanks AK 99775-6660; e-mail ffelb@uaf.edu.

(8)

(9)

(10)

(12)

(13)

(14)

(15)

2

BUELER AND BROWN

strain heating:

Σ =

hσxz, σyzi ·

1
ρcp

∂U
∂z

.

The primary scalar unknowns are the thickness H, which equals the surface elevation in this ﬂat
1/2. As in (Bueler et al. 2006), to
bed case, and the absolute temperature T . Note σ =
construct exact solutions we must allow an additional source term in the temperature equation:

xz + σ2
σ2
yz

∂T
∂t

= −U · ∇T − w

+

(cid:0)
k
ρcp

(cid:1)
∂2T
∂z2 + Σ + Σc.

∂T
∂z

1.2. Review: Speciﬁcation of geometry and temperature. We repeat the basic speciﬁcation
of the exact solution from BBL. Suppose

where Hs(r) is given by

Hs(r) =

H0
(1 − 1/n)n/(2n+2)

(1 + 1/n)s − 1/n + (1 − s)1+1/n − s1+1/n

,

(11)

n/(2n+2)

i

and f (r), g(t) are given by

H(t, r) = Hs(r) + φ(r)γ(t)

h

φ(r) = cos2

π(r − 0.6L)
0.6L

(cid:19)

γ(t) = Ap sin(2πt/tp).

(cid:18)
if 0.3L < r < 0.9L and φ(r) = 0 otherwise. Also

We suppose from here on that the size of the perturbation f (r)g(t) is limited so that the slope
∂H/∂r in the positive radial direction is negative.

Now suppose

where ν is found from H and Ts by

T (t, r, z) = Ts(r)

ν(t, r) + H(t, r)
ν(t, r) + z

ν(t, r) =

kTs(r)

1 +

1 + 4

2G  

s

H(t, r)G
kTs(r) !

.

Then T satisﬁes the boundary conditions

The form of T in equation (14) is primarily constrained by the need to do the integral for U
analytically (below).

T

z=H = Ts(r)
(cid:12)
(cid:12)

and

= −G/k

∂T
∂z

z=0
(cid:12)
(cid:12)
(cid:12)

1.3. Computation of the velocity ﬁeld. The content presented so far has appeared in (Bueler
et al. 2006), but now we start the more detailed computation.

The horizontal velocity is found from equations (3), (4), and (5):

U(t, r, z) = −2(ρg)nA|∇H|n−1∇H

z

exp

−Q
RT (ζ)

(H − ζ)n dζ

0
Z
= −ˆr2(ρg)nA|Hr|n−1Hre−µν

z

(cid:19)

(cid:18)
e−µζ (H − ζ)ndζ

= −ˆr2(ρg)nA|Hr|n−1Hre−Q/(RTs)µ−(n+1)

eθθn dθ,

(16)

0
Z

µH

µ(H−z)

Z

ON EXACT SOLUTIONS AND NUMERICS FOR THERMOCOUPLED ICE SHEETS

3

where Hr = ∂H/∂r and after a change of variables in the integral. We have generally suppressed
dependence on t and r in these and remaining equations; dependence on z or ζ will remain explicit.
Here we have also introduced

µ(t, r) :=

Q
RTs(ν + H)

.

The change of variables mentioned above is θ := µ(h − ζ). It allows us to rewrite

z

0
Z

Note U

z=0 = 0.

e−µζ(H − ζ)n dζ = µ−(n+1)e−µH

eθθn dθ.

(17)

µH

µ(H−z)

Z

Suppose n = 1, 2, 3, . . .

is an integer. Then we can do integral in (16) analytically. In fact, let

pn be the polynomial deﬁned by the relation

(cid:12)
(cid:12)

ex xn dx = pn(x) ex + c.

Z

It is easy to see by integration-by-parts that pn(x) = xn − npn−1(x) and p0(x) = 1. In particular, it
follows that p3(x) = x3 −3x2 +6x−6 and p4(x) = x4 −4x3 +12x2 −24x+24. Also pn(0) = (−1)n n!.
Assuming that Hr ≤ 0 for all r, deﬁne

and

ω(t, r) := 2(ρg)nA(−Hr)ne−Q/RTs µ−(n+1)

In(t, r, z) :=

eθθn dθ.

µH

µ(H−z)

Z

Then we see, by the deﬁnition of pn, that

In(t, r, z) = pn(µH)eµH − pn(µ(H − z))eµ(H−z)

and it follows that

U(t, r, z) = +ˆrωIn(z).

(18)

We now have an analytical expression for U involving no integrals.

Regarding the above calculation, we believe that for ice sheet ﬂow the integer cases n = 1, 2, 3, 4
completely suﬃce for numerical testing as the range 1.8 ≤ n ≤ 4 is the broadest range of exponents
in the constitutive relation known to the authors (Goldsby & Kohlstedt 2001). It may eventually
be appropriate to consider noninteger n cases, in which case the “incomplete gamma function”
enters (Abramowitz & Stegun 1965), but we do not see the need presently.

Next we seek analytical expressions for the vertical velocity w and for the term ∇ · Q which
appears in equation (1). Both of these quantities are vertical integrals of the horizontal divergence
of the horizontal velocity U.

Recall that the divergence of a radial function is ∇ · (f (r)ˆr) = r−1(∂/∂r) [rf (r)]. Also, from now

on we will liberally use “fr” as an abbreviation for ∂f /∂r.

Thus

But

∇ · U =

[rωIn] =

ωIn +

In + ω

∂ω
∂r

∂In
∂r

.

1
r

∂
∂r

= ω

n

+

− (n + 1)

∂ω
∂r

Hrr
Hr

(cid:20)

µr
µ

,

(cid:21)

1
r

QT ′
s
RT 2
s

noting that Ts is a function of r only, and

= µneµH

(µrH + µHr)H n − (µr(H − z) + µHr)e−µz(H − z)n

.

∂In
∂r

(cid:2)

(cid:3)

4

BUELER AND BROWN

For the last calculation, recall that if F (x) =

g(x)

f (x) φ(t) dt then F ′(x) = g′(x)φ(g(x))−f ′(x)φ(f (x)).

As mentioned, we will integrate ∇ · U vertically. In order to facilitate this integration, deﬁne

φ(t, r) :=

+ n

+

− (n + 1)

and γ(t, r) := µneµH (µrH + µHr)H n

1
r

Hrr
Hr

QT ′
s
RT 2
s

R

µr
µ

so that

∇ · U = ω

φIn(z) −

µneµH µr

e−µz(H − z)n+1 −

µn+1eµH Hr

e−µz(H − z)n + γ

.

It follows that

(cid:2)

(cid:0)

(cid:1)

(cid:0)

z

0
Z

w(t, r, z) = −

∇ · U dζ = ω

µ−1

µ−1µr − φ

In+1(z) + (φ(H − z) + Hr) In(z) − γz

.

(19)

We have again used the change of variable (17). Also, we have integrated In by changing order of
integration:

(cid:2)

(cid:0)

(cid:1)

(cid:3)

(cid:3)

(cid:1)

z

z

0

Z

In(ζ) dζ =

z

µH

µH

eθθn dθ dζ =

eθθn

dζ

dθ

0 Z

Z

µ(H−ζ)

= (z − H)In(z) + µ−1In+1(z).

µ(H−z)

Z

(H−θ/µ)

(cid:16) Z

(cid:17)

Note w

z=0 = 0.

(cid:12)
(cid:12)

1.4. Computation of the compensatory accumulation and heating term. Next,

∇ · Q = ∇H · U

∇ · U dζ = ∇H · U

z=H − w

z=H

Z
from equation (6) and by the above-mentioned rule for diﬀerentiating integrals.
(This is the
calculation which shows the equivalence of the vertically-integrated equation of continuity (1) and
the surface kinematical equation (10).) Thus

(cid:12)
(cid:12)

(cid:12)
(cid:12)

H

0

z=H +
(cid:12)
(cid:12)

∇ · Q = −ωµ−1

µ−1µr − φ

In+1(H) + ωγH.

(20)

We can now compute the compensatory accumulation by using equations (20) and (10):

(cid:0)

(cid:1)

M =

+ ∇ · Q.

∂H
∂t

Next we get to the strain heating term. From equations (3), (4), and (5),

∂U
∂z

= −2(ρg)nA exp

−

|∇H|n−1∇H(H − z)n+1.

Q(ν + z)
RTs(ν + H)

(cid:19)

(cid:18)

Thus, from equations (3) and (8),

Σ =

(−ρg(H − z)∇H) ·

1
ρcp

∂U
∂z

=

2(ρg)nA g
cp

exp

−

(cid:18)

Q(ν + z)
RTs(ν + H)

(cid:19)

(−Hr(H − z))n+1 .

The above completes much of the hard work. Recalling equations (1) and (17), we ﬁnd the

desired compensatory heat source:

Σc =

+ U · ∇T + w

−

∂T
∂z

k
ρcp

∂2T
∂z2 − Σ.

∂T
∂t

ON EXACT SOLUTIONS AND NUMERICS FOR THERMOCOUPLED ICE SHEETS

5

It remains to use the chosen functions H, T in (10), (14), respectively, and ﬁnd the derivatives of
H and T which appear in the relevant PDEs. In particular,
Ht = f g′,

Tt = Ts

(νt + Ht)(ν + z) − (ν + H)νt
(ν + z)2

,

Tr = T ′
s

ν + H
ν + z

+ Ts

(νr + Hr)(ν + z) − (ν + H)νr
(ν + z)2

,

Tz = −Ts

Tzz = 2Ts

ν + H
(ν + z)2 ,
ν + H
(ν + z)3 .

where “Ft,” “Fr,” “Fz,” “Fzz” denote partial derivatives with respect to the given variables. (Recall
that, however, “Ts” denotes the surface boundary value for temperature. Note also that f, g, Ts
are functions of a single variable.)

From the above analysis, we see that one must compute at least the following list of analytical
s, νt, νr, Ht, Hr, Hrr, µr, Tt, Tr, Tz, Tzz. This is actually done in the

derivatives: H ′
reference implementation in the next section.

s , f ′, f ′′, g′, T ′

s, H ′′

2. Reference implementations of Tests F and G

This section contains a C code which accepts t, r, z and computes H, M , T , U , w, Σ, and Σc for
the exact solution in each of Tests F and G. Both these C codes (and corresponding Fortran 90
codes) are in the public domain under the GNU Public License and are available at

www.dms.uaf.edu/∼bueler/iceflowpage.htm

The code here is the authoritative, detailed description of the exact solution.
In particular, it
includes the constants used in BBL, and has analytically-expanded forms for all of the derivatives
listed above. These codes have been compiled using the GNU gcc compiler.

The code is not particularly written for eﬃciency and can undoubtedly be modiﬁed for speed,
though perhaps at some loss in clarity. An eﬃciency is included, namely, the code allows a one-
dimensional array of vertical coordinates z as input and returns corresponding arrays for all of the
z-dependent quantities. One may therefore ask the subroutine for values of T or Σc at every depth
in a particular column of ice, for instance. A very simple example program, which merely evaluates
the exact solution and prints the result to the standard output, is included below.

2.1. exactTestsFG.c. Here is the actual code to compute the exact solutions.

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

double p3(double x) {

/* p_3=x^3-3*x^2+6*x-6, using Horner’s */
return -6.0 + x*(6.0 + x*(-3.0 + x));

}

double p4(double x) {

/* p_4=x^4-4*x^3+12*x^2-24*x+24, using Horner’s */

6

BUELER AND BROWN

return 24.0 + x*(-24.0 + x*(12.0 + x*(-4.0 + x)));

int bothexact(double t, double r, double *z, int Mz,

double Cp, double *H, double *M, double *TT, double *U,
double *w, double *Sig, double *Sigc) {

/*
int bothexact(const double t, const double r, const double z[], const int Mz,
const double Cp, double &H, double &M, double TT[], double U[],
double w[], double Sig[], double Sigc[]) {

const double pi = 3.14159265358979;
const double SperA=31556926.0;

/* seconds per year; 365.2422 days */

/* parameters describing extent of sheet: */
const double H0=3000.0;
const double L=750000.0;
/* period of perturbation; inactive in Test F: */
const double Tp=2000.0*SperA;

/* m */
/* m */

/* s */

/* m/s^2; accel of gravity */
/* J/(mol K) */

/* kg/m^3; density */
/* J/m K s; thermal conductivity */

/* fundamental physical constants */
const double g=9.81;
const double Rgas=8.314;
/* ice properties; parameters which appear in constitutive relation: */
const double rho=910.0;
const double k=2.1;
const double cpheat=2009.0;/* J/kg K; specific heat capacity */
const double n=3.0;
/* next two are EISMINT II values; Paterson-Budd for T<263 */
const double A=3.615E-13;
const double Q=6.0E4;
/* EISMINT II temperature boundary condition (Experiment F): */
/* J/m^2 s; geo. heat flux */
const double Ggeo=0.042;
/* K m^-1 */
const double ST=1.67E-5;
const double Tmin=223.15;
/* K */
const double Kcond=k/(rho*cpheat);

/* Pa^-3 s^-1 */
/* J/mol */

/* constant in temp eqn */

/* Glen exponent */

/* declare all temporary quantities; computed in blocks below */
double power, Hconst, s, lamhat, f, goft, Ts, nusqrt, nu;
double lamhatr, fr, Hr, mu, surfArr, Uconst, omega;
double Sigmu, lamhatrr, frr, Hrr, Tsr, nur, mur, phi, gam;
double I4H, divQ, Ht, nut;
double I4,dTt,Tr,Tz,Tzz;
int i;
double *I3;

I3 = (double *) malloc(Mz * sizeof(double)); /* need temporary array */
if (I3 == NULL) {

fprintf(stderr, "bothexact(): couldn’t allocate memory\n");
return -9999;

if ( (r<=0) || (r>=L) ) {

printf("\nERROR: code and derivation assume 0<r<L
return -9999;

!\n\n");

}

*/

}

}

ON EXACT SOLUTIONS AND NUMERICS FOR THERMOCOUPLED ICE SHEETS

7

/* compute H from analytical steady state Hs (Test D) plus perturbation */
power = n/(2*n+2);
Hconst = H0/pow(1-1/n,power);
s = r/L;
lamhat = (1+1/n)*s - (1/n) + pow(1-s,1+1/n) - pow(s,1+1/n);
if ((r>0.3*L) && (r<0.9*L))

f = pow( cos(pi*(r-0.6*L)/(0.6*L)) ,2.0);

else

f = 0.0;

goft = Cp*sin(2.0*pi*t/Tp);
*H = Hconst*pow(lamhat,power) + goft*f;

/* compute TT = temperature */
Ts = Tmin+ST*r;
nusqrt = sqrt( 1 + (4.0*(*H)*Ggeo)/(k*Ts) );
nu = ( k*Ts/(2.0*Ggeo) )*( 1 + nusqrt );
for (i=0; i<Mz; i++)

TT[i] = Ts * (nu+(*H)) / (nu+z[i]);

/* compute surface slope and horizontal velocity */
lamhatr = ((1+1/n)/L)*( 1 - pow(1-s,1/n) - pow(s,1/n) );
if ( (r>0.3*L) && (r<0.9*L) )

fr = -(pi/(0.6*L)) * sin(2.0*pi*(r-0.6*L)/(0.6*L));

else

fr = 0.0;

Hr = Hconst * power * pow(lamhat,power-1) * lamhatr + goft*fr;
if ( Hr>0 ) {

/* chain rule */

printf("\nERROR: assumes H_r negative for all 0<r<L
return 1;

!\n");

}
mu = Q/(Rgas*Ts*(nu+(*H)));
surfArr = exp(-Q/(Rgas*Ts));
Uconst = 2.0 * pow(rho*g,n) * A;
omega = Uconst * pow(-Hr,n) * surfArr * pow(mu,-n-1);
for (i=0; i<Mz; i++) {

I3[i] = p3(mu*(*H)) * exp(mu*(*H)) - p3(mu*((*H)-z[i])) * exp(mu*((*H)-z[i]));
U[i] = omega * I3[i];

/* compute strain heating */
for (i=0; i<Mz; i++) {

Sigmu = -(Q*(nu+z[i])) / (Rgas*Ts*(nu+(*H)));
Sig[i] = (Uconst*g/cpheat) * exp(Sigmu) * pow( fabs(Hr)*( (*H) -z[i]) ,n+1);

}

}

/* compute vertical velocity */
lamhatrr = ((1+1/n) / (n*L*L)) * ( pow(1-s,(1/n)-1) - pow(s,(1/n)-1) );
if ( (r>0.3*L) && (r<0.9*L) )

frr = -(2.0*pi*pi/(0.36*L*L)) * cos(2.0*pi*(r-0.6*L)/(0.6*L));

else

frr = 0.0;

Hrr = Hconst*power*(power-1)*pow(lamhat,power-2.0) * pow(lamhatr,2.0)

+

Hconst*power*pow(lamhat,power-1)*lamhatrr + goft*frr;

Tsr = ST;
nur = (k*Tsr/(2.0*Ggeo)) * (1 + nusqrt) +

(1/Ts) * (Hr*Ts-(*H)*Tsr) / nusqrt;

mur = ( -Q/(Rgas*Ts*Ts*pow(nu+(*H),2.0)) ) * ( Tsr*(nu+(*H))+Ts*(nur+Hr) );

8

BUELER AND BROWN

phi = 1/r + n*Hrr/Hr + Q*Tsr/(Rgas*Ts*Ts) - (n+1)*mur/mu;
gam = pow(mu,n) * exp(mu*(*H)) * (mur*(*H)+mu*Hr) * pow((*H),n);
for (i=0; i<Mz; i++) {

/* division by r */

I4 = p4(mu*(*H)) * exp(mu*(*H)) - p4(mu*((*H)-z[i])) * exp(mu*((*H)-z[i]));
w[i] = omega * ((mur/mu - phi)*I4/mu + (phi*((*H)-z[i])+Hr)*I3[i] - gam*z[i]);

}

/* compute compensatory accumulation M */
I4H = p4(mu*(*H)) * exp(mu*(*H)) - 24.0;
divQ = - omega * (mur/mu - phi) * I4H / mu + omega * gam * (*H);
Ht = (Cp*2.0*pi/Tp) * cos(2.0*pi*t/Tp) * f;
*M = Ht + divQ;

/* compute compensatory heating */
nut = Ht/nusqrt;
for (i=0; i<Mz; i++) {

dTt = Ts * ((nut+Ht)*(nu+z[i])-(nu+(*H))*nut) * pow(nu+z[i],-2.0);
Tr = Tsr*(nu+(*H))/(nu+z[i])

+ Ts * ((nur+Hr)*(nu+z[i])-(nu+(*H))*nur) * pow(nu+z[i],-2.0);

Tz = -Ts * (nu+(*H)) * pow(nu+z[i],-2.0);
Tzz = 2.0 * Ts * (nu+(*H)) * pow(nu+z[i],-3.0);
Sigc[i] = dTt + U[i]*Tr + w[i]*Tz - Kcond*Tzz - Sig[i];

2.2. simpleFG.c. This is the simple program to exercise the above code.

}

}

free(I3);
return 0;

#include <stdio.h>
#include <stdlib.h>
#include "exactTestsFG.h"

int main() {

// seconds per year; 365.2422 days

const double SperA=31556926.0;
const double Cp=200.0;
double year, r, HF, MF, HG, MG;
double *z, *TF, *UF, *wF, *SigF, *SigcF, *TG, *UG, *wG, *SigG, *SigcG;
double *mb; /* a block of memory */
int j, Mz;

magnitude of the perturbation in test G

// m;

t and r

separated by newline");

printf("Enter
printf(" (in yrs and km, resp.; e.g. 500 500):\n");
scanf("%lf",&year);
scanf("%lf",&r);
printf("Enter
values sep by newline (in m);");
z
printf(" ’-1’ to end; e.g. 0 100 500 1500 -1:\n");

z = (double *) malloc(501 * sizeof(double));
if (z == NULL) {

fprintf(stderr, "simpleFG: couldn’t allocate memory\n"); return -9999; }

j=0;
do {

ON EXACT SOLUTIONS AND NUMERICS FOR THERMOCOUPLED ICE SHEETS

9

scanf("%lf",&z[j]);
j++;
if (j>490) printf("\n\n\nWARNING: enter -1 to stop soon!!!\n");

} while (z[j-1]>=0.0);
Mz=j-1;

mb = (double *) malloc(10 * Mz * sizeof(double));
if (mb == NULL) {

fprintf(stderr, "simpleFG: couldn’t allocate memory\n"); return -9999; }

TF=mb; UF=mb+Mz*sizeof(double); wF=mb+2*Mz*sizeof(double);
SigF=mb+3*Mz*sizeof(double); SigcF=mb+4*Mz*sizeof(double);
TG=mb+5*Mz*sizeof(double); UG=mb+6*Mz*sizeof(double);
wG=mb+7*Mz*sizeof(double);
SigG=mb+8*Mz*sizeof(double); SigcG=mb+9*Mz*sizeof(double);

/* evaluate tests F and G */
bothexact(0.0,r*1000.0,z,Mz,0.0,&HF,&MF,TF,UF,wF,SigF,SigcF);
bothexact(year*SperA,r*1000.0,z,Mz,Cp,&HG,&MG,TG,UG,wG,SigG,SigcG);

printf("\nResults:\n
printf("(functions of r (resp. t and r) only):\n");
= %12.6f (m)
printf("
= %12.6f (m/a)
printf("

Test F

H
M

H
M

= %12.6f (m)\n",HF,HG);
= %12.6f (m/a)\n",

Test G\n");

MF*SperA,MG*SperA);

for (j=0; j<Mz; j++) {

printf("(z=%10.3f):\n",z[j]);
T
printf("
U
printf("

= %12.6f (K)
= %12.6f (m/a)

UG[j]*SperA);

wG[j]*SperA);

T
U

w

printf("

w

= %12.6f (m/a)

= %12.6f (m/a)\n",wF[j]*SperA,

= %12.6f (K)\n",TF[j],TG[j]);
= %12.6f (m/a)\n",UF[j]*SperA,

printf("

Sig

= %12.6f (*)

Sig

= %12.6f (*)\n",

SigF[j]*SperA*1000.0,SigG[j]*SperA*1000.0);

printf("

Sigc = %12.6f (*)

Sigc = %12.6f (*)\n",

SigcF[j]*SperA*1000.0,SigcG[j]*SperA*1000.0);

}
printf("(units: (*) = 10^-3 K/a)\n");

free(mb);
return 0;

}

z

$ simpleFG
Enter
500
500
Enter
0
100
500
1500
-1

Results:

A run of simpleFG looks like this:

t and r

separated by newline (in yrs and km, resp.; e.g. 500 500):

values sep by newline (in m); ’-1’ to end; e.g. 0 100 500 1500 -1:

Test F

Test G

(functions of r (resp. t and r) only):

10

BUELER AND BROWN

1925.295290 (m)

-0.010510 (m/a)

2101.899734 (m)

0.040738 (m/a)

(z=

(z=

(z=

H
M

=
=
0.000):
=
T
=
U
=
w
Sig
=
Sigc =
100.000):
=
T
=
U
=
w
=
Sig
Sigc =
500.000):
=
T
=
U
=
w
Sig
=
Sigc =

265.122620 (K)

0.000000 (m/a)
0.000000 (m/a)
0.264346 (*)
-0.373726 (*)

263.137595 (K)

0.661716 (m/a)
0.000005 (m/a)
0.173915 (*)
-0.306255 (*)

255.486095 (K)

1.785938 (m/a)
0.000291 (m/a)
0.028439 (*)
-0.199905 (*)

(z=

1500.000):

=
T
=
U
=
w
Sig
=
Sigc =

238.172200 (K)

2.036372 (m/a)
0.002288 (m/a)
0.000029 (*)
-0.193301 (*)

(units: (*) = 10^-3 K/a)

H
M

=
=

=
T
=
U
=
w
Sig
=
Sigc =

=
T
=
U
=
w
=
Sig
Sigc =

=
T
=
U
=
w
Sig
=
Sigc =

=
T
=
U
=
w
Sig
=
Sigc =

267.835036 (K)

0.000000 (m/a)
0.000000 (m/a)
1.215392 (*)
-1.323664 (*)

265.849860 (K)

2.244496 (m/a)
-0.000758 (m/a)
0.817817 (*)
-1.022931 (*)

258.194962 (K)

6.217140 (m/a)
-0.011984 (m/a)
0.149934 (*)
-0.340039 (*)

240.856843 (K)

7.227603 (m/a)
-0.050018 (m/a)
0.000400 (*)
0.365908 (*)

These numbers allow an easy check on correctness if modiﬁcations are made to the implementation
exact solutions or, for example, upon recompilation on a new machine. The numbers can be
generally compared to the ﬁgures in (Bueler et al. 2006).

3. Stability and convergence of a numerical scheme for temperature

3.1. A traditional ﬁnite diﬀerence error analysis. In this section we analyze the error in
a semi-implicit, ﬁrst-order-upwinded ﬁnite diﬀerence scheme for equation (2), namely the scheme
used to generate the results in BBL. Appendix A of that paper provides a description of the coupled
numerical scheme which solves equations (1) and (2). This section “ﬂeshes out” Appendix B of
that paper, which sketches the error analysis here.

The most important caveats about the analysis here is that the components of the velocity ﬁeld
are assumed to be known functions independent of the temperature T and also that the geometry of
the ice sheet is assumed ﬁxed. In these ways we are not analyzing the coupled numerical scheme.
Nonetheless we believe this analysis provides enough information to help build a reliable adap-
tive time-stepping scheme and also reveals a signiﬁcant point of error growth in thermocoupled
circumstances.

One can compare the material here to (Calvo, D´iaz & V´azquez 2002) which does a ﬁnite element
analysis of a moving geometry and velocity ﬁeld problem for the temperature equation in a ﬂow
line model but for which the thermomechanics are only semi-coupled to the geometry.
We generalize equations (2) and (9) slightly. In particular we analyze the equation

Tt + u(x, y, z, t)Tx + v(x, y, z, t)Ty + w(x, y, z, t)Tz = KTzz + f (x, y, z, t, T ),

(21)

for absolute temperature T . We denote the exact solution to (21) by “T ” or “T (x, y, z, t).” The
function f in (21) generalizes Σ and Σ + ΣC which appear in (2) and (9), respectively. Note that Σ

ON EXACT SOLUTIONS AND NUMERICS FOR THERMOCOUPLED ICE SHEETS

11

depends upon the temperature, the eﬀective shear stress, and the strain rates. Thus Σ is a function
of variables x, y, z, t, T because the velocity components are assumed to be known functions.

We suppose (21) applies on some bounded region Ω ⊂ R3 which is ﬁxed in time, and we as-
sume a rectangular computational domain enclosing Ω. Consider a regular, rectangular grid on
that computational domain, in four variables (x, y, z, t), with spacing ∆x, ∆y, ∆z, ∆t and grid
points denoted (xi, yj, zk, tl). Let uijkl = u(xi, yj, zk, tl), etc, and assume T l
ijk is our numerical
approximation of T (xi, yj, zk, tl).

The numerical scheme is

T l+1
ijk − T l
ijk
∆t

+

Up

T l

T l

vijkl

+

Up

uijkl
i•k
•jk
(cid:12)
(cid:12)
(cid:16)
(cid:17)
∆y
∆x
(cid:12)
(cid:12)
(cid:12)
(cid:12)
ij,k+1 − 2T l+1
ijk + T l+1
T l+1
ij,k−1
∆z2

(cid:16)

= K

Up

T l

+

(cid:17)

(cid:16)

ij•

wijkl
(cid:12)
∆z
(cid:12)
(cid:12)

(cid:17)

+ f (xi, yj, zk, tl, T l

ijk)

(22)

where

=

αi(ϕi − ϕi−1), αi ≥ 0
αi(ϕi+1 − ϕi), αi < 0.

(

Up

ϕ•

(cid:16)

αi
(cid:12)
(cid:12)
(cid:12)

(cid:17)

That is, the advection terms are upwinded in the easiest ﬁrst-order manner and the vertical conduc-
tion term is treated implicitly in the easiest centered-diﬀerence manner. Note that we abbreviate
the term f (xi, yj, zk, tl, T l

ijk)” in what follows.

ijk) by “f (T l

The ﬁrst kind of error we analyze is local truncation error, but only because it plays a supporting
role in the analysis of the approximation error (total numerical error). The local truncation error
is deﬁned to be the nonzero result of applying the ﬁnite diﬀerence scheme to the exact solution
(Morton & Mayers 2005). In our case the local truncation error depends upon a long list of cases
for the upwind scheme, but listing these turns out to be unnecessary (and certainly uninteresting).
We assume for the next few equations that uijkl, vijkl, wijkl are all nonnegative, and we will soon be
able to return to expressions which apply to all upwinding cases. (Equation (22) can be rewritten
without the “Up(·

·)” notation if the signs of the velocity coeﬃcients are known, of course.)

Denote the local truncation error at a grid point by τijkl, so

(cid:12)
(cid:12)

τijkl :=

T (xi, yj, zk, tl+1) − T (xi, yj, zk, tl)
∆t

+ uijkl

T (xi, yj, zk, tl) − T (xi−1, yj, zk, tl)
∆x

+ vijkl

− K

T (xi, yj, zk, tl) − T (xi, yj−1, zk, tl)
∆y

T (xi, yj, zk, tl) − T (xi, yj, zk−1, tl)
∆z
T (xi, yj, zk+1, tl+1) − 2T (xi, yj, zk, tl+1) + T (xi, yj, zk−1, tl+1)
∆z2

+ wijkl

− f (xi, yj, zk, tl, T (xi, yj, zk, tl)).

The ﬁnite diﬀerence quotients here all have well-known Taylor expansions. Because T (x, y, z, t)
solves (21), it follows that

Including the Taylor expansions and all cases of upwinding,

τijkl = O(∆t, ∆x, ∆y, ∆z).

τijkl =

Ttt∆t ±

Txx∆x ±

Tyy∆y ±

Tzz∆z −

Tzzzz∆z2

(23)

vijkl
2

wijkl
2

K
12

1
2

uijkl
2

where the higher partial derivatives of T are evaluated somewhere in the grid neighborhood of
(xi, yj, zk, tl). We see that the ﬁnite diﬀerence scheme is consistent (Morton & Mayers 2005). Note
that if wijkl = 0 then τijkl = O(∆z2), but this case is too special to be of interest.

12

Let

BUELER AND BROWN

ijk = T l
el

ijk − T (xi, yj, zk, tl)

be the (signed) error at a grid point. Because T l
the deﬁnition of the local truncation error,

ijk solves diﬀerence scheme (22) exactly, and by

el+1
ijk − el
∆t

ijk

+ uijkl

ijk − el
el
∆x

i−1,jk

+ vijkl

i,j−1,k

+ wijkl

ijk − el
el
∆y

ijk − el
el
∆z

ij,k−1

(24)

− K

ij,k+1 − 2el+1
ijk + el+1
el+1
∆z2

ij,k−1

h
We are interested in the evolution of error so we solve for the error at grid point (xi, yj, zk) at

+

f (T (xi, yj, zk, tl)) − f (T l

= −τijkl.

ijk)
i

time tl+1:

1 + 2

(cid:18)

K∆t
∆z2

(cid:19)

el+1
ijk =

K∆t
∆z2

ij,k+1 + el+1
el+1

ij,k−1

+

1 − uijkl

− vijkl

− wijkl

el
ijk

(25)

∆t
∆x

∆t
∆y

∆t
∆z

(cid:27)

(cid:16)
+ uijkl

− ∆t

(cid:17)

(cid:26)
∆t
∆y

el
i−1,jk + vijkl

∆t
∆x
f (T (xi, yj, zk, tl)) − f (T l
h

ijk)
i

el
i,j−1,k + wijkl

el
ij,k−1

∆t
∆z

− ∆t τijkl

Note that the quantity in curly braces actually varies depending on the upwinding case, as do all
coeﬃcients of the errors which depend on the velocities. The possibilities for the quantity in curly
braces are described by

1 ± uijkl

± vijkl

± wijkl

∆t
∆x

∆t
∆y

∆t
∆z

,

with, for example, a “−” in front of uijkl if uijkl > 0 and a “+” if uijkl < 0.

The next step is signiﬁcant. We identify an assumption which is suﬃcient, under the noted
additional assumptions of smooth and ﬁxed velocity ﬁelds and geometry, but which is presumably
not necessary, for the stability of our ﬁnite diﬀerence scheme. This assumption is part of a maximum
principle argument for a ﬁnite diﬀerence scheme; see standard examples of such arguments in
(Morton & Mayers 2005).

Assumption 1. The space-time grid satisﬁes

1 − |uijkl|

− |vijkl|

− |wijkl|

≥ 0

∆t
∆x

∆t
∆y

or, equivalently, the time step is chosen small enough to satisfy

∆t
∆z

−1

.

(cid:19)

|uijkl|
∆x

+

|vijkl|
∆y

+

|wijkl|
∆z

∆t ≤

(cid:18)

As is standard in these maximum principle arguments, the plan now is to use this assumption
to conclude that all coeﬃcients of errors are nonnegative in (25), and thus to bound the error. Let

El = max
i,j,k

|el

ijk|

and

τl = max
i,j,k

|τijkl|.

In particular, El is the maximum absolute approximation error over the whole grid at time tl. It
would be nice to know that it does not grow too large; such is our goal. Equation (25) and all of

(26)

(27)

(28)

ON EXACT SOLUTIONS AND NUMERICS FOR THERMOCOUPLED ICE SHEETS

13

its upwinding variations collectively imply

1 + 2

(cid:18)

K∆t
∆z2

(cid:19)

|el+1

ijk | ≤ 2

1 − |uijkl|

− |vijkl|

− |wijkl|

(29)

∆t
∆y

El

∆t
∆z

(cid:27)

K∆t
∆z2 El+1 +
∆t
∆x

+ |uijkl|

+ ∆t

(cid:26)
El + |vijkl|

∆t
∆x
∆t
∆y

f (T (xi, yj, zk, tl)) − f (T l
(cid:12)
(cid:12)
(cid:12)

ijk)
(cid:12)
(cid:12)
(cid:12)

El + |wijkl|

∆t
∆z

El

+ ∆t τl.

The reader should note that we have used Assumption 1 to derive (29).

We have not yet arrived at the desired error inequality. In fact, the size of the “
ijk)

f (T (xi, yj, zk, tl))−
f (T l
” term is very important, and we must make another assumption which amounts to knowing
that the derivative of f with respect to the temperature T is not too big. Though this assumption
is fully justiﬁed in the case of the strain-heating term Σ for ice, the Lipshitz coeﬃcient which
appears (below) is interesting in connection to the “spokes”.

(cid:12)
(cid:12)

(cid:12)
(cid:12)

Assumption 2. For the source term f in (21), there exists a bounded nonnegative function
L(x, y, z, t) ≥ 0 such that

|f (x, y, z, t, T1) − f (x, y, z, t, T2)| ≤ L(x, y, z, t)|T1 − T2|.

In particular, if the partial derivative ∂f /∂T exists and is bounded, and if we deﬁne

then we may take L = Lf by the Mean Value Theorem. Here “Tmin” and “Tmax” are lower and
upper bounds, respectively, on the exact solution.

Lf (x, y, z, t) =

max
Tmin≤T ≤Tmax

∂f
∂T

(cid:12)
(cid:12)
(cid:12)
(cid:12)

,

(x, y, z, t, T )
(cid:12)
(cid:12)
(cid:12)
(cid:12)

Note that an obvious lower bound on the exact solution T is the minimum value of the surface
temperature in standard ice sheet circumstances. An upper bound is the pressure-melting temper-
ature, in practice. The actual polythermal nature of ice sheets is obviously ignored here; compare
(Greve 1997).

One may call L in Assumption 2 a local Lipshitz constant for f (as a function of T ). Let
Lijkl = L(xi, yj, zk, tl) be its grid value. Let ¯L = sup(x,y,z)∈Ω,t≥0 L(x, y, z, t) be the bound on L,
the global Lipshitz constant.

We apply Assumption 2 to (29) and collect terms by noting that several on the right have

coeﬃcients which add to one. Finally we recall the deﬁnition of el

ijk. The result is:

1 + 2

K∆t
∆z2

|el+1

ijk | ≤ 2

K∆t
∆z2 El+1 + El + ∆t Lijkl |el

ijk| + ∆t τl.

(30)

(cid:18)
This is a signiﬁcant error inequality.

(cid:19)

3.2. A convergence theorem. One consequence of inequality (30) is the following convergence
theorem.

Theorem 1. Assume that the velocity components u, v, w are smooth. Assume that the geometry
is ﬁxed and is suﬃciently smooth (so that the local truncation error τijkl is indeed O(∆t)).
If
Assumptions 1 and 2 apply then the error grows at an (at most) exponential rate in the total model
run time tf , times an O(∆t) factor:

El ≤ tf exp(tf ¯L)

≤ tf exp(tf ¯L) O(∆t).

max
0≤k≤l−1

τk

(cid:18)

(cid:19)

14

BUELER AND BROWN

Therefore the scheme converges as the time step ∆t goes to zero.

Proof. By taking maximums over the grid, inequality (30) implies

El+1 ≤

1 + ∆t ¯L

El + ∆t τl.

We initialize the scheme with the correct initial values so E0 = 0. By induction, therefore,

(cid:1)

El ≤ ∆t

1 + ∆t ¯L

l τ0 +

l−1 τ1 + · · · +

1 + ∆t ¯L

1 τl−2 + τl−1

.

(cid:0)
1 + ∆t ¯L

Recall that (1 + x/n)n ≤ exp x for x ≥ 0 and n ≥ 0. It follows that

(cid:0)

(cid:1)

(cid:0)

(cid:1)

(cid:1)

h(cid:0)

El ≤ ∆t

max
k

τk

(cid:18)

(cid:18)

≤ ∆t

max
k

τk

≤ l∆t

max
k

(cid:18)

(cid:19)
τk

(cid:19)

1 + ∆t ¯L

l +

1 + ∆t ¯L

l−1 + · · · +

1 + ∆t ¯L

(cid:19) h(cid:0)
l

(cid:1)
1 + ∆t ¯L

(cid:0)
l ≤ l∆t

(cid:1)
(cid:0)
exp(tf ¯L) ≤ tf exp(tf ¯L)

N

(cid:1)

(cid:0)
tf ¯L
N

(cid:19)

(cid:1)
max
k

(cid:18)

|τ |k

1 +

(cid:19) (cid:18)
τk

(cid:19)

max
k

(cid:18)

i

1 + 1
i

as claimed. (Note that the total time tf is the number of time steps multiplied by the step size:
(cid:3)
tf = N ∆t. In particular, for each step l we have l∆t ≤ N ∆t = tf .)

This theorem is desirable but it is not directly useful.

It is not surprising given the strong
smoothness assumptions and it is not practical because the convergence constant “tf exp(tf L)” is
almost certainly too large in practice.

Dismissing this theorem for now, we see three intermediate results of importance, namely the

two Assumptions, which arise reasonably naturally, and the inequality (30).

3.3. Adaptive time-stepping. Note that inequality (28) is used in the adaptive time-stepping
numerical scheme described in BBL. By default the mass-balance and temperature steps are syn-
chronized.
In this synchronized case the stability condition for the mass-balance scheme—see
BBL—and constraint (28) are combined to give the time step

∆t = min

0.12 × 2

(

1
∆x2 +

1
∆y2

(cid:18)

−1

(cid:19)

(cid:16)

max Dijl

, max

−1

(cid:17)

|uijkl|
∆x

+

|vijkl|
∆y

+

|wijkl|
∆z

(cid:18)

−1

)

(cid:19)

where Dijl is the computed value of the diﬀusivity of the mass-balance equation (BBL). The special
value “0.12” is essentially empirical, i.e. it results from testing in a variety of circumstances. The
“max”s which appear in the above equation are computed over the spatial grid at time tl.

For ﬁxed velocity and diﬀusivity ﬁelds, and if ∆x = ∆y, we see that ∆t = O(∆x2) as ∆x → 0
because of the mass-balance condition. As the grid is reﬁned it might be expected that the mass-
balance constraint will inevitably become active, but in fact the maximum magnitude of wijkl
near the margin causes constraint (28) to be active in many cases including some EISMINT II
simulations and when using a digital elevation map for the surface elevation of Antarctica. (See
BBL on the source of large vertical velocities.) For the better behaved exact Tests F and G, and
for realistic ice sheet simulations wherein the geometry has been smoothed by evolution and the
grid is signiﬁcantly reﬁned, we do indeed see the mass-balance condition most active.

One can reasonably consider a scheme which tolerates violations by a modest factor of the CFL
constraint (28) at a few grid points. The cost would be possible loss of accuracy at locations
where the computation is not likely to be accurate anyway (e.g. at margins, near mountain ranges
within realistic ice sheets, or at transitions from frozen to sliding base if that transition is too

ON EXACT SOLUTIONS AND NUMERICS FOR THERMOCOUPLED ICE SHEETS

15

abrupt anyway). The beneﬁt would be that the time step for the whole sheet could be longer and
computation times could be reduced.

3.4. Emergence of spokes. Let us reconsider error inequality (30). Suppose that we look at the
worst case location on the grid at time tl+1, that is, at i, j, k such that |el+1
ijk | = El+1. In that case
(30) says

|el+1

ijk | ≤ El + ∆t Lijkl |el

ijk| + ∆t τl

(applies at worst case grid point ).

(31)

This inequality says that the error at the worst-case grid point can be no larger than the worst
error over the grid at the previous time step plus two terms which are proportional to the time
step. It is a statement of limited growth of error unless these two terms happen to be big at time
tl.

The ﬁrst of these terms depends on the local size of the strain heating term, or, more precisely,
its variability with respect to temperature. The second, involving the maximum local truncation
error over the grid, depends on the smoothness of the exact solution, or, more precisely, on the
degree to which it does not satisfy the ﬁnite diﬀerence scheme. We believe that because of the free
boundary nature of real ice sheet problems, the second truncation error term is in fact likely to be
large at points. It causes only arithmetic growth in error, however, and it depends purely on the
smoothness of the exact solution rather than nonlinear and nontrivially evolving errors on the grid.
In any case we concentrate on the ﬁrst term because we believe it is involved in the emergence of
the spokes in the EISMINT II results.

It is an easy calculation that if a ﬂow law of form (4) is used then

∂f
∂T

=

∂Σ
∂T

=

2AQ
ρcpR

σn+1 exp

−

Q
RT

1
T 2 = Σ

Q
RT 2 .

(cid:18)

(cid:19)

(32)

Thus we may use

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

Lijkl = Σijkl

Q
RT 2

ijkl

for the local Lipshitz constant in (31).

If, in fact, the two-regime Paterson-Budd (1982) ﬂow law is used then we need the larger activa-
tion energy for warmer ice, QT ≥263.15 = 13.9 × 104 J mol−1, in our worst case estimate of the local
Lipshitz constant, rather than the cold value QT <263.15 = 6.0 × 104 J mol−1. Thus the rate of error
growth jumps up as one moves from relatively cold ice to warmer ice, precisely into the region of
warm spokes in EISMINT II experiment F (Payne et al. 2000). (The Hooke (1981) relation should
behave in roughly the same manner. Note that Payne and Bladwin (2000) produced spokes for
EISMINT II experiment F using both the Paterson-Budd and Hooke relations, though the details
of the spokes diﬀer.) In any case the quantity |∂Σ/∂T | has a characteristic spatial variation, illus-
trated in BBL, which strongly suggests that locations where this quantity is large are locations of
the emergence of (warm) spokes.

References

Abramowitz, M. & Stegun, I. A., eds (1965), Handbook of Mathematical Functions, with Formulas, Graphs, and

Mathematical Tables, Graduate Studies in Mathematics, Dover, New York.

Bueler, E., Brown, J. & Lingle, C. (2006), Exact solutions to the thermocoupled shallow ice approximation: eﬀective

tools for veriﬁcation. Submitted to J. Glaciol.

Calvo, N., D´iaz, J. & V´azquez, C. (2002), ‘Numerical approach of thermomechanical coupled problems with moving

boundaries in theoretical glaciology’, Math. Models and Methods in Appl. Sci. 12(2), 229–248.

16

BUELER AND BROWN

Goldsby, D. L. & Kohlstedt, D. L. (2001), ‘Superplastic deformation of ice: experimental observations’, J. Geophys.

Greve, R. (1997), ‘A continuum–mechanical formulation for shallow polythermal ice sheets’, Phil. Trans. Royal Soc.

Res. 106(M6), 11017–11030.

London A 355, 921–974.

Hooke, R. (1981), ‘Flow law for polycrystalline ice in glaciers: comparison of theoretical predictions, laboratory data,

and ﬁeld measurements’, Rev. Geophys. Space. Phys. 19(4), 664–672.

Morton, K. W. & Mayers, D. F. (2005), Numerical Solutions of Partial Diﬀerential Equations: An Introduction, 2nd

Paterson, W. S. B. & Budd, W. F. (1982), ‘Flow parameters for ice sheet modeling’, Cold Reg. Sci. Technol. 6(2), 175–

Payne, A. J. & Baldwin, D. J. (2000), ‘Analysis of ice–ﬂow instabilities identiﬁed in the EISMINT intercomparison

Payne, A. et al. (2000), ‘Results from the EISMINT model intercomparison: the eﬀects of thermomechanical coupling’,

edn, Cambridge University Press.

177.

exercise’, Ann. Glaciol. 30, 204–210.

J. Glaciol. 46(153), 227–238.

