0
0
0
2

 

n
u
J
 

6
2

 
 
]
h
p
-
o
a
.
s
c
i
s
y
h
p
[
 
 

1
v
4
6
0
6
0
0
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Improvements of the Discrete Dipole Approximation

method

Piotr J. Flatau

Scripps Institution of Oceanography, University of California, San Diego,

La Jolla, California 92093-0221

February 2, 2008

Abstract

We report improvements in complex conjugate gradient algorithms applied to the discrete
dipole approximation (DDA). It is shown that computational time is reduced by using the Bi-
CGSTAB version of the CG algorithm, with diagonal left preconditioning.

Key words: scattering, non-spherical particles, discrete dipole approximation.

Optics Letters 1997, volume 22, number 16, 1205-1207.

c(cid:13) Optical Society of America, 1997.

The discrete-dipole approximation (DDA) is a ﬂexible technique for computing scattering and
absorption by targets of arbitrary geometry. In [1] the discrete dipole approximation (DDA) for
scattering calculations is reviewed. Rather than “direct” methods for solving linear system of
equations arising in DDA problem iterative methods for ﬁnding the solution have proven effective
and efﬁcient.

In this paper we perform systematic study of various non-stationary iterative (conjugate gradi-
ent) methods in search for the most efﬁcient one. We document implementation of these methods
in our public domain code DDSCAT.5a code[1]

Numerical aspects of the discrete dipole approximation continue to be of great interest. Yung
[2] applied a conjugate gradient method to the in DDA approach. Hoekstra [3] identiﬁes Yung’s
scheme as the conjugate gradient (CG) algorithm proposed by Hestenes [4]. Rahola [5] discusses
solution of dense systems of linear equations in the discrete-dipole approximation and choice of of
the best iterative method in this application. Draine [6] implemented a conjugate gradient method
based on work of Petravic and Kuo-Petravic. [7] This implementation is quite robust and has been
used for many years. [1] However, Lumme and Rahola [8] applied the quasi-minimal residual
(QMR) conjugate gradient algorithm to the system of linear equations arising in the DDA applica-
tions. They claim that the QMR method is approximately 3 times faster in comparison to the one
employed in the DDSCAT code. [1] It was this work which prompted us to perform the analysis
reported here.

1

PIM[9] is a collection of Fortran 77 routines designed to solve systems of linear equations on

parallel and sequential computers using a variety of iterative methods.

PIM contains implementations of various methods: conjugate-gradient (CG); Conjugate-Gradients

for normal equations with minimization of the residual norm (CGNR); Conjugate-Gradients for
normal equations with minimization of the error norm (CGNE); Bi-Conjugate-Gradients (Bi-
CG); Conjugate-Gradients squared (CGS); the stabilised version of Bi-Conjugate-Gradients (Bi-
CGSTAB); the restarted, stabilised version of Bi-Conjugate-Gradients (RBi-CGSTAB); the restarted,
generalized minimal residual (RGMRES); the restarted, generalized conjugate residual (RGCR),
the quasi-minimal residual with coupled two-term recurrences (QMR); the transpose-free quasi-
minimal residual (TFQMR); and Chebyshev acceleration. The routines allow the use of precondi-
tioners; the user may choose to use left-, right- or symmetric-preconditioning.

The convergence rate of iterative methods depends on the coefﬁcient matrix. Hence one may
attempt to transform the linear system into one that is equivalent (in the sense that it has the same
solution) but is easier to solve. A preconditioner is a matrix M that effects such a transformation.
It is possible to introduce left- and right preconditioners.[10] The simplest preconditioner consists
of just the diagonal of the coefﬁcient matrix. This is known as the (point) Jacobi preconditioner.

To compare these different algorithms we have used them to ﬁnd solutions to the problem
of scattering by a homogeneous sphere. The scattering problem is speciﬁed by the usual size
parameter x = 2πa/λ, where a is the radius.

Tables 1 and 2 presents the number of iterations and CPU time for size parameter x = 0.1
and x = 1 and for several values of refractive index. The conjugate gradient methods are deﬁned
as above. Label (L) indicates left Jacobi preconditioning. For example CGNE(L) is the conju-
gate gradient method for normal equations with minimization of the error norm and left Jacobi
preconditioning. Similarly, (R) indicates right Jacobi preconditioning. CPU time (sequential Sil-
icon Graphics workstation) is normalized to the “best” method. Star indicates that the method
did not converge in the maximum allowed number of iterations or that the method failed to con-
verge. Fractional error 10−5 was used as the stopping criterion. The DDSCAT.5a code[1] with the
newly implemented GPFA fast Fourier transform method was used. For Bi-CGSTAB and CGNE
we used left and right Neumann polynomial preconditioner truncated after the ﬁrst term. Thus,
Bi-CGSTAB(N)(L) indicates the stabilised version of Bi-Conjugate-Gradients method with left
Neumann polynomial preconditioner.

Table 1 presents results for size parameter x = 0.1 and real refractive index n = 1.33, 2, 3, 5
as well as one case with small complex part of refractive index n = (5, 0.0001) and size pa-
rameter x = 0.1. In Table 1 the CPU times are normalized to the CG(L) method, which was
found to be the best method. For example it is 4.0 times faster in comparison with the CGNE
for n = (1.33, 0). For larger values of real refractive index the CGNE is almost an order of
magnitude slower in comparison to CG. This is because more iterations are needed for the same
convergence and because cost of one CG iteration is less than cost of one CGNE iteration. The
QMR algorithm is never competitive and actually fails to converge for large real refractive indices.
For small refractive index the Bi-CGSTAB algorithm is comparable to the CG and requires less
iterations. However, the cost per iteration is larger in comparison to CG which offsets the ad-
vantage of lesser number of iterations. The Petravic and Kuo-Petravic [7] algorithm used by us

2

for many years [6] is similar to CGNR and CGNE. However, we observed on occasion slightly
different convergence rates due to stabilization of Petravic and Kuo-Petravic algorithm every 10th
time step. [6] This is true for all other cases. The storage requirements of CG, CGNE, CGNR
is 6 × N, for BiCG it is 8 × N, for CGS, Bi-CGSTAB, TFQMR it is 10 × N, QMR requires
11 × N. Thus, for pure real refractive index, the CG is not only the fastest method but also it
requires the least amount of temporary storage. It can be seen that left preconditioning by the
inverse of diagonal of the DDA matrix [1] reduces the number of iterations needed. The added
time needed for division by diagonal elements is generally negligible in comparison to the time
saved by smaller amount of iterations. It can be seen that for Bi-CGSTAB, Bi-CGSTAB(L), and
Bi-CGSTAB(R) the left Jacobi preconditioning is the only method converging for larger refractive
index. Restarted methods (RBi-CBSTAB and RGCR) appear to be not competitive but further
study may be needed (we used the orthogonal base of 10 vectors for all restarted methods). The
CG method is also competitive in cases with small absorption (see last column of Table 1). We
have also calculated (not presented) results for size parameter of x = 0.1 and increasing complex
part of refractive index n = (1.33, 0), (1.33, 0.01), (1.33, 0.1), (1.33, 1), (1.33, 2), (1.33, 3). The
BiCGSTAB(L), which proved to be the most robust method. However the CGS(L) is competitive
and faster for n = (1.33, 3). Both CGS(L) and BiCGSTAB(L) require the same amount of itera-
tion for convergence and their cost is similar. These methods are between 2.9 and 1.6 times faster
in comparison to CGNR — the method used in DDSCAT code. The QMR and TFQMR which
Lumme and Rahola [8] claim to be faster in comparison to CGNR and the DDSCAT implemen-
tations do not converge on occasion and when they work they are only slightly better in this case.
As before, left Jacobi preconditioning is almost always beneﬁcial. The CG(L) algorithm is faster
than BiCGSTAB(L) for refractive index n = (1.33, 0), (1.33, 0.01), (1.33, 0.1).

Table 2 is for size parameter x = 1. All the results are normalized to Bi-CGSTAB(L). This
method is clearly superior to the CGNR method and it is 2-4.3 faster. It can be seen that CGNR
converges slowly, and has not satisﬁed the stopping criterion in 140 iterations for n = (3, 0.0001).
For this larger value of size parameter the QMR algorithm doesn’t converge well but its smooth
version TFQMR does. However, TFQMR is slower in comparison to Bi-CGSTAB(L) and compa-
rable to CGNR. The CG(L) method for refractive index n = (1.33, 0) and n = 1.33, 0.01 is faster
than the reference scheme Bi-CGSTAB(L). It can be seen that the Neumann polynomial precon-
ditioning Bi-CGSTAB(N)(L) or Bi-CGSTAB(N)(R) does reduce the number of iterations needed
for certain cases of refractive index. However the cost associated with the additional calculations
always offsets this improved convergence rate. As before, the left Jacobi preconditioner is superior
to right or no-preconditioner cases. CG(L) works well for small refractive index but is comparable
to Bi-CGSTAB(L). The QMR algorithm fails to converge but the transpose-free quasi-minimal
residual (TFQMR) algorithm converges well and is comparable to CGNR. The CG method is the-
oretically valid for Hermitian positive deﬁnite matrices. The matrix arising in the DDA is not
Hermitian but symmetric. Therefore, strictly speaking, the CG method is not valid for use in the
DDA. The users are advised to test the CG method when extrapolating results presented here to
different size parameters, particle sizes, and refractive index values.

We recommend use of the stabilized version of the Bi-conjugate gradient algorithm with left
Jacobi preconditioning [Bi-CGSTAB(L)]. This algorithms requires 67% greater storage than the

3

CGNR algorithm, but is typically 2-3 times faster.

The recent version of Discrete Dipole Approximation code DDSCAT5a developed by Draine
and Flatau contains improvements documented in this paper. The code is available via anonymous
ftp from the ftp.astro.princeton.edu site or from the Light Scattering and Radiative
Transfer Codes Library — SCATTERLIB (http://atol.ucsd.edu/˜pflatau).

I have been supported in part by the Ofﬁce of Naval Research Young Investigator Program and
in part by DuPont Corporate Educational Assistance. I would like to thank Drs M. J. Wolff and A.
E. Ilin who helped with computer tests. Bruce Draine checked the manuscript. Dr. R. J. Riegert of
Du Pont if acknowledged for his continuing interest in DDSCAT developments.

References

[1] B. Draine and P. Flatau, J. Opt. Soc. Am. A, Opt. Image Sci. 11, 1491 (1994).

[2] Y. Yung, Appl. Opt. 17, 3707 (1978).

[3] A. G. Hoekstra, Ph.D. thesis, University of Amsterdam, Amsterdam. The Netherlands, 1994.

[4] M. R. Hestenes and E. L. Stiefel, Journal of Research National Bureau of Standards 49, 435

(1952).

[5] J. Rahola, SIAM J. Sci. Comput. 17, 78 (1996).

[6] B. Draine, Astrophys. J. 333, 848 (1988).

[7] M. Petravic and G. Kuo-Petravic, J. Comput. Phys. 32, 263 (1979).

[8] K. Lumme and J. Rahola, Astrophys. J. 425, 653 (1994).

[9] R. D. da Cunha and T. R. Hopkins, Technical Report No. TR95-11, Universidade Federal do
Rio Grande do Sul, Av. Bento Goncalves, 9500 - Campus do Vale. 91509-900 Porto Alegre -
RS - Brasil (unpublished).

[10] R. Barrett et al., Templates for the solution of linear systems: building blocks for iterative

methods (SIAM, Philadelphia, 1994).

4

Table 1: CPU time (normalized) and number of iterations for x=0.1.

n=(1.33,0)

(5,0.0001)

Method
CGNE
CGNE(L)
CGNE(R)
CGNE(N)(L)
CGNE(N)(R)
CGNR
CGNR(L)
CGNR(R)
QMR
QMR(L)
QMR(R)
CG
CG(L)
CG(R)
BiCG
BiCG(L)
BiCG(R)
Bi-CGSTAB
Bi-CGSTAB(L)
Bi-CGSTAB(R)
Bi-CGSTAB(N)(L)
Bi-CGSTAB(N)(R)
TFQMR
TFQMR(L)
TFQMR(R)
CGS
CGS(L)
CGS(R)
RGCR
RGCR(L)
RGCR(R)
RBi-CGSTAB
RBi-CGSTAB(L)
RBi-CGSTAB(R)

4.0(9)
3.3(7)
4.1(9)
3.1(4)
4.4(6)
4.0(9)
3.3(7)
4.1(9)
3.7(6)
2.6(4)
3.8(6)
1.4(6)
1.0(4)
1.4(6)
2.3(6)
1.6(4)
2.4(6)
1.8(4)
1.4(3)
1.8(4)
1.9(2)
2.1(2)
3.8(5)
3.1(4)
3.9(5)
1.7(4)
1.4(3)
1.8(4)
4.3(2)
2.0(1)
4.4(2)
*(12)
*(12)
*(12)

(3,0)
8.7(76)
7.8(67)
8.8(76)
19.3(113)

(2,0)
4.9(24)
4.0(19)
4.9(24)
4.1(13)
*(140)
7.7(25)
8.0(69)
4.7(23)
5.9(50)
4.0(19)
8.0(69)
4.7(23)
3.3(19)
3.3(11)
2.7(15)
2.8(9)
3.4(19)
3.4(11)
1.2(20)
1.2(11)
1.0(16)
1.0(9)
1.2(20)
1.2(11)
*(140)
2.1(11)
*(140)
1.8(9)
*(140)
2.2(11)
1.5(13)
1.5(7)
1.3(11)
1.3(6)
1.6(13)
1.5(7)
6.8(17)
14.9(65)
13.1(33) 27.9(122)
3.4(9)
4.3(19)
4.1(18)
3.1(8)
4.4(19)
3.5(9)
1.5(7)
1.4(12)
1.2(10)
1.3(6)
1.4(12)
1.5(7)
2.5(3)
2.8(2)
2.4(2)
2.1(2)
2.7(3)
2.8(2)
*(12)
*(12)
*(12)
*(12)
*(12)
*(12)

(5,0)
*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
4.6(329)
*(540)
*(111)
*(75)
*(268)
1.2(163)
1.0(138)
1.1(157)
*(540)
*(540)
*(540)
*(540)
4.0(281)
*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
*(14)
*(14)
*(14)
*(12)
*(12)
*(12)

*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
3.5(330)
*(540)
*(78)
*(92)
*(540)
1.1(213)
1.0(182)
1.2(213)
*(540)
*(540)
*(540)
*(540)
4.2(388)
*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
*(540)
*(14)
*(14)
*(14)
*(12)
*(12)
*(12)

5

Table 2: CPU time (normalized) and number of iterations for x=1
(3,0.0001)

(1.33,0.01)

n=(1.33,0)

(1.33,1)
2.0(16)
1.7(13)
2.0(16)
*(140)
*(140)
2.0(16)
1.7(13)
2.0(16)
*(25)
*(21)
*(22)
*(140)
*(140)
*(140)
*(140)
*(140)
*(140)
1.2(10)
1.0(8)
1.2(10)
1.5(6)
1.6(6)
3.3(14)
3.0(13)
3.3(14)
1.3(11)
1.2(10)
1.3(11)
*(14)
6.5(6)
7.4(7)

(2,0)
4.5(33)
3.8(27)
4.6(33)
*(140)
*(140)
4.3(32)
3.7(27)
4.4(32)
*(76)
*(71)
*(70)
*(140)
*(140)
*(140)
*(140)
*(140)
*(140)
1.2(9)
1.0(7)
1.3(9)
4.6(17)
*(140)
3.4(13)
3.0(11)
3.4(13)
1.4(10)
1.3(9)
1.4(10)
3.3(3)
2.9(3)
3.3(3)

*(140)
*(140)
*(140)
*(140)
*(140)
*(140)
*(140)
*(140)
*(50)
*(39)
*(37)
*(140)
*(140)
*(140)
*(140)
*(140)
*(140)
1.1(24)
1.0(21)
1.1(24)
*(140)
*(140)
3.8(42)
3.7(40)
3.9(42)
1.6(34)
1.1(23)
1.6(33)
*(14)
*(14)
*(14)

Method
CGNE
CGNE(L)
CGNE(R)
CGNE(N)(L)
CGNE(N)(R)
CGNR
CGNR(L)
CGNR(R)
QMR
QMR(L)
QMR(R)
CG
CG(L)
CG(R)
BiCG
BiCG(L)
BiCG(R)
Bi-CGSTAB
Bi-CGSTAB(L)
Bi-CGSTAB(R)
Bi-CGSTAB(N)(L)
Bi-CGSTAB(N)(R)
TFQMR
TFQMR(L)
TFQMR(R)
CGS
CGS(L)
CGS(R)
RGCR
RGCR(L)
RGCR(R)

3.2(10)
2.7(8)
3.2(10)
2.6(5)
3.6(7)
3.5(11)
2.7(8)
3.5(11)
*(47)
5.3(12)
*(52)
1.3(8)
0.9(5)
1.3(8)
*(140)
*(140)
*(140)
1.3(4)
1.0(3)
1.3(4)
1.4(2)
1.5(2)
3.3(6)
2.8(5)
3.4(6)
1.3(4)
1.0(3)
1.3(4)
3.7(2)
3.2(2)
3.7(2)

3.2(10)
2.6(8)
3.2(10)
2.6(5)
3.6(7)
3.5(11)
2.6(8)
3.5(11)
*(58)
*(59)
*(63)
1.3(8)
0.9(5)
1.3(8)
*(140)
*(140)
*(140)
1.3(4)
1.0(3)
1.3(4)
1.4(2)
1.5(2)
3.3(6)
2.8(5)
3.4(6)
1.3(4)
1.0(3)
1.3(4)
4.5(2)
3.1(2)
3.7(2)

6

