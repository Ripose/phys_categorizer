1
0
0
2
 
y
a
M
 
8
 
 
]
h
p
-
o
a
.
s
c
i
s
y
h
p
[
 
 
1
v
3
2
0
5
0
1
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Forces at the Sea Bed using a Finite Element Solution
of the Mild Slope Wave Equation

S. J. Childs
Department of Pure and Applied Mathematics, Rhodes University, Grahamstown,

6140, South Africa

J. W. Gonsalves
Department of Mathematics and Applied Mathematics, University of Port Elizabeth,

Port Elizabeth, 6000, South Africa

Abstract

An algorithm to compute forces at the sea bed from a ﬁnite element solution to the
mild slope wave equation is devised in this work. The algorithm is best considered
as consisting of two logical parts: The ﬁrst is concerned with the computation of
the derivatives to a ﬁnite element solution, given the associated mesh; the second
is a bi–quadratic least squares ﬁt which serves to model the sea bed locally in the
vicinity of a node. The force at the sea bed can be quantiﬁed in terms of either lift
and drag, the likes of Stokes’ formula or traction. While the latter quantity is the
most desireable, the direct computation of tractions at the sea bed is controversial
in the context of the mild slope wave equation as a result of the irrotationality
implied by the use of potentials. This work ultimately envisages a “Monte Carlo”
approach using wave induced forces to elucidate presently known heavy mineral
placer deposits and, consequently, to predict the existance of other deposits which
remain as yet undiscovered.

Keywords: waves; sediment; Berkhoﬀ equation; mild slope wave equation; lift; drag;
Stokes’ formula; traction; placer deposits; heavy minerals; waves; refraction; diﬀraction;
reﬂection; interference; standing waves; resonance

1 Introduction

The mild slope wave equation is a model for break water diﬀraction, reﬂection and re-
fraction which has been used with considerable success for the quantitative prediction of
ocean dynamics in a great variety of circumstances (see Booij [3] for limitations). The
model is linearised, assumes the sea bed to be locally ﬂat, uses potential theory and there

1

2

S.J. Childs, J.W. Gonsalves

is no turbulence (see Berkhoff [1], Bettess and Zienkiewicz [2], Gonsalves [10]).
Despite this, a remarkable resemblance between the geometries of some heavy mineral
placer deposits and those of computer–generated wave height envelopes (predicted using
the mild slope wave equation for waves moving over fairly simple, idealised bathymetries)
is documented in Childs and Shillington [8]. Wave reﬂection, refraction, diﬀraction
and resonance would appear to have played a major concentrating role in the formation
of these deposits.

An algorithm to compute forces at the sea bed from a ﬁnite element solution to the
mild slope wave equation and the associated mesh is devised in this work. Two main
components are fundamental to the logic of the algorithm. One is concerned with the
computation of the derivatives to a ﬁnite element solution, given the associated mesh;
the other is a bi–quadratic least squares ﬁt which serves to model the sea bed locally
in the vicinity of a node. There is a considerable advantage in developing a routine
to compute the derivatives separate from the existing code (adapting the code to an
alternative wave model would be one example). The computation of the wave number
using a Newton–Raphson scheme and other components essential to the algorithm are
also discussed.

This work ultimately envisages a “Monte Carlo” approach using wave induced forces to
elucidate presently known heavy mineral placer deposits and, consequently, to predict the
existance of other deposits which remain as yet undiscovered. The intention is therefore
to use the results in an empirical or qualitative (as opposed to quantitative) manner.

1.1 Traction and the Boundary Layer Controversy

The ﬂow forces at the sea bed can be quantiﬁed in terms of either lift and drag, Stokes’
formula or traction. While the latter is most desireable in physical terms, the direct
computation of traction at the sea bed is controversial in the context of the mild slope
wave equation as a result of the irrotationality implied by the use of potentials and the
consequent lack of a thorough treatment of the boundary layer. Computing the traction
indirectly (by using the solution to the mild slope wave equation as a boundary condition
in a model more suited to boundary layer application eg. Childs [4], [5], [7] and [6]),
though not impossible, is computationally exhorbitant. The aforementioned controversy,
practicality and the observed negligeable eﬀect of the pressure gradient on the mechanical
character of ﬂuid motion in the vicinity of the bed (Yalin [17]) suggest that velocity1
might be the more attractive option. Stokes’ formula is probably the most conventional
option advocated by classical texts such as Landau and Lifshitz [12]. A comparative
study involving all four approaches is ultimately what is required.

The traction formulae are by far the most complicated and they incorporate all the
elements necessary for the calculation of the other quantities mentioned. Lift, drag and
the quantities necessary to evaluate Stokes’ formula are all incidental to the traction
calculation and it is for this reason that the traction algorithm is supplied as the central
theme to this work.

1to which lift and drag are squarely proportional

Forces at the Sea Bed . . .

3

This work is also concerned with the stability of fairly small, sediment grains, grains
whose threshold is presently reached at deep to intermediate wave depths where the
orbitals are relatively small. Scaling arguments suggest that an oscillatory ﬂow in which
oscillations are relatively small in comparison to the wave length is a potential ﬂow
to ﬁrst approximation. The lateral extent of the sediment deposits of interest, taken
in conjunction with observations that the convective term is negligeable (Yalin [17]),
suggests a fairly uniform boundary layer may be assumed. It may therefore be possible
to ignore the exact physics of the boundary layer at the scale on which the sediments
of interest occur, leaving the way open for the qualitative use of a traction calculated
directly from the solution of the mild slope wave equation. Under these circumstances
the tractional ﬂow driving, what is assumed to be a relatively thin and uniform boundary
layer is what is being considered. The modelled motion for a linear sea bed would be
that of a number of layers of ﬂuid slapping up and down, a kind of pumping action on
the sea bed.

2 Stress in Terms of a Solution to the Mild Slope

Wave Equation

The approximated velocity potential based on the solution to the mild slope wave equation
is

Φ(x1, x2, x3, t) = Re

f h(x1, x2)e−iωt
n

o

Z(x3, h)

(1)

where Φ is the velocity potential, Re{ } indicates the real part of a complex number,
f h is the ﬁnite element solution to the mild slope wave equation, Z is a function which
describes attenuation with depth, x3 is the vertical coordinate measured from mean water
level, h is the depth below mean water level and ω is a frequency. The stress tensor is
given by the constitutive relation

σ = −pI + µ(∇v + (∇v)t),

∂f h
∂x1
∂f h
∂x2

∂Z
∂x1
∂Z
∂x2

+ f h ∂2Z
∂x2
1 !
+ f h ∂2Z
∂x2
2 !

e−iωt

e−iωt

)

)

where, in terms of the approximation (1),

v1,1 = Re

Z + 2

v2,2 = Re

Z + 2

∂2f h
∂x2
1
∂2f h
∂x2
2
f h ∂2Z
∂x2
3 !

( 

( 

( 

v3,3 = Re

v1,2 = †v2,1 = Re

v1,3 = †v3,1 = Re

v2,3 = †v3,2 = Re

e−iωt

)
∂2f h
∂x2∂x1
∂f h
∂Z
∂x3
∂x1
∂f h
∂Z
∂x3
∂x2

( 

( 

( 

+

∂f h
∂x1

∂Z
∂x2

+ f h ∂2Z

∂x2∂x1 !

e−iωt

)

Z +

∂f h
∂Z
∂x2
∂x1
+ f h ∂2Z

∂x3∂x1 !

+ f h ∂2Z

∂x3∂x2 !

e−iωt

)

)

e−iωt

.

4

S.J. Childs, J.W. Gonsalves

Forthcoming sections are devoted to the modelling and computation of these values.

3 The Analytic Derivatives of a Finite Element So-

lution

The ﬁnite element method approximates a solution to a problem in a ﬁnite dimensional
subspace ¯F h. Thus for f h ∈ ¯F h,

f h(x) =

ciψi(x)

nPoint

Xi=1

nNode

i=1
X

where nPoint is the total number of nodes, the ci’s are the degrees of freedom (the
discrete solution) and the ψi(x)’s are the shape functions. The local approximation on
each element is

f h(x) |Ωe=

c(e)
i ψ(e)

i (x),

where nNode is the number of nodes per element, the c(e)
i
freedom, the ψ(e)
Diﬀerentiating both sides of the above equation,

’s are the local degrees of
i (x)’s are the localised shape functions and Ωe is the element in question.

∂jf h
∂xk · · · ∂xl (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

Ωe

=

nNode

i=1
X

c(e)
i

∂jψ(e)
i
∂xk · · · ∂xl

.

(2)

The problem of calculating the derivatives of a ﬁnite element solution therefore translates
directly into one of calculating the derivatives of the localised shape functions on each
element. These localised shape functions are deﬁned in terms of a basis as follows

ψ(e)

i (x(ξ)) ≡ φi(ξ).

where the {φi(ξ)} is the basis deﬁned on the master element domain, ˆΩ. In this way the
problem can be transferred into one in terms of the master element.

3.1 The Two–Dimensional Case

For a two dimensional problem

∂f h
∂x1

,

"

∂f h
∂x2

,

∂2f h
∂x2
1

,

∂2f h
∂x2
2

,

∂2f h
∂x1∂x2 #

=

nNode

Xi=1

c(e)
i 

∂ψ(e)
i
∂x1

,

∂ψ(e)
i
∂x2

,

∂2ψ(e)
i
∂x2
1

,

∂2ψ(e)
i
∂x2
2

,



(by equation (2)).

∂2ψ(e)
i
∂x1∂x2 

(3)

†Notice that the symmetry of the stress tensor is preserved when introducing the approximation.

Forces at the Sea Bed . . .

5

Applying the chain rule the ﬁrst derivative of the basis with respect to the ﬁrst variable
is

The ﬁrst derivative of the basis with respect to the second variable is

=

=

=

=

∂φi
∂ξ1

∂ψ(e)
i
∂x1

∂x1
∂ξ1

+

∂ψ(e)
i
∂x2

∂x2
∂ξ1

∂φi
∂ξ2

∂ψ(e)
i
∂x1

∂x1
∂ξ2

+

∂ψ(e)
i
∂x2

∂x2
∂ξ2

∂x1
∂ξ1

,

"

∂x2
∂ξ1 #

∂x1
∂ξ2

,

"

∂x2
∂ξ2 #

∂ψ(e)
i
∂x1

∂ψ(e)
i
∂x2

∂ψ(e)
i
∂x1

∂ψ(e)
i
∂x2





















.











.











The second derivative of the basis with respect to the ﬁrst variable is

∂2φi
∂ξ2
1

=

=

+

∂x1
∂ξ1
2

∂ψ(e)
i
∂x1

∂
∂ξ1 

∂2ψ(e)

i
∂x2
1  
∂2ψ(e)
i
∂x1∂x2

+

∂x1
∂ξ1 !

+

∂x1
∂ξ1

∂x2
∂ξ1

∂ψ(e)
i
∂x2
∂2ψ(e)
i
∂x2∂x1
∂ψ(e)
i
∂x2

∂x2
∂ξ1 

∂x1

∂ξ1
∂2x2
∂ξ2
1

+

∂x2
∂ξ1

+

∂ψ(e)
i
∂x1

∂2x1
∂ξ2
1

+

∂2ψ(e)
i
∂x2

2  

2

∂x2
∂ξ1 !

∂ψ(e)
i
∂x1

∂ψ(e)
i
∂x2

∂2ψ(e)
i
∂x2
1

∂2ψ(e)
i
∂x2
2


































.


































∂2x1
∂ξ2
1

,

∂2x2
∂ξ2
1

,

2

,

∂x1
∂ξ1 !

 

2

∂x2
∂ξ1 !

 

, 2

∂x1
∂ξ1

∂x2
∂ξ1 


=





∂2ψ(e)
i
∂x1∂x2
The second derivative of the basis with respect to the second variable is

∂2φi
∂ξ2
2

=

∂ψ(e)
i
∂x1

∂x1
∂ξ2

+

∂ψ(e)
i
∂x2

∂
∂ξ2 




∂x2
∂ξ2 




6

S.J. Childs, J.W. Gonsalves

=

∂2ψ(e)
i
∂x2
1  
∂2ψ(e)
i
∂x1∂x2

+

2

∂x1
∂ξ2 !

+

∂x1
∂ξ2

∂x2
∂ξ2

∂2ψ(e)
i
∂x2∂x1
∂ψ(e)
i
∂x2

+

∂x1
∂ξ1
∂2x2
∂ξ2
2

∂x2
∂ξ2

+

∂ψ(e)
i
∂x1

∂2x1
∂ξ2
2

+

∂2ψ(e)
i
∂x2

2  

2

∂x2
∂ξ2 !

∂2x1
∂ξ2
2

,

∂2x2
∂ξ2
2

,

2

,

∂x1
∂ξ2 !

 

2

∂x2
∂ξ2 !

 

, 2

∂x1
∂ξ2

∂x2
∂ξ2 


=





∂ψ(e)
i
∂x1

∂ψ(e)
i
∂x2

∂2ψ(e)
i
∂x2
1

∂2ψ(e)
i
∂x2
2

∂2ψ(e)
i
∂x1∂x2


































.


































The cross derivative of the basis is

∂2φi
∂ξ1∂ξ2

=

=

+

∂x1
∂ξ2

∂ψ(e)
i
∂x1

∂
∂ξ1 

∂2ψ(e)

i
∂x2
1
∂2ψ(e)
i
∂x1∂x2

+

∂x1
∂ξ1

∂x1
∂ξ2
∂x1
∂ξ1

+

∂x2
∂ξ2

∂x2
∂ξ2 

∂x1

∂ξ2

∂ψ(e)
i
∂x2
∂2ψ(e)
i
∂x2∂x1
∂ψ(e)
i
∂x2

+

∂x2
∂ξ1
∂2x2
∂ξ1∂ξ2

+

∂ψ(e)
i
∂x1

∂2x1
∂ξ1∂ξ2

+

∂2ψ(e)
i
∂x2
2

∂x2
∂ξ1

∂x2
∂ξ2

=

∂2x1
∂ξ1∂ξ2

,

"

∂2x2
∂ξ1∂ξ2

,

∂x1
∂ξ1

∂x1
∂ξ2

,

∂x2
∂ξ1

∂x2
∂ξ2

,

∂x1
∂ξ1

∂x2
∂ξ2

 

+

∂x1
∂ξ2

∂x2
∂ξ1 !#

∂ψ(e)
i
∂x1

∂ψ(e)
i
∂x2

∂2ψ(e)
i
∂x2
1

∂2ψ(e)
i
∂x2
2

∂2ψ(e)
i
∂x1∂x2


































.


































7

∂ψ(e)
i
∂x1

∂ψ(e)
i
∂x2

∂2ψ(e)
i
∂x2
1

∂2ψ(e)
i
∂x2
2

∂2ψ(e)
i
∂x1∂x2

.


































(4)


































































}

Forces at the Sea Bed . . .

∂φi
∂ξ1

∂φi
∂ξ2

∂2φi
∂ξ2
1

∂2φi
∂ξ2
2

∂2φi
∂ξ1∂ξ2
di
(ξ)
{z
































|
































}

=

































|

Collecting the above expressions together and re–expressing them in a vector–matrix
form,

∂x1
∂ξ1

∂x1
∂ξ2

∂2x1
∂ξ2
1

∂2x1
∂ξ2
2

∂x2
∂ξ1

∂x2
∂ξ2

∂2x2
∂ξ2
1

∂2x2
∂ξ2
2

0

0

0

0

2

2

∂x1
∂ξ1 !

 

∂x2
∂ξ1 !

 

∂x1
∂ξ2 !

 

∂x2
∂ξ2 !

 

2

2

0

0

2

∂x1
∂ξ1

∂x2
∂ξ1

2

∂x1
∂ξ2

∂x2
∂ξ2

∂2x1
∂ξ1∂ξ2

∂2x2
∂ξ1∂ξ2

∂x1
∂ξ1

∂x1
∂ξ2

∂x2
∂ξ1

∂x2
∂ξ2  

∂x1
∂ξ1

∂x2
∂ξ2

+

∂x1
∂ξ2

∂x2
∂ξ1 !

Q(ξ)
{z

∂2ψ(e)
i
(cid:12)
∂x1∂x2 
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)

x(ξ)

It follows from equation (4) that
∂ψ(e)
i
∂x1

∂ψ(e)
i
∂x2

∂2ψ(e)
i
∂x2
1



,

,

,

∂2ψ(e)
i
∂x2
2

,

= [Q(ξ)]−1 di(ξ).



This equation is the formula by which the much desired shape function derivatives are
calculated. Substituting it into equation (3)

∂f h
∂x1

,

"

∂f h
∂x2

,

∂2f h
∂x2
1

,

∂2f h
∂x2
2

,

∂2f h
∂x1∂x2 #(cid:12)
x(ξ)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

nNode

i=1
X

This equation is the formula by which the ﬁrst, second and cross derivatives of a ﬁnite
element solution to a two–dimensional problem are calculated.

=

c(e)
i

[Q(ξ)]−1 di(ξ).

(5)

The Matrix Entries: The matrix entries may all be formulated by taking derivatives
of the ﬁnite element mapping. Taking the opportunity to develop a systematic notation
for the purposes of the algorithm simultaneously,

nNode

Xk=1

xi(ξ) =

φk(ξ)(xi |node k) =

shape(k, 1) ∗ eCoord(k, i)

(6)

where (xi |node k) is the ith coordinate of node k, as is eCoord(k, i), the φk(ξ)’s are the
basis, as are the shape(k, 1)’s. The matrix entries are calculated according to

∂xi
∂ξj
∂2xi
∂ξ2
j
∂2xi
∂ξ1∂ξ2

=

=

=

nNode

Xk=1
nNode

Xk=1
nNode

Xk=1

∂φk
∂ξj
∂2φk
∂ξ2
j
∂2φk
∂ξ1∂ξ2

(xi |node k) =

shape(k, j + 1) ∗ eCoord(k, i)

(xi |node k) =

shape(k, j + 3) ∗ eCoord(k, i)

(xi |node k) =

shape(k, 6) ∗ eCoord(k, i),

(7)

nNode

Xk=1

nNode

Xk=1
nNode

Xk=1
nNode

Xk=1

8

S.J. Childs, J.W. Gonsalves

where the deﬁnition of the shape(k, j)’s follows from the equations above.

The Derivatives of the Basis: Obtaining formulae for the various derivatives of the
basis is an elementary exercise in diﬀerentiation. The resulting formulae in the particular
instance of the 8–noded quadrilateral basis (appendix, page 21) are listed in the appendix
on page 21. A combined structure–ﬂow chart diagram of the algorithm which computes
the derivatives of a ﬁnite element solution is given on page 9.

3.2 Some Test Examples

Finite element approximations for a number of simple, analytic surfaces were devised by
evaluating the self same functions at the nodes of the test mesh depicted in Figure 2.
A comparison of the various derivatives of the approximated surface with those of the
analytic function itself conﬁrmed the algorithm to be working.

Test 1: For the surface

f (x1, x2) = 1,

the ﬁrst, second and crossed derivatives were obtained to speciﬁed precision (approxi-
mately 16 signiﬁcant ﬁgures) at all thirteen nodes.

x

2

(1,3)

(3,3)

Ω

1

Ω

2

(1,1)

(3,1)

x

1

Figure 2: Test Mesh

Forces at the Sea Bed . . .

9

   Mesh Associated 

with Finite Element

       Solution

iElement = 1

Finite Element

     Solution

Shape and Shape

Function Deriv-

atives w.r.t.   , d(  )ξ

ξ

Construct 

Q

Invert  Q

Shape Function 

Derivatives w.r.t.
 -1
ξ
d’ = Q (  )d(  )

ξ

x

Derivatives of Finite

Element Solution
n
(e)
Σ
   c   d’
i     i
i=1

Reference Globally

Flow of Variables

and Sequence

Flow of Variables 

Only

Sequence Only

  iElement = 

          iElement + 1

Yes

iElement <

nElement ?

No

Write Results Out

Figure 1: Combined Structure–Flow Chart Diagram of an Algorithm which Computes
the Derivatives of a Finite Element Solution Analytically.

10

S.J. Childs, J.W. Gonsalves

Test 2: For the surface

f (x1, x2) = x1,

the ﬁrst, second and crossed derivatives were obtained to speciﬁed precision (approxi-
mately 16 signiﬁcant ﬁgures) at all thirteen nodes.

Test 3: For the surface

f (x1, x2) = x2

1 − 4x1 + 3

the ﬁrst, second and crossed derivatives were obtained to speciﬁed precision (approxi-
mately 16 signiﬁcant ﬁgures) at all thirteen nodes.

4 The Various Derivatives of Z(x3, h)

The function which describes the attenuation with depth is

Z(x3, h) =

cosh(κ(h + x3))
cosh(κh)

1
κ

= Tanh(κh).

where the x3 coordinate is measured from the mean water level, h is the depth below mean
water level, π is the usual mathematical constant and κ is deﬁned by the non–dimensional
dispersion relation

Observing that h = h(x1, x2) and κ = κ(x1, x2), the ﬁrst, second and cross derivatives
are accordingly formulated in the appendix on page 23. At the sea bed where x3 = −h:

Z |x3=−h =

1
cosh(κh)

,

−1
cosh(κh)  

∂h
∂x1

−1
cosh(κh)  

∂h
∂x2

+

+

h
κ

h
κ

∂κ
∂x1 !

∂κ
∂x2 !

,

,

= 0,

=

=

=

=

∂Z
∂x1 (cid:12)
(cid:12)
(cid:12)
(cid:12)
∂Z
(cid:12)
∂x2 (cid:12)
(cid:12)
(cid:12)
(cid:12)
∂Z
(cid:12)
∂x3 (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

∂2Z
∂x2
1 (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

∂2Z
∂x2
2 (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

x3=−h

x3=−h

x3=−h

x3=−h

x3=−h

1
cosh(κh) 


(1 + κ2)

2

∂h
∂x1 !

 

−

∂2h
∂x2
1

+ h

2κ − 1 − sinh(κh) −

−

1
hκ (cid:19)

∂h
∂x1

∂κ
∂x1

+

h
κ (cid:18)

2
κ

+ hκ

(cid:19)  

2

∂κ
∂x1 !

−

h
κ

∂2κ
∂x2

,

1
cosh(κh) 


(1 + κ2)

2

∂h
∂x2 !

 

−

∂2h
∂x2
2

+ h

2κ − 1 − sinh(κh) −

1
κ

1 

1
κ

(cid:18)

(cid:18)

∂2Z
∂x1∂x2 (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

∂2Z
∂x1∂x3 (cid:12)
(cid:12)
(cid:12)
(cid:12)
∂2Z
(cid:12)
∂x2∂x3 (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

∂2Z
∂x2
3 (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

tives

Forces at the Sea Bed . . .

11

−

1
hκ (cid:19)

∂h
∂x2

∂κ
∂x2

+

2
κ

h
κ (cid:18)
∂2h
∂x1∂x2

+ hκ

(cid:19)  

2

∂κ
∂x2 !

−

h
κ

∂2κ
∂x2

,

2 


+

hκ −

−

 

h
κ

1
κ !

=

1
cosh(κh) "

1 + κ2
(cid:16)

∂h
∂x1

∂h
∂x2

−

x3=−h

∂h
∂x1

∂κ
∂x2

 

+

∂h
∂x2

+

2h
κ2 + h2

!

∂κ
∂x1

∂κ
∂x2

 

−

h
κ

∂2κ
∂x1∂x2 #

,

(cid:17)
∂κ
∂x1 !

κ
cosh(κh)  

κ

∂h
∂x1

+ h

∂κ
∂x1 !

,

κ
cosh(κh)  

κ

∂h
∂x2

+ h

∂κ
∂x2 !

and

=

=

=

x3=−h

x3=−h

x3=−h

(κ)2
cosh(κh)

5 The Nodal Values of κ(x1, x2) and its Various Deriva-

Calculating the wave number, κ, for a given depth is standard procedure. The dispersion
relation

is conventionally solved using Newton’s method. The resulting iterative scheme is,

κi+1 = κi −

κi Tanh(κih) − 1
Tanh(κih) + hκi(1 − Tanh2(κih))

where the superscript i denotes the successive iteration from which a given solution was
obtained. The initial guess usually taken is

1
κ

= Tanh(κh)

κ =

2π
λ0

,

where λ0 is deep water wave–length.

Once this has been accomplished for each of the n nodes belonging to a given element,
there is no reason why these nodal values shouldn’t be regarded as a discrete solution in
order to determine the derivatives. Substituting into equation (5)

,

,

,

,

"

∂κh
∂x1

∂κh
∂x2

∂2κh
∂x2
2

∂2κh
∂x2
1

∂2κh
∂x1∂x2 #(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
The derivatives of κ can, alternatively, be calculated by the implicit diﬀerentiation of the
dispersion relation. Considering [Q(ξ)]−1 dj(ξ) must be calculated at each node j, the
former method is the more eﬃcient.

κ |node j [Q(ξ)]−1 dj(ξ).

x(ξ)

Xj=1

=

nNode

12

S.J. Childs, J.W. Gonsalves

6 The Sea Bed at a Node

Because nodes do not necessarily coincide with individual points of bathymmetry mea-
surement, and for the purposes of taking derivatives, a “sea bed” needs to be interpolated
locally. A straightforward ﬁt of an n degree polynomial to the n data points nearest a
node, the use of cubic splines and a local least squares ﬁt were all considered as possible
ways to interpolate bathymmetry between individual points of bathymetry measurement.

The manner in which available data was collected proved to be a deciding factor in the
ﬁnal choice. While the use of cubic splines is fairly established in the modelling of known
surfaces, the problem with unknown surfaces is that slope information at the “knots”
is required. Such information is never available in the raw bathymetry data. A further
factor to consider is that the actual data sampling intervals range anywhere from slightly,
to highly, irregular. One advantage of the least squares method is that a large data set can
be taken into account, even individual data points weighted according to their proximity.

The argument against ﬁtting an n degree polynomial exactly to the nearest n points
in the vicinity of a given node is that the use of a high degree polynomial will result
in a totally ﬁctitious model in cases where the actual surface is of “lower degree” than
the polynomial used, alternatively, where the sampling intervals are poor. Fitting a low
degree polynomial surface could result in the use of an unrepresentative data sample.
The solution is therefore to ﬁt a fairly simple, low degree polynomial surface to a larger
data set. This can be accomplished using the least squares method. A method based on
the least absolute value of the errors is preferable in theory, of course, but not in practice.

Bi–quadratic and bi–cubic surfaces were experimented with using the method of least
squares. The former was decided to be the better choice. Irregular data was found to
allow extreme cases of the “wiggle” eﬀect in the bi–cubic case. A bi–cubic surface also
requires a far greater, hence locally less relevant data set and its greater degree is therefore
not necessarily an advantage. In a real–life data comparison between actual measured
depths, the depths predicted using cubic splines and those predicted using a local, least
squares, bi–quadratic ﬁt, a limited inspection suggested the least squares bi–quadratic ﬁt
to be superior.

6.1 The Least Squares Fit of a Bi–Quadratic Function

A generalised bi–quadratic equation has the form

h(x, y) = c1 + c2y + c3x + c4xy + c5y2 + c6x2

or when written as the dot product of two vectors,

h(x, y) = [1, y, x, xy, y2, x2] · [c1, c2, c3, c4, c5, c6].

(8)

A least squares ﬁt makes, what is in one sense, an optimal choice of the constants,
c1, c2, · · · , c6. “In one sense”, in that it minimises the summed squares of the errors at

Forces at the Sea Bed . . .

13

the data points and not the summed absolute values of these errors. The sum of the
squares of the errors, ǫ, is

ǫ =

(c1 + c2yi + c3xi + c4xiyi + c5y2

i + c6x2

i − zi)2

where the zi are the n data points located at (xi, yi), the points to which the bi–quadratic
equation is to be ﬁtted. In order to minimise ǫ with respect to the unknown constants,

∂ǫ
∂c1
∂ǫ
∂c2
∂ǫ
∂c3
∂ǫ
∂c4
∂ǫ
∂c5
∂ǫ
∂c6

= 0 ⇒

(c1 + c2yi + c3xi + c4xiyi + c5y2

i + c6x2

i ) =

= 0 ⇒

yi(c1 + c2yi + c3xi + c4xiyi + c5y2

i + c6x2

yizi

= 0 ⇒

xi(c1 + c2yi + c3xi + c4xiyi + c5y2

i + c6x2

i ) =

xizi

= 0 ⇒

xiyi(c1 + c2yi + c3xi + c4xiyi + c5y2

i + c6x2

i ) =

xiyizi

= 0 ⇒

i (c1 + c2yi + c3xi + c4xiyi + c5y2
y2

i + c6x2

i ) =

= 0 ⇒

i (c1 + c2yi + c3xi + c4xiyi + c5y2
x2

i + c6x2

i ) =

x2
i zi

n

zi

n

i=1
X
n

i=1
X
i ) =

i=1
X
n

Xi=1
n
y2
i zi

i=1
X
n

i=1
X

Re–expressing the above system of equations in vector–matrix form,

n

Xi=1

n

i=1
X
n

i=1
X
n

i=1
X
n

Xi=1
n

i=1
X
n

i=1
X

n

i=1
X

1

yi

xi

y2
i

x2
i

























|
Therefore

yi

y2
i

xi

xiyi

xiyi xiy2
i

y2
i

y3
i

x2
i

x2
i yi

xiyi

x2
i

i yi xiy2
x2
i

x3
i

y3
i

xiy2

i xiy3
i

y4
i

i y2
x2
i

x2
i yi

x3
i

i yi x2
x3

i y2
i

x4
i

P
{z

∂ǫ
∂c

= 0 ⇒

=

1

y1

x1

y2
1

x2
1

























|

c1

c2

c3

c4

c5

c6









































































}

P c = Oz,

1

· · ·

1

y2

x2

y2
2

x2
2

· · ·

· · ·

· · ·

· · ·

yn

xn

y2
n

x2
n

O
{z

























}

z1

z2

...

zn
















.
















xiyi xiy2

i x2

i yi x2

i y2

i xiy3
i

x3
i yi

x1y1 x2y2

· · · xnyn

where P and O take their respective deﬁnitions from the previous equation. Solving for
c,

c = P −1Oz.

(9)

14

S.J. Childs, J.W. Gonsalves

Substituting this result into equation (8),

h(x, y) = [1, y, x, xy, y2, x2] · P −1Oz

where h(x, y) is the depth modelled locally by this least squares ﬁtted, bi–quadratic
equation.

6.2 The Various Derivatives of h(x, y)

The corresponding derivatives of the sea bed are:

= [0, 1, 0, x, 2y, 0] · P −1Oz

= [0, 0, 1, y, 0, 2x] · P−1Oz

∂h
∂x
∂h
∂y
∂2h
∂x2 = [0, 0, 0, 0, 0, 2] · P −1Oz
∂2h
∂y2 = [0, 0, 0, 0, 2, 0] · P −1Oz
∂2h
= [0, 0, 0, 1, 0, 0] · P −1Oz
∂x∂y

6.3 The Sea Bed Normal

The components of the sea bed normal are:

N1(x, y) = −

= −[0, 0, 1, y, 0, 2x] · P −1Oz

N2(x, y) = −

= −[0, 1, 0, x, 2y, 0] · P −1Oz

∂h
∂x
∂h
∂y

∂h
∂h

N3(x, y) =

= 1,

and the unit normal,

n(x, y) =

N (x, y)
|| N (x, y) ||2

.

A combined structure–ﬂow chart diagram of an algorithm to model the sea bed locally
in the vicinity of a node by way of a least squares ﬁtted bi–quadratic can be found on
page 15.

6.4 Some Test Examples

Data with which to test the algorithm was generated by evaluating a few simple, analytic
surfaces at the required number of points. A comparison of outputted bathymetries and

Forces at the Sea Bed . . .

15

Mesh

Bathymmetry

iPoint = 1

Locate the nearest

n   Data Points

Invert  P

Construct  P

Construct  O

Flow of Variables

and Sequence

Flow of Variables 

Only

Sequence Only

iPoint = iPoint + 1

Compute the Least

Squares Constants
-1
c = P  Oz

Compute the Bathy-

mmetry, it’s Deriv-

atives and Normal

Yes

No

   iPoint < nPoint ?

Write Results Out

Figure 3: Combined Structure–Flow Chart Diagram of an Algorithm Used to Model the
Sea Bed Locally in the Vicinity of a Node.

16

S.J. Childs, J.W. Gonsalves

sea–bed normals with those of the corresponding analytic function, from which the data
was generated, showed the algorithm to be working.

Tests 1: The trivial cases

were used to generate the input

h(x, y) = c, c a constant

The algorithm calculated both depth and normal correct to speciﬁed precision (approxi-
mately 16 signiﬁcant ﬁgures).

Test 2: For a topography containing the arbitrarily selected bi–quadratic

h(x, y) = x2 + 2y2 + 3xy + 4x + 5y + 6

x

y

z

x

y

z

1

1

c

1

1

1

2

c

1

2

2

1

c

2

1

1

3

c

1

3

3

1

c

3

1

2

2

c

.

2

2

.

21

35

31

53

43

48

the input generated was

The algorithm calculated depth and normal correct to speciﬁed precision (approximately
16 signiﬁcant ﬁgures).

Test 3: A real–life data comparison was made between actual measured depths, the
depths predicted using a local, least squares, bi–quadratic ﬁt and those predicted using
cubic splines. A limited inspection suggested the least squares, bi–quadratic ﬁt to be the
superior choice.

The algorithm is therefore considered to adequately perform the tasks for which it was
designed.

7 The Traction Acting on the Sea Bed

The surface force per unit area, exerted by the ﬂuid and acting on the sea bed, is given
by

t = σn

Forces at the Sea Bed . . .

17

where σ is the stress tensor at the sea bed and n is the unit normal to the sea bed. In
terms of the quantities discussed and formulated so far,

t1 = − pn1

+ 2µ Re

+ 2µ Re

e−iωt ∂2f h
∂x2
1 )
∂f h
∂x1 )

e−iωt2

(

(

n1

1
cosh(κh)
−1
cosh(κh)  

∂h
∂x1

+

h
κ

∂κ
∂x1 !
2

n1

+ 2µ Re

e−iωtf h
n

o

1
cosh(κh) 


(1 + κ2)

+h

2κ − 1 − sinh(κh) −

(cid:18)

 

∂h
∂x1 !
1
hκ (cid:19)

−

1
κ

+

h
κ (cid:18)

2
κ

+ hκ

(cid:19)  

2

∂κ
∂x1 !

−

∂2h
∂x2
1
∂κ
∂x1

−

∂h
∂x1
∂2κ
h
∂x2
κ

n1

1 


+ 2µ Re

+ 2µ Re

+ 2µ Re

+ 2µ Re

e−iωt ∂2f h

∂x2∂x1 )

(

(

(

e−iωt ∂f h
∂x2 )
e−iωt ∂f h
∂x1 )

n2

1
cosh(κh)
−1
cosh(κh)  
−1
cosh(κh)  

∂h
∂x1
∂h
∂x2

e−iωtf h
n

o
∂2h
∂x1∂x2

−

1
cosh(κh) "

1 + κ2
(cid:16)

(cid:17)

+

hκ −

−

 

h
κ

+ 2µ Re

e−iωt ∂2f h

(

∂x2∂x1 )

+ 2µ Re

+ 2µ Re

e−iωt ∂f h
∂x2 )
e−iωt ∂f h
∂x1 )

(

(

!

n3

 

+

2h
κ2 + h2
1
cosh(κh)
−1
cosh(κh)  
−1
cosh(κh)  

∂h
∂x1
∂h
∂x2

+ 2µ Re

e−iωtf h
n

o

1
cosh(κh) "

1 + κ2
(cid:16)

1
κ !  
∂κ
∂x1

∂h
∂x1
∂κ
∂x2

(cid:17)
∂κ
∂x2
h
κ

−

h
κ

+

hκ −

−

 

+

2h
κ2 + h2

!

 

n2

n2

+

+

h
κ
h
κ
∂h
∂x1

∂κ
∂x1 !
∂κ
∂x2 !
∂h
∂x2

1
κ !  
∂κ
∂x1

∂h
∂x1
∂κ
∂x2

∂κ
∂x2
h
κ

−

+

∂h
∂x2
∂2κ
∂x1∂x2 #

∂κ
∂x1 !

n2

n3

n3

−

+

+

h
κ
h
κ
∂h
∂x1

∂κ
∂x1 !
∂κ
∂x2 !
∂h
∂x2
∂h
∂x2

+

∂κ
∂x1 !

∂2κ
∂x1∂x2 #

n3

∂2h
∂x1∂x2

t2 = − pn2

18

S.J. Childs, J.W. Gonsalves

+ 2µ Re

e−iωt ∂2f h

(

∂x2∂x1 )

+ 2µ Re

+ 2µ Re

e−iωt ∂f h
∂x2 )
e−iωt ∂f h
∂x1 )

(

(

n1

1
cosh(κh)
−1
cosh(κh)  
−1
cosh(κh)  

∂h
∂x1
∂h
∂x2

+ 2µ Re

e−iωtf h
n

o

1
cosh(κh) "

1 + κ2
(cid:16)

+

hκ −

 

h
κ

2h
κ2 + h2

+

 

!

−

∂h
∂x1
∂κ
∂x2

1
κ !  
∂κ
∂x1
1
cosh(κh)
−1
cosh(κh)  

n2

+ 2µ Re

+ 2µ Re

e−iωt ∂2f h
∂x2
2 )
∂f h
∂x2 )

e−iωt2

(

(

n1

n1

−

+

+

h
κ
h
κ
∂h
∂x1

∂κ
∂x1 !
∂κ
∂x2 !
∂h
∂x2
∂h
∂x2

+

∂κ
∂x1 !

∂2κ
∂x1∂x2 #

n1

(cid:17)
∂κ
∂x2
h
κ

−

∂2h
∂x1∂x2

+ 2µ Re

e−iωtf h
n

o

1
cosh(κh) 


(1 + κ2)

+h

2κ − 1 − sinh(κh) −

−

(cid:18)

∂h
∂x2

+

h
κ

∂κ
∂x2 !
2

n2

 

1
κ

∂2h
∂x2
2
∂κ
∂x2

−

∂h
∂x2 !
∂h
1
∂x2
hκ (cid:19)
∂2κ
h
∂x2
κ

−

2

n2

2 


∂κ
∂x2 !

+ hκ

+

2
κ

h
κ (cid:18)
κ
cosh(κh)  

(cid:19)  
∂h
∂x2

κ

+ h

∂κ
∂x2 !

n3

+ 2µ Re

e−iωtf h
n

o

t3 = − pn3

+ 2µ Re

+ 2µ Re

+ 2µ Re

e−iωtf h
n
e−iωtf h
n
e−iωtf h
n

o

o

o

κ

κ

∂h
∂x1
∂h
∂x2

κ
cosh(κh)  
κ
cosh(κh)  
(κ)2
cosh(κh)

n3.

+ h

+ h

∂κ
∂x1 !
∂κ
∂x2 !

n1

n2

where p is the pressure, µ is the viscosity, e and i denote the usual mathematical constants,
ω is a frequency, t is time, f h is the ﬁnite element solution to the mild slope wave equation,
x3 is the vertical coordinate measured from mean water level, h is the depth below mean
water level (with the exception of the superscript) and κ is the wave number. The
derivatives ∂h
∂y etc. derivatives formulated in Subection 6.2 on
page 14 (the variables x and y were used in place of x1 and x2 so as to avoid confusion
with the ﬁrst and second data points, (x1, y1, z1) and (x2, y2, z2) respectively).

∂x2 etc. denote the ∂h

∂x1 , ∂h

∂x , ∂h

A structure chart of the entire algorithm to compute tractions on the sea bed from a
solution to the mild slope wave equation is given on page 19.

Forces at the Sea Bed . . .

19

Raw, Ungridded 

Bathymmetry Data

Mesh Associated

with Solution.

Finite Element Sol-

ution to Mild-Slope 

Wave Equation

Model Sea Bed at

Nodes using Local
Least-Squares Fit 2

Analytic Derivatives

of Finite Element 
Interpolation1

Solve for Wave

Number using

Newton-Raphson

Analytic Derivatives

of Finite Element 

1
Interpolation

Assemble

∆ v

Matrix

Attenuate Surface

Pressure Solution

Down to Bed

Traction

Write Traction Out

Figure 4: Structure Chart of an Algorithm to Compute Tractions from a Solution to the
Mild Slope Wave Equation.

1 see Figure 1 on page 9 for detail

2 see Figure 3 on page 15 for detail

20

S.J. Childs, J.W. Gonsalves

8 Conclusions

The derivatives of a ﬁnite element solution can be successfully computed on each element
using

∂f h
∂x1

,

"

∂f h
∂x2

,

∂2f h
∂x2
1

,

∂2f h
∂x2
2

,

=

x(ξ)

nNode

i=1
X

∂2f h
∂x1∂x2 #(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

where Q(ξ) and di(ξ) are deﬁned in equation (4) on page 7, c(e)
i
on each element and nNode is the number of nodes on each element.

is the discrete solution

c(e)
i

[Q(ξ)]−1 di(ξ)

(10)

A bi–quadratic least squares ﬁt (used to model the sea bed locally in the vicinity of a
node) can be calculated according to

h(x, y) = [1, y, x, xy, y2, x2] · P −1Oz

where P , O are the matrices deﬁned on page 13 and z is the vector of known depths
used (sample points) in the vicinity of the node in question. The various derivatives of
this sea bed can be calculated using

= [0, 1, 0, x, 2y, 0] · P −1Oz

= [0, 0, 1, y, 0, 2x] · P−1Oz

∂h
∂x
∂h
∂y
∂2h
∂x2 = [0, 0, 0, 0, 0, 2] · P −1Oz
∂2h
∂y2 = [0, 0, 0, 0, 2, 0] · P −1Oz
∂2h
= [0, 0, 0, 1, 0, 0] · P −1Oz.
∂x∂y

The components of the normal are then

N1(x, y) = −

= −[0, 0, 1, y, 0, 2x] · P −1Oz,

N2(x, y) = −

= −[0, 1, 0, x, 2y, 0] · P −1Oz,

N3(x, y) =

= 1

and the unit normal is

n(x, y) =

N (x, y)
|| N (x, y) ||2

.

∂h
∂x
∂h
∂y

∂h
∂h

A bi–quadratic least squares ﬁt would appear to be a superior method to model the sea
bed locally in the vicinity of a node when compared to the more conventional approach
which involves gridding and the use of cubic splines.

The formula to compute the traction on the sea bed is given on page 16 (in terms of
the derivatives of a ﬁnite element solution to the mild slope wave equation and a least
squares ﬁtted bi–quadratic model of the sea bed in the vicinity of each node). Lift, drag
and Stokes’ formula may all be calculated from elements incidental to it.

Forces at the Sea Bed . . .

9 Appendix I

The 8–Noded Quadrilateral Basis

21

The basis used in conjunction with the 8–noded quadrilateral element is:

The Derivatives of the 8–Noded Quadrilateral Basis

The ﬁrst derivatives of the 8–noded quadrilateral basis with respect to the ﬁrst variable
are:

φ1(ξ) =

(ξ2

1 − ξ1)(ξ2

2 − ξ2)

φ2(ξ) =

(ξ2

1 + ξ1)(ξ2

2 − ξ2)

φ3(ξ) =

(ξ2

1 + ξ1)(ξ2

2 + ξ2)

φ4(ξ) =

(ξ2

1 − ξ1)(ξ2

2 + ξ2)

1
4
1
4
1
4
1
4

φ5(ξ) = −

(ξ2

1 − 1)(ξ2

2 − ξ2)

φ6(ξ) = −

(ξ2

1 + ξ1)(ξ2

2 − 1)

φ7(ξ) = −

(ξ2

1 − 1)(ξ2

2 − ξ2)

φ8(ξ) = −

(ξ2

1 − ξ1)(ξ2

2 − 1)

1
2
1
2
1
2
1
2

shape(1, 2) ≡

=

(ξ2 + 2ξ1 − 2ξ1ξ2 − ξ2
2)

shape(2, 2) ≡

= −ξ1 + ξ1ξ2

shape(3, 2) ≡

(−ξ2 + 2ξ1 − 2ξ1ξ2 + ξ2
2)

shape(4, 2) ≡

(1 − ξ2
2)

shape(5, 2) ≡

(ξ2 + 2ξ1 + 2ξ1ξ2 + ξ2
2)

shape(6, 2) ≡

= −ξ1 − ξ1ξ2

shape(7, 2) ≡

(−ξ2 + 2ξ1 + 2ξ1ξ2 − ξ2
2)

shape(8, 2) ≡

(ξ2

2 − 1).

∂φ1
∂ξ1
∂φ2
∂ξ1
∂φ3
∂ξ1
∂φ4
∂ξ1
∂φ5
∂ξ1
∂φ6
∂ξ1
∂φ7
∂ξ1
∂φ8
∂ξ1

1
4

1
4
1
2
1
4

1
4
1
2

=

=

=

=

=

22

S.J. Childs, J.W. Gonsalves

The ﬁrst derivatives of the 8–noded quadrilateral basis with respect to the second variable
are:

The second derivatives of the 8–noded quadrilateral basis with respect to the ﬁrst variable
are:

shape(1, 3) ≡

(ξ1 + 2ξ2 − 2ξ1ξ2 − ξ2
1)

shape(2, 3) ≡

(ξ2

1 − 1)

shape(3, 3) ≡

(−ξ1 + 2ξ2 + 2ξ1ξ2 − ξ2
1)

shape(4, 3) ≡

= −(ξ2 − ξ1ξ2)

shape(5, 3) ≡

(ξ1 + 2ξ2 + 2ξ1ξ2 + ξ2
1)

shape(6, 3) ≡

(1 − ξ2
1)

shape(7, 3) ≡

(−ξ1 + 2ξ2 − 2ξ1ξ2 + ξ2
1)

=

=

=

=

=

=

1
4
1
2
1
4

1
4
1
2
1
4

∂φ1
∂ξ2
∂φ2
∂ξ2
∂φ3
∂ξ2
∂φ4
∂ξ2
∂φ5
∂ξ2
∂φ6
∂ξ2
∂φ7
∂ξ2
∂φ8
∂ξ2

shape(8, 3) ≡

= (ξ1ξ2 − ξ2).

shape(1, 4) ≡

=

(1 − ξ2)

shape(2, 4) ≡

= ξ2 − 1

shape(3, 4) ≡

=

(1 − ξ2)

shape(4, 4) ≡

= 0

shape(5, 4) ≡

=

(1 + ξ2)

shape(6, 4) ≡

= −(1 + ξ2)

shape(7, 4) ≡

=

(1 + ξ2)

shape(8, 4) ≡

= 0.

1
2

1
2

1
2

1
2

1
2

∂2φ1
∂ξ2
1
∂2φ2
∂ξ2
1
∂2φ3
∂ξ2
1
∂2φ4
∂ξ2
1
∂2φ5
∂ξ2
1
∂2φ6
∂ξ2
1
∂2φ7
∂ξ2
1
∂2φ8
∂ξ2
1

∂2φ1
∂ξ2
2
∂2φ2
∂ξ2
2

shape(1, 5) ≡

=

(1 − ξ1)

shape(2, 5) ≡

= 0

The second derivatives of the 8–noded quadrilateral basis with respect to the second
variable are:

Forces at the Sea Bed . . .

23

The cross derivatives of the 8–noded quadrilateral basis are:

shape(3, 5) ≡

=

(1 + ξ1)

shape(4, 5) ≡

= −(1 + ξ1)

shape(5, 5) ≡

=

(1 + ξ1)

shape(6, 5) ≡

= 0

shape(7, 5) ≡

=

(1 − ξ1)

shape(8, 5) ≡

= ξ1 − 1.

∂2φ3
∂ξ2
2
∂2φ4
∂ξ2
2
∂2φ5
∂ξ2
2
∂2φ6
∂ξ2
2
∂2φ7
∂ξ2
2
∂2φ8
∂ξ2
2

1
2

1
2

1
2

shape(1, 6) ≡

=

(1 − 2ξ1 − 2ξ2)

shape(2, 6) ≡

= ξ1

shape(3, 6) ≡

=

(2ξ2 − 2ξ1 − 1)

shape(4, 6) ≡

= −ξ2

shape(5, 6) ≡

=

(1 + 2ξ1 + 2ξ2)

shape(6, 6) ≡

= −ξ1

shape(7, 6) ≡

=

(2ξ1 − 2ξ2 − 1)

shape(8, 6) ≡

= ξ2.

∂2φ1
∂ξ1∂ξ2
∂2φ2
∂ξ1∂ξ2
∂2φ3
∂ξ1∂ξ2
∂2φ4
∂ξ1∂ξ2
∂2φ5
∂ξ1∂ξ2
∂2φ6
∂ξ1∂ξ2
∂2φ7
∂ξ1∂ξ2
∂2φ8
∂ξ1∂ξ2

1
4

1
4

1
4

1
4

The Various Derivatives of Z(x3, h)

Since

Z(x3, h) =

and

= Tanh(κh),

cosh(κ(h + x3))
cosh(κh)

∂Z
∂x1

=

∂Z
∂x2

=

κ
cosh(κh) (cid:18)
h
+
cosh(κh) (cid:18)
κ
cosh(κh) (cid:18)

sinh(κ(h + x3)) −

cosh(κ(h + x3))

sinh(κ(h + x3)) −

cosh(κ(h + x3))

sinh(κ(h + x3)) −

cosh(κ(h + x3))

1
κ

1
κ

1
κ

1
κ

∂h
∂x1

(cid:19)

(cid:19)
∂h
∂x2

(cid:19)

∂κ
∂x1

,

24

S.J. Childs, J.W. Gonsalves

∂Z
∂x3

∂2Z
∂x2
1

= κ

=

+

h
cosh(κh) (cid:18)
sinh(κ(h + x3))
cosh(κh)

,

+

1
κ

κ
cosh(κh) (cid:20)(cid:18)
κ
cosh(κh) (cid:18)
h
cosh(κh) (cid:20)(cid:18)

+

sinh(κ(h + x3)) −

cosh(κ(h + x3))

∂κ
∂x2

,

(cid:19)

∂2h
∂x2
1

(cid:19)

+ κ

cosh(κ(h + x3)) − 2 sinh(κ(h + x3))

2

∂h
∂x1 !

(cid:21)  

sinh(κ(h + x3)) −

cosh(κ(h + x3))

2κ − 1 − sinh(κh) −

−

cosh(κ(h + x3))

+

1 +

+ κ sinh(κh) − κ

sinh(κ(h + x3))

2
h

(cid:18)

∂h
∂x1

∂κ
∂x1

(cid:21)

1
κ

1
hκ (cid:19)

(cid:19)

∂2Z
∂x2
2

=

+ κ

cosh(κ(h + x3)) − 2 sinh(κ(h + x3))

h
κ cosh(κh) (cid:20)(cid:18)

2
κ

(cid:19)

+ hκ

cosh(κ(h + x3)) − (1 + h) sinh(κ(h + x3))

2

∂κ
∂x1 !

(cid:21)  

sinh(κ(h + x3)) −

cosh(κ(h + x3))

+

+

h
cosh(κh) (cid:18)

+

1
κ

κ
cosh(κh) (cid:20)(cid:18)
κ
cosh(κh) (cid:18)
h
cosh(κh) (cid:20)(cid:18)

+

∂2κ
∂x2
1

,

(cid:19)

∂2h
∂x2
2

(cid:19)

2

∂h
∂x2 !

(cid:21)  

sinh(κ(h + x3)) −

cosh(κ(h + x3))

2κ − 1 − sinh(κh) −

−

cosh(κ(h + x3))

+

1 +

+ κ sinh(κh) − κ

sinh(κ(h + x3))

2
h

(cid:18)

∂h
∂x2

∂κ
∂x2

(cid:21)

1
κ

1
hκ (cid:19)

(cid:19)

+ hκ

cosh(κ(h + x3)) − (1 + h) sinh(κ(h + x3))

2

∂κ
∂x2 !

(cid:21)  

sinh(κ(h + x3)) −

cosh(κ(h + x3))

∂2κ
∂x2
2

,

(cid:19)

+

h
κ cosh(κh) (cid:20)(cid:18)

2
κ

(cid:19)

+

h
cosh(κh) (cid:18)
= (κ)2 cosh(κ(h + x3))

,

cosh(κh)

1
κ

κ
cosh(κh) (cid:20)(cid:18)
κ
cosh(κh) (cid:18)

+

+ κ

cosh(κ(h + x3)) − 2 sinh(κ(h + x3))

sinh(κ(h + x3)) −

cosh(κ(h + x3))

∂h
∂x1

∂h
∂x2

(cid:21)
∂2h
∂x1∂x2

(cid:19)

∂2Z
∂x2
3

∂2Z
∂x1∂x2

=

1
κ

1
κ

1
κ

1
κ

1
κ

1
κ

(cid:19)

(cid:19)

(cid:19)

Forces at the Sea Bed . . .

25

+

h
cosh(κh) (cid:20)(cid:18)

1
κ

1
hκ (cid:19)

κ −

−

cosh(κ(h + x3))

+

1
h

(cid:18)

(cid:19)

− 2

sinh(κ(h + x3))

∂h
∂x1

∂κ
∂x2

+

∂h
∂x2

∂κ
∂x1 !

(cid:21)  

+

h
κ cosh(κh) (cid:20)(cid:18)

2
κ

(cid:19)

+ hκ

cosh(κ(h + x3)) − (1 + h) sinh(κ(h + x3))

∂κ
∂x1

∂κ
∂x2

(cid:21)

sinh(κ(h + x3)) −

cosh(κ(h + x3))

1
κ

∂2κ
∂x1∂x2

,

(κ cosh(κ(h + x3)) − sinh(κ(h + x3)))

(κ cosh(κ(h + x3)) − sinh(κ(h + x3)))

and

(κ cosh(κ(h + x3)) − sinh(κ(h + x3)))

(κ cosh(κ(h + x3)) − sinh(κ(h + x3)))

(cid:19)

∂h
∂x1

∂h
∂x2

∂κ
∂x1

∂κ
∂x2

.

∂2Z
∂x1∂x3

=

∂2Z
∂x2∂x3

=

+

h
cosh(κh) (cid:18)
κ
cosh(κh)
h
cosh(κh)

+

κ
cosh(κh)

+

h
cosh(κh)

References

[1] J. C. W. Berkhoﬀ. Mathematical models for simple harmonic linear water waves
wave diﬀraction and refraction. Technical report, Delft hydraulics laboratory, 1976.

[2] P. Bettess and O. C. Zienkiewicz. Diﬀraction and refraction of surface waves us-
ing ﬁnite and inﬁnite elements. International Journal For Numerical Methods In
Engineering, 11:1271–1290, 1977.

[3] N. Booij. A note on the accuracy of the mld–slope wave equation. Coastal Engi-

neering, 7:191–203, 1983.

[4] S. J. Childs. The energetic implications of the time discretisation in implementations
of the a.l.e. equations. accepted, International Journal for Numerical Methods in
Fluids, 1999.

[5] S. J. Childs. The energetic implications of using deforming reference descriptions
to simulate the motion of incompressible, newtonian ﬂuids. Computer Methods in
Applied Mechanics and Engineering, 180(1–2):219–238, 1999.

[6] S. J. Childs. Incipient motion criteria for a rigid sediment grain on a rigid surface.

Journal of Engineering Mechanics, 127(1–2):524–529, 2001.

[7] S. J. Childs and B. D. Reddy. Finite element simulation of the motion of a rigid
body in a ﬂuid with free surface. Computer Methods in Applied Mechanics and
Engineering, 175(1–2):99–120, 1999.

26

S.J. Childs, J.W. Gonsalves

[8] S. J. Childs and F. A. Shillington. Some wave–related, heavy mineral placer deposits.

Technical report, http://xxx.lanl.gov/abs/physics/9909023, 1999.

[9] R. H. de Decker. The wave regime on the inner shelf south of the orange river and
its implications for sediment transport. South African Journal of Geology, 91(3),
1988.

[10] J. W. Gonsalves. Estuary mouth stability project progress report no. 2 modiﬁcations
to the ﬁnite element programme ‘Wave’. Technical Report T/SEA 8515, Council for
Scientiﬁc and Industrial Research, 1985.

[11] Anthony P. Hockney. Suggested pleistocene climatic changes and their possible
eﬀects on the raised and submerged beaches of the West Coast of Southern Africa.
Technical report, De Beers Marine.

[12] L. D. Landau and E. M. Lifshitz. Fluid Mechanics. Pergamon, Oxford, 1987.

[13] B. Le M´ehaut´e. An Introduction to Hydrodynamics and Water Waves. Springer–

Verlag, New York, 1976.

[14] L. G. Murray, R. H. Joynt, D. C. O’Shea, R. W. Foster, and L. Kleinjan. The
geological environment of some deposits oﬀ the coast of South West Africa. Institute
of Geological Sciences Report, 70(15):119–141, 1970.

[15] J. D. Pos, F. A. Kilner, and P. G. Fischer. Combined refraction–diﬀraction of water
waves by an island. International Journal of Engineering Science, 25(5):577–590,
1987.

[16] F. A. Shillington and A. Britten-Jones. Features of surface waves oﬀ the Southern
Cape coast and their associated meteorological conditions during a severe storm
between 30 August and 3 September 1978. South African Journal of Science, 75,
1979.

[17] M. S. Yalin. Theory of Hydraulic Models. Macmillan, London, U.K., 1971.

