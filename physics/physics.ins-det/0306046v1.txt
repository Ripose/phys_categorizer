Computing in High Energy and Nuclear Physics CHEP03, La Jolla, California, USA, 24-28 March 2003

1

Conﬁguration of the ATLAS Trigger System

M. Elsing ∗
CERN, Division EP, 1211 Geneva 23, Switzerland
T. Sch ¨orner-Sadenius
CERN, Division EP, 1211 Geneva 23, Switzerland and
Hamburg University, Institut f ¨ur Experimentalphysik, Luruper Chaussee 149, 22761 Hamburg,
Germany

On behalf of the Atlas High Level Trigger Group [1]

3
0
0
2
 
n
u
J
 
5
 
 
]
t
e
d
-
s
n
i
.
s
c
i
s
y
h
p
[
 
 
1
v
6
4
0
6
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

In this paper a conceptual overview is given of the software foreseen to conﬁgure the ATLAS trigger system.
Two functional software prototypes have been developed to conﬁgure the ATLAS Level-1 emulation and the
High-Level Trigger software. Emphasis has been put so far on following a consistent approach between the two
trigger systems and on addressing their requirements, taking into account the speciﬁc use-case of the ‘Region-
of-Interest’ mechanism for the ATLAS Level-2 trigger. In the future the conﬁguration of the two systems will
be combined to ensure a consistent selection conﬁguration for the entire ATLAS trigger system.

1. INTRODUCTION

The Large Hadron Collider (LHC), which is cur-
rently being built at the European Organization for
Nuclear Research (CERN) in Geneva, will collide pro-
ton beams at a centre-of-mass energy of 14 TeV and
with a bunch-crossing rate of nominally 40 MHz. At
the design luminosity of 1034 cm−2s−1 an average of
about 25 proton proton interactions will take place in
each of the bunch-crossings. An eﬃcient and selec-
tive trigger system is needed to reduce the amount of
data that will arise from these conditions and to se-
lect the relevant physics events from the background

CALO MUON TRACKING

Interaction rate
~1 GHz
Bunch crossing
rate 40 MHz

LEVEL 1
TRIGGER

< 75 (100) kHz

Regions of Interest

LEVEL 2
TRIGGER

~ 2 kHz

EVENT FILTER

~ 200 Hz

Pipeline
memories

Derandomizers

Readout drivers
(RODs)

Readout buffers
(ROBs)

Full-event buffers
and
processor sub-farms

Event builder

Data recording

Figure 1: A schematic view of the ATLAS trigger system.

∗Presenter at the conference

THGT010

of soft interactions. The trigger of the ATLAS exper-
iment [2] is designed as a multi level system that re-
duces the event rate from 40 MHz to about 200 Hz at
which events (that will have an average size of about
1.6 MB) can be written to mass storage. Fig. 1 gives
an overview of the trigger system which is divided in
three levels (from top to bottom in Fig. 1) :

• The Level-1 (LVL1) trigger is a hardware-based
system that receives signals from the calorime-
ter and muon detectors of ATLAS. Its task is to
reduce the event rate to 75 kHz within a latency
of 2.5 µs. During that time the data from all de-
tectors are stored in pipelined memories. LVL1-
accepted events are transfered to the Read-Out
Buﬀers.

• The Level-2 (LVL2) trigger, which forms part
of the High-Level Trigger (HLT), is based on
software selection algorithms running in proces-
sor farms. LVL2 can access data from all sub-
detectors of ATLAS in so called ‘Regions-of-
Interest’ that were identiﬁed by the LVL1 sys-
tem. The average time budget of LVL2 is about
10 ms, hence a fast rejection strategy is needed
using specialized trigger algorithms.

• The Event Filter (EF) is also based on software
In contrast to LVL2 it
selection algorithms.
runs after the event building, such that the com-
plete event information is available to the EF
algorithms. In the EF, a thorough event selec-
tion and classiﬁcation process will be performed
within a time budget of a few seconds. The EF
algorithms are foreseen to be based on oﬄine re-
construction code using the full calibration and
alignment information. Events accepted by the
EF are written to mass storage.

In this paper, the concepts and mechanisms that
are foreseen for conﬁguring the ATLAS trigger selec-

2

Computing in High Energy and Nuclear Physics CHEP03, La Jolla, California, USA, 24-28 March 2003

calorimeters

muon detectors

r
e
g
g
i
r
t
 
r
e
t
e
m
i
r
o
l
a
c

preprocessor

RPC
barrel
trigger

TGC
endcap
trigger

cluster
processor

jet/energy
processor

MuCTPI

m
u
o
n
 
t
r
i
g
g
e
r

CTP

TTC

RoIB

detector front−end
readout

L2 supervisor

Figure 2: An overview of the LVL1 trigger system.

tion are discussed. The task comprises the deﬁnition
of so called ‘trigger menus’ (i.e., the deﬁnitions of the
physics signatures the experiment should be triggered
on), the set-up of the selection software for the HLT
as well as the set-up of the LVL1 trigger hardware.
Currently the latter part of the conﬁguration is im-
plemented only in a functional prototype of the LVL1
emulation software.

2. LVL1 TRIGGER CONFIGURATION

2.1. A short Overview of the LVL1 Trigger

The LVL1 trigger [3] is a complex hardware system
consisting of a calorimeter trigger, a muon trigger and
the central trigger processor (CTP). An overview of
the LVL1 system1 is given in Fig. 2.

The calorimeter trigger receives as inputs ˜7200 ana-
logue signals from a dedicated trigger-tower electron-
ics that locally combines information from calorime-
ter cells in the various ATLAS calorimeters. A trigger
tower has a typical granularity of ∆η ×∆φ = 0.1×0.1.
The task of the calorimeter trigger is to search
for localized energy depositions that are a signals for
high transverse energy electrons/photons, τ particles,
hadrons or jets. The energy depositions are compared
to a set of programmed transverse-energy thresholds
and the multiplicity of objects passing each of the
thresholds is counted. There are 16 − N thresholds for
electrons/photons, N for τ leptons or hadrons, eight

for central jets, and four for forward jets. In addition,
the calorimeter trigger provides global energy sums
to measure the total and missing transverse energy in
an event. These sums are discriminated against eight
thresholds for missing transverse energy and four for
total transverse energy.

The multiplicity for each threshold is sent to the
CTP. In addition the type, position and threshold
information about each candidate object is recorded
in so called ‘Regions-of-Interest’ (RoIs). For selected
events, these RoIs are sent to the HLT via the Region-
of-Interest Builder (RoIB) in order to seed the LVL2
selection.

In analogy, the muon trigger, which is based on in-
formation from dedicated fast muon chambers, derives
the multiplicity count for muon candidates passing
six programmable thresholds. The multiplicities are
again sent to the CTP, and the information on the
candidates or RoIs is sent to the HLT.

The CTP receives all the multiplicity and energy-
sum-threshold information from the calorimeter and
muon triggers. It combines them according to the trig-
ger menu to derive the LVL1 event decision. The CTP
provides information to the HLT for selected events
indicating which signatures were fulﬁlled.

2.2. Conﬁguration of the LVL1 Trigger

For the ﬁnal system the task of the LVL1 conﬁgura-
tion will be the preparation of the LVL1 hardware for
data taking. Up to now only preliminary ideas exist
on how to conﬁgure consistently the LVL1 sub-system
hardware, the calorimeter and muon triggers and the
CTP. Questions being addressed in this context range
from storage of hardware conﬁguration ﬁles, through
keeping track of conﬁguration changes, to checks for
consistency and hardware compliance. These issues
will not be touched upon in this article. However, the
conﬁguration of the LVL1 has a purely algorithmic as-
pect that deﬁnes the physics selection strategy. This
part of the conﬁguration, which is implemented in the
LVL1 software prototype and is part of the ATLAS
simulation chain, is described here.

The ﬁrst task of the LVL1 conﬁguration code is
to translate the trigger menu, i.e.
the collection of
physics signatures LVL1 is supposed to trigger on, into
something that the emulation of the CTP can under-
stand and use in making the event decision based on
the calorimeter and muon trigger inputs. A physics
signature, a so called ‘trigger item’, is a logical com-
bination of requirements formulated as ‘trigger condi-
tions’ in terms of multiplicities of candidate objects
delivered by the calorimeter and muon triggers. Such
candidates are typically high-pT objects in the events
that are a signature for interesting physics events. A
simple example of a trigger item is:

≥ electron/photon candidate with ET > 10 GeV

1Note that the Region-of-Interest Builder (RoIB) is formally

not a LVL1 sub-system.

THGT010

Computing in High Energy and Nuclear Physics CHEP03, La Jolla, California, USA, 24-28 March 2003

3

and
≥ muon candidate with pT > 15 GeV

or, in the ATLAS LVL1 notation:

1EM10+1MU15

which combines two trigger conditions ‘1EM10’ and
‘1MU15’. In this notation the string ‘EM’ represents
a candidate of type electron/photon and the integer
numbers before and after the string symbolize the re-
quired multiplicity and transverse energy/momentum,
respectively. The combination of a candidate string
and a threshold value like ‘EM10’ is called a ‘trigger
threshold’. The ATLAS LVL1 system distinguishes
electron/photon (‘EM’), muon (‘MU’), tau/hadrons
(‘HA’), (forward) jets (‘JT’, ‘FR’, ‘FL’), total and
missing transverse energy (‘ET’, ‘TM’), and the trans-
verse energy calculated as the sum of all jet transverse
energies (‘SM’).

The second task of the conﬁguration code is to set
up the the calorimeter and muon trigger sub-systems
such that they deliver the information required by the
CTP in order to derive the event decision based on the
trigger menu. The LVL1 sub-detector simulation has
to be conﬁgured so that each sub-system delivers the
multiplicities for the correct set of trigger thresholds.
For the above example, the calorimeter trigger has to
be conﬁgured such that it delivers to the CTP the
multiplicity count for the threshold ‘EM10’, i.e. the
number of electron/photon candidates with transverse
energy above 10 GeV. It is obvious that the trigger
menu and the trigger thresholds for the calorimeter
and muon triggers have to be deﬁned consistently. In
particular, all thresholds used in the deﬁnition of any
trigger condition in any trigger item must be delivered
by the calorimeter and muon trigger simulations and
thus need to be conﬁgured.

In the conﬁguration process for the CTP simula-
tion the restrictions imposed by limited abilities and
resources of the real hardware have to be taken into
account.

The LVL1 trigger conﬁguration software is currently
being adapted to conﬁgure as well the LVL1 trigger
hardware by deriving the necessary look-up table and
FPGA conﬁguration ﬁles from the trigger menu and
trigger threshold list. Such a common conﬁguration
scheme will allow for cross-checks between hardware
and software.

2.3. XML Deﬁnition of Trigger Thresholds

To conﬁgure LVL1 the trigger menu and the list
of thresholds are deﬁned using XML and are parsed
into instances of C++ classes using the Xerces DOM
API [4]. The chosen notation exploits the facility of
XML to deﬁne logical structures by introducing user-
deﬁned tags. The tag structure used for the ‘trigger
thresholds’ is:

THGT010

<TriggerThresholdList>

<TriggerThreshold name="..." type="...">

<TriggerThresholdValue thresholdval="..." />

</TriggerThreshold>

</TriggerThresholdList>

It is important to note that a trigger threshold con-
tains one or more ‘trigger threshold values’. This
concept allows to assign diﬀerent threshold values (in
GeV) to various topological regions of the detector us-
ing attributes that set limits to the validity in terms
of η and φ in ATLAS. This concept is foreseen for the
calorimeter trigger hardware and is subject to current
detailed studies. The previous example using a set of
trigger threshold values may look like:

<TriggerThresholdList>

<TriggerThreshold name="..." type="...">

<TriggerThresholdValue

thresholdval="5" etamin="-2" etamax="0" />

thresholdval="10" etamin="-5" etamax="-2" />

<TriggerThresholdValue

<TriggerThresholdValue

<TriggerThresholdValue

thresholdval="5"

etamin="0" etamax="2" />

thresholdval="10" etamin="2" etamax="5" />

</TriggerThreshold>

</TriggerThresholdList>

The <TriggerThreshold> tag has

several at-
tributes, the most important ones are ‘name’ and
‘type’:

• The ‘name’ attribute assigns a unique label to
the trigger threshold. It is needed to connect the
threshold to the trigger condition. An example
for a ‘name’ is ‘EM10’.

• The ‘type’ attribute is required mainly for tech-
nical reasons: The number of the diﬀerent
thresholds is limited - for example only up 6
muon thresholds can be implemented because of
hardware limitations. The ‘type’ attribute helps
in this book-keeping.

When the XML tags are parsed, the attributes are
translated into data members of the corresponding
C++ class instance.

When the XML tags are parsed, the attributes
of the <TriggerThresholdValue> tags are translated
into data members of the corresponding C++ ob-
jects. Depending on the ‘type’ attribute of the
<TriggerThreshold> tag, diﬀerent attributes for the
<TriggerThresholdValue> tags are expected (e.g.,
deﬁnition of isolation criteria). Only the ‘threshold-
val’ attribute is common, which is used to deﬁne the
threshold value (in GeV).

2.4. XML Deﬁnition of the Trigger Menu

The XML deﬁnition

trigger menu
of
the <TriggerMenu>, <TriggerItem> and

the

uses

4

Computing in High Energy and Nuclear Physics CHEP03, La Jolla, California, USA, 24-28 March 2003

TriggerMenu

<<algorithm>>
L1Config

<<service>>
Detector−
Store

TriggerItem

TriggerItem

TriggerItem

NOT

AND

 

Trigger
Condition

Trigger
Condition

Trigger
Condition

Trigger
Condition

Figure 3: Schematic overview of a simple XML tree build
from a trigger menu ﬁle.

<TriggerCondition> tags. The basic structure of the
XML ﬁle for the trigger menu is the following:

<TriggerMenu>

<TriggerItem>

</TriggerItem>

</TriggerMenu>

<TriggerCondition threshold="..." mult="..."/>

In addition the special tags <AND>, <OR> and
<NOT> are available to allow for logical combina-
tions of trigger conditions for a given the trigger item,
for example:

<TriggerMenu ...>

<TriggerItem ...>

<AND>

<TriggerCondition ... />
<OR>

<TriggerCondition ... />
<NOT>

<TriggerCondition ... />

</NOT>

</OR>

</AND>

</TriggerItem>

</TriggerMenu>

‘TI ID’

The <TriggerMenu> tag has as only attribute
‘TM ID’ to set a label for the trigger menu. The
<TriggerItem> has diﬀerent attributes:
is
used to set a name; ‘mask’ indicates via values ‘on’
or ‘oﬀ’ whether or not the item is to be used in the
LVL1 decision; ‘priority’ is set to ‘low’ or ‘high’, de-
pending on whether or not the item should have pri-
ority in the CTP dead-time algorithm; ‘prescale’ is
an integer indicating the prescale factor to be used
in the CTP simulation. The <TriggerCondition> tag
has two attributes: ‘threshold’ to give it a label and
a ‘mult’ to specify the required mulitplicity for this
trigger condition. The ‘threshold’ attribute has to be
the same as the ‘name’ attribute of a corresponding
<TriggerThreshold> tag. An example of the logical
structure of the XML tree of the trigger menu is shown
in Fig. 3.

THGT010

TriggerMenu

new

init

mapThresholds

mapThresholdValues

mapTriggerMenu

checkTriggerMenu

record

(TriggerMenu)

Figure 4: Sequence diagram for the main LVL1
conﬁguration which sets up the TriggerMenu object. See
text for details.

2.5. Implementation of the LVL1
Conﬁguration

Fig. 4 shows a sequence diagram of the conﬁgura-
tion process. L1Conﬁg is the name of the algorithm
in the ATLAS oﬄine framework Athena, in which the
HLT trigger conﬁguration is implemented. The cen-
tral class of the conﬁguration is the so-called Trigger-
Menu. A single instance is created by the L1Conﬁg al-
gorithm, that also calls the TriggerMenu::init method.
The TriggerMenu contains or has access to all the in-
formation in the two XML ﬁles for the trigger menu
and the trigger thresholds.

The LVL1 trigger menu basically is a collection of
trigger items. Therefore the TriggerMenu has as a
data member a vector of TriggerItem objects. In turn,
each trigger item contains a vector of TriggerCondi-
tion objects. The logical structure of the item condi-
tion relations is not directly reﬂected in the C++ class
structure, but is available from the XML tree that is
created in memory in the parsing process (see Fig. 3).
The TriggerMenu::mapTriggerMenu method is used
to translate the trigger menu XML ﬁle into Trig-
For each
gerItem and TriggerCondition objects.
<TriggerItem> or <TriggerCondition> tag, a Trig-
gerItem or TriggerCondition object is created and
pushed into the corresponding vectors.

The TriggerMenu holds a map to combine the la-
bels of the trigger thresholds with pointers to the Trig-
gerThreshold objects that are created by the Trigger-
Menu::mapThresholds method. A TriggerThreshold in
turn holds pointers to one or more TriggerThresh-
oldValue objects that are created in the method
TriggerMenu::mapThresholdValues. The connection
between TriggerCondition and TriggerThreshold in-
stances is needed for the CTP simulation. It is im-

Computing in High Energy and Nuclear Physics CHEP03, La Jolla, California, USA, 24-28 March 2003

5

<<subsystem>> 
LVL2Supervisor

<<subsystem>> 
EventBuilding

4:send(LVL2Decision)

5.1:R equest(E ventFrag m ents)
5.2:S end(E ventFrag m ents)

6
:
S
e
n
d
(
E
v
e
n
t
)

7
:
S
e
n
d
(
E
v
e
n
t
)

9
:
S
e
n
d
(
E
v
e
n
t
)

1
:
s
e
n
d
(
L
V
L
1
R
e
s
u
l
t
)

3
.
2
:
s
e
n
d
(
L
V
L
2
D
e
c
s
o
n
)

i

i

2.1:R equest(E ventFrag m ents) 
3.1:S end(L V L2 D etailed R esult)
2.2:S end(E ventFrag m ents)

<<subsystem>> 
LVL2Processing 
Unit

<<subsystem>> 
ROS

<<subsystem>> 
EventFilterIO

<<subsystem>> 
DataBaseLoader

10:Send(Event)

2:LVL2Selection()

8:EFSelection()

Figure 5: An overview of the data ﬂow in the HLT.

<<subsystem>> 
EventHandler

LVL2 Selection and 
EF Selection accepts 
or rejects event.

plemented using string comparisons between the data
members that correspond to the ‘name’ and ‘thresh-
old’ attributes of the <TriggerThreshold> and the
<TriggerCondition> tags.

As a last step in the conﬁguration, checks are per-
formed on the TriggerMenu object in order to test
its completeness and consistency (method Trigger-
Menu::checkTriggerMenu). The TriggerMenu is after-
wards recorded in the so-called ‘Detector Store’ that
is provided by the oﬄine framework.

The conﬁguration process also covers conﬁguration
of the calorimeter and muon trigger simulations. For
this purpose CTPCaloConﬁg, CTPJetEnergyConﬁg
and CTPMuonConﬁg objects are created that hold
the thresholds to be delivered by the diﬀerent trig-
gers.

The next development step will be to use the soft-
ware to conﬁgure the existing CTP demonstrator
hardware. Once hardware and software are conﬁg-
ured from the same source, detailed tests of the CTP
hardware can be performed by comparing the simu-
lated CTP result to the hardware result for arbitrary
test input patterns.

3. HLT CONFIGURATION

3.1. HLT Trigger Overview

Fig. 5 shows an overview of the HLT data ﬂow [5].
The LVL2 Supervisor sends the LVL1 result contain-
ing ‘Region-of-Interest’ information (e.g. geometri-
cal position of interesting objects identiﬁed by LVL1)
to a LVL2 Processing Unit. This unit performs the

THGT010

LVL2 selection for the event. It retrieves event data
in ‘Regions-of-Interest’ from the Read-Out System
(ROS). At the end of the selection process the LVL2
decision is passed back to the Supervisor. In case of
a positive trigger decision, the LVL2 detailed result
is sent to a dedicated LVL2 ROS. The LVL2 Super-
visor sends the decision to the Event Builder, which
assembles the full event. The complete event is sent
to the Event Filter IO and from there to one of the
Event Handlers, which performs the EF selection. EF-
selected events are written to mass storage.

Fig. 6 shows a package view of the Event Selection
Software [6] which runs in the LVL2 Processing Unit
It has four building
and in the EF Event Handler.
blocks: the Event Data Model deﬁnes the structure of
the event; the Data Manager handles the event data
and is used in LVL2 to retrieve the required raw data
on demand from the ROS; the HLT Algorithms pro-
vide the algorithmic part of the selection; the Steering
controls the full selection process. It is the task of the
HLT conﬁguration to conﬁgure the Steering.

3.2. The Principle of the HLT Selection

The HLT selection software provides a common
framework to implement the LVL2 and EF selection.
The software is based on two concepts that are de-
signed to minimize the latency and the amount of raw
data to be moved and analyzed. LVL1 provides for
each event a set of ‘Region-of-Interest’ coordinates via
the RoI Builder. These RoIs are used by the LVL2
Steering to seed to algorithmic processing and to re-
strict the data access to the regions in the detector
identiﬁed by the LVL1 system.

6

Computing in High Energy and Nuclear Physics CHEP03, La Jolla, California, USA, 24-28 March 2003

The 2nd concept is the so-called ‘step’ processing.
The sequence of HLT algorithms to verify a given
LVL1 RoI is sub-divided into several logical steps.
This allows the Steering to execute in the ﬁrst step
for each RoI those algorithms giving a large rejec-
tion power for little data movement and processing.
In each subsequent step it is the task of the HLT
algorithms to reﬁne the event information using an
increasing amount of additional data from diﬀerent
ATLAS sub-detectors.
It is important to note that
the Steering will execute the ﬁrst step for all RoIs in
one go. Events may be rejected after each step; re-
maining events are passed to the next step for further
processing. For events accepted after the ﬁnal step a
positive trigger decision is transmitted to the LVL2
Supervisior.

The implementation of the Steering of the HLT se-
lection software must to be generic. The HLT selec-
tion is data driven by the LVL1 RoIs, while the list
of possible HLT algorithm sequences will be conﬁg-
ured at run time based on the criteria of the physics
signatures in the trigger menu.
It was found to be
beneﬁcial to abstract the selection process in terms of
so-called ‘Trigger Elements’ (TEs). A TE represents
a trigger relevant object in the event, for example a
LVL1 RoI. In this picture, the HLT selection can be
seen as a reﬁnement process of TEs. Each TE implies
by its label a physics interpretation, like for exam-
ple an ‘isolated electron with pT > 20 GeV’ or ‘e20i’.
Each physics signature in a trigger menu is deﬁned as
a combination of required TEs, for example ‘e20i +
mu30i’.

The seeding of the HLT Algorithms is implemented
by navigation from the TE to the relevant event data
(RoI, clusters, tracks, ...). Thereby the Steering only
analyses the TE content of an event and requests al-
gorithm processing to reﬁne the information. The de-
tails of the speciﬁc event data related to each LVL1
RoI are only visible to the concrete HLT algorithm.

Event Filter

Processing
Task

LVL2

LVL2
Processing Unit

ROBData
Provider

HLTSSW

Core Software

Steering

EventData
Model

DataManager

HLT
Algorithms

Figure 6: A package view of the HLT selection software.

2e30i

e30i

e30i

2e30

e30

e30

2e

e

e

Isolation?

Transverse E?

Tracks?

Cluster Shape?

+

+

+

+

+

2ecand

ecand

ecand

2EM20

EM20

EM20

Figure 7: A conﬁguration example. See text for details.

3.3. Signatures and Sequence Tables

The basic unit of a step is a ‘sequence’. It consists
of a list of input TEs, a list of HLT algorithms to be
run on each set of matching input TE combinations
found in an event, and one (and only one) output TE
that represents the hypothesis of the expected recon-
struction result. The complete set of sequences to be
run in a given step is called the ‘sequence table’.

At the end of each step the Steering compares the
list of validated TEs in an event to so-called ‘signa-
tures’, which are formulated as required TEs or TE
combinations. The set of signatures of a given step is
called the ‘menu table’. The signatures in the menu
table of the ﬁnal step are called ‘physics signatures’.
The physics signatures are deﬁned according to the
ATLAS physics program and are the ones that will be
visible to the shift crew in the control room, whereas
the intermediate ones are visible only for an expert
with insight into the conﬁguration scheme.

From the above it is clear that the trigger conﬁgura-
tion has to provide a set of menu and sequence tables.
This is achieved in a top-down approach starting from
a list of physics signatures that is speciﬁed for a given
ATLAS run. This list is used to derive, in a recursive
way, all necessary sequence and menu tables.

The recursive procedure is illustrated for a simpli-
ﬁed example in Fig. 7. The physics signature is ‘two
isolated electron candidates with ET > 30 GeV’ or ‘2
e30i’. This signature requires the presence of two ﬁnal
TEs ‘e30i’ in an event. The conﬁguration software has
a list of all implemented sequence and checks which se-
quence has this TE as its output. From the matching
sequence is determines the corresponding required in-
put TEs. In the example the ‘e30i’ TE is made from
an ‘e30’ TE using an isolation algorithm. Thereby

THGT010

Computing in High Energy and Nuclear Physics CHEP03, La Jolla, California, USA, 24-28 March 2003

7

the conﬁguration can derive that two TEs ‘e30’ are
required in the step that leads to the physics signa-
ture ‘2e30i’. The resulting intermediate signature is
‘2e30’. Similarly, the ‘2e30’ is composed of two ‘e30’
TEs which are made from TEs labeled ‘e’ in an algo-
rithm that requires a minimum transverse energy. In
this manner, all intermediate signatures and also the
necessary sequences are derived recursively, until the
conﬁguration algorithm arrives at input TEs labeled
‘EM20’ that represent the LVL1 electromagnetic RoI
objects.

It is worth mentioning that the HLT event decision
is derived from the same logical structure, but now
using it bottom-up: The HLT selection process starts
from the input from LVL1. In the example it would
In case these TEs are
search for two ‘EM20’ TEs.
not present, the signature of the ﬁrst step (‘2EM20’)
cannot be fulﬁlled and the event would be rejected.
If the signature ‘2EM20’ is fulﬁlled, the sequence of
algorithms is executed on each input TE to analyze
the cluster shape of the candidate object. The task is
to reﬁne the electron selection, rejecting background
(mainly jets) using clusters shape variables. In other
words, for each ‘EM20’ TE that is considered to be
due to an electron, the hypothesis of a TE ‘ecand’
(for ‘electron candidate’) needs to be validated. If an
‘ecand’ is validated for both ‘EM20’ TEs, the signa-
ture ‘2ecand’ is fulﬁlled and the selection will proceed.
Otherwise the event will be rejected. In this way the
selection is carried out up to the last step that ends
with two TEs ‘e30i’.

3.4. Implementation of the HLT
Conﬁguration

As in the case of the LVL1 trigger, two XML ﬁles
are used to deﬁne the physics signatures and the
list of available sequences for the HLT conﬁguration.
The signature ﬁle contains <SIGNATURE> tags that
have the a list of <TRIGGERELEMENT> tags for
the required TEs:

<SIGNATURE>

</SIGNATURE>

<TRIGGERELEMENT te_name="..." />
<TRIGGERELEMENT te_name="..." />

The ‘te name’ attribute assigns a label to the TE.
The physics menu in the XML ﬁle is given by the
list of all signatures. The second XML ﬁle contains a
list of <SEQUENCE> tags. Each sequence has three
diﬀerent attributes:

<SEQUENCE te_in="..." algo="..." te_out="..." />

to identify the input TEs (‘te in’), the algorithm(s)
to be run on these trigger elements (‘algo’), and the
output TE (‘te out’). The same ‘te in’ can appear in
more than one sequence.

THGT010

HLT
Configuration

1..*

std::pair

Sequence
Table

1

1

Menu
Table

1..*

Sequence

te_in

1..*

Signature

1..*

1..*

1..*

Algorithm

te_out

1

Trigger
Element

Figure 8: A UML class diagram of the HLT conﬁguration
software.

The XERCES DOM API [4] is used to parse the
<SIGNATURE> and <SEQUENCE> tags in the
conﬁguration XML ﬁles into an object tree. After-
wards the recursive algorithm described above starts
to derive the full set of menu and sequence tables. In
practice the menu and sequence tables need additional
processing to allow for a realistic menu that consists
of several physics signatures. Furthermore, the bor-
derline between LVL2 and EF is deﬁned by assigning
the sequences of the ﬁrst set of steps to LVL2 and the
remaining ones to the EF.

Fig. 8 shows a UML class diagram of the HLT Con-
ﬁguration used to store the HLT conﬁguration infor-
mation. It is based on a collection of pairs, one in-
stance per step. Each pair combines a MenuTable and
a SequenceTable object, each of which holds a vector of
Sequence or Siganture objects, respectively. A Signa-
ture combines several TriggerElements and a Sequence
holds one output TriggerElement , one or more input
TriggerElements and a list of Algorithms.

The HLT conﬁguration has been tested as part of
the HLT selection software in the oﬄine and in ded-
icated online test-beds.
In the future it is foreseen
to combine the conﬁguration of the HLT and LVL1,
based on the input menu table of the ﬁrst HLT step.
Thereby a consistent conﬁguration of the complete
ATLAS trigger system will be achieved.

4. CONCLUSION

An overview of the ATLAS trigger system has been
given, with emphasis on the conﬁguration of the var-
ious trigger levels, namely the LVL1 trigger and the

8

Computing in High Energy and Nuclear Physics CHEP03, La Jolla, California, USA, 24-28 March 2003

HLT. For LVL1 eﬀorts so far concentrated on the con-
ﬁguration of the trigger simulation, with the aim of a
common conﬁguration for both the hardware and the
simulation software. In the case of the HLT, which is
implemented as a software trigger running in proces-
sor farms, the conﬁguration software has been tested
successfully and used oﬄine and in dedicated online
test-beds. Work is now in progress to combine the con-
ﬁguration of the LVL1 trigger and the HLT in order
to guarantee a consistent and eﬃcient ATLAS trigger
selection strategy.

Acknowledgments

We would like to thank the ATLAS LVL1 Trigger
and Data Acquisition Groups for their contributions
to this work and their help in preparing this paper.

References

[1] The ATLAS High

Level Trigger

group,

http://atlas.web.cern.ch/Atlas/GROUPS/
DAQTRIG/HLT/AUTHORLISTS/chep2003.pdf ∗1
Tech-
CERN/LHCC/94-43;

[2] ATLAS
nical
http://atlas.web.cern.ch/

Collaboration,

Proposal”,

“ATLAS

[3] ATLAS Collaboration, “First-Level Trigger Tech-

nical Design Report”, CERN/LHCC/98-14.

[4] http://xml.apache.org/xerces-c
[5] ATLAS Collaboration, “ATLAS High-Level Trig-
gers, DAQ and DCS Technical Proposal”,
CERN/LHCC/2000-17;
ATLAS Collaboration, “ATLAS High-Level Trig-
ger, Data Acquisition and Controls Technical De-
sign Report”, document in preparation.

[6] M. Elsing et al., “Analysis and Conceptual De-
sign of the HLT Selection Software”, ATLAS Note
ATL-DAQ-2002-013.
∗1 S. Armstrong, J.T. Baines, C.P. Bee, M. Biglietti, A.
Bogaerts, V. Boisvert, M. Bosman, S. Brandt, B. Caron, P.
Casado, G. Cataldi, D. Cavalli, M. Cervetto, G. Comune, A.
Corso-Radu, A. Di Mattia, M. Diaz Gomez, A. dos Anjos,
J. Drohan, N. Ellis, M. Elsing, B. Epp, F. Etienne, S. Fal-
ciano, A. Farilla S. George, V. Ghete, S. Gonzlez, M. Grothe,
A. Kaczmarska, K. Karr, A. Khomich, N. Konstantinidis, W.
Krasny, W. Li, A. Lowe, L. Luminari, H. Ma, C. Meessen, A.G.
Mello, G. Merino, P. Morettini, E. Moyse, A. Nairz, A. Negri,
N. Nikitin, A. Nisati, C. Padilla, F. Parodi, V. Perez-Reale,
J.L. Pinfold, P. Pinto, G. Polesello, Z. Qian, S. Rajagopalan, S.
Resconi, S. Rosati, D.A. Scannicchio, C. Schiavi, T. Schoerner-
Sadenius, E. Segura, T. Shears, S. Sivoklokov, M. Smizanska,
R. Soluk, C. Stanescu, S. Tapprogge, F. Touchard, V. Vercesi,
A. Watson, T. Wengler, P. Werner, S. Wheeler, F.J. Wickens,
W. Wiedenmann, M. Wielers, H. Zobernig

THGT010

