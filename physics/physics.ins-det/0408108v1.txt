4
0
0
2
 
g
u
A
 
4
2
 
 
]
t
e
d
-
s
n
i
.
s
c
i
s
y
h
p
[
 
 
1
v
8
0
1
8
0
4
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

SLAC-PUB-10663
August 19, 2004

FAST DETECTOR SIMULATION USING LELAPSa

WILLY LANGEVELD
(Presented by Michael Peskin)
Stanford Linear Accelerator Center, Stanford, CA 94309

Lelaps is a fast detector simulation program which reads StdHep generator ﬁles
and produces SIO or LCIO output ﬁles.
It swims particles through detectors
taking into account magnetic ﬁelds, multiple scattering and dE/dx energy loss. It
simulates parameterized showers in EM and hadronic calorimeters and supports
gamma conversions and decays.

Presented at the International Conference On Linear Colliders (LCWS 04)
Paris, France, 19-24 April 2004

1 Introduction

Lelaps is a fast detector simulation program and a number of C++ class li-
braries, the most important one being CEPack, the main simulation tool kit.
Main programs (lelapses) have been written for BaBar and for LCD (LDMar01,
SDJan03 and SDMar04 are implemented). CEPack can also be used in con-
junction with Geant4 parameterized volumes. In this way it is integrated in
BaBar’s Geant4-based simulation. The standalone version for LCD reads Std-
Hep generator ﬁles using the (included) lStdHep class library, and produces
SIO or LCIO output ﬁles that can be read by JAS and LCDWired. It swims
particles through detectors taking into account magnetic ﬁelds, multiple scat-
tering and dE/dx energy loss. It produces parameterized showers in EM and
hadronic calorimeters, converts gammas, supports decays of certain short-lived
particles (V decays), and it does all this very fast.

2 CEPack

The main class library is called CEPack containing the simulation tool kit.

aWork supported in part by the Department of Energy contract DE-AC02-76SF00515.

1

Figure 1: ZZ event in the SiD detector, as simulated by Lelaps.

2.1 Geometry

Geometries are constructed using CENodes, which may contain a list of sub-
nodes. A number of common CENode types are predeﬁned (cylinders, cones,
boxes, spheres etc.). Transformations may be applied to CENodes in order
to position and orient them. Arbitrary aﬃne transformations are allowed.
CENodes need to provide methods for determining distance along a straight
line to entrance and exit, and for determining whether points are inside them.
CENodes may be assigned a numeric id and subid and may implement a
method to compute a subid from a location. This can be used to implement
e.g. calorimeter segmentation. CENodes do not have to be 3D objects: several
predeﬁned CENodes consist of one or more 2D surfaces, which can be used,
for exanple, to simulate wire layers in drift chambers, or drift zones in TPCs.
A Lelaps-simulated ZZ event in the SiD detector is shown in ﬁgure 1.

2.2 Materials

Specifying materials is very easy in Lelaps. All elements are built in with
default pressure and temperature for gasses or density for solids and liquids.
Any compound can be speciﬁed by chemical formula and density or (for gasses)
temperature and pressure. Mixtures can be created by mixing elements and
compounds by volume or by weight. All needed quantities are calculated au-
tomatically. This includes constants needed for multiple scattering and energy
loss, radiation lengths, interaction lengths and constants needed for shower
parameterization.

2

The Lelaps distribution comes with a little program called matprop that al-
lows one to view various material properties. An online version of matprop is
available at the URL

http : //www.slac.stanford.edu/comp/physics/matprop.html

.

2.3 Matprop

2.4 Tracking

Tracking is performed by taking steps along a linear trajectory with endpoints
on a helix, such that the sagitta stays below a certain (settable) maximum.
CENodes have bounding spheres or cylinders; when computing distances to
CENodes, only relevant CENodes are considered. After each step, the amount
of material traversed is checked:
if enough material was traversed, multiple
scattering and energy loss is performed and track parameters and the list of
relevant CENodes are updated. When an intersection occurs within a step, the
fractional step is executed, the CENode is entered, and the remaining fraction
of the step follows.

Multiple scattering is performed using the algorithm of Lynch and Dahl[1].
Material is saved up along the track until there is enough. dE/dx is calculated
using the methods by Sternheimer and Peierls[2]. All constants are precalcu-
lated by the material classes.

2.5 Shower parameterization

Electromagnetic showers are parameterized using the algorithms of Grindham-
mer and Peters[3]. Calorimeters are treated as homegeneous media. The
longitudinal shower proﬁle is given by a gamma distribution with coeﬃcients
depending on the material (Z) and energy. The proﬁles are ﬂuctuated and
correlations between the coeﬃcients are taken into account.

For each step of one radiation length, a radial proﬁle is computed consisting
of two distributions, one describing the core of the shower and the other the
tail. Various parameters are functions of Z, shower depth t and energy. The
energy to be deposited is divided into spots thrown in radius according to the
radial proﬁle, and uniformly in φ and between t and t+1. Roughly, about 400
spots are generated per GeV of shower energy and reported as hits.

Hadronic showers are parameterized in a similar way, with some modiﬁca-
tions. The location where the shower starts is simulated using an exponential
law with attenuation given by the interaction length. The longitudunal proﬁle

3

uses the Bock parameterization[4]. A combination of two gamma distribu-
tions, one using radiation lengths and the other interaction lengths, is used.
The Bock parameterization does not specify radial proﬁles. For the moment
we use a radial proﬁle similar to Grindhammer and Peters (for EM showers)
but with radiation lengths replaced by interaction lengths and faster spread
with depth. The parameters still need to be ﬁne-tuned.

These parameterizations were compared to results from Geant4[5].
In
general pretty good agreement was found for EM showers. Hadronic showers
agree pretty well longitudinally, but not as well radially. Hadronic shower
parameterization has been tweaked since then, but needs further work.

2.6 Decays and gamma conversions

CEPack supports decays of unstable particles and gamma conversions. Sup-
s , Λ, Σ+/−/0, Ξ−,0 and Ω−. Only decay
ported unstable particles are π0, K 0
modes with branching fractions greater than 2% are supported (mostly “V
decays”).

3 Using CEPack in Geant4

To use CEPack inside Geant4 one subclasses G4VFastSimulationModel. In its
setup() method, one creates the CENode and subnodes corresponding to the
CEPack geometry. In the Doit() method one converts from G4FastTracks to
CETracks and calls the CETrack’s swim() method. By subclassing CETrack,
all hits are reported using the CETRack report hit() method. One then con-
verts hits to one’s favorite format and updates Geant4’s notion of the track
using G4FastStep (or calls KillPrimaryTrack() if the track has ended).

4 CEPack and Lelaps

Lelaps for LCD is a standalone program which sets up the CEPack geometry,
reads input ﬁles and produces output ﬁles. Currently supported geometries
are LDMar01, SDJan03 and SDMar04. To read generator level event ﬁles in
StdHep format, it uses class lStdHep (“StdHep light”, included in the distri-
bution). StdHep particles are converted to CETracks and tracked through the
geometry. When hits are reported, they are added to SIO or LCIO hit lists.
For calorimeter hits, the spots are ﬁrst accumulated and turned into energy
depositions in individual calorimeter cells and then added as hits. Finally, the
SIO or LCIO event structure is written out.

4

5 Performance

Taking the example of a typical e+e− → ZZ input ﬁle, the performance of
Lelaps is as follows. With tracking alone, Lelaps can simulate 3–4 events per
second (at 1 GHz processor speed) for the LD detector, or about 2 events/s
for the SiD detector. Adding parameterized showering costs 15% (SiD) to
30% (LD). Adding decays and conversions takes another 20%. Writing an
LCIO output ﬁle (14 MB compressed for 100 events) costs another 40%. SIO
output takes much longer (a factor 2 to 4 depending heavily on calorimeter
segmentation)—this could be optimized, but SIO is a deprecated format.

The performance is slightly platform/machine dependent. On a Linux
machine, tracking takes 0.281 seconds/event, on a Solaris machine 0.154 sec-
onds/event, and on Windows (cygwin with gcc 3.2) 0.384 seconds/event (all
at 1 GHz processor speed).

The Lelapsb and CEPack interfaces are not yet frozen. Changes may be neces-
sary considering the planned new features and improvements. Some of these
are: support for combinatorial geometry; allowing shower continuation into a
next volume and reading geometry descriptions from a standard ﬁle format.
Also, hadronic showers need further tuning.

6 Future

References

1. Gerald R. Lynch and Orin I. Dahl, Nucl. Instr. Meth. B58 (1991) 6.
2. R.M. Sternheimer and R.F. Peierls, Phys. Rev. B3 (1971) 3681.
3. G. Grindhammer and S. Peters, arXiv:hep-ex/0001020v1 (2000).
4. R.K. Bock, T. Hansl-Kozanecka and T.P. Shah, Nucl. Instr. And Meth.

5. D. Birt, A. Nicholson, W. Langeveld, D. Wright, SLAC-TN-03-005, Aug

186 (1981) 533.

2003.

bLelaps (storm wind) was a dog with such speed that, once set upon a chase, he could
not fail to catch his prey. Having forged him from bronze, Hephaestus gave him to Zeus,
who in turn gave him to Athena, the goddess of the hunt. Athena gave Lelaps as a wedding
present to Procris, daughter of Thespius, and the new bride of famous hunter Cephalus. A
time came when a fox created havoc for the shepherds in Thebes. The fox had the divine
property that its speed was so great that it could not be caught. Procris sent Lelaps to
catch the fox. But because both were divine creatures, a stalemate ensued, upon which Zeus
turned both into stone. Feeling remorse, Zeus elevated Lelaps to the skies, where he now
shines as the constellation Canis Major, with Sirius as the main star.

5

