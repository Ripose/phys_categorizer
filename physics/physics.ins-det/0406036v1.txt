4
0
0
2
 
n
u
J
 
8
 
 
]
t
e
d
-
s
n
i
.
s
c
i
s
y
h
p
[
 
 
1
v
6
3
0
6
0
4
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

An Exact Formula to Describe the Ampliﬁcation Process in a
Photomultiplier Tube

Jonas Rademacker
University of Oxford

Abstract

An analytical function is derived that exactly describes the ampliﬁcation process due to a series of
discrete, Poisson-like ampliﬁcations like those in a photo multiplier tube (PMT). A numerical recipe
is provided that implements this function as a computer program. It is shown how the program can
be used as the core-element of a faster, simpliﬁed routine to ﬁt PMT spectra with high eﬃciency. The
functionality of the method is demonstrated by ﬁtting both, Monte Carlo generated and measured
PMT spectra.

1

Introduction

2 An Analytical Function

In September 1999, the LHCb RICH group tested
Hamamatsu’s 64-Multi-anode Photo Multiplier
Tubes as a possible photodetector choice for the
LHCb RICH detector [RIC00]. During the data
analysis, the need for an accurate model of the out-
put of a PMT arose that could be ﬁtted to the
measured pulse height spectra, mainly in order to
have a precise estimate of the signal lost below the
threshold cut. In order to perform a ﬁt to the spec-
tra, an analytical function is needed that can be
calculated reasonably quickly by a computer.

Such a function is derived here. First (section 2),
an analytical expression is derived that describes
the output of a PMT. The starting assumption is
that the number of photoelectrons per event, as
well as the number of secondary electrons caused
by each primary electron at each stage of the dyn-
ode chain, are well described by Poisson distribu-
tions. Furthermore it is shown how this expres-
sion can be adapted to avoid some of the numerical
problems arising in the original expression, so that
it can be calculated by a computer. A complete
numerical recipe is given and a FORTRAN imple-
mentation of the program is listed in appendix A.
This expression can of course be used to calculate
any “snowball” like eﬀect described by a series of
Poisson distributions.

In section 3 it is described how the exact expres-
sion derived in the ﬁrst part can be used as the cen-
tral element of a faster, approximate function, and
how the number of parameters can be reduced mak-
ing reasonable assumptions, so that ﬁtting a large
number of spectra in a ﬁnite time becomes feasible.
This is then adapted to describe the digitised out-
put of laboratory read-out electronics, rather than
the number of electrons at the end of a dynode
chain.

This approximate function is used in section 4 of
the paper to ﬁt Monte Carlo generated spectra as
well as real data, demonstrating the validity of the
method.

2.1 The Electron Probability Distri-

bution

In the following, an expression for the number of
photoelectrons at the end of a dynode chain of a
PMT is derived. The number of incident photons,
and hence of photoelectrons produced in the cath-
ode, is assumed to follow a Poisson distribution.
This is appropriate for the testbeam data where
PMTs were used to detect Cherenkov photons gen-
erated by a particle traversing a dielectric. With
a mean number of photoelectrons produced in the
cathode of λ1, the probability to ﬁnd k1 photoelec-
trons arriving at the ﬁrst dynode is:

P (k1) = e−

λ1 λk1
1
k1!

.

(1)

The probability to ﬁnd k2 electrons after the ﬁrst
dynode is the sum over all values for k1 of the prob-
abilities P (k1), each multiplied by the probability
that the dynode returns k2 electrons given that k1
arrive:

P (k2) =

P (k1)

P (k2|

·

k1).

(2)

∞

Xk1=0

Each of the k1 electrons produces a Poisson–
distributed response from the dynode with mean
λ2 where λ2 is the gain at the 1st dynode; all k1
electrons together produce a response distributed
according to the convolution of k1 Poisson distribu-
tions, each with mean λ2. This results in a single
Poisson distribution with mean λ2 ·

k1:
λ2k1 (λ2k1)k2

.

k2!

P (k2|

k1) = e−

(3)

Hence the probability to ﬁnd k2 electrons after the
ﬁrst dynode is given by:

P (k2) =

P (k1)

e−

λ2k1 (λ2k1)k2

·

k2!

.

(4)

∞

Xk1=0

Inserting the right–hand side of equation 1 for
P (k1) yields, after manipulation:

P (k2) = e−

λ1 λk2
2
k2!

∞

Xk1=0

λ2)k1

(λ1e−
k1!

kk2
1 .

(5)

1

Generalising this for n

1 dynodes yields:

P (kn) = e

P (kn) = e

−
−λ1 λkn
n
kn!
∞

∞

· · ·

k2=0
k1=0
X
X
(λ1e−λ2 )k1
k1!
−λ4 k2)k3
k3!

(λ3e

∞

· · ·

kn−1=0
X
(λ2e−λ3k1)k2
k2!

(λn−2e−λn−1 kn−3)kn−2
kn−2!

(λn−1e

−λn kn−2)kn−1
kn−1!

kkn
n−1.

−λ1 λkn
n
kn!
∞

∞

dkn
dykn
∞

kn−1=0
X

(λ2e

−λ3 k1)k2
k2!

· · ·

k1=0
X
(λ1e

k2=0
X
−λ2 )k1
k1!
−λ4 k2)k3
k3!
(λn−2e

(λ3e

· · ·
−λn−1kn−3)kn−2

(λn−1e

−λnkn−2ey)kn−1

kn−2!

kn−1!

i.e.

Each term in equation 6 is of the form of an
xk
k! , except for the last
exponential series,
term with the summation parameter kn
1, which
appears as xk
k! kkn . This term can be expressed in
terms of the knth derivative of eykn−1 with respect
to the new variable y at y = 0:

−

.

y=0

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(9)

(6)

Now each summation can be carried out in turn,
starting with that over kn

1:

−

∞

(λn−1e−λnkn−2ey)kn−1
kn−1!

kn−1=0
X
= exp(λn−1e

= (exp(λn−1e

−λnkn−2ey)
−λney))kn−2 ,

(10)

then over kn

2:

−

kkn
n
−

1 =

dkn
dykn

eykn−1

.

y=0

(cid:12)
(cid:12)
(cid:12)

(7)

∞

(λn−2e

−λn−1kn−3)kn−2

kn−2!

·

kn−2=0 (cid:16)
X

(e(λn−1e

−λn ey ))kn−2

= exp(λn−2e

= (exp(λn−2e

(cid:17)
−λn−1 kn−3
−λn−1

e(λn−1e

−λn ey ))
−λn ey )))kn−3

·
e(λn−1e

·

(11)

and so on. After performing all these summations,
1
the probability of ﬁnding kn electrons after n
dynodes, with gains λ2, . . . , λn, starting oﬀ with an
average of λ1 photo electrons arriving at the ﬁrst
dynode, is given by:

−

Now the last term in equation 6 can be written as

(λn−1e−λn kn−2)kn−1
kn−1!

kkn
n−1

(λn−1e

−λnkn−2ey)kn−1

=

dkn
dykn

kn−1!

.

(8)

Using 8,

equation 6 can be

re–written as:

y=0

(cid:12)
(cid:12)
(cid:12)
(cid:12)

2

P (kn) = e−

λ1 λkn
n
kn!

dkn
dykn

exp(x1 exp(x2 exp(x3 · · ·
)))
1 exp(y))
exp(xn
(cid:12)
(cid:12)
(cid:12)
(cid:12)

λi+1 .

λie−

· · ·

−

y=0

with xi ≡

2.2 Calculating P (kn)

which in turn gives a recursive formula for the mth
derivative:

f (m)
i =

m

1

−

j=0 (cid:18)
X

m

1

−
j

(cid:19)

i xif (m
f (j)

i+1

−

j)

,

(17)

(12)

with f (j)

j
n = fn ∀

∈

IN.

With this expression, equation 14 can ﬁnally be cal-
culated, by starting with fn(0) = 1 and calculating
f (m)
1, . . . , 1
i
and all values m = 0, 1, . . . , kn.

subsequently for all values i = n, n

−

In order to calculate P (kn) it is useful to make the
following deﬁnitions:

2.3 Numerical Diﬃculties

(13)

(14)

xn−1ey

xn−1ey

xn−1ey

ex1ex2 ...e
ex2ex3 ...e
ex3ex4 ...e

f1 ≡
f2 ≡
f3 ≡
...
1 ≡
fn ≡
Equation 12 can now be written as:

exn−1ey
ey.

fn

−

P (kn) = e−

λ1 λkn
n
kn!

f (kn)
1

,

y=0

(y)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

1

where f (kn)
is the knth derivative of f1 with respect
to y. With the above deﬁnitions, the ﬁrst deriva-
tives of the functions fi are given by:

f ′1 = f1x1
f ′2 =
f ′3 =
...
f ′n =

f2x2
f2x2

fn
fn
fn

−

−

−

1xn
1xn
1xn

1

1

1

−

−

−

· · ·
· · ·
· · ·

fn
fn
fn

fn.

(15)
This gives a recursive formula for the ﬁrst deriva-
tive of fi:

While the previous section gives a valid algorithm
on how to calculate P (kn) using equation 14 and
the recursive formula 17, it turns out that the ﬁ-
nite precision of a normal computer will only allow
calculations to be performed for rather small val-
ues of kn before some numbers become either too
large or too small to be stored straightforwardly in
the computer memory. This problem is addressed
in the following discussion.

kn
n

The factor λ
kn! For any reasonably large number
of dynodes, where the mean number of electrons
coming oﬀ the last dynode, and therefore the inter-
esting values for kn, is typically in the thousands or
even millions, e−
kn! quickly becomes very small,
while f (kn)

grows to extremely large values.

λ1 λkn

n

1

In order to calculate P (kn) for such values of kn, it
is necessary to absorb the small factor λkn
kn! into the
f (m)
. This can be done by replacing y in equation
i
14 with py and introducing a compensating factor

n

y=0

(y)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

f ′i = fixif ′i+1
f ′n = fn,

i < n

(16)

P (kn) = e−

λ1 λkn
n
kn!

1
p

kn dkn
dykn

(cid:18)

(cid:19)

.

(18)

y=0

f1(py)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

kn

:

1
p

(cid:16)

(cid:17)

3

Choosing p such that pkn = λkn
14 to

n

kn! changes equation

with

P (kn) = e−

with

λ1 dkn
dykn
λkn
n
kn!

pkn =

f1(py)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

.

y=0

1 (cid:19)

(cid:18)

−
so the values for f ⋆(kn)
one iteration.

(19)

pkn
pkn

kn

((kn −

=

1)!)1/(kn
kn

1)

−

;

(23)

kn,i need to be stored only for

Deﬁning

f ⋆(m)
kn,i ≡

dm
dym fi(pkn y)
(cid:12)
(cid:12)
λn
(cid:12)
(cid:12)
(kn!)

y=0

1
kn

with pkn =

gives

P (kn) = e−

λ1f ⋆(kn)
kn,1 .

(21)

The recursive formula established for calculating
f (kn)
remains essentially the same for f ⋆(kn)
kn,1 :
1

f ⋆(kn)
kn,i =

kn

1

−

j=0 (cid:18)
X

1

kn −
j

(cid:19)

kn,i xif ⋆(kn
f ⋆(j)

−
kn,i+1

j)

(22)

The binomial factor When calculating f ⋆(kn)
,
kn,i
1
using the recursive formula 22, the factor
in

kn
−
j

(20)

f ⋆(kn)
kn,i =

kn

1

−

j=0 (cid:18)
X

1

kn −
j

(cid:19)

(cid:0)

(cid:1)

kn,i xif ⋆(kn
f ⋆(j)

−
kn,i+1

j)

can get very large for large values of kn, while
the corresponding values for f ⋆(j)
get
very small. To avoid the associated numerical
problems, one can deﬁne the arrays u(j)
kn,i and
v(j)
kn,i that ‘absorb’ the binomial factor, such that
equation 22 becomes:

kn,i xif ⋆(kn

−
kn,i+1

j)

with f ⋆(m)

kn,n = pm

kn and pkn =

λn

(kn!)

,

1
kn

where

In the orig-
with one additional complication.
inal algorithm, when calculating f kn
using the
1
recursive formula 17, all values for f m
i with
m < kn calculated in the previous iterations1
could be used in the recursive formula for the
current iteration. Now, for calculating f ⋆(kn)
kn,1 all
values f ⋆(m)
n have to be
re–calculated at each iteration, because at each
iteration the value for p in equation 22 changes.
To calculate f ⋆(kn)
, from equation 22, the values for
kn,i

kn,i with m < kn, i

≤

f ⋆(m)
kn,i , m < kn

f ⋆(kn)
kn,i =

kn,ixiv(kn
u(j)

j)
kn,i+1 ,
−

(24)

kn

1

−

j=0
X

u(j)
kn,i =

v(j)
kn,i =

1

kn −
j

(cid:19)

s(cid:18)

f ⋆(j)
kn,i

1
kn −
1
j
−

(cid:19)

s(cid:18)

f ⋆(j)
kn,i .

(25)

2.4 Combining Results

At each iteration kn, before calculating f ⋆(kn)
kn,i using
equation 24, the values for u(j)
kn,i, j < kn,
are calculated from their values in the previous it-
eration:

kn,i and v(j)

are needed. These can be calculated using only the
values for f ⋆(m)
1,i which have been calculated one
−
iteration earlier:

kn

kn,i = f ⋆(m)
f ⋆(m)

kn

1,i

m

pkn
pkn

−

(cid:18)

1 (cid:19)

−

1where P (0) , . . . , P (kn − 1) were calculated

u(j)
kn,i =

v(j)
kn,i =

u(j)
kn
−

j

1,i

pkn
pkn

−
pkn
pkn

(cid:18)

(cid:18)

j

s

1 (cid:19)
j

1 (cid:19)

−

s

1

−

kn −
1
kn −
kn −
kn −

1
j

v(j)
kn
−

1,i

j < kn.

(26)

4

These results are then used to calculate:

2 Start with calculating the probability to ﬁnd

f ⋆(kn)
kn,i =

kn,ixiv(kn
u(j)

j)
−
kn,i+1

kn

1

−

j=0
X

kn,i = v(kn)
u(kn)

kn,i = f ⋆(kn)

kn,i

,

kn,n = v(kn)
u(kn)

kn,n = f ⋆(kn)

kn,n =

λkn
n
kn!

starting from

and

and

0,i = v(0)
u(0)
where the fi are deﬁned by equation 13.

0,i = f ⋆(0)

0,i = fi,

(27)

(28)

(29)

(30)

2.5 The Complete Numerical Recipe

−

Using the above formulae, the problem of calculat-
ing the probability distribution of ﬁnding kn elec-
trons at the end of a PMT with n
1 dynodes can
be solved by a computer. A FORTRAN implemen-
tation is listed in appendix A. The program takes
as its input the array λ[n], with dimension n, which
contains the average number of photo electrons ar-
riving at the ﬁrst dynode λ[1] and the gain at each
of the n
1 dynodes, λ[2], . . . , λ[n]. The program
ﬁlls the array P [max] with the probabilities P [k]
to ﬁnd k electrons at the end of the dynode chain
max. The parameter max is also
for all values k
passed to the program.

≤

−

k,i, v(j)

The values for u(j)
k,i needed in the recursive for-
mulae, are stored in two two-dimensional arrays,
where one dimension is taken by the index i =
1, . . . , n, and the other by the index j = 0, . . . , max.
As the values for u(j)
k,i are needed only for one
value of k at a time, the arrays do not need to be
three-dimensional; the values for u(j)
k,i needed
at the iteration calculating P [k] replace those from
the previous iteration, u(j)
k
−

k,i, v(j)

k,i, v(j)

1,i, v(j)

1,i.

−

k

The steps to calculate P [k], k = 0, . . . , max are:

1 Initialise program, test whether input is sen-
sible, for example if the overall gain is larger

than 0. Calculate all values for
≤
max and store them in an array pfrac[j], j =
1, . . . max for later use.

, j

(cid:16)

(cid:17)

j

pj
pj−1

zero electrons: k = 0

3 Calculate u(0)

0,i = v(0)
1, . . . , 1, as deﬁned by equation 13

0,i = fi for i = n, n

−

4 Store the result in the array: P [0] = e−

λ1u(0)
0,1
5 Increment k by 1. If k > max, stop program.

6 Calculate u(k)

k,n = v(k)

k,n = λk

n
k!

k,i, v(j)

7 Calculate u(j)
k,i for j < k and i = n, . . . , 1
from u(j)
1,i according to equation 26,
k
−
using the values of pfrac[k] calculated in step 1.

1,i, v(j)

−

k

8 Calculate u(k)

k,i

k,i = v(k)

for all values of i < n
using the recursive formula 27. Let the outer
loop go over the index i, starting with i =
n
1 and decrementing it by 1 until i = 1,
and the inner loop over the summation index
j, starting with j = 0 and incrementing j by 1
until j = k

1.

−

−

9 Store result: P [k] = e−

λ1u(k)
k,1

10 Goto step 5

3 Fitting PMT Spectra

3.1 Increasing Speed by Approxi-

mating P(kn)

When ﬁtting PMT–pulse–height spectra, speed
is a major problem. The number of operations
needed to calculate P (kn) using the recursive
formula in equation 17, is

Nsteps ≈

nj

∼

k3
n,

(31)

kn

i

i=0
X

j=0
X

∼

which becomes prohibitive for a typical PMT with
105 and higher. Therefore, for ﬁt-
a gain of
ting the spectra, only the exact distribution af-
ter the ﬁrst m dynodes is calculated and then
scaled by the gain of the remaining dynodes, gleft =
1). When scaling the output of
(gm+1gm+2 · · ·
the exact distribution calculated for the ﬁrst m

gn

−

5

dynodes, Pexact(km+1), to the ﬁnal distribution, the
result is convoluted with a Gaussian of width σscale,
taking into to account the additional spread in the
distribution at each remaining dynode:

σscale =

km+1σ0

(32)

with:

p

σ0 = (gm+1gm+2

gn−1)

1
gm+1

+

· · ·
1
gm+1gm+2

·

(cid:16)

+

· · ·

+

1
gm+1···gn−1

1
2

.

(cid:17)

(33)

So the approximated function, P

(kn) is

∼

(j·gleft−kn)2
2(√j σ0)2

P (j).

(34)

P

(kn) =

∼

1
√2π√j σ0

e

∞

j=0
X

In practice the sum only needs to be calculated for
values of j

gleft that are a few σscale around kn.

3.2 Reducing the Number of Param-

·

eters

P (kn) depends on n parameters: the gain of each
dynode and the number of photoelectrons produced
in the cathode. For the case of the 12–dynode
PMT, there are 13 parameters. It is possible, how-
ever, to reduce this number to two:

3.3 Adapting the Function to Fit

Measured Data

In practice, spectra are not measured in numbers
of photoelectrons, but in ADC counts digitised by
the readout electronics. The function describing
the spectra needs to relate the ADC counts, kadc,
to the number of electrons at the end of the dynode
chain, kn. This requires two parameters: the oﬀset,
or pedestal mean, p0, and the conversion factor, cn
of kn to ADC counts. The resulting function is
convoluted with a Gaussian of width σ to take into
account electronics noise:

Fcont(kadc) =

k2
adc
2σ2

e

1
√2πσ

(cid:18)

∗

(cid:19)

(P ((kadc

po) /cn)

cn) ,

−

·

(36)

∗

where
is the convolution operator. Fcont treats
kadc as a continuous variable, with a one–to–one
relation between kadc and kn; in fact the readout
electronics deliver only integer–value ADC counts,
integrating over the corresponding pulse heights.
Thus the ﬁnal function for describing ADC spectra
is:

F (kadc) =

Fcont(k′adc)dk′adc.

(37)

kadc+0.5

kadc

0.5

−

Z

1. the mean number of photoelectrons produced

4 Example Fits

in the photo cathode

2. the gain at the ﬁrst dynode.

Using

The ﬁts are performed as binned log–likelihood ﬁts:
for each 1–ADC–count wide bin kadc, containing ni
events, the binomial probability of having ni “suc-
cesses” in Nall trials is calculated, where Nall is the
total number of events. The probability of an indi-
vidual “success” is given by F (kadc).

V α,

g

∝

(35)

where V is the voltage diﬀerence over which the
electron is accelerated, the gain at the other dyn-
odes can be calculated from the gain at the ﬁrst
dynode. The parameter α has values typically
between 0.7 and 0.8 [Ham00];
in the following,
α = 0.75 is used.

The probability distribution for the number of elec-
trons after the fourth dynode is calculated without
approximation. Then the function is scaled, ap-
proximating the additional spread due to the re-
maining dynodes with a Gaussian, as described in
the previous section.

6

Table 1: Voltage distribution in 12-dynode PMT, normalised to the voltage between dynodes 3 and 4.

voltage
dynode number

3

2

2

1

1

1

Cathode

1

2

3

4

5

1

1

2

10 11 12

· · ·
· · ·

Figure 1: MC–generated PMT ADC–spectrum,
from 100k events, with λ1 = 0.15. The ﬁt is su-
perimposed.

Table 2: Monte Carlo input compared with mean
and RMS of the results from ﬁts to 128 simulated
spectra, with λ1 = 0.15

t
n
u
o
c
–
C
D
A
/

s
t
n
e
v
e

5
0
1

-1

-2

-3

-4

-5

10

10

10

10

10

t
n
u
o
c
–
C
D
A
/

s
t
n
e
v
e

5
0
1

-2

-3

-4

-5

10

10

10

10

75 100 125 150 175 200 225 250 275

ADC counts

4.1 MC–Generated Spectra

The validity of the the method has ﬁrst been es-
tablished on Monte Carlo simulated data. The
Monte Carlo program simulates the output of a
PMT pixel. The gain at the ﬁrst dynode is g1 = 5
and the gains at the other dynodes are calculated
V α with α = 0.75. The values for V are
from g
∝
given in table 1.

The ﬁt function is applied to two sets of 128 simu-
lations with 105 events each, one set with 0.15 pho-
toelectrons per event, one with 3.0 photoelectrons
per event. A spectrum from each set is shown in
ﬁgures 1 and 2.

The ﬁts are performed varying the gain of only one
dynode and calculating the gains at the other dyn-
odes using the same value for α as in the Monte
Carlo program that generated the spectrum. The
ﬁt results agree very well with the input values, as
shown in tables 2 and 3. To test the sensitivity of
the ﬁt result on the exact knowledge of α, the ﬁt to
the spectrum in ﬁgure 1 is repeated assuming dif-

7

MC input

0.150
5.000
100.00
1.0000
10−

4

3.20

·

λ1
g1
p0
σ
cn

Mean ﬁt result
RMS spread
0.0013
0.058
0.0038
0.0027
0.46)

±
0.1501
5.0012
99.999
1.0004
(3.23

±
±
±
±
±

·

4

10−

Figure 2: MC–generated PMT ADC–spectrum,
from 100k events, with λ1 = 3. The ﬁt is super-
imposed.

50

100

150

200

250

ADC counts

Table 3: Monte Carlo input compared with mean
and RMS of the results from ﬁts to 128 simulated
spectra (representing 2 64–channel MaPMT’s),
with λ1 = 3

MC input

3.000
5.000
100.000
1.000
10−

6.4

4

·

λ1
g1
p0
σ
cn

Mean ﬁt result
RMS spread

±

3.002
4.985
99.999
0.999
(6.45

0.022
0.107
0.021
0.016
0.17)

±
±
±
±
±

4

10−

·

Table 4: Monte Carlo input compared with ﬁt–result for the MC–generated pulse height spectrum shown
in ﬁgure 1, using diﬀerent assumptions in the ﬁt.
MC input
α = 0.75

Fit result: 3
indep. dyn’s

Fit result
α = 1

Fit result
α = 0.5

Fit result
α = 0.75
0.1490
5.039

0.1491
4.852

0.1489
5.291

λ1
g1
g2, g3, g12
g4, . . . , g11
p0
σ
cn

g1
g1

·
·

0.1500
5.00
3 )α = 3.69
( 2
3 )α = 2.19
( 1
100.000
1.0000
10

−4

3.20

·

100.000
1.0028
10

2.90

−4

·

100.000
1.0029
10

0.373

−4

·

100.000
1.0027
10

19.7

−4

·

0.1492
4.74
4.51
1.97
100.000
1.0028
(4.37

0.0013
0.44
1.35
0.21
0.003
0.0025

±
±
±
±
±
±
0.98)

±

−4

10

·

∝

ferent values for this parameter in the ﬁt–function:
α = 0.5 and α = 1.0. The results are given in table
4. Another ﬁt was performed that does not use the
V α. Here it is only assumed that dyn-
formula g
odes with the same accelerating voltage have the
same gain. Instead of one gain, three gains need
to be ﬁtted, one for each accelerating voltage. The
ﬁts are performed using the function minimisation
and error analysis package MINUIT [Jam94]. The
results from this ﬁt, with error–estimates provided
by MINUIT, are given in the last column of table
4.

Comparing the results for the diﬀerent assumptions
shows that they have little impact on the the ﬁt-
ted value for the number of photo electrons and the
gain at the ﬁrst dynode. Most of the error intro-
duced by an incorrect estimate of the parameter α
is absorbed into the ratio of ADC–counts to elec-
trons, cn, while the values for λ1 and g1 come out
close to the input values.

t
n
u
o
c
–
C
D
A
/

s
t
n
e
v
e

10 3

10 2

10

1

4.2 Application to Testbeam Data

The ﬁt method has been applied to spectra ob-
tained from a prototype RICH detector, incorpo-
rating an array of nine 64–channel Hamamatsu
PMTs and operated in a CERN testbeam [RIC00].
Fits were performed to estimate the signal loss at
the ﬁrst dynode and below the threshold cut.

Figure 3 shows an example of such a ﬁt to a spec-
trum obtained in the testbeam. The ﬁt describes

8

Figure 3: Data from 6k events in black, with ﬁt
superimposed. The dashed line indicates the sin-
loss
gle photoelectron contribution. The signal
refers to the fraction of photoelectrons lost below
the threshold cut; both the total fraction of photo-
electrons, and the fraction of single photoelectron
events lost below the cut is given. These numbers
do not include the loss at the ﬁrst dynode due to
photoelectrons producing zero secondary electrons.

40

60

80

100
ADC counts

Table 5: Result of ﬁt applied to testbeam data

λ1
g1
p0
σ
cn

Fit result
0.005
0.20
0.01
0.008
30)

0.107
3.60
43.06
0.724
(61

±
±
±
±
±

·

4

10−

Figure 4: MC–simulated PMT spectrum with back-
ground; the ﬁt result is superimposed

4.3 Background

t
n
u
o
c
–
C
D
A
/

s
t
n
e
v
e

7000

6000

5000

4000

3000

2000

1000

0

t
n
u
o
c
–
C
D
A
/

s
t
n
e
v
e

7000

6000

5000

4000

3000

2000

1000

0

l 1
l bg
g 1

ped

ped

c n

MC input
1.600
0.160
7.000
100.00
5.000
1.60

10. −6

Fit result
+−
1.601 0.003
+−
0.161 0.002
+−
7.020 0.025
+−
99.96 0.021
+−
5.005 0.015
+−
0.07)
(1.55

10. −6

100

200

300

400

500

600

700

ADC counts

Figure 5: The diﬀerent contributions to the ﬁt in
ﬁgure 4

pedestal

signal +
signal +
background from 1st dynode
background from 1st dynode

single pe peak

100

200

300

400

500

600

700

ADC counts

Apart from the Gaussian noise taken into account
here, various other sources of background, such as
electrons released due to the photoelectric eﬀect in
the ﬁrst dynode, thermal electrons from the pho-
tocathode or the dynodes, genuine photoelectrons
missing the ﬁrst dynode, etc, can contribute to a
PMT pulse height spectrum. A detailed discus-
sion of such background is beyond the scope of this
paper. However, any type of background that orig-
inates from within the dynode chain can be natu-
rally accomodated in the ﬁt method described here,
since this background undergoes the same type of
ampliﬁcation process as the signal. To illustrate
this, a spectrum has been generated with a Monte
Carlo program, assuming a signal of 1.6 photoelec-
trons per event and a background of 0.16 photo-
electrons per event due to the photoelectric eﬀect
in the ﬁrst dynode (see [CZ+01] for a ﬁt to real
data showing this kind of background, using a dif-
ferent method). The function to ﬁt this spectrum is
obtained by convoluting the background–free func-
tion P (k) with another function Pbg(k). Pbg(k) is
identical to P (k) except that the ampliﬁcation due
to the ﬁrst dynode is missing and that the num-
ber of photoelectrons per event hitting the second
dynode, λbg, is a new free parameter. In the exam-
ple given here, P and Pbg(k) are calculated to give
the exact distributions for signal and background
respectively after the fourth dynode; then the two
distributions are convoluted and the result is scaled
according to equation 34. The generated spectrum
and the ﬁt result are shown in ﬁgure 4; the ﬁt func-
tion is shown again in ﬁgure 5 showing the non–
pedestal and the single photoelectron contributions
separately.

5 Summary

the data well, with a χ2/dgf of 1.22. The line in
ﬁgure 3 marks the threshold cut used for photon
counting in the testbeam. The fraction of single
10% (this
photoelectron events below that cut is
does not include the irrecoverable loss of photoelec-
trons that do not produce any secondaries in the
ﬁrst dynode).

∼

An analytical formula for the the probability dis-
tribution of the number of electrons at the end of
a dynode chain, or any “snowball” like process de-
scribed by a series of Poisson distributions, is de-

2The ﬁt is performed with the same log–likelihood
method that was used for the MC spectra; a χ2 value is
calculated after the ﬁt.

9

m
s
rived. The formula describes the ampliﬁcation pro-
cess at all stages exactly, in particular without ap-
proximating Poisson distributions with Gaussians.
It is evaluated as a function of the number of
photoelectrons coming from the cathode and the
gains at each dynode. The initially found formula
is adapted to reduce numerical problems due to
the multiplication of very large numbers with very
small ones. A numerical recipe is given that imple-
ments that function.

Acknowledgements

I wish to thank the LHCb RICH group, and in par-
ticular the colleagues involved in the 1999 LHCb–
RICH testbeam. Special thanks go to James Libby,
David Websdale and Guy Wilkinson for many help-
ful suggestions.

A FORTRAN Routine to Cal-

culate P (kn)

It is shown how the function can be used as the core
element of an approximated, but faster algorithm,
that calculates the exact distribution for the ﬁrst
few dynodes and then scales the result according
to the gain at the remaining dynodes, approximat-
ing the additional spread at those dynodes with a
Gaussian. The number of dynodes for which the
distribution is calculated exactly is not limited in
principle and can be adjusted according to the pre-
cision required, and the computing time available.
It is also shown how to modify the function to de-
scribe ADC–spectra obtained from read–out elec-
tronics, rather than directly the number of elec-
trons at the end of a dynode chain.

SUBROUTINE DYNODE_CHAIN(OUT, MAX, LAMBDA, DYNODES)
IMPLICIT NONE
This program takes as its input the maximum number of electrons at
the end of the dynode chain, for which it should calculate P(k_n),
MAX, the average number of photo-electrons hitting the first
dynode, LAMBDA(1), the gains at each dynode, LAMBDA(2),
... LAMBDA(DYNODES) and the dimension of the array LAMBDA:
DYNODES. It calls the routine MAKE_P_RATIO, which is listed at the
end of this file.

The output is put into the array OUT(MAX), where the probability
to find k_n < MAX electrons at the end of the dynode chain is
given by OUT(k_n).

Written by Jonas Rademacker.

INTEGER MAX, DYNODES
DOUBLE PRECISION OUT(0:MAX), LAMBDA(DYNODES)

INTEGER ABS_MAX, MAX_DYN
PARAMETER(ABS_MAX=50001,MAX_DYN=13)

INTEGER IX,IY,M,I, K, J

To avoid having to define a limit on the number k_n that can be
calculated, one could create these arrays outside the program and
pass them on.
DOUBLE PRECISION F(1:MAX_DYN) ! corrsponds to f^{star} in the text
DOUBLE PRECISION U(1:MAX_DYN,0:ABS_MAX),V(1:MAX_DYN,0:ABS_MAX)
DOUBLE PRECISION X(1:MAX_DYN)

DOUBLE PRECISION P_ratio(ABS_MAX), F_FACTOR, U_FACTOR, V_FACTOR

This fast algorithm is then used to ﬁt Monte Carlo
generated ADC–spectra.
In the ﬁt function, the
electron distribution after the ﬁrst four out of
twelve dynodes is calculated exactly. The ﬁt re-
sults reproduce the MC–input values well. The de-
pendence of the ﬁt result on the assumptions made
to reduce the number of ﬁt–parameters is inves-
tigated. These results show that the ﬁtted value
for the number of photoelectrons per event is very
weakly dependent on the diﬀerent assumptions con-
sidered here, and the ﬁtted gain on the ﬁrst dyn-
ode also does not depend strongly on them. Real
data from a multi–anode PMT used in the 1999
LHCb–RICH testbeam are ﬁtted, and shown to be
described well by the function. Finally it is illus-
trated how the ﬁt function can be modiﬁed further
to accommodate background from within the dyn-
ode chain, using the example of the photoelectric
eﬀect in the ﬁrst dynode.

*

-- Some initialisations and tests --
DO IX=1,MIN(ABS_MAX,MAX),+1

DOUBLE PRECISION FASTNULL
PARAMETER (FASTNULL=1.d-300)

DOUBLE PRECISION MEAN

INTEGER MAX_OLD
SAVE MAX_OLD
DATA MAX_OLD/-9999/

SAVE P_ratio

OUT(IX)=0.d0

ENDDO
IF(ABS_MAX.LT.MAX)THEN

RETURN

ENDIF
MEAN = 1.D0
DO IX=1,DYNODES,+1

MEAN = MEAN*LAMBDA(IX)

ENDDO
IF(MEAN.LE.0.d0)THEN

OUT(0)=1.d0
RETURN

ENDIF

-- make and save the factors P_ratio(k)=(p_{k}/p_{k-1})^{k} --
IF(MAX.GT.MAX_OLD)THEN

MAX_OLD=MAX
CALL MAKE_P_RATIO(P_ratio,MAX)

ENDIF

-- Calculate the probability to see zero electrons (k_n=0) --
F(DYNODES)=1.d0

*

*
*
*
*
*
*
*
*
*
*
*
*
*
*

*
*
*

*

*

10

References

[CZ+01] I. Chirikov-Zorin et al. Method for precise
analysis of the metal package photomulti-
plier single photoelectron spectra. Nucl.
Instrum. Meth., A456:310, 2001.

[Ham00] Hamamatsu Book on Photo Multipliers,

September 2000.

[Jam94] F. James. MINUIT Function Minimiza-
tion and Error Analysis. Reference Man-
ual. Version 94.1, March 1994. CERN
Program Library Long Writeup D506.

[RIC00] LHCb RICH, Technical Design Report,
September 2000. CERN/LHCC/2000-
0037.

U(DYNODES,0)=F(DYNODES)
V(DYNODES,0)=F(DYNODES)
DO IX=DYNODES-1,1,-1

X(IX)
F(IX)
U(IX,0) = F(IX)
V(IX,0) = F(IX)

= LAMBDA(IX)*DEXP(-LAMBDA(IX+1))
= DEXP(X(IX)*F(IX+1))

ENDDO
OUT(0)=DEXP(-LAMBDA(1))*F(1) !

<---- save the result

*

*

-- Calculate the probabilities for k_n=1,...,MAX electrons --
DO K=1,MAX,+1
. calculate f_n

IF(F(DYNODES).LT.FASTNULL)THEN

F(DYNODES)=0.d0

ELSE

ENDIF
U(DYNODES,K)=F(DYNODES)
V(DYNODES,K)=F(DYNODES)

F(DYNODES)=F(DYNODES) * LAMBDA(DYNODES)/DBLE(K)

*

. re-calculate U and V from previous iteration:

DO J=0,K-1,+1

F_FACTOR=P_ratio(K)**(DBLE(J)/DBLE(K))
IF(K-1-J.GT.0)THEN

U_FACTOR=DSQRT(DBLE(K-1)/DBLE(K-1-J))*

&

&

F_FACTOR

ELSE

U_FACTOR=F_FACTOR

ENDIF
V_FACTOR=DSQRT((DBLE(K-1)/DBLE(K-J)))*

F_FACTOR

DO I=DYNODES,1,-1

U(I,J)=U(I,J)*U_FACTOR
V(I,J)=V(I,J)*V_FACTOR

ENDDO

ENDDO

*

. apply the recursive formula to get f^{k}_i

DO I=DYNODES-1, 1, -1

F(I)=F(I)+U(I,K-1-J)*X(I)*V(I+1,J+1)

F(I)=0.d0
DO J=0,K-1

ENDDO
U(I,K)=F(I)
V(I,K)=F(I)

ENDDO

*

. calculate P(k):

ENDDO

RETURN
END

OUT(K)=DEXP(-LAMBDA(1))*F(1) !

<---- save the result

*__________________________________________________________________

SUBROUTINE MAKE_P_RATIO(P_ratio,MAX)
IMPLICIT NONE
INTEGER MAX
DOUBLE PRECISION P_ratio(MAX)

INTEGER N
DOUBLE PRECISION NFAC

DOUBLE PRECISION PI, E
PARAMETER(PI=3.1415927d0, E=2.718281828d0)

INTEGER APPROX_FROM
PARAMETER(APPROX_FROM=25)

NFAC=1.D0
P_ratio(1)=1.d0
DO N=2,MIN(APPROX_FROM-1,MAX),+1

NFAC=NFAC*DBLE(N-1)
P_ratio(N)=(NFAC**(1.d0/DBLE(N-1)))/DBLE(N)

DO N=APPROX_FROM,MAX,+1

P_ratio(N)=

(2.D0*PI*DBLE(N-1))**(1.D0/(2.D0*DBLE(N-1)))*
DBLE(N-1)/(E*DBLE(N))*
(1.d0+1.d0/DBLE(12*(N-1))+
1.d0/DBLE(288*(N-1)**2)
)**(1.D0/DBLE(N-1))

ENDDO

&
&
&
&
&

ENDDO

RETURN
END

*________________________________________________________________
*

11

