Online Model Server for the Jefferson Lab accelerator∗

Y. R. Roblin, T.L. Larrieu, Jefferson Lab, Newport News, VA23606, USA

THAP012

I

P
E
R
S
S
T
E
N
C
E

DATABASE

Cdev Client

TCL-CDEV

API

OpticsIF

SectionIF

DesignIF

ElementIF

CdevIF

ModelIF

SERVER

API  Pack

CORE

Figure 1: Art++ physical view.

to the modeling of the accelerator. The server module re-
lies on CDEV protocol to interact with clients exposing a
number of interfaces for the clients to act upon. The API
Pack module contains a number of parser classes to in-
terface with external data sources. The persistence layer
provides database functionalities to the core module. Cur-
rently, the supported database mechanisms are relational
database tables, implemented in Oracle, and ﬂat ﬁles.

2.1 Core package

The core package encompasses all the classes directly re-
lated to the problem domain. The class hierarchy shown
in ﬁgure 2 is closely matched to the real accelerator struc-
ture. A model class holds a set of beam segments; each
segment contains a set of generic beam elements. More
specialized versions of the beam element class embody op-
tical concepts such as quadrupoles, dipoles, drift sections,
etc.

The segmentation of the beam line is shown in ﬁgure
3. Points of segmentation fall naturally at the beginning of
each beam transport section delineated by the separation or
recombination parts.

Figure 2: Art++ class hierarchy.

1
0
0
2
 
v
o
N
 
9
 
 
]
h
p
-
c
c
a
.
s
c
i
s
y
h
p
[
 
 
1
v
4
7
0
1
1
1
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Abstract

A beam physics model server (Art++) has been developed
for the Jefferson Lab accelerator. This online model server
is a redesign of the ARTEMIS model server [1]. The need
arose from an impedance mismatch between the current
requirements and ARTEMIS capabilities. The purpose of
the model server is to grant access to both static (machine
lattice parameters) and dynamic (actual machine settings)
data using a single programming interface. A set of useful
optics calculations (R-matrix, orbit ﬁt, etc.) has also been
implemented and can be invoked by clients via the model
interface. Clients may also register their own dynamic
models in the server. The server interacts with clients us-
ing the CDEV protocol and data integrity is guaranteed by
a relational database (Oracle8i) accessed through a persis-
tence layer. By providing a centralized repository for both
data and optics calculations, the following beneﬁts were
achieved: optimal use of network consumption, software
reuse, and ease of maintenance.

1

INTRODUCTION

The CEBAF accelerator is a 6 GeV, 5 pass, continuous
beam electron recirculating linac [2]. The two supercon-
ducting linacs are joined head to tail by beam transport
systems. The beam can be extracted during any of the ﬁve
passes and delivered to three experimental halls. The pur-
pose of Art++ is to provide an accurate and timely repre-
sentation of the machine for high level applications such as
the fast feedback system [3] or the automated beam steering
system [4]. As such, Art++ serves as a central repository
for beam physics calculations (twiss functions, R-matrix,
trajectories, etc.) and facilitates access to the set of pa-
rameters characterizing any beam element. By centralizing
the source of information and beam physics algorithms, we
leverage beam physics expertise and our knowledge of ma-
chine parameters.

2 ARCHITECTURE

Art++ is a distributed system, utilizing CDEV [5] as its
underlying protocol. The software architecture is object-
oriented, written in C++, and is organized in modules as
shown in ﬁgure 1. Each module is decoupled from the oth-
ers and accessed only by means of a well deﬁned interface.
The core module encompasses the business logic pertinent

∗ Work supported by the U.S. DOE contract No DE-AC05-84-

ER40150

2.2 API Pack package.

2.6 Persistence layer

Interfacing with external data sources is accomplished
by the API Pack package. It contains various parser classes
to read machine descriptions and currently supports only
the Optim[6] and twiss input ﬁles. Its framework can eas-
ily be extended to deal with other formats. The accelerator
lattice is speciﬁed by an xml [7] conﬁguration ﬁle which
describes the beamline segmentation. Here is a typical con-
ﬁguration ﬁle for a short stretch of the machine, namely the
injector and the ﬁrst arc:
<model>
<lattice name=’CEBAF’>
<section name=’INJ’ energy=’5.01268’>
<optfile>inj_nlp.opt</optfile>
<twissfile>inj_nlp.twiss</twissfile>
</section>
<section name=’ARC1’ energy=’MMSARC1E’>
<optfile>arc1p.opt</optfile>
<twissfile>arc1p.twiss</twissfile>
</section>
</lattice>
<layout>
<pass number=’1’>
<section>INJ </section>
<section>ARC1</section>
</pass>
</layout>
</model>

Each segment is deﬁned by its name and corresponding
Optim and twiss ﬁles that provide all the static parameters
needed by the model. We will refer to this set of data as the
“design” model in the rest of this paper.

The role of the persistence layer [10] is to encapsulate ac-
cess to the database, so that details about database table lay-
out and corresponding SQL or OCI (Oracle Call Interface)
query mechanisms need not be coded into the application.
With the persistence layer in place the database can be re-
organized and the data access routines tuned without any
modiﬁcation to the application itself. The persistence layer
uses a data dictionary to allow mapping application objects
to relational database tables and rows [11]. Although it
might seem natural to use an object-oriented database to
avoid such object-to-relational mapping, we decided the
effort of translation was worthwhile because information
stored in a relational database will be more accessible and
easier to maintain. Information that needs to be updated
often, such as beamline survey data or magnet ﬁeld prop-
erties, can be maintained by simple scripts written by other
staff.

3 BEAM PHYSICS COMPUTATIONS

Art++ provides availability to the following:

• Generation of ﬁrst order matrices.

• Calculation of twiss parameters.

• Evaluation of transfer matrices at ﬁrst order.

• Correct treatment of the acceleration process in the
linac including adiabatic damping and cavity fo-
cussing effects.

2.3

Server package

• Determination of orbits.

The server package adapts the CDEV server interface to
the internals of Art++. It retrieves incoming messages, dis-
patching them to relevant server methods and sending re-
sults back to the clients.

2.4 TCL-CDEV interface

Art++ can be queried via the TCL scripting language and
TCL-CDEV extension [8]. The use of TCL scripting lan-
guage facilitates rapid prototyping [9] of new applications.
It can also be used for simple situations where performance
is not a stringent requirement.

2.5 API

Alternatively, Art++ can be accessed via an API provided
by a C compatible shared library. We chose not to make it
a C++ library with exported classes because of the need to
support legacy applications written in C. This API allows
any user of the control system to write thin-client appli-
cations making full use of the model server. By utilizing
CDEV as the underlying protocol, users can develop dis-
tributed applications with minimal effort.

All Art++ computations are carried out at ﬁrst order.
Transfer matrices are computed by using twiss parameters
instead of the alternative approach that calculates the prod-
uct of all the matrices. This procedure results in an O(1)
performance in transfer matrix evaluation.

4 ONLINE REALTIME MODEL

To establish an accurate view of the machine, it is neces-
sary to track changes in the beamline in realtime. The dy-
namic parameters for each dipole, quadrupole and cavity
are monitored. Whenever one such element changes, its
local transfer matrix is recomputed and the twiss param-
eters recalculated by forward propagation from that point
onward to the end of the segment. As in the case of the de-
sign model, the realtime model evaluates transfer matrices
using twiss parameters.

5 HIGH LEVEL APPLICATIONS

Several high-level applications are using or being modiﬁed
to use Art++:

INJ
Injection

A -> B for arc1, 3, 5, 7 and 9

B -> A for arc2, 4, 6, 8
C1,2,3,4,5 to D for BSY’s.

D to halls for each hall

North Linac

A

B

South Linac

A

R

C
1

A

R
C
3

A
R
C
5

A
R
C
7

A
R
C
9

Hall A

4
C
R
A

6
C
R
A

8
C
R
A

2
C
R
A

Hall B

BSYA

D

DUMP

Hall C

BSY8

BSY6

BSY4

BSY2

C1

C2

C3

C4

C5

Figure 3: CEBAF accelerator lattice segmentation.

[4] Y. Chao, “Orbit Correction Methods - Basic Formulation,
Current Application at Jefferson Lab, and Future Possibil-
ities”, Proc. Workshop on Automated Beam Steering and
Shaping (ABS), Edited by M. Lindroos, CERN (1998).

[5] Jie Chen, G. Heyes, “CDEV: An Object-Oriented Class Li-
brary for Developing Device Control Applications”, Jie Chen
and G. Heyes, ICALEPCS95, Chicago, IL, Oct 29-Nov 3,
1995.

[6] V. Lebedev, “Optim3.2, LDBS corporation”, http://ldbs.net

[7] Extensible Markup Language, http://www.w3.org/TR/REC-

xml.

[8] J.

Van

Zeijts,

“Tcl/CDEV

home

page,

http://www.rhichome.bnl.gov/People/Johannes/cdevtclman.html”

[9] Johannes Van Zeijts, “Rapid Application Development Using
the TCL/TK Language”, ICALEPCS 95, Chicago, IL Oct 29-
Nov 3, 1995.

[10] Scott W. Ambler,

Persistence
http://www.ambysoft.com/persistenceLayer.html

Relational

Layer

“The Design
For

of

a Robust
Databases”,

[11] Scott W. Ambler,

“Mapping Objects To Relational
Databases”, http://www.AmbySoft.com/mappingObjects.pdf

[12] Y. Chao, PAC 2001, “A full order, almost deterministic op-
tical matching algorithm”, Chicago, IL, June 18-22, 2001.

• Autosteer [4] is a multi-pass orbit correction steering
algorithm used at Jefferson Lab to steer the machine.
Autosteer determines the optimal corrector settings to
minimize beam displacement. It utilizes Art++ to re-
trieve transfer matrices between beam position moni-
tors and correctors.

• Automatch [12] performs beam envelope matching
between the transport segments.
It requires knowl-
edge of the twiss parameters for the ﬁlling sections.
Art++ computes these twiss parameters in realtime for
use by Automatch.

• The fast feedback control program [3] corrects the
beam position and energy disturbances using a con-
trol loop based on a linear quadratic gaussian con-
troller/estimator. Art++ will be utilized by the fast
feedback system in its setup phase to retrieve twiss
functions for various elements.

We plan to port all the high level applications to this new
model server. Preliminary testing of the server was carried
out concurently with the testing of Automatch. The ﬁrst re-
sults show that the server behaves as expected. It exhibits a
dramatic performance increase over Artemis, utilizing only
a fraction of the model server CPU time (5 % versus 80 %
for Artemis).

6 REFERENCES

[1] B.A. Bowling, H. Shoaee, S. Witherspoon, J. Van Zeitjs,
“The Use of ARTEMIS with High-Level Applications”,
ICALEPCS 95, Chicago, IL, Oct 29-Nov 3, 1995.

[2] C.W. Leeman, D.R. Douglas, and G.A. Krafft, “The Con-
tinuous Electron Beam Accelerator Facility: CEBAF at the
Jefferson Laboratory”, Annual Reviews of Nuclear Particle
Science, 51 (2001) 412-450.

[3] M. Chowdhary, G.A. Krafft, H. Shoaee, W. Watson, “A fast
feedback system for CEBAF”, ICALEPCS95, Chicago, IL,
Oct 29-Nov 3, 1995.

