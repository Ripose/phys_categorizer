1
0
0
2
 
v
o
N
 
1
2
 
 
]
h
p
-
c
c
a
.
s
c
i
s
y
h
p
[
 
 
1
v
8
5
1
1
1
1
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

SNS APPLICATION PROGRAMMING PLAN∗

C.M. Chu, J. Galambos, J. Wei† , ORNL, Oak Ridge, TN, USA
C.K. Allen, P. McGehee, LANL, Los Alamos, NM, USA

THAP060

Abstract

The architecture for Spallation Neutron Source accelerator
physics application programs is presented. These high level
applications involve processing and managing information
from the diagnostic instruments, the machine control sys-
tem, models and static databases; they will be used to inves-
tigate and control beam behavior. Primary components in-
clude an SNS global database and Java-based Application
Toolkit, called XAL. A key element in the SNS applica-
tion programs is time synchronization of data used in these
applications, due to the short pulse (1 ms), pulsed (60 Hz)
nature of the device. The data synchronization progress is
also presented.

1

INTRODUCTION

The Spallation Neutron Source (SNS) is a high intensity
pulsed accelerator for neutron production. To commission
and run the SNS efﬁciently, we need high level physics ap-
plication software for modeling, integrated operation and
accelerator physics studies. In particular, we are construct-
ing an object-oriented, accelerator-hierarchy programming
framework. We choose Java as the core programming lan-
guage because it provides object-oriented scope and ex-
isting interfaces to the controls software (e.g. Java Chan-
nel Access) and database information (JDBC, XML). The
SNS physics application software environment includes the
SNS global database, a Java-based software infrastructure
(XAL), and existing lattice tools such as Trace-3D and
MAD. The core part of this environment is the XAL infras-
tructure, which includes links to the SNS database, EPICS
Channel Access signals, shared extensible markup lan-
guage (XML) ﬁles among applications and external model-
ing tools, as well as built-in accelerator physics algorithms.
Data synchronization at the EPICS level for the SNS pulsed
nature is also in progress, and will be included in the XAL
infrastructure later.

and relationships are described in [1]. The basic accelerator
hierarchy is constructed from the database information. For
example information for constructing representative beam-
line sequences, their constituent lattice and diagnostic com-
ponents, and the mapping of beamline components to their
respective EPICS Process Variables (PVs) all comes from
the global database.

Although it is possible to directly query the database
from the Java based XAL framework, instead we create
an intermediate XML ﬁle containing the accelerator hier-
archy. The structure of the XML ﬁles is based on the XAL
class view. The global database to local XML ﬁle transla-
tion is a stand-alone program outside the XAL, which ob-
viates the need for each XAL based applications to query
the database for initialization.

3 XAL INFRASTRUCTURE

The XAL infrastructure is a Java class structure providing a
programming interface with an accelerator hierarchy view.
XAL is a variant of UAL 2.0[2], and detailed API informa-
tion for the XAL can be found on-line[3]. A schematic dia-
gram depicting the XAL infrastructure relationship to other
accelerator components is shown in Fig. 2. The XAL pro-
vides application programs with connections to the static
data via XML ﬁles and the run-time data via Java Channel
Access.

The XAL class hierarchy is shown in Fig. 2. At the top
of the XAL class hierarchy is the SNS accelerator. The
accelerator is composed of different Accelerator sequences
(e.g. Medium Energy Beam Transport, Drift Tube Linac,
Ring, etc). The sequences are composed of nodes (e.g.
Quadrupoles, BPMs, Correctors, etc.). There is a built-in
capability to include algorithms in XAL, but initially we
are using an external model (Trace-3D) for the linac ap-
plications. Regarding scripting possibilities, we are testing
XAL class objects directly with Jython, without the need
for any interface code.

2 SNS GLOBAL DATABASE

3.1 EPICS Channel Access

The SNS global database contains static information about
beam line devices (magnets, diagnostics, etc.), power sup-
plies, magnet measurement, global coordinates, as well as
other accelerator equipment. The table schemas, entities

∗ Work supported by DOE contract DE-AC05-00OR22725
† also at BNL

All the run-time information for the applications will be ob-
tained through EPICS Channel Access. The XAL provides
the connectivity to the EPICS Channel Access via the ca
classes as shown in Fig. 2. Because the SNS is a pulsed
machine, for many applications the data correlation among
pulses is vital. The ca classes provide both synchronized

Application level

XAL "device"
programming layer

EPICS Channel Access

XML
file

TCP/IP
network

Real Time Data Link 
(RTDL)

IOC

IOC

Accelerator
hardware

Global
Database

Figure 1: Application software infrastructure.

and non-synchronized methods for data taking. The data
synchronization will be described in detail in Section 4.

DataSilo set;

• add and remove EPICS process variables from the

3.2 Links to External Modeling Tools

Most of the existing accelerator modeling software pack-
ages are written in languages other than Java. To be able to
run these programs from Java-based XAL, ﬁrst we need to
compile these programs as shared libraries; XAL then con-
nects to the shared libraries via the Java Native Interface
(JNI). The ﬁle I/O is done through XML parsing provided
by XAL, i.e. storing the calculated result in XML ﬁles, thus
the information is portable and share-able, and can be also
be accessed remotely. The JNI calls also require carefully
arranging the running threads because normally programs
tend to execute its own threads before starting the non-Java
threads.

4 DATA SYNCHRONIZATION

Data synchronization is an important feature for a pulsed
accelerator (1 ms beam pulses at 60 Hz). The SNS Real
Time Data Link will transmit a time stamp to all IOCs
across the accelerator at 60Hz, ensuring a good synchro-
nization of the time-stamps being applied to PVs. How-
ever, it may be difﬁcult for high level applications to re-
liably gather sets of data from across the accelerator, all
from the same pulse. To facilitate this, a data-silo data time
correlator is being written. The data-silo method is shown
schematically in Fig. 3. For a requested PV set, the corre-
lator returns the most recent collection of time-correlated
data.

The behavior of the DataSilo class is conﬁgurable by
three parameters: the maximum time to wait since start of
request, maximum width of the time bin, and the maxi-
mum number of channels allowed to be missing from the
synchronized data set. The correlator is implemented as
the C++ DataSilo class which allows the application’s pro-
grammer to:

• dynamically deﬁne the maximum wait time, max-
imum bin number, and maximum missing bins al-
lowed;

• obtain the most recent synchronized set (no waiting);
wait up to the maximum time to obtain a synchronized
set (blocking)

• choose the earliest, latest, or mean time stamp from a

synchronized set.

5 CONCLUSION

The SNS global database is close to the end of design phase
and has been tested with SNS MEBT data. The XAL in-
frastructure is been constructed and tested with a modeling
tool, Trace-3D. The Channel Access part of the XAL will
be tested with simulated IOC signals. Scripting tools such
as Matlab and Python will be used in the MEBT commis-
sioning this spring.

6 ACKNOWLEDGMENTS

The authors would like to thank the SNS Controls and
Diagnostics groups for them kindly providing us all the
EPICS, database and other support. We would also like
to thank Dr. N. Malitsky for his valuable advisory on the
XAL development.

7 REFERENCES

[1] http://ntser3.cad.ornl.gov/mis/EnterpriseModel/modell.htm.

[2] N.Malitsky, et al. “A Prototype of the UAL 2.0 Application
Toolkit”, THAP013, ICALEPCS 2001, San Jose, CA, USA,
November, 2001, physics/0111096.

[3] http://sns.gov/APGroup/appProg/xalDoc/.

IAlgorithm

XalException

IElement

IProbe

GUI
(Graphical User Interface)

SMF
(Standard Machine Format)

Accelerator

AcceleratorNode

AcceleratorNodeFactory

impl
(implementation)

BPM
Dipole
DipoleCorr
Quadrupole
RfCavity

ca
(channel access)

BadChannelException
BpmSuite
Channel
ChannelException
ChannelSuite
ConnectionException
Signal
SignalSet
SynchronizedSet

AcceleratorSeq

AcceleratorRoot

attr
(attributes)

AlignmentBucket
ApertureBucket
Attribute
AttributeBucket
AttributeBucketFactory
DisplaceBucket
MultipoleBucket
RfFieldBucket
RotationBucket
TwissBucket

xdxf

T3dBuilder
XdxfBucketHandler
XdxfBuilder
XdxfContentHandler
XdxfWriter

Figure 2: XAL infrastructure.

PV1

PV2

PV3

PV4

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

XXXXX

Silo

IOC

IOC

BPM

Figure 3: Data-silo for data synchronization.

