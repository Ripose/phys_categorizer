9
9
9
1
 
y
a
M
 
1
1
 
 
]
h
p
-
o
i
b
.
s
c
i
s
y
h
p
[
 
 
1
v
7
2
0
5
0
9
9
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Measurability of side chain rotational isomer populations:
NMR and molecular mechanics of cobalt glycyl-leucine dipeptide model system

Christopher Haydock,∗ Nenad Jurani´c, Vladimir A. Liki´c, Franklyn G. Prendergast, and Slobodan Macura
Department of Biochemistry and Molecular Biology, Mayo Clinic and Mayo Foundation, Rochester, Minnesota 55905, USA
(September 26, 2013)

−

The cobalt glycyl-leucine dipeptide is a model system for
studying the eﬀects of Karplus equation calibration, molec-
ular mechanics accuracy, backbone conformation, and ther-
mal motions on the measurability of side chain rotational iso-
mer populations. We analyze measurements of 8 vicinal cou-
pling constants about the α to β-carbon and β to γ-carbon
bonds of the leucine side chain and of 10 NOESY cross re-
laxation rates across these bonds. Molecular mechanics and
peptide and protein crystallographic databases are an essen-
tial part of this analysis because they independently suggest
that the trans gauche+ and gauche
trans rotational isomers
of the leucine side chain predominate. They also both sug-
gest that puckering of the cobalt dipeptide ring system re-
duces the gauche+ gauche+ rotational isomer population to
less than about 10%. At the present ±1 Hz calibration ac-
curacy of Karplus equations for vicinal coupling constants,
the predominant trans gauche+ and gauche
trans rotational
isomer populations can be measured with about 5% accuracy,
but the population of the gauche+ gauche+ rotational isomer
is probably very near or just below the limit of measurabil-
ity. If experimental measurement error was the only source of
error, then the rotational isomer populations could be mea-
sured with about 0.5% accuracy. We develop a new type of
gel graphic that provides a quick graphical summary of the
rotational isomer populations as well as of the measurability
of these populations.

−

87.15.He, 61.18.Fs, 82.30.Qt, 76.60-k

I. INTRODUCTION

Comparisons of NMR structures with X-ray structures
show that vicinal coupling constants accurately measure
the backbone torsion angles of proteins [1]. In the best
X-ray structures multiple conformations of a particular
side chain can be conﬁdently identiﬁed [2,3], but popu-
lation estimates are not very accurate. The populations
of the three rotational isomers of valine can be deter-
mined from vicinal coupling constants if the rotational
isomers are assumed to have ideal staggered conforma-
If the side chain rotational isomers are not
tions [4].
assumed to have ideal conformations and the amplitudes
of the torsion angle ﬂuctuations of each rotational iso-
mer are also unknown, then even with vicinal coupling
constants and NOESY cross relaxation rates it is only
possible to measure the populations of two or perhaps
three rotational isomers [5]. Protein NMR and crystal-
lographic data available now or in the foreseeable future

simply do not have the resolution to measure the pop-
ulations of all possible side chain rotational isomers at
anywhere near the 1% level of accuracy. Understand-
ing protein properties such as ﬂuorescence intensity de-
cay spectra [6], hydrogen ion association constants [7],
or global stability [8] often requires that an NMR or X-
ray structure be supplemented with molecular mechanics
structure calculations of the conformations of a particu-
lar side chain. An ideal structure determination method
would incorporate these supplemental molecular mechan-
ics calculations and simultaneously ﬁt NMR or crystal-
lographic data. The consistency of the data and the in-
corporated molecular mechanics could be judged by ex-
isting methods [9,10] for assessing when a model over-ﬁts
the data. In the case of measuring side chain rotational
isomer populations it might be possible to measure the
population of one or two prominent rotational isomers
and assess the measurability of other molecular mechan-
ically plausible rotational isomers. In this work we take
a simple ﬁrst step in this direction with an analysis of
the cobalt glycyl-leucine dipeptide model system. This
model system has the advantages that the vicinal cou-
pling constants and NOESY cross relaxation rates can
be accurately measured on samples with natural isotope
abundance and that the cobalt dipeptide ring system re-
strains the dipeptide backbone in a single conformation.
The two background sections give essential informa-
tion about the conformational analysis of leucine side
chain rotamers and about the accuracy of the Karplus
equation coeﬃcients. We anticipate that many of our
readers will be experts in either molecular mechanics or
NMR spectroscopy, but most will not be experts in both
and will ﬁnd at least one of the background sections very
helpful. The experimental section gives the vicinal cou-
pling constant and NOESY cross relaxation rate data
for the cobalt glycyl-leucine dipeptide. Simple two and
three rotational isomer models suggested by conforma-
tional analysis are compared and ﬁt to some of this data.
The computational results and discussion section exam-
ines the molecular mechanics energy map, the eﬀect of
intramolecular thermal motions on calculated NMR cou-
pling constants and cross relaxation rates, and the Monte
Carlo probability density functions of the rotational iso-
mer populations. For the simple cobalt dipeptide model
system these probability density functions conﬁrm the
preliminary analysis in the experimental section and ad-
ditionally suggest that the populations of the remain-
ing rotational isomers are unmeasurable at present. Our
analysis shows that while the NMR data is not ﬁt too

1

well by the simplest models neither does this data give
any guidance in selecting among the multitude of models
with improved ﬁts.

II. BACKGROUND

A. Leucine side chain conformational analysis

The leucine side chains of crystallographic oligopeptide
and protein structures strongly prefer the trans guache+
and gauche− trans rotational isomers [11,12]. Conforma-
tional analysis predicts the backbone-dependent stabil-
ity of protein side chain conformations and explains the
rotamer preferences observed in high resolution crystal-
lographic structures of proteins [13,14]. This analysis is
equally applicable to the leucine side chain of the cobalt
glycyl-leucine dipeptide and leads to the same conclu-
sions found for leucine side chains in proteins. In either
case the predominant rotational isomers of the leucine
side chain are trans guache+ and gauche− trans. The bu-
tane and syn-pentane eﬀects are known from the confor-
mational analysis of the simple hydrocarbons n-butane
and n-pentane. The syn-pentane conformations, which
are guache+ guache− or guache− guache+, are about
3.3 kcal/mol higher in energy than the extended trans
trans conformation. A molecular conformation is said to
be destabilized by the syn-pentane eﬀect when one (or
more) ﬁve atom fragments of the molecule are in syn-
pentane like conformations. The conformational analysis
of a peptide or protein identiﬁes unfavorable side chain
conformations primarily by searching for syn-pentane ef-
fects among all possible n-pentane fragments with the
Cα–Cβ bond in the second or third fragment position.
When the Cα–Cβ and Cβ–Cγ bonds are in the second and
third fragment positions, the analysis gives backbone-
independent rotamer preferences because the fragment
conformation does not depend on the backbone φ and ψ
angles. When the backbone N–Cα or C′–Cα bond is in
the second and the Cα–Cβ bond is in the third fragment
position, the analysis gives backbone-dependent rotamer
preferences. For a leucine residue there are eight pen-
tane fragments to consider: four backbone-independent
fragments of the pattern (N,C′)–Cα–Cβ–Cγ–(Cδ1,Cδ2),
and four backbone-dependent fragments of the pat-
i or (Ni+1,Oi)–C′
i –Cβ
terns (Ci−1,O- - -HNi)–Ni–Cα
i–
i –Cβ
Cα
i , where leucine is the ith residue and O- - -HNi
is an assumed hydrogen bond acceptor of HNi. Of the
nine possible leucine rotamers only two, trans guache+
and gauche− trans, have no backbone-independent syn-
pentane interactions, seven have one interaction, and
one, guache+ gauche−, has two such interactions [13].
Because the identical backbone-independent fragments
are present in the cobalt dipeptide and proteins, the
backbone-independent conformational analysis for pro-
teins applies equally to the cobalt dipeptide.

i –Cγ

i –Cγ

The conformational analysis of backbone-dependent
rotamer preferences is important because the cobalt
dipeptide backbone forms two approximately planar
chelate rings with φ and ψ angles diﬀer somewhat from
the angles most commonly found in protein structures.
To apply backbone-dependent conformational analysis to
the leucine side chain of the cobalt dipeptide simply note
that leucine is the second residue and substitute the atom
names Co, Ot1, and Ot2 for the names O- - -HNi, Oi, and
Ni+1 in the above ﬁve atom fragments, where Ot1 is the
terminal carboxyl oxygen bonded to cobalt and Ot2 is the
uncomplexed carboxyl oxygen. (The reverse substitution
of Ot1 and Ot2 inconveniently generates the dipeptide
from a protein with a very unlikely backbone conforma-
tion that has colliding amide groups.) With this iden-
tiﬁcation the leucine backbone torsion angles φ2 and ψ2
are both near 180 degrees. If φ2 = −174.74 degrees and
leucine χ1 is gauche−, there is a syn-pentane interaction
between the glycine carbonyl carbon and the leucine Cγ.
If ψ2 = 174.74 degrees and leucine χ1 is trans, there is a
syn-pentane interaction between the uncomplexed termi-
nal oxygen and the leucine Cγ. Because φ2 and ψ2 of the
cobalt dipeptide are both near these critical angles, syn-
pentane eﬀects could destabilize both of the leucine side
chain trans guache+ and gauche− trans rotamers, which
are observed in most crystallographic structures and pre-
ferred by the backbone-independent conformational anal-
ysis.

Crystallographic studies of copper and cobalt dipep-
tides and the vicinal coupling constants about both N–Cα
bonds of the cobalt glycyl-leucine dipeptide suggest that
the φ2 and ψ2 torsion angles of the cobalt glycyl-leucine
dipeptide depart from 180 degrees by as much as 10 or
20 degrees. In the crystallographic structures of cobalt
glycyl-glycine dipeptides [15] and copper dipeptides [16]
the chelate ring conformations vary over a wide range.
The peptide backbone atoms are typically displaced by
up to 0.1 or 0.2 angstrom from the mean plane of the
chelate rings and the angles between 3-atom segments of
the chelate rings are typically 5 or 10 or perhaps as large
as 20 degrees. Both these measures of chelate ring puck-
ering imply backbone torsion angles of 180±10 degrees
with maximum deviations from 180 degrees of no more
than about 20 degrees. The variability of the chelate
ring conformations is thought to arise from intermolecu-
lar contacts within the crystall. Even if a crystallographic
structure of the cobalt dipeptide were available, no reli-
able predictions about the solution conformation of the
chelate rings could be made because the conformational
distortions caused by intermolecular contacts are not well
understood. In various DMSO plus D2O mixtures mea-
surements of the four H–N–Cα–H vicinal coupling con-
stants about the glycine N–Cα bond of the cobalt glycyl-
leucine dipeptide show a rotation about this bond of
−10 to −20 degrees [17]. This rotation angle is relative
to an eclipsed substituent atom geometry about the N–
Cα bond and implies a puckered amino-peptidato chelate
ring. Though this puckering gives no direct information

2

about the leuine φ2 and ψ2 torsion angles, the presence
of puckering in solution shows that the intermolecular
contacts within a crystall are not the only cause of puck-
ering. The C′–N–Cα–H vicinal coupling constant about
the N–Cα bond of the cobalt glycyl-leucine dipeptide is
about 0.3 Hz larger than the same coupling constant of
the cobalt glycyl-glycine dipeptide [17]. (In Ref. [17] the
ﬁrst atom of this coupling constant is mistakenly labeled
Cα rather than C′.) This coupling constant diﬀerence im-
plies that the cobalt dipeptide φ2 torsion angle is about
−170 ± 10 degrees.

Simple inspection of backbone-dependent rotamer li-
braries suggests that a 20 degree departure from the
backbone torsion angles of planar chelate rings can di-
minish or even eliminate the gauche+ χ1 rotamer pref-
erence of the leucine side chain. The proportions of
gauche−, gauche+, and trans χ1 side chain rotamers
change fairly dramatically for both 30 and 20 de-
gree backbone angle increments within the backbone-
dependent rotamer libraries of Dunbrack and Karplus
[13,14].
The rotamer libraries seem to show that
backbone-independent interactions are slightly more im-
portant than backbone-dependent interactions.
In the
backbone-dependent rotamer library for straight side
chains [13], which does not include leucine, the gauche−
and trans χ1 rotamers appear with a combined fre-
quency of 20 to 30% in the two 30 by 30 degree square
cells adjacent to the point φ, ψ = 180 degrees, even
though backbone-dependent syn-pentane interactions fa-
vor gauche+ χ1 rotamers. A similar trend seems to hold
throughout the backbone-dependent rotamer library, χ1
rotamers excluded by syn-pentane interactions appear
with diminished probability rather than being completely
In contrast, the backbone-independent syn-
excluded.
pentane interactions of the leucine side chain exclude the
gauche+ χ1 rotamer with striking completeness. In crys-
tallographic structures on which the rotamer library is
based less than 2% of the leucines are gauche+ χ1 ro-
tamers [13]. The exclusion of leucine gauche+ χ1 ro-
tamers as well as gauche− χ2 rotamers seems to hold
over all known classes of protein backbone structures [12].
The crystallographic and NMR evidence cited in the last
paragraph suggests that the φ2 and ψ2 torsion angles of
the cobalt dipeptide both depart from 180 degrees by as
much as 10 or 20 degrees. This is more than enough
to relieve the backbone-dependent syn-pentane interac-
tions with the leucine Cγ and diminish the backbone-
dependent preference for gauche+ χ1 rotamers of the
leucine side chain.

B. Accuracy of Karplus equation calibration

Theoretical calculations show that the H–C–C′–H′ vic-
inal proton coupling constant depends on the torsion an-
gle φ(H,C,C′,H′) around the C–C′ bond, the electronega-
tivity and orientation of substituent groups on the C and

C′ atoms, the bond angles θ(H,C,C′) and θ(C,C′,H′), and
the length of the C–C′ bond [18]. The same symbol φ
serves here for the torsion angle between the vicinally
coupled spins and elsewhere for the protein backbone
torsion angle, but the meaning should always be clear
from the context. The theoretical dependence of the cou-
pling constant on the torsion angle is approximated by a
Karplus equation, which is often written in the form

3J(φ) = A cos2 φ − B cos φ + C,

(1)

where φ is the torsion angle around the C–C′ bond. For
peptide side chain vicinal coupling constants the tor-
sion angle φ is equal to the side chain torsion angle
to within a phase shift that is approximately an inte-
ger multiple of 120 degrees. The Karplus equation for
a H–C–C′–C′′ heteronuclear vicinal coupling constant
also has the same form, where the torsion angle is now
φ(H,C,C′,C′′) around the same C–C′ bond. The accu-
racy of theoretical coupling constant calculations or of
the Karplus equation ﬁt to such calculations is at best
around ±1 Hz. A more accurate Karplus equation is
obtained by adjusting the coeﬃcients to ﬁt experimen-
tal coupling constant data. The greatest improvement
occurs when the Karplus equation coeﬃcients are cali-
brated for a four atom fragment with speciﬁc functional
groups substituted in a speciﬁc orientation on the central
two atoms. For example, the error in the coupling con-
stants predicted by the Karplus equation calibrated for
the protein H–N–Cα–Cβ heteronuclear coupling constant
is ±0.25 Hz, as estimated by the RMS diﬀerence between
the Karplus curve and the ﬁt experimental data [1]. If
a Karplus equation that is calibrated for a four atom
fragment with speciﬁc substituent groups is applied to
the same four atom fragment with diﬀerent substituent
group chemistry or orientation, then the errors in the
predicted coupling constants are dramatically increased.
Similar large errors in the predicted coupling constants
result if the Karplus equation is ﬁt to a collection of ex-
perimental coupling constants that are all measured for
the same ﬁxed four atom fragment, but with a variety of
functional groups substituted in a variety of orientations
on the two central atoms. For one data set of over 300
experimental measurements of the H–C–C′–H′ coupling
constant in about 100 conformationally rigid compounds,
which are largely 6-membered rings with holding groups,
the RMS diﬀerence between the ﬁt Karplus curve and
experimental data is 1.2 Hz [19].
In this data set car-
bon and oxygen are the most frequent substituent atoms
bonded to the central two carbon atoms of the H–C–
C′–H′ fragment, while nitrogen, sulfur, halogen, silicon,
and selenium substituent atoms occur in smaller num-
bers. These two examples span the accuracy range of
most calibrated Karplus equations, that is, errors in pre-
dicted coupling constants are in the range ±0.25 to ±1
Hz. For a speciﬁc substituent group chemistry and ori-
entation the error may be around ±0.5 Hz or even as low
as ±0.25 Hz in favorable cases. For small to moderate

3

variations in substituent group chemistry or orientation
the error probably is in the range ±0.5 Hz to ±1 Hz.

Studies of the vicinal coupling constants of peptides
and closely related compounds suggest that the above
generalizations about the accuracy of calibrated Karplus
equations apply to the vicinal coupling constants about
the Cα–Cβ and Cβ–Cγ bonds of the cobalt dipeptide
leucine side chain. Simple information about the eﬀect of
substituent group chemistry comes from alanine and its
analogues, which have a single H–Cα–Cβ–H coupling con-
stant because of the three-fold symmetry of the methyl
side chain. The experimental H–C–C–H coupling con-
stant of ethane is 8.0 Hz [20], the H–Cα–Cβ–H coupling
constant of the alanine dipeptide is 7.3 Hz [21], and the
H–Cα–Cβ–H coupling constant of the amino acid alanine
remains almost exactly 7.3 Hz over the pH range of 0.5
to 12.5 [22]. Replacing two protons on one ethane carbon
atom with one carbon and one nitrogen substituent group
drops the coupling constant by 0.7 Hz; changing the ni-
trogen substituent group electronegativities through the
range ammonium > acetamide > amide and changing the
carbon substituent group through the range carboxyl >
N-methylamide > carboxylate does not change the cou-
pling constant at all. But there are many counter ex-
amples to this seeming insensitivity to substituent group
chemistry. The H–C–C–H coupling constant of propane
is 7.3 Hz and of isopropylamine is 6.3 Hz [20]. Replacing
one ethane proton with one carbon substituent group al-
ready drops the coupling constant to the value observed
for alanine, which has an additional nitrogen substituent
group, and replacing a second proton on the same car-
bon atom with a nitrogen substituent group, making the
substituted carbon equivalent to the alanine α-carbon,
drops the coupling constant by an additional 1.0 Hz. The
H–Cα–Cβ–H coupling constants of various alanine dipep-
tide derivatives are in the range 6.9 to 7.3 Hz [21], which
shows that even substituent group changes one peptide
bond removed from the α-carbon can change the coupling
constant about the Cα–Cβ bond by at least 0.4 Hz.

The β-carbon atoms of all the other amino acids lack
the three-fold symmetry of the alanine β-carbon. The
above examples of alanine mehtyl proton coupling across
the Cα–Cβ bond probably underestimate the coupling
constant variation due to α-carbon substituent group
chemistry and totally ignore the eﬀect of β-carbon substi-
tution. For leucine two H–Cα–Cβ–H coupling constants
between the α and β-protons and four heteronuclear cou-
pling constants between the amide nitrogen and carbonyl
carbon and β-protons are usually measurable. The sim-
plest models for these vicinal coupling constants about
the Cα–Cβ bond assume ideal gauche or trans torsion an-
gles between the coupled spins and have four parameters:
the populations of two of the three χ1 rotational isomers
and the gauche and trans coupling constants. The het-
eronuclear N–Cα–Cβ–H trans coupling constant of the
leucine cation apparently decreases by 0.6 Hz when the
cation is converted into the anion [23]. The eﬀect of α-
carbon substituent chemistry on the coupling constants

about the Cα–Cβ bond is also seen in the 1-substituted
derivatives of 3,3-dimethylbutane, which are analogues of
the amino acid leucine with the α-carbon and side chain
intact and with various replacements for the amine and
carboxylate groups. Both the gauche and trans coupling
constants of these analogues vary over the range of 0.7 Hz
[24]. Furthermore, this same study found a 1 Hz diﬀer-
ence in the average gauche coupling constant depending
on whether the 1-substituent was gauche or trans to the
coupled proton on the second carbon. This suggests that
two separate Karplus equations are required for the two
β-protons of leucine. Substituent orientation eﬀects re-
quire two diﬀerent Karplus equations for predicting the
β-proton coupling constants of proline [25]. In a similar
way the electronegativity corrections to the 3JHα Hβ(φ)
Karplus equation for leucine probably depend on the ori-
entation of the substituent groups with respect to both
the Hα and Hβ protons [26].

The existing calibrations of the Karplus equations for
vicinal coupling about the Cα–Cβ bond suﬀer from sev-
eral sources of error. Most assume that for each α-carbon
bonded atom one Karplus equation predicts the cou-
pling of this atom to both β-protons. The calibrations
are done with sets of model compounds that have nor-
mal or sometimes rather far from normal peptide back-
bone chemistries and that have a range of standard and
nonstandard amino acid side chains. Errors arise be-
cause the set of model compounds is too varied or be-
cause none of the model compounds closely match the
molecule of interest, whether it be a protein or as in this
study the cobalt dipeptide. Model compounds such as
2,3-substituted bicyclo[2.2.2]octanes [27,21], gallichrome
[28], α-amide-γ-butyrolactones [29], diﬀer from standard
proteins in both backbone and side chain structure. The
match to the molecule of interest may depend on a choice
of coupling constants about several diﬀerent bonds of
the model compound. Because the gallichrome backbone
and ornithyl side chains out to the β-carbon have essen-
tially the same structure as standard proteins, the Cα–
Cβ bonds of gallichrome are fairly well matched to the
Cα–Cβ bonds of proteins. The substituent groups on
the β and γ-carbons are obviously quite diﬀerent from
those on the α-carbon and coupling about the Cβ–Cγ
and Cγ–Cδ bonds is somewhat diﬀerent from that about
the Cα–Cβ bond. If coupling constants about all three
bonds are chosen to calibrate the Karplus equation for
coupling about the Cα–Cβ bond, then the gallichrome
model compound is not a very good match to proteins.
Model compounds such as cyclo(triprolyl) peptide [21],
an asparaginamide dipeptide, oxytocin cystine-1 and 6,
alumicrocin [29], match the backbone of standard pro-
teins, but the side chains may diﬀer from a speciﬁc amino
acid side chain of interest.

The residuals between the Karplus curve and the cali-
bration data set are perhaps the best available indication
of the accuracy of a Karplus equation calibration. How-
ever, these residuals generally underestimate the errors
that occur when the Karplus equation is then applied to

4

predict the vicinal coupling constants of a particular side
chain of interest. Fischman et al. calibrate the 3JC′ Hβ(φ)
Karplus equation by ﬁtting the three Karplus coeﬃcients
to 4 coupling constants measured on two bicyclo-octanes
[23]. For this ﬁt the RMS residual per degree of freedom
is 0.13 Hz. Due to the small calibration data set this tiny
observed residual is a completely unreliable estimate of
the true residual. Kopple et al. calibrate the 3JHα Hβ(φ)
Karplus equation by ﬁtting to 10 coupling constants mea-
sured on seven model compounds [21]. For this ﬁt the
RMS residual per degree of freedom is 0.47 Hz. The
data set is just large enough to give a reliable residual
estimate, but as discussed in the previous paragraph the
model compounds may not be a very good match to pro-
teins. DeMarco et al. calibrate the 3JHα Hβ(φ) Karplus
equation by ﬁtting 30 coupling constants measured about
the Cα–Cβ, Cβ–Cγ and Cγ–Cδ bonds of the ornithyl side
chains of gallichrome [28]. For this ﬁt the RMS resid-
ual per degree of freedom is 0.92 Hz. This fairly large
residual is apparently the result of ﬁtting the coupling
constants about all three side chain bonds. The errors in
this calibration may be even larger than ±1 Hz because
ﬁtting the coupling constants about all three side chain
bonds makes the gallichrome model compound a poor
match to the Cα–Cβ bond of proteins and may add addi-
tional bias error to that suggested by the residuals. Cung
and Marraud calibrate the 3JHα Hβ(φ) Karplus equation
by ﬁtting the three Karplus coeﬃcients and eight angle
parameters to 16 coupling constants measured on ﬁve
model compounds [29]. For this ﬁt the RMS residual
per degree of freedom is 0.49 Hz. Note Cung and Mar-
raud arrive at a standard deviation of half this value by
computing a straight RMS average of the 16 residuals
rather than by averaging over the 5 degrees of freedom
actually present. Though the ﬁve model compounds used
for this calibration are well matched to the Cα–Cβ bond
of proteins, the errors of this calibration are likely to
be substantially larger than suggested by the residuals
because the model compound torsion angles are not esti-
mated from crystallographic structures or by molecular
mechanics calculations.

Considering the wide variety of model compounds, the
single calibration for both β-protons, the observed residu-
als, and uncertainties in the model compound structures,
it seems extremely unlikely that the errors in the calibra-
tion of the Karplus equations for vicinal coupling about
the Cα–Cβ and Cβ–Cγ bonds are signiﬁcantly less than
±1 Hz, whether the molecule of interest is a standard
protein or peptide or as here the glycyl-leucine dipeptide
complexed to cobalt.

III. EXPERIMENTAL RESULTS

The proton assignments in Table I are model depen-
dent. These assignments depend on our assumption that
the population of the leucine side chain rotational iso-

mers with a gauche+ χ1 torsion angle is small compared
to the population of rotational isomers with gauche− and
trans χ1 torsion angles. Without this assumption an un-
ambiguous assignment is not possible. The conventional
approach to assigning the β-protons examines the vic-
inal coupling constants about the Cα–Cβ bond and ex-
ploits the fact that a weak coupling is expected for syncli-
nal spins and a strong coupling for antiperiplanar spins.
When the leucine side chain χ1 torsion is gauche− the
atoms Hα and Hβ1 are antiperiplanar and the atoms Hα
and Hβ2 are synclinal and when χ1 is trans these angular
magnitudes are reversed, that is Hβ1 is synclinal and Hβ2
is antiperiplanar [30]. Thus the 3JHα Hβ coupling con-
stant does not help with Hβ assignment, but is very help-
ful in determining the ratio of gauche− to trans popula-
tions once this assignment is known. The alternating syn-
clinal antiperiplanar geometries of the gauche− and trans
rotational isomers produces a conjugate 3JHα Hβ coupling
pattern that is diagnostic of the absence of gauche+ χ1
rotational isomers. The average of the two 3JHα Hβ cou-
plings is independent of the rotational isomer popula-
tions and the coupling ratio (JHα Hβ1−Jsc)/(JHα Hβ2−Jsc)
is equal to the gauche− over trans population ratio. For
ideal geometries the Karplus equation predicts that the
synclinal coupling Jsc = A/4−B/2+C and that the aver-
age coupling is 5A/8 + B/4 + C. A very similar situation
occurs with the 3JHβ Hγ coupling constant. Leucine side
chain rotational isomers with a gauche− χ2 torsion an-
gle are virtually excluded by backbone-independent syn-
pentane interactions [13]. When the χ2 torsion angle is
gauche+ the atoms Hβ1 and Hγ are antiperiplanar and
the atoms Hβ2 and Hγ are synclinal and when χ2 is trans
these angular magnitudes are reversed. This coupling
is again helpful with populations but not assignments
and the same conjugate coupling pattern is now diag-
nostic of the absence of gauche− χ2 rotational isomers.
As noted in the introduction the χ1 and χ2 torsion an-
gles are highly correlated. With only the trans gauche+
and gauche− trans isomers populated trans χ1 implies
gauche+ χ2 and gauche− χ1 implies trans χ2. This cor-
relation produces a doubly conjugate 3JHα Hβ and 3JHβ Hγ
correlation pattern. When the trans gauche+ rotational
isomer predominates the β1-proton couples weakly to the
α-proton and strongly to the γ-proton and the β2-proton
couples strongly to the α-proton and weakly to the γ-
proton. When the gauche− trans isomer predominates
these coupling strengths are all reversed. If either one of
these leucine side chain rotational isomers predominates
then the β-proton assignment can be made by inspec-
tion of the 3JC′ Hβ heteronuclear coupling constants [30]
because the leucine carboxyl carbon and both β-protons
are synclinal when the leucine side chain χ1 torsion is
gauche− and only the carboxyl carbon and β2-proton
are synclinal when χ1 is trans.

The experimental 3JHα Hβ and 3JHβ Hγ vicinal coupling
constants (Table II) show the doubly conjugate pattern
expected for leucine side chains, that is strong – weak
and weak – strong. The approximately 3 Hz diﬀerence

5

between the weak and strong couplings indicates that
both the trans gauche+ and gauche− trans leucine side
chain isomers are signiﬁcantly populated and that the β-
proton assignment is best determined by comparing the
goodness-of-ﬁt of the two alternative assignments. For
the preliminary β-proton assignment in this section it
is adequate to ﬁt only the 3JHα Hβ and 3JC′ Hβ coupling
constants. The resulting two rotational isomer model,
see methods, does not have any dependence on the χ2
torsion angle; nevertheless, throughout this paragraph
we maintain the assumption of highly correlated χ1 and
χ2 torsion angles and continue to refer to these two ro-
tational isomers as trans gauche+ and gauche− trans.
The goodness-of-ﬁt of the simple two rotational isomer
model is 2 × 10−2 for the β-proton assignment in Table
I and 2 × 10−3 for the alternative assignment. The bet-
ter ﬁt gives population estimates of 39% trans gauche+
and 61% gauche− trans with an uncertainty of ±9%.
These population estimates fall in the gray area between
predominantly gauche− trans and approximately equal
mixture of both conformations. On either side of this
gray area the assignment made by inspection agrees with
that obtained by ﬁtting the experimental 3JHα Hβ and
3JC′ Hβ coupling constants. Suppose gauche− trans pre-
dominates. Then the χ1 torsion angle is gauche−, Hα and
Hβ1 are antiperiplanar, the carboxyl carbon and both β-
protons are synclinal, and the assignment in Table I is
correct because the 3JHα Hβ1 coupling is stronger than the
3JHα Hβ2 coupling and both 3JC′ Hβ couplings are fairly
weak. On the other hand suppose the two conformations
are approximately equally mixed. Then the carboxyl car-
bon and the β1-proton are synclinal in one conformation
and antiperiplanar in the other, but the carboxyl carbon
and the β2-proton are synclinal in both conformations,
and the assignment in Table I is again correct because the
3JC′ Hβ1 coupling is stronger than the 3JC′ Hβ2 coupling.
The goodness-of-ﬁt of the simple two rotational isomer
model is only 2 × 10−2 because this model predicts a high
average 3JHα Hβ coupling constant and too low a 3JC′ Hβ2
coupling constant. As noted above the average of the two
3JHα Hβ coupling constants is 5A/8+B/4+C for ideal ge-
ometry. Karplus coeﬃcients for this coupling [29,28,30]
give average values ranging from 8.1 to 8.7 Hz. These
predicted values must be compared with 6.0 Hz, which is
the average of the two experimental 3JHα Hβ couplings in
Table II. One explanation for this diﬀerence is that there
is a small population of rotational isomers with gauche+
χ1 torsion angle. This would reduce the predicted aver-
age coupling constant because both β-protons are syn-
clinal to the α-proton when χ1 is gauche+. What is im-
portant is not the magnitude in Hertz of the diﬀerence
between the average predicted and experimental 3JHα Hβ
couplings, but the standard deviation, that is, the ratio
of this diﬀerence over the estimated error. The one and
one-half standard deviation diﬀerence found here is not
improbably large and reﬂects our estimate of the errors in
the Karplus equation calibration, see background section,
and of the errors due to the assumption of ideal geometry.

In view of the known improbablity of leucine gauche+ χ1
rotational isomers, again see background section, these
last two sources of error are a more likely explanation of
the diﬀerence.

The above explanation of the diﬀerence between the
average predicted and experimental 3JHα Hβ coupling
constants is even more plausible in view of a similar dif-
ference found between the average predicted and exper-
imental 3JHβ Hγ coupling constants. Though the dipep-
tide backbone conformation leaves some room for doubt
about the complete absence of χ1 is gauche+ conforma-
tion, the evidence from crystallographic studies and con-
formational analysis is very good that there is at most
a very small population of rotational isomers with a
gauche− χ2 torsion angle. Also the cobalt complex with
the dipeptide backbone should have relatively little eﬀect
on the 3JHβ Hγ coupling constant. For ideal geometry the
average of the two 3JHβ Hγ coupling constants is given by
the same expression as for the 3JHα Hβ average. Karplus
coeﬃcients for the sec-butyl coupling [20] give an average
value of 8.5 Hz and coeﬃcients corrected for substituent
electronegativity as suggested by Pachler (Ref. [31], Eq. 2
and Table 4) give an average value of 8.1 Hz. The average
of the two experimental couplings in Table II is 6.5 Hz.
Error in the Karplus coeﬃcient calibration and perhaps
some departure from ideal geometry seem to be the only
plausible explanation is this diﬀerence. This supports our
view that overall errors of one to two Hertz are entirely
possible. The two rotational isomer model also predicts
that the 3JC′ Hβ2 coupling constant is A/4 − B/2 + C
because the β2-proton is always synclinal to the leucine
carboxyl carbon when rotational isomers with a gauche+
χ1 torsion angle are excluded. The predicted coupling
[27] is 1.4 Hz and the observed is 4.2 Hz (Table II). A
small gauche+ χ1 population could make up much of this
two standard deviation diﬀerence, but we again favor the
explanation that the Karplus calibration is not very ac-
curate.

The δ-proton assignments in Table I follow from the
pattern of RHβHδ cross relaxation rates in Table II. These
assignments are also model dependent. For several mod-
els the δ-proton assignment is unambiguous once the
β-proton assignment is selected (results not presented);
however, to keep things simple we again assume that only
the trans gauche+ and gauche− trans leucine side chain
rotational isomers are signiﬁcantly populated. For both
these rotational isomers the Hβ1 to Hδ1 and Hβ2 to Hδ2
distances are 2.8 to 2.9 angstroms. The Hβ1 to Hδ2 and
Hβ2 to Hδ1 distances are 2.9 and 4.0 angstroms for the
trans gauche+ rotational isomer and reverse order to 4.0
and 2.9 angstroms for the gauche− trans isomer. The δ-
proton assignments in Table I produce the strong – weak
– weak – strong pattern observed in the experimental
relaxation rates in Table II.

An unambiguous β-proton assignment is not possible if
an arbitrarily large population of gauche+ χ1 rotational
isomers is allowed. We have repeated the above least
squares ﬁt to the experimental 3JHα Hβ and 3JC′ Hβ2 cou-

6

pling constants, while allowing rotational isomers with
gauche−, gauche+, and trans χ1 torsion angles. For
the β-proton assignment in Table I the goodness-of-ﬁt
of this three rotational isomer model, see methods, rises
to 29% and that of the alternative β-proton assignment
rises to 94%. By this criterion either assignment is now
acceptable. The population of rotational isomers with
gauche+ χ1 torsion angles is 36% for the selected as-
signment and 51% for the alternative. Either of these
gauche+ populations seems unacceptably high.
In any
event the presently available models are not able to mean-
ingfully predict the gauche+ χ1 population. The exper-
imental data can be satisfactorily explained by two ro-
tational isomer model, which excludes gauche+ χ1 ro-
tational isomers. The unambiguous assignment of the
β and δ-protons probably must await the preparation of
cobalt dipeptide with stereoselectively deuterated leucine
side chains [32].

IV. COMPUTATIONAL RESULTS AND
DISCUSSION

A. Chelate ring conformation

As discussed in the background section, conforma-
tional analysis predicts that gauche+ χ1 rotational iso-
mers of the leucine side chain are favored in the absence
of chelate ring puckering. Crystallographic and NMR
evidence shows that the cobalt dipeptide chelate rings
do pucker and that the φ2 and ψ2 torsion angles depart
from 180 degrees by as much as 10 or 20 degrees. Sim-
ple inspection of backbone-dependent rotamer libraries
suggests that this departure is large enough to reduce
the population of gauche+ χ1 rotational isomers to fairly
low levels. To obtain a sharper picture of the depen-
dence on backbone conformation of rotamer preferences
we have constructed a rotamer library for a region-of-
interest around the special point in φ × ψ space where
gauche+ χ1 rotamers are most favored, that is, the point
with coordinates φ = −175 and ψ = 175 degrees. This
region-of-interest rotamer library diﬀers from previous
backbone-dependent rotamer libraries [13,14] only in that
a limited region of φ × ψ space is divided into annular
disks around the special point instead of dividing the
entire φ × ψ space into a grid of square cells. Our region-
of-interest rotamer library is constructed from a list of
backbone and side chain torsion angles of 7085 leucine
residues on 445 nonhomologous (that is with less than
50% sequence identity) protein chains from the current
Brookhaven Protein Database of structures with a reso-
lution of 2.0 angstroms or better. Backbone angles in the
region-of-interest are not very common in protein struc-
tures. There are only 0, 13, 28, 72, 112, and 251 of the
leucine residues with backbone φ and ψ angles in the 6
annular shells with a width of 10 degrees and that have
outer radii of 10, 20, 30, 40, 50, and 60 degrees. There

are 11 residues with a gauche+ χ1 torsion angle out of
the 13 (92%) with backbone torsion angle in the 10 to 20
degree annulus, 21 of 28 (75%) in the 20 to 30 annulus,
29 of 72 (40%) in the 30 to 40 annulus, 10 of 112 (9%)
in the 40 to 50 annulus, and 7 of 251 (3%) in the 50 to
60 annulus. The region-of-interest rotamer library shows
a dramatic drop-oﬀ of gauche+ χ1 leucine side chain ro-
tational isomers when the backbone torsion angle is be-
yond the 20 to 30 degree annulus. Note that χ2 torsion
angles of most of the gauche+ χ1 rotational isomers in
this region-of-interest are also gauche+.

The conformational statistics of leucines in protein
database structures show clearly that side chain rotamer
preferences are highly sensitive to the backbone confor-
mation, especially near the φ and ψ angles of the cobalt
dipeptide backbone. Analysis of the molecular mechan-
ics energy map over χ1 × χ2 torsion space of the leucine
side chain (Fig. 1) and of the backbone conformation
of the energy minimized dipeptide structures suggests
that the cobalt dipeptide chelate rings do indeed pucker
enough to allow gauche− and trans χ1 rotational isomers
to predominate. The gauche− trans energy well has the
lowest energy minimum, which we assign the value ex-
actly 0 kcal/mol, and the trans gauche+ well is only
0.1 kcal/mol higher. The energies of the three energy
well minima with the χ1 torsion angle gauche+ are 6.4
kcal/mol for gauche+ gauche−, 2.1 kcal/mol for gauche+
gauche+, and 2.6 kcal/mol for gauche+ trans. All other
well minima have energies higher than 2.9 kcal/mole.
The molecular mechanics energy map prediction matches
the backbone-independent conformational analysis result
that the trans gauche+ and gauche− trans leucine side
chain rotational isomers are the most stable. The back-
bone torsion angles of the minimized structures at the
energy minimum grid point of the gauche− trans en-
ergy well are φ = −162 and ψ = 167 degrees and of
the trans gauche+ well are φ = −166 and ψ = 168
degrees. These leucine backbone torsion angles spec-
ify a point in φ × ψ space that is 15 and 11 degrees
from the point where gauche+ χ1 rotamers are most fa-
vored, that is, the point with coordinates φ = −175 and
ψ = 175 degrees. The backbone torsion angles at the
energy minimum grid point of the three gauche+ χ1 ro-
tational isomers are all in the ranges −176 ≤ φ ≤ −174
and 178 ≤ ψ ≤ 180 and are all within 4 to 6 degrees of
the point with both φ and ψ = 180 degrees. This seems
to conﬁrm that the backbone torsion angles of the trans
gauche+ and gauche− trans rotational isomers are in-
deed adjustments from cobalt dipeptide chelate ring pla-
nar geometry that accommodate unfavorable backbone-
dependent syn-pentane interactions. To eliminate these
backbone-dependent interactions the backbone confor-
mation apparently need adjust only by an angle of 10 to
15 degrees in χ1 × χ2 torsion space, which is about half
that suggested by the region-of-interest rotamer library.
Most of the bond length and bond angle molecular
mechanics parameters are known from previous crystallo-
graphic [15] or molecular mechanics [33] studies of cobalt

7

complexes. At the other extreme the torsion angle and
improper torsion angle force constants with cobalt in one
of the four angle deﬁning positions and charges of the ni-
tro and cobalt atoms are not much better than order
of magnitude guesses. The molecular mechanics energy
map over χ1 ×χ2 torsion space of the leucine side chain is
not very sensitive to the values of these uncertain param-
eters. The relative energy well depths of the leucine side
chain rotational isomers vary by less than about one half
kcal/mol when the torsion angle and improper torsion
angle force constants involving cobalt are scaled down
to zero as a group or when the distance independent di-
electric constant of value one is replaced by a distance
dependent dielectric constant equal to the inverse atomic
separation in angstroms.

B. Eﬀect of intramolecular motions

For most leucine side chain rotational isomers the ef-
fect of thermal motions on the NOESY cross relaxation
rates is several times smaller than the typical accuracy
of these measurements and the eﬀect on vicinal coupling
constants is perhaps several times bigger than the ac-
curacy of the best homonuclear coupling measurements.
The eﬀect of thermal motions on side chain vicinal cou-
pling constants is similar in magnitude to the previously
reported eﬀect on backbone coupling constants [1]. The
magnitude of the thermal motion eﬀect is estimated by
comparing the calculated average NMR observables to
those values calculated at the average χ1 and χ2 tor-
sion angles. These averages are taken over the individual
energy well regions, see methods, and thus the compar-
ison looks at the eﬀects of fast thermal motions within
the energy wells as opposed to the eﬀects of slower in-
terconversion of rotational isomers. The trans gauche+
and gauche− trans rotational isomers, which are the pre-
dominantly populated isomers, are typical. For these two
rotational isomers the RMS diﬀerences between the av-
erage observables and the observables at the average are
0.16 Hz for the vicinal coupling constants and 0.0011
s−1 for the NOESY cross relaxation rates, where these
RMS diﬀerences are averaged over these two rotational
isomers and over the 10 NOESY cross relaxation rates
and 8 vicinal coupling constants listed in Table II. These
diﬀerences are substantially increased for rotational iso-
mers with more anharmonic χ1 × χ2 torsion space energy
wells. The diﬀerence between the energy well minimum
position and the average χ1 and χ2 torsion angles gives a
rough measure of the anharmonicity of a rotational iso-
mer energy well. By this measure the trans gauche− en-
ergy well is the most anharmonic (compare Fig. 1) with a
diﬀerence of 12 degrees between the minimum and aver-
age positions. For the trans gauche+ and gauche− trans
energy wells these diﬀerences are only 3 and 4 degrees.
For the anharmonic energy well of the trans gauche− ro-
tational isomer the RMS diﬀerences between the average

observables and the observables at the average are 0.31
Hz for the vicinal coupling constants and 0.0021 s−1 for
the NOESY cross relaxation rates, which are both almost
twice the values for the more nearly harmonic energy
wells of the trans gauche+ and gauche− trans rotational
isomers.

The diﬀerence between the average observables and the
observables at the average χ1 and χ2 torsion angles only
accounts for about half the eﬀect of thermal motions on
the NMR observables. Thermal shifting of the average
χ1 and χ2 torsion angles of a rotational isomer also sig-
niﬁcantly changes the NMR observables. This thermal
motion eﬀect is measured by the diﬀerence between the
NMR observables at the χ1 × χ2 energy well minimum
and at the average χ1 and χ2 torsion angles. As already
noted in the last paragraph the diﬀerence between the
minimum and average positions of the trans gauche+ and
gauche− trans energy wells is 3 and 4 degrees. For these
rotational isomers the RMS diﬀerences between the ob-
servables at the minimum and average positions are 0.17
Hz for the vicinal coupling constants and 0.0013 s−1 for
the NOESY cross relaxation rates. These diﬀerences are
about the same as the values of 0.16 Hz and 0.0011 s−1
reported in the previous paragraph for the diﬀerences be-
tween the average observables and the observables at the
average.
In the case of the anharmonic energy well of
the trans gauche− rotational isomer the thermal shifting
eﬀect is more dramatic. The RMS diﬀerences between
the observables at the minimum and average positions
are 0.75 Hz and 0.0041 s−1, which are about twice the
diﬀerences between the average observables and the ob-
servables at the average for the trans gauche− rotational
isomer.

All these thermal motion eﬀects can be put into per-
spective by comparing them to the diﬀerences in the
NMR observables at the χ1 × χ2 energy well minimum
and at ideal geometry χ1 and χ2 torsion angles. For
the trans gauche+ and gauche− trans rotational isomers
the RMS diﬀerences between the minimum energy and
ideal geometry observables are 0.50 Hz for the vicinal
coupling constants and 0.0039 s−1 for the NOESY cross
relaxation rates, which is about three times the size of the
thermal motion eﬀect. This is just about what might be
expected because the energy minima of the trans gauche+
and gauche− trans rotational isomers diﬀer by 9 and 12
degrees from the ideal geometry positions in χ1 × χ2 tor-
sion space and these diﬀerences are three times the dif-
ferences between the average χ1 and χ2 torsion angles
and the positions of the energy well minima.

C. Necessity of molecular mechanics energy
estimates

At the present accuracy of Karplus equation calibra-
tions it is not possible to calculate the populations of all
9 rotational isomers of the leucine side chain from only

8

the NMR data in Table II. Before ﬁtting the NMR data
a small set of rotational isomers with nonzero population
must be selected with molecular mechanics calculations
or conformational analysis. If we calculate the popula-
tion of all 9 rotational isomers by ﬁtting an 8 parameter
model to the data in Table II (results not shown), then
the populations estimates range from 0.0 to 0.3, though
most of them are near 0.1, and the population error es-
timates from the moment matrix range from about ±0.2
to ±0.3. The standard deviations of the Monte Carlo
probability density functions are all close to ±0.1. These
errors are somewhat smaller than suggested by the mo-
ment matrix because the moment matrix estimates do
not take into account the nonnegativity constraints on
the isomer populations. The errors given by either set of
error estimates are larger than or at least nearly as large
as the population estimates. This suggests that ﬁtting
the 9 rotational isomer model gives meaningless popula-
tion estimates.

There are 29 − 1 = 511 possible nonempty subsets of
the set of 9 rotational isomers. As we will detail shortly,
these rotational isomer subsets generate a large number
of distinct solutions to the problem of ﬁtting the experi-
mental NMR data. As an alternative to ﬁtting all the ro-
tational isomer populations, we might hope to ﬁnd among
this large set of solutions one best solution that includes
only a small number of rotational isomers and that has a
uniquely high goodness-of-ﬁt to the NMR data. A solu-
tion is initially generated from each subset of rotational
isomers by ﬁtting the experimental NMR data with the
model that includes only the isomers in that subset. In
general the populations of these included isomers are not
all positive because active nonnegativity constraints force
some populations to be exactly zero. A diﬀerent set of
experimental data would yield a diﬀerent set of active
constraints and thus a diﬀerent set of positive popula-
tions. In the next subsection we ﬁt multiple Monte Carlo
simulated NMR data sets to calculate population prob-
ability distributions. But here we ﬁt only the actual ex-
perimental data and generate one single solution from
each subset of rotational isomers. Two diﬀerent subsets
of isomers may generate the same solution with the same
positive isomer populations on some common subset of
the two original subsets of isomers. Thus the number of
unique solutions is substantially smaller than the num-
ber of subsets of 9 rotational isomers. A single unique
solution is conveniently identiﬁed by the positive isomer
populations and the isomers with positive populations
are referred to as the populated isomers.

For the assignments in Table I, experimental data in
Table II, and with the NMR observables calculated at the
χ1 × χ2 energy map minimum positions the 511 isomer
subsets generate 278 unique solutions. One half of these
solutions have a goodness-of-ﬁt better than 10% and two
thirds of them have a goodness-of-ﬁt better than 1%.
There are 5 solutions that have only two populated iso-
mers and have a goodness-of-ﬁt between 10% and 1% and
15 solutions that have three populated isomers and have a

9

goodness-of-ﬁt better than 10%. Apparently many good
solutions exist even with the restriction to solutions that
have only a small number of populated isomers. Worse,
the solutions with two or three populated isomers are
inconsistent and over-ﬁt the experimental data. As a
group, the 5 good solutions with two populated isomers
give 5 predictions of the population of each of the 9 ro-
tational isomers. The only consistent predictions are for
the gauche− gauche− and trans trans rotational isomer
populations, which all 5 solutions predict are zero. The
gauche− trans rotational isomer population is predicted
4 times in the range 0.5 to 0.6 and once at zero. The
other 6 rotational isomer populations are each predicted
once in the range 0.4 to 0.6 and 4 times at zero. These
positive and zero population predictions are inconsistent
because the positive population errors of the 5 solutions
are all around ±0.05. The 15 good solutions with three
populated isomers give a similar picture. The gauche−
trans rotational isomer population is predicted 11 times
in the range 0.3 to 0.5 and 4 times at zero. The other 8
rotational isomer populations are each predicted in the
range of 0.3 or 0.4 from 2 to 7 times and otherwise at
zero. Again these population predictions are inconsis-
tent because the positive population errors of the 15 so-
lutions are all around ±0.08. The experimental NMR
data is over-ﬁt in the sense that the predicted isomer
populations depend on the model and the discrepancies
between these predictions are much larger than the errors
estimated from the ﬁt of a single model.

The number of solutions with two or three populated
isomers, the goodness-of-ﬁts, population predictions, and
error estimates reported in the last paragraph change
very little if the average NMR observables are ﬁt instead
of those at the energy map minimum positions. Inconsis-
tent and over-ﬁt solutions also result if the β and δ-proton
assignments in Table I are reversed. For example, for the
reverse assignments the 511 isomer subsets generate 285
unique solutions with an overall pattern of goodness-of-
ﬁts similar to the assignments in Table I. There are 4
solutions that have only two populated isomers and have
a goodness-of-ﬁt better than 10%. The gauche+ gauche+
and trans gauche+ rotational isomer populations are pre-
dicted 2 times in the range 0.4 to 0.6 and once at zero.
Four other rotational isomer populations are each pre-
dicted once in the range 0.4 to 0.6 and 3 times at zero.
All 4 solutions predict that the populations of the re-
maining 3 rotational isomers are zero. These population
predictions are inconsistent because the positive popula-
tion errors of the 4 solutions are all around ±0.05. Again
there is no best solution and the solutions that have only
a small number of populated isomers are over-ﬁt. At
present the only hope for obtaining a reasonable solution
is to narrow down the number of possible isomers with
the help of molecular mechanics energies or conforma-
tional analysis.

D. Measurability of rotational isomer populations

An analysis of all the NOESY cross relaxation rates
and vicinal coupling constants listed in Table II con-
ﬁrms the preliminary analysis in the experimental results
section that the cobalt dipeptide leucine side chain pre-
dominantly populates the trans gauche+ and gauche−
trans rotational isomers in approximately equal propor-
tions. The goodness-of-ﬁt of this simple two rotational
isomer model with the NMR observables calculated at
the χ1 × χ2 energy map minimum positions is 0.020 for
the assignments given in Table I and 2.2 × 10−3 if both
the β and δ-proton assignments are reversed. These
goodness-of-ﬁts increase to 0.063 and 0.010 if the average
NMR observables are ﬁt instead of those at the energy
map minimum positions. For the assignments in Table I
the gauche− trans rotational isomer predominates with a
population of 0.625 ± 0.043. Switching to average NMR
observables has no eﬀect on this population or uncer-
tainty, they both increase by only 0.001. The reverse
assignment approximately reverses the populations, but
again does not change the uncertainty. Analysis of both
the protein data bank and the molecular mechanics en-
ergy map suggests that the third most populated rota-
tional isomer after trans gauche+ and gauche− trans is
gauche+ gauche+, see the section on chelate ring con-
formation at the beginning of this results and discussion
section. The gauche+ gauche+ rotational isomer pop-
ulation is expected to be small, perhaps less than 5 or
10%. Because the 4.3% population standard deviation
that is given by ﬁtting the two rotational isomer model
is as large if not larger than the probable population,
it is unlikely that the gauche+ gauche+ population can
be measured by ﬁtting the NMR data. If a three rota-
tional isomer model that includes gauche+ gauche+ is ﬁt
to the NMR data, then the gauche+ gauche+ population
is 0.245 ± 0.078 with a 0.18 goodness-of-ﬁt. Though this
gauche+ gauche+ population mean is high, the popula-
tion distribution is not inconsistent with the expected
small population. The distribution gives about a 5%
probability that the population is smaller than 10% and
about a 1% probability it is smaller than 5%. Note that
these probability estimates must be taken with caution
because, as pointed out in the previous section, even
models with three populated rotational isomers over-ﬁt
the experimental data. Indeed the high population mean
seems to further suggest that the gauche+ gauche+ pop-
ulation is poorly measured by ﬁtting the NMR data with
the three rotational isomer model. For the reverse as-
signments the gauche+ gauche+ population reaches the
extremely implausible level of 0.385 ± 0.078 with a 0.62
goodness-of-ﬁt. The high goodness-of-ﬁt for the three ro-
tamer model with and without the assignments reversed
again suggests that the assignments in Table I must be
taken with caution.

The prominent populations of the trans gauche+ and
gauche− trans rotational isomers are best estimated by

ﬁtting experimental data. The minuscule populations of
the other seven rotational isomers, except for gauche+
gauche+, are best estimated from the molecular mechan-
ics energy map. This leaves the gauche+ gauche+ rota-
tional isomer on the awkward borderline of experimental
measurability. The standard Monte Carlo procedure [34]
can be altered to estimate the gauche+ gauche+ pop-
ulation and its probability distribution.
Initially the
gauche+ gauche+ population is ﬁxed at zero, the sim-
ple two rotational isomer model is ﬁt, and Monte Carlo
NMR observables are generated, but then these Monte
Carlo observables are ﬁt to a three rotational isomer
model that includes gauche+ gauche+. This diﬀers from
the standard procedure because one model generates the
Monte Carlo observables and a second diﬀerent model
is ﬁt to these Monte Carlo observables. The resulting
Monte Carlo probability density functions (Fig. 2) give
population estimates of 0.355 ± 0.053 and 0.612 ± 0.045
for the prominent trans gauche+ and gauche− trans rota-
tional isomers and 0.033 ± 0.046 for the gauche+ gauche+
rotational isomer. The prominent rotational isomer pop-
ulation estimates have slightly smaller means and larger
standard deviations than the estimates given in the last
paragraph for the ﬁt of the simple two rotational iso-
mer model. The Monte Carlo probability density func-
tion of the gauche+ gauche+ rotational isomer is actually
the density function of a mixed discrete and continuous
distribution [35]. The probability of having a popula-
tion of zero is 0.471, which corresponds to the fraction of
least-squares ﬁts with an active nonnegativity constraint
on the gauche+ gauche+ population. The continuous
part of the probability density function has a popula-
tion mean of 0.062 and has a roughly exponential distri-
bution. The overall gauche+ gauche+ population mean
is as expected near zero because the two rotational iso-
mer model, which generates the Monte Carlo NMR ob-
servables, lacks gauche+ gauche+ rotational isomer. The
mean of the continuous part of the probability distribu-
tion is greater than 5% and suggests in perhaps a more
direct fashion than ﬁtting the three rotational isomer
model as discussed in the last paragraph that gauche+
gauche+ populations in the 5% range can not be mea-
sured by ﬁtting the NMR data with currently available
models. The extent of the continuous part of the gauche+
gauche+ probability density function is determined by
the observation errors incorporated in the least-squares
design matrix and observation vector. Though this ex-
tent has nothing to do with the 2.1 kcal/mol relative
energy of the gauche+ gauche+ rotational isomer deter-
mined by molecular mechanics or the accuracy of this
energy, it places gauche+ gauche+ population in a molec-
ular mechanically realistic range and approximately cap-
tures the uncertainty in the molecular mechanics energy
well depths.
In this sense the Monte Carlo procedure
described here blends together molecular mechanics and
experimental NMR data.

The observation errors of the least-squares ﬁt are dom-
inated by the errors in the predicted NMR observables

10

due to uncertainty in the Karplus coeﬃcients and molec-
ular mechanics geometries. What would happen if the er-
rors in the predicted NMR observables could be reduced
below the level of the experimental measurement errors?
Given that the errors in the predicted NMR observables
are about an order of magnitude larger than the exper-
imental measurement errors, the population error esti-
mates should also be reduced by about an order of mag-
nitude into the 0.5% range. A population of 0.5% corre-
sponds to a relative rotational isomer energy of around
3 kcal/mol. Excepting the prominent trans gauche+ and
gauche− trans and the forbidden gauche+ gauche− ro-
tational isomers, the remaining rotational isomers have
energy map minima ranging 2.1 kcal/mol for gauche+
gauche+ to 3.9 kcal/mol for gauche− gauche−. A 0.5%
population accuracy potentially places all rotational iso-
mer populations except that of the forbidden gauche+
gauche− rotational isomer within reach of experimental
measurement. The measurability of the populations of
all these rotational isomers can be assessed by the same
Monte Carlo procedure applied in the previous paragraph
to assess gauche+ gauche+ measurability. Again we ﬁt
the simple two rotational isomer model with all observa-
tion errors included. The Monte Carlo NMR observables
are generated with only the experimental measurement
errors and an eight rotational isomer model that excludes
only the forbidden gauche+ gauche− rotational isomer is
then ﬁt to the Monte Carlo observables. In the initial
model all rotational isomers except the prominent trans
gauche+ and gauche− trans rotational isomers are ﬁxed
at zero population. As a result the Monte Carlo proba-
bility densities (Fig. 3) of these rotational isomers are the
density functions of mixed discrete and continuous distri-
butions with zero population probabilities ranging from
0.52 to 0.89 and population means ranging from 0.0005
to 0.0023. The Monte Carlo density functions give pop-
ulation estimates of 0.3712 ± 0.0038 and 0.6203 ± 0.0051
for the trans gauche+ and gauche− trans rotational iso-
mers. The continuous parts of the probability density
functions have population means ranging from 0.0035 to
0.0067 and have roughly exponential distributions. This
seems to conﬁrm that if experimental measurement was
the only source of error, then rotational isomer popula-
tions as small as about 0.5% could be measured.

V. CONCLUSIONS

This study the cobalt glycyl-leucine dipeptide side
chain rotational isomer populations gives a realistic pic-
ture of their measurability and in particular suggests that
the population of the gauche+ gauche+ rotational isomer
is less than 5 or 10%, which is below the limit of mea-
surability at the present accuracy of Karplus equation
calibration. Better calibrations of the Karplus equations
with model systems such as cobalt dipeptides promise
to push the limit of measurability of side chain popula-

tions down into the 1% range. To calibrate the Karplus
equations to an accuracy substantially better than ±1 Hz
probably requires a separate Karplus equation for each
vicinal coupling constant, for example, the 3JHα Hβ cou-
plings of the leucine side chain would require calibrating
two Karplus equations, one for the coupling to the β1-
proton and a second for that to the β2-proton. Each
Karplus equation has three coeﬃcients, so the calibra-
tion of the two 3JHα Hβ Karplus equations could require
that as many as six coeﬃcients be determined. As many
as four of these six coeﬃcients could be determined from
the temperature dependence of the two vicinal coupling
constants [24]. However, it is probably best to attempt to
determine only three of these coeﬃcients by adopting the
following compromise. Because the torsion angle φ be-
tween the α and either β-proton is always synclinal or an-
tiperiplanar the Karplus equations only need to be really
accurate within these angular ranges. Reasonable accu-
racy in these ranges can probably be achieved with only
two adjustable parameters per Karplus equation, say by
adjusting the A and C coeﬃcients and ﬁxing the coeﬃ-
cient B at the best literature value. Note that these co-
eﬃcients are deﬁned in the background section and that
B = (Jap − Jpp)/2, where Jpp and Jap are the coupling
constants at φ = 0 and 180 degrees. A further reduction
by one in the number of coeﬃcients could be achieved
by assuming that Jpp is the same for both β-protons.
With these compromises there are only three coeﬃcients
to be determined from four measured quantities, that
is, two coupling constants and their temperature varia-
tions. By measuring a half-dozen or so coupling constants
about the Cα–Cβ and Cβ–Cγ bonds of the leucine side
chain there would be more than enough measured values
to calibrate all the Karplus equations and determine the
unknown rotational isomer populations. Fitting the tem-
perature dependence of the coupling constants implies a
search for not only the rotational isomer populations, but
also for a breakdown of the free energy diﬀerences into
enthalpic and entropic contributions. The entropic con-
tribution to the the population diﬀerences can probably
be estimated more accurately from molecular mechanics
[6] than by ﬁtting the temperature dependence of the vic-
inal coupling constants. Before attempting to calibrate
Karplus equations with the cobalt glycyl-leucine dipep-
tide the critical issue of assigning the β and δ-protons
must be addressed by preparing samples with stereose-
lectively deuterated leucine side chains [32].

In addition to calibrating Karplus equations with the
cobalt glycyl-leucine dipeptide and other cobalt dipep-
tides we suggest parallel studies of N -acetyl-L-leucine
N ′-methylamide (leucine dipeptide), which is the leucine
analogue of the alanine dipeptide [36]. The cobalt
dipeptides achieve a single backbone conformation by
forming two approximately planar chelate rings. This
backbone conformation is uncommon in proteins and
destablizes the normal side chain conformational prefer-
ences of leucine. The leucine dipeptide should eliminate
this disadvantage of the cobalt glycyl-leucine dipeptide

11

without sacriﬁcing the signiﬁcant advantage of a single
backbone conformation.
Indeed the alanine dipeptide
C7eq backbone conformation predominates in weakly po-
lar solvents [37]. This strongly suggests that the leucine
dipeptide backbone would adopt the C7eq conformation
in solvents such as acetonitrile or chloroform, which
would in turn strongly favor the gauche− trans conforma-
tion of the leucine side chain. Parallel studies of cobalt
dipeptides and alanine dipeptide analogues would also
reveal the extent to which cobalt chelation inﬂuences the
vicinal coupling constants about the Cα–Cβ bond.

A molecular graphic with multiple superimposed struc-
tures is perhaps the most common format for reporting
the presence of multiple conformations in an NMR or
crystallographic protein structure.
It is very tempting
to suppose that the structures displayed in these molec-
ular graphics are correct in every detail and that struc-
tures or side chain conformations not present in these
molecular graphics are extremely unlikely. Gel graphics
such as those presented here for the leucine side chain of
the cobalt dipeptide could supplement common molecu-
lar graphics and give a more realistic picture of protein
conformational distributions.

VI. METHODS

We adopt the convention that a side chain torsion an-
gle is gauche− in the range −120 to 0 degrees, gauche+ in
the range 0 to 120 degrees, and trans in the range −180 to
−120 or 120 to 180 degrees. Torsion angle deﬁnitions and
atom names are speciﬁed by the IUPAC-IUB conventions
and nomenclature [38]. The β and δ-protons are also
identiﬁed according to the Cahn–Ingold–Prelog nomen-
clature scheme [39] for substituents on the Cβ and Cγ
prochiral centers. The torsion angle between two atoms
across a single bond is synclinal in the range −90 to −30
or 30 to 90 degrees and antiperiplanar in the range 150 to
180 or −180 to −150 degrees [40]. These last terms are
very convenient for describing the geometry of vicinally
coupled spin systems.

A. NMR experiments

Barium[glycyl-L-leucinatonitrocobalt(III)] was pre-
pared as previously described [17]. NMR spectra were
recorded at 500 MHz on a Bruker AMX-500 spectrome-
ter. Pure absorption 2D NOESY spectra were obtained
by time-proportional phase incrementation [41] at mix-
ing times of 50, 100, 200, 400, and 800 ms and the cross
relaxation rates were determined by one parameter lin-
ear least-squares ﬁts of the initial build-up rates of the
peak volumes [42]. The standard deviations of the cross
relaxation rates were estimated from the one element
least-squares moment matrices. Cross relaxation rates
within one standard deviation of zero were set equal to

zero. Both homonuclear and heteronuclear vicinal cou-
pling constants were derived from 1D NMR spectra. The
homonuclear couplings were analyzed [43,44] with the
LAOCN-5 program (QCPE #458).

B. Simple models for preliminary β-proton
assignment

The goodnesss-of-ﬁts of the two alternative assign-
ments were compared for two simple models for the ex-
perimental coupling constants across the Cα–Cβ bond.
The two rotational
included only the
isomer model
gauche− and trans χ1 rotational isomers and the three
rotational isomer model included all three χ1 rotational
isomers. For both models the experimental data was lin-
ear least-squares ﬁt with the population sum constrained
to one so that the ﬁrst model had one population param-
eter and the second two parameters. The torsion angles
between the coupled spins were assumed to have ideal
synclinal or antiperiplanar values of magnitude 60 or 180
degrees. The Karplus coeﬃcients for the 3JHα Hβ and
3JC′ Hβ coupling constants were speciﬁcally calibrated
[29,27] for these couplings in peptides without any correc-
tion for cobalt chelation eﬀects. The predicted coupling
constants were assumed to have errors of 1.5 Hz to ac-
commodate uncertainty in both the Karplus coeﬃcients
and geometry.

C. Molecular mechanics

Energy maps on χ1 × χ2 torsion space and cobalt
glycyl-leucine structure coordinates were calculated with
the CHARMM molecular mechanics program [45]. The
CHARMM structure ﬁle internal data structure was
generated from custom made topology and parameter
CHARMM input ﬁles. The custom topology ﬁle con-
tained nonstandard glycine and leucine residues to gen-
erate the peptide portion of the cobalt dipeptide complex
and a patch to add the cobalt and three nitro groups. The
molecular mechanics atomic charges were assigned by a
simple scheme. First the side chain and backbone atomic
charges were set to those of a glycyl-leucine zwitterion.
The net dipeptide charge was then −0.6 because one N-
terminal amine proton and the backbone amide proton
were removed to make cobalt bonds. On the assump-
tion that the nitro group charge magnitudes should be
somewhat less than unity and the cobalt charge should
be slightly positive we then assigned a charge of −0.6 to
each nitro group and 0.4 to cobalt to give the correct
total charge of −2.0 to the complete cobalt dipeptide
anion. Electrostatics interactions were computed at a
dielectric constant of 1.0 and without any distance cut-
oﬀ, except where otherwise noted. Specialized force ﬁeld
parameters for the cobalt dipeptide ring system were
introduced by giving nonstandard atom type codes to

12

all the peptide backbone heavy atoms except for the
leucine α-carbon atom. Bond lengths and bond angles
were taken from a glycyl-glycine cobalt crystallographic
structure [15]. Bond length and bond angle force con-
stants were taken from the force ﬁeld of a polyamine
cobalt complex [33]. The force constants of torsion an-
gles with cobalt in one of the four angle deﬁning positions
were guessed by adopting the torsion angle force con-
stants of standard peptide backbone atoms with roughly
matching orbital hybridization and bonding. A glycyl-
glycine cobalt crystallographic structure [46] gave the
initial Cartesian coordinates of the cobalt dipeptide ring
system. Other ligand heavy atoms of this same structure
gave initial coordinates for the three nitro nitrogens. The
nitro oxygens were then built so that the plane of each
nitro group was in a staggered orientation with respect
to the other cobalt ligand bonds as viewed down each
nitro cobalt bond. An internal coordinate representation
of the leucine side chain was setup during generation of
the CHARMM structure ﬁle. The torsion angle internal
coordinates were set to ideal values deﬁned in the topol-
ogy ﬁle and the bond lengths and angles were ﬁlled in
from the parameter ﬁle. The molecular mechanics en-
ergy map over χ1 and χ2 torsion space was computed
by editing these two torsion angle internal coordinates,
building the side chain Cartesian coordinates from inter-
nal coordinates, restraining the χ1 and χ2 torsion angles
with an energy constant of 400 kcal/mole·rad2, and en-
ergy minimizing by the steepest decent method for 20
steps followed by the adopted basis Newton-Raphson [45]
method for 200 steps. This sequence of edit, build, re-
strain, and minimize was repeated for all 5184 points on
a 5 degree grid in χ1 and χ2 torsion space. The map
was output from CHARMM as a list with each line con-
taining the χ1 and χ2 coordinates and energy at one grid
point. The Cartesian coordinates of the energy mini-
mized dipeptide were temporarily output as a trajectory
ﬁle with one trajectory ﬁle coordinate set for each grid
point. Interatomic distances and torsion angles required
for modeling cross relaxation rates and vicinal coupling
constants were extracted from this temporary trajectory
ﬁle with the CHARMM correlation and time series anal-
ysis command. To account for rotational averaging of the
cross relaxation rate to a methyl group, the three inter-
atomic distances from the methyl protons to the other
cross relaxing atom were inverse sixth root mean inverse
sixth power averaged with CHARMM time series manip-
ulation commands. Each interatomic distance, averaged
interatomic distance, and vicinal spin torsion angle was
output from CHARMM as a separate ﬁle with one dis-
tance or angle on each line and one line for each grid
point.

Compared to the CHARMM 22 developmental topol-
ogy and parameter ﬁles for proteins with all hydrogens
our custom topology ﬁle has similar backbone charges
and side chain charges of about one half the magnitude.
Our peptide parameters are generally similar to those in
the CHARMM 22 developmental parameter ﬁle, except

that we only deﬁne a single tetrahedral carbon atom type
that does not depend on the number of bonded hydro-
gen atoms and our bond angle potential does not have
Urey-Bradley [47] interactions.

A separate FORTRAN program [6] partitioned the
molecular mechanics χ1 × χ2 energy map into energy
well regions. The program employed a cellular automata
that adjusted the regions so that the boundaries passed
through the energy map saddle points and followed along
the ridges leading up to the tops of high energy peaks.
The program named each well, assigned an index to each
well, arranged the indices in a conventional order, and
output a new energy map such that each output line spec-
iﬁed the energy and well index of one grid point. This
cellular automata program is available from the ﬁrst au-
thor of this paper.

D. NMR observables and Monte Carlo simulations

We calculated NMR observables (both NOESY cross
relaxation rates and vicinal coupling constants), ﬁt rota-
tional isomer probabilities, ran Monte Carlo simulation
of probability distributions, and generated graphics with
the MATLAB software package. To accomplish these
tasks we carefully designed and wrote a library of 36 func-
tion ﬁles containing about 1600 lines of MATLAB script.
These functions passed all variables explicitly through in-
put and output argument lists and made no references to
global variables except in one minor instance of a function
passed through an input argument list. Important infor-
mation, such as spin assignments, isomer names, NMR
measurement names, Karplus coeﬃcient selections, and
χ1 × χ2 torsion space grid point coordinates, was passed
explicitly from low level deﬁnition routines back to high
level I/O routines to minimize the possibility of mixing
up array index deﬁnitions.

The NMR observables were calculated by a function
ﬁle that input a list of NOESY cross relaxing protons and
vicinally coupled spins, opened appropriate CHARMM
distance or angle data ﬁles, which are described in the
mechanics methods subsection, and output a matrix of
cross relaxation rates and vicinal coupling constants,
where the matrix had one column for each NMR observ-
able and one row for each distance or angle listed in the
CHARMM ﬁles. To calculate a cross relaxation rate the
molecular mechanics interproton distance read from the
CHARMM data ﬁle was raised to the inverse sixth power
and multiplied by the average of glycine geminal α-proton
and leucine geminal β-proton scale factors, where each
scale factor was equal to the experimental geminal pro-
ton cross relaxation rate times the sixth power of average
molecular mechanics distance between the geminal pro-
tons. The glycine and leucine geminal proton relaxation
rates were 0.39 ± 0.01 s−1 and 0.42 ± 0.01 s−1 respec-
tively. The geminal proton scale factor varied from 13.5
to 13.7 ˚A6s−1 depending on whether the geminal pro-

13

ton distances were averaged over structures at all energy
map grid points or just over the structures of the nine en-
ergy minimized rotational isomers. To calculate a vicinal
coupling constant the function ﬁle selected the Karplus
equation coeﬃcients based on the names in the input
list of vicinally coupled spins and inserted the molec-
ular mechanics vicinal proton torsion angle read from
the CHARMM data ﬁle into a Karplus equation with
the selected coeﬃcients. The Karplus coeﬃcients for the
3JHα Hβ and 3JC′ Hβ coupling constants were speciﬁcally
calibrated [29,27] for these couplings in peptides without
any correction for cobalt chelation eﬀects. The coeﬃ-
cients for the 3JHβ Hγ coupling constant were those sug-
gested [31,20] for the sec-butyl fragment without correc-
tion for the extra carbon substitution on the γ-carbon.
The coeﬃcients for the Hα–Cα–Cβ–Cγ and Cα–Cβ–Cγ–
Hγ heternuclear coupling constants were taken from a ﬁt
to theoretical coupling constants calculated for propane
[48–50].

The molecular mechanics energy,

interproton dis-
tances, vicinal proton torsion angles, and NMR observ-
ables were all computed on a 5 degree χ1 × χ2 torsion
space grid. The average χ1 and χ2 torsion angles and
average NMR observables of each rotational isomer were
computed by Boltzmann weighted summation over each
energy well region in χ1 × χ2 torsion space. To aver-
age the χ1 and χ2 torsion angles over an energy well
region these angles were referenced to the minimum en-
ergy grid point so that they varied continuously in the
range −180 to 180 degrees in this energy well region. We
assessed the eﬀect of thermal motions by comparing the
average NMR observables of each rotational isomer with
the observables at the average χ1 × χ2 torsion angles,
at the χ1 × χ2 energy map minimum position, and at
the ideal geometry χ1 and χ2 torsion angles. The NMR
observables at the average torsion angles were computed
by interpolating the observables between χ1 × χ2 torsion
space grid points with a bicubic spline. The energy map
minima positions were approximated by the minima of
the interpolating function. To assess the accuracy of this
approximation we repeated the molecular mechanics en-
ergy minimization at the minimum energy grid point in
each of the nine energy wells, except that during the last
100 steps of adopted basis Newton-Raphson minimiza-
tion the χ1 and χ2 torsion angle restraints were released.
The χ1 and χ2 torsion angles of these minimized unre-
strained structures diﬀered from the interpolated energy
map minimum positions by less than about one half de-
gree for all the energy wells except for the highly an-
harmonic trans gauche− and trans trans energy wells,
where the torsion angles diﬀered from the interpolated
positions by about one and one half degrees. Given these
small diﬀerences in χ1 and χ2 torsion angles we assumed
that the diﬀerences between the distances, angles, and
NMR observables interpolated to the energy map min-
ima positions and those calculated from the minimized
unrestrained structures would also be small. We arbi-
trarily decided to calculate the NMR observables at the

χ1 × χ2 energy map minimum positions from the mini-
mized unrestrained structures rather than calculate them
by interpolating the observables between χ1 × χ2 torsion
space grid points.

To ﬁnd the rotational isomer probabilities we mini-
mized the diﬀerence between the experimentally mea-
sured and predicted NOESY cross relaxation rates and
vicinal coupling constants subject to the constraints that
the probabilities were nonnegative and that their sum
was one. The design matrix was formed by calculating
the NMR observables for each rotational isomer as de-
scribed in the last two paragraphs, arranging these ob-
servables in a matrix with one row for each observable
and one column for each rotational isomer, and dividing
each matrix element in each row by the observation er-
ror for that row. The observation vector was formed by
dividing element-wise the column vector of experimental
measurements by the column vector of observation er-
rors. The observation errors were the RMS average of
the experimental measurement errors (Table II) and er-
rors in the predicted NMR observables due to uncertainty
in the Karplus coeﬃcients and molecular mechanics ge-
ometries. The predicted NOESY cross relaxation rates
were assumed to have uncorrelated errors of 0.01 s−1 and
the predicted vicinal coupling constants were assumed
to have uncorrelated errors of 1.0 Hz. The linear least-
squares with linear constraints problem was converted to
the equivalent [51] quadratic programming problem and
solved by an active set strategy [52].

The accuracies of the ﬁt rotational isomer probabili-
ties were estimated from Monte Carlo probability den-
sity functions and from the diagonal elements of a mo-
ment matrix. We setup an unconstrained linear least-
squares subproblem with the number of rotational iso-
mer probability parameters equal to one less than the
number of inactive nonnegative probability constraints.
The desired moment matrix was obtained by transforma-
tion [53] of the subproblem moment matrix to generate
matrix elements for the probability parameter that was
removed to enforce the probability sum constraint. The
probability density functions of the ﬁt rotational isomer
probabilities (parameters) were computed by the stan-
dard Monte Carlo recipe [34]: the experimental NMR
observables were ﬁt to yield ﬁt parameters and ﬁt NMR
observables, the ﬁt parameters and ﬁt NMR observables
were assumed to be the true parameters and the error
free experimental NMR observables, random errors were
added to the ﬁt NMR observables to give simulated NMR
observables, these simulated NMR observables were ﬁt to
give simulated ﬁt parameters, the previous two steps were
repeated may times and the resulting large set of simu-
lated ﬁt parameters was histogramed to form the Monte
Carlo probability density functions of the ﬁt parameters
(rotational isomer probabilities). To keep the simulated
NMR observables nonnegative the random errors were
drawn from appropriately truncated Gaussian distribu-
tions. These distributions were generated by a simple
acceptance-rejection method, that is, if one sample drawn

14

from a standard Gaussian distribution would have given
a negative value to a particular NMR observable then
that sample was discarded and a new sample was drawn
and tested in the same way. When the standard devi-
ations of the Monte Carlo probability density functions
were signiﬁcantly smaller than the ﬁt rotational isomer
probabilities, that is, when none of the ﬁt rotational iso-
mer probabilities were near zero, the Monte Carlo stan-
dard deviations were almost exactly equal to the moment
matrix standard deviations.

E. Gel graphics

Monte Carlo probability density functions were dis-
played as gel graphics, which were designed to visually in-
dicate both the discrete probability fraction at zero pop-
ulation and shape of the continuous probability density
over the range of population from zero and one. This was
accomplished by a simulated photographic process where
the degree of ﬁlm overexposure indicates the probability
fraction at zero population and continuous gray tones
represent the continuous part of the probability density.
The continuous part of the probability density was pre-
ﬁltered to reduce the noise from the Monte Carlo sam-
pling. The preﬁlter consisted of two cycles of alternating
extrapolation and Gaussian smoothing. The ﬁrst cycle
estimated the probability density at zero population by
evenly extrapolating the probability density about zero
population and then smoothing. In the second cycle the
original probability density was oddly extrapolated about
the just determined probability density at zero popula-
tion and then smoothed. The standard deviation of the
smoothing in the ﬁrst cycle was half that in the second cy-
cle. We speak of this second cycle standard deviation as
the preﬁlter standard deviation. This somewhat cumber-
some preﬁlter procedure smoothed the continuous part
of the probability density without introducing distortion
near zero population, where the probability density typi-
cally has a positive value and a nonzero slope. Note that
this positive value is distinct from the discrete probabil-
ity fraction at zero population, which is not preﬁltered.
The preﬁltering eliminated noise from the Monte Carlo
sampling, which would otherwise show up as distract-
ing transverse stripes across the gel lanes. We exam-
ined the convergence of the probability density functions
by repeating Monte Carlo simulations with increasing
numbers of steps and comparing conventional probabil-
ity density plots and gel graphics. The preﬁlter standard
deviation was adjusted to remove Monte Carlo sampling
noise without visibly obscuring the shape of the proba-
bility density. For simulations of length 103, 104, and
105 steps the appropriate standard deviation expressed
as the full width at half max (FWHM) was 32, 16, and
8 histogram bins, where 1024 bins covered the popula-
tion range from zero to one. At 103 steps substantial
ﬂuctuations in the shape of the conventional plots were

15

observed, but the gel graphics had at least qualitatively
converged to their ﬁnal appearance. At 105 steps only
tiny diﬀerences were observed in the conventional plots
and the diﬀerences in the gel graphics were impercepti-
ble. The gel graphics presented here were created from
Monte Carlo simulations of 105 steps, even though simu-
lations as short as 103 steps would be adequate for many
purposes.

After preﬁltering an initial image was formed with the
probability density functions of the rotational isomers
displayed in lanes 1024 rows long by 64 columns wide.
In this initial image the values across each row were con-
stant and equal to the probability of ﬁnding the popula-
tion in bins of width 1/1024 covering the range zero to
one, except that the values across bottom row of each
lane contained the discrete probability fraction at zero
population. The probability of ﬁnding the population in
a given bin is proportional to the bin width and inversely
proportional to the total number of bins, but the prob-
ability fraction at zero population is independent of the
bin width. Because of the relatively high resolution of
the image the probability fraction at zero population is
about an order of magnitude larger than the probability
of ﬁnding the population in another bin. For this rea-
son the probability fraction at zero population can be
eﬀectively displayed as a ﬁlm overexposure.

To simulate ﬁlm overexposure at zero population and
smooth the lane edges along the continuous part of the
probability distribution a Gaussian blur ﬁlter with a
FWHM of 16 pixels was applied to the initial image.
With this amount of blurring the typical probability den-
sity at zero population was still considerably greater than
that along the continuous part of the probability dis-
tribution. The pixel values of the blurred image were
treated like scene luminances [54] and converted into pho-
tographic print densities. First, the maximum printable
luminance Lm was set equal to the maximum probabil-
ity in the continuous part of the probability distributions,
that is, excluding the probability fractions at zero popu-
lation. The logarithm of the luminance L was converted
to density with a characteristic curve [55] given by (3x2 −
2x3)10 log 2, where x = 1+(log L−log Lm)/(10 log 2) and
0 ≤ x ≤ 1. Note that the maximum point-gamma of our
characteristic curve is 1.5. Then the printable densities
were linearly mapped into gray scale values. A stepwedge
bar of the 11 zones in the Zone System [56] was added
to the gel graphic as an aid to calibrating the probability
densities.

All the calculations described in this method section
were done on a 12 processor SGI Challenge XL com-
puter system. This manuscript was formatted with the
LATEX 2ε markup language and the REVTEX macro set
[57].

F. Supporting information available

[20] A. A. Bothner-By, Adv. Mag. Res. 1, 195 (1965).
[21] K. D. Kopple, G. R. Wiley, and R. Tauke, Biopolymers

Molecular mechanics, data analysis, and gel graphics
input ﬁles and additional data tables [58], which are suﬃ-
cient to reproduce all the results reported here, are given
in a supplementary section at the end of the e-print ver-
sion of this paper [59] and are deposited in the Physics
Auxiliary Publication Service of the American Institute
of Physics [60].

ACKNOWLEDGMENTS

We thank Martin Karplus for access to the c22g2 re-
lease of the CHARMM 22 program system and thank
Roland L. Dunbrack, Jr. for providing the torsion angle
list for constructing the region-of-interest rotamer library
[61]. We are grateful to the National Institutes of Health
(GM 34847) for ﬁnancial support of this study.

∗

Please
haydock.christopher@mayo.edu.

address

correspondence

to

[1] A. C. Wang and A. Bax, J. Am. Chem. Soc. 118, 2483

(1996).

[2] F. T. Burling, W. I. Weis, K. M. Flaherty, and A. T.

Br¨unger, Science 271, 72 (1996).

[3] M. M. Teeter, M. S. Roe, and N. H. Heo, J. Mol. Biol.

230, 292 (1993).

[4] Y. Karimi-Nejad et al., Biochemistry 33, 5481 (1994).
[5] ˇZ. Dˇzakula, A. S. Edison, W. M. Westler, and J. L.

Markley, J. Am. Chem. Soc. 114, 6200 (1992).

[6] C. Haydock, J. Chem. Phys. 98, 8199 (1993).
[7] T. J. You and D. Bashford, Biophys. J. 69, 1721 (1995).
[8] N. A. Wilson, E. Barbar, J. A. Fuchs, and C. Woodward,

Biochemistry 34, 8931 (1995).

[9] G. J. Kleywegt and T. A. Jones, Structure 3, 535 (1995).
[10] A. T. Br¨unger et al., Science 261, 328 (1993).
[11] E. Benedetti, G. Morelli, G. N´emethy, and H. A. Scher-

aga, Int. J. Peptide Protein Res. 22, 1 (1983).

[12] H. Schrauber, F. Eisenhaber, and P. Argos, J. Mol. Biol.

230, 592 (1993).

1, 334 (1994).

543 (1993).

57, 577 (1984).

[14] R. L. Dunbrack Jr and M. Karplus, J. Mol. Biol. 230,

[15] B. V. Prelesnik and R. M. Herak, Croatica Chemica Acta

12, 627 (1973).

24, 447 (1970).

[22] G. C. K. Roberts and O. Jardetzky, Adv. Prot. Chem.

[23] A. J. Fischman, H. R. Wyssbrod, W. C. Agosta, and D.

Cowburn, J. Am. Chem. Soc. 100, 54 (1978).

[24] G. M. Whitesides, J. P. Sevenair, and R. W. Goetz, J.

Am. Chem. Soc. 89, 1135 (1967).

[25] Z. L. M´adi, C. Griesinger, and R. R. Ernst, J. Am. Chem.

Soc. 112, 2908 (1990).

[26] V. F. Bystrov, Prog. NMR Spectrosc. 10, 41 (1976).
[27] A. J. Fischman et al., J. Am. Chem. Soc. 102, 2533

[28] A. DeMarco, M. Llin´as, and K. W¨uthrich, Biopolymers

17, 617 (1978).

[29] M. T. Cung and M. Marraud, Biopolymers 21, 953

[30] H. Kessler, C. Griesinger, and K. Wagner, J. Am. Chem.

Soc. 109, 6927 (1987).

[31] K. G. R. Pachler, J. Chem. Soc. Perkin Trans. II, 1936

[32] G. Ostler et al., FEBS Lett. 318, 177 (1993).
[33] D. A. Buckingham et al., J. Am. Chem. Soc. 96, 1713

(1980).

(1982).

(1972).

(1974).

[34] W. H. Press, B. P. Flannery, S. A. Teukolsky, and W. T.
in Numerical Recipes in Pascal: The Art
Vetterling,
of Scientiﬁc Computing, 1st ed. (Cambridge University
Press, Cambridge, 1989), Chap. 14, pp. 582–584.

[35] W. Feller, in An Introduction to Probability Theory and
Its Applications, 2nd ed. (John Wiley, New York, 1971),
Vol. 2, Chap. V, pp. 138–143.

[36] C. L. Brooks III and D. A. Case, Chem. Rev. 93, 2487

[37] V. Madison and K. D. Kopple, J. Am. Chem. Soc. 102,

(1993).

4855 (1980).

[38] IUPAC-IUB Commission on Biochemical Nomenclature

(CBN), Biochemistry 9, 3471 (1970).

[39] D. Voet and J. G. Voet, in Biochemistry, 2nd ed. (John

Wiley, New York, 1995), Chap. 4, p. 66.

[40] W. Klyne and V. Prelog, Experientia 16, 521 (1960).
[41] D. Marion and K. W¨uthrich, Biochem. Biophys. Res.

Commun. 113, 967 (1983).

[42] J. Fejzo, Z. Zolnai, S. Macura, and J. L. Markley, J.

Magn. Reson. 82, 518 (1989).

[43] S. M. Castellano and A. A. Bothner-By, J. Chem. Phys.

41, 3863 (1964).

41, 2087 (1964).

[45] B. R. Brooks et al., J. Comp. Chem. 4, 187 (1983).
[46] R. Herak et al., Revue de Chimie min´erale 19, 282 (1982).
[47] C. L. Brooks III, M. Karplus, and B. M. Pettitt, Adv.

Chem. Phys. 71, 1 (1988).

[48] E. Breitmaier and W. Voelter, in Carbon-13 NMR Spec-
troscopy: High-Resolution Methods and Applications in
Organic Chemistry and Biochemistry, 3rd ed. (VCH Ver-
lagsgesellschaft, Weinheim, 1990), Chap. 3, p. 143.
[49] R. Wasylishen and T. Schaefer, Can. J. Chem. 51, 961

[50] R. Wasylishen and T. Schaefer, Can. J. Chem. 50, 2710

[16] H. C. Freeman, M. J. Healy, and M. L. Scudder, J. Biol.

Chem. 252, 8840 (1977).

[17] N. Jurani´c, V. Liki´c, T. Parac, and S. Macura, J. Chem.

Soc. Perkin Trans. 2, 1805 (1993).

[18] M. Karplus, J. Am. Chem. Soc. 85, 2870 (1963).
[19] C. A. G. Haasnoot, F. A. A. M. de Leeuw, and C. Altona,

(1973).

Tetrahedron 36, 2783 (1980).

16

[13] R. L. Dunbrack Jr and M. Karplus, Nature struct. Biol.

[44] R. C. Ferguson and D. W. Marquardt, J. Chem. Phys.

g−t

g−g+

g−g−

tg−

 tt 

tg+

χ2

180
 
 
 
 
 
 
120
 
 
 
 
 
 
60
 
 
 
 
 
 
0
 
 
 
 
 
 
−60
 
 
 
 
 
 
−120
 
 
 
 
 
 
−180
 
 
 
−180

g+t

g+g+

g+g−

 

 

 

 

 
 
−120

 

 

 

 
 
−60

 

 

 

 

 

 

 

 

 

 

 
60

 

 

 

 

 
 
 
120

 

 

 

 
 
180

 
0
χ1

FIG. 1. Molecular mechanics energy map for rotational iso-
merization of cobalt dipeptide leucine side chain. Contour
levels are dashed, 1, 3, 5, 7, 9; solid, 2, 4, 6, 8, 10 kcal/mol.
Zero corresponds to −39.4 kcal/mol. The nine rotational iso-
mers are labeled at the position of their energy well minima.
The background shading shows the energy well boundaries
and the torsion space regions for averaging the NOESY cross
relaxation and vicinal coupling constants.

(1972).

[51] P. E. Gill, W. Murray, and M. H. Wright, in Practical
Optimization (Academic Press, London, 1981), Chap. 5,
p. 180.

[52] P. E. Gill, W. Murray, M. A. Saunders, and M. H. Wright,

ACM Trans. Math. Software 10, 282 (1984).

[53] H. Cram´er,

in Mathematical Methods of Statistics
(Princeton University Press, Princeton, 1946), Chap. 22,
p. 296.

[54] E. F. Zalewski, in Handbook of Optics, 2nd ed., edited
by M. Bass (McGraw-Hill, New York, 1995), Vol. II,
Chap. 24.

[55] R. W. G. Hunt, in The Reproduction of Colour, ﬁfth ed.

(Fountain Press, England, 1995), Chap. 6, pp. 82–106.

[56] A. Adams, in The Negative, Vol. 2 of The Ansel Adams
Photography Series, ﬁrst paperback ed. (Little, Brown,
Boston, 1995), Chap. 4, pp. 46–97.

[57] The

REVTEX

be
macro
downloaded from the American Physical Society home
page at http://www.aps.org/ .

can

set

[58] The supporting information includes CHARMM input
ﬁles to generate energy minimized rotational
isomers
without and with torsion restraints and to extract the
vicinal coupling torsion angles and NOESY interatomic
distances, crystallographic coordinates of cobalt dipep-
tide chelate rings with added nitro groups, cobalt glycyl-
leucine dipeptide topology and parameter ﬁles, MAT-
LAB version 4 M-ﬁles to calculate NMR observables,
ﬁt rotational isomer probabilities, simulate Monte Carlo
probability distributions, and to generate gel graphics,
tables of torsion angles and interatomic distances of the
energy minimized rotational isomers without torsion re-
straints and of vicinal coupling constants and NOESY
cross relaxation rates calculated at these angles and dis-
tances.

[59] See the Los Alamos e-print archive paper number
physics/9905027. You can navigate the available archives
on the Web, starting at http://xxx.lanl.gov/ .

[60] See AIP Document No. E-PAPS:

. E-PAPS docu-
ment ﬁles may be retrieved free of charge from the AIP
FTP server at http://www.aip.org/epaps/epaps.html or
from ftp.aip.org in the directory /epaps/. For further in-
formation, email: paps@aip.org; or fax: 516-576-2223.
[61] The torsion angle list can be downloaded from the
backbone-dependent rotamer library Web page through
a hyperlink to the ﬁle of dihedral angles for all chains at
http://www.fccc.edu/research/labs/dunbrack/sidechain.html
.

17

1.0

   

0.8

   

0.6

   

0.4

   

0.2

   

0.0

g−g− g+g− tg−

g−g+ g+g+ tg+

g−t

g+t

 tt 

g−g− g+g− tg−

g−g+ g+g+ tg+

g−t

g+t

 tt 

 

 

 0  

 I  

 II 

III 

 IV 

 V  

 VI  VII  VIII

 IX 

 X  

FIG. 2. Gel graphic of rotational isomer population prob-
abilities. The graphic shows Monte Carlo probability density
functions for constrained linear least-squares parameter esti-
mates, where the parameters are the rotational isomer proba-
bilities. Each gray scale step of the stepwedge bar corresponds
to a two-fold change in probability density. The least-squares
ﬁt has NMR measurement, Karplus equation coeﬃcient, and
molecular mechanics geometry errors and has the gauche+
gauche+ rotational
isomer population ﬁxed at zero. The
gauche+ gauche+ probability density function shows the un-
measurable population range.

 0  

 I  

 II 

III 

 IV 

 V  

 VI  VII  VIII

 IX 

 X  

FIG. 3. Gel graphic of rotational isomer population prob-
abilities with Karplus equation coeﬃcient and molecular me-
chanics geometry errors removed. The least-squares ﬁt has
only NMR measurement errors. Note the ten-fold expanded
vertical scale, which places the prominent trans gauche+ and
gauche
trans rotational isomers oﬀ scale. All other rota-
tional isomers populations are ﬁxed at zero. Their probability
density functions show the unmeasurable population ranges.
The forbidden gauche+ gauche
rotational isomer is not in-
cluded.

−

−

0.10

    

0.08

    

0.06

    

0.04

    

0.02

    

0.00

18

TABLE I. Proton assignments. Shifts are in ppm. The
atom Hβ1 and atoms Hδ1 are pro-R and the atom Hβ2 and
atoms Hδ2 are pro-S.

Hα
Hβ1
Hβ2

δ
4.1710
1.8125
1.5440

Hγ
Hδ1
Hδ2

δ
1.6582
0.8700
0.8200

TABLE II. Experimental NMR data. The NOESY cross
relaxation rate units are s−1 and the vicinal coupling constant
units are Hz. The standard deviations are estimated as de-
scribed in the experimental methods section. A plus rather
than plus and minus sign is placed between a zero value and
standard deviation solely to indicate the fact that the mea-
sured quantities are theoretically nonnegative.

RHα Hβ1
RHα Hβ2
RHα Hγ
RHβ2 Hγ
RHα Hδ1
RHα Hδ2
RHβ1 Hδ1
RHβ1 Hδ2
RHβ2 Hδ1
RHβ2 Hδ2
3JHα Hβ1
3JHα Hβ2
3JHβ1 Hγ
3JHβ2 Hγ
3JHα Cγ
3JCα Hγ
3JC′ Hβ1
3JC′ Hβ2

0.038 ± 0.010
0.041 ± 0.010
0.013 ± 0.003
0.040 ± 0.020
0.0 + 0.005
0.014 ± 0.003
0.023 ± 0.010
0.0 + 0.002
0.0 + 0.002
0.022 ± 0.010
7.381 ± 0.042
4.549 ± 0.034
4.999 ± 0.034
8.070 ± 0.059
3.0 ± 2.0
5.0 ± 2.0
5.3 ± 0.5
4.2 ± 0.5

19

----------------------------------------------------------------------
| Molecular Mechanics File:
isomer.inp
----------------------------------------------------------------------
* isomer.inp
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
* Energy minimized structures of leucine side chain rotational isomers.
* ++++++++
* C. Haydock
*

6-May-1996

set 4 400 ! Torsion constraints [Kcal/(mole*rad**2)].
bomlev -1 ! Don’t bomb out with non-integer charge warning.

open unit 1 form read name -

/fgp/e/haydock/dip/mechanics/toppar/toph22_haydk.inp

read rtf card unit 1
close unit 1

open unit 1 form read name -

/fgp/e/haydock/dip/mechanics/toppar/param22_haydk.inp

read parameter card unit 1
close unit 1

read sequence card
* Trinitro cobalt GLY LEU dipeptide.
*

2

GLY LEU

!{* Generate PSF *}
generate DIP setup
patch COGL warn DIP 1 DIP 2

!{* Save the PSF. *}
open unit 1 form write name isomer.psf
write psf card unit 1
* isomer.psf
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
*
close unit 1

!{* Get the crystallographic coordinates. *}
rename resname GLY selection resid 2 end
open unit 1 form read name -

/fgp/e/haydock/dip/mechanics/xtal/tncogg.chr

read coor card unit 1
close unit 1
rename resname LEU selection resid 2 end

(ENER)

(Chi_1) (Chi_2)

!{* Copy crystallographic coordinates, get missing ic’s and setup loop. *}
define XTAL selection init end
coor copy comp selection XTAL end
ic param
open unit 2 write form name isomer.dat
write title unit 2
** isomer.dat
** Trinitro cobalt GLY LEU dipeptide.
** ++++++++
** (isomer)
**
set 9 1 ! Isomer counter.
label loop_isomer
!{*----------------------------*}
if 9 eq 1 set 1 -75 ! Chi-1
if 9 eq 1 set 2 -45 ! Chi-2
if 9 eq 1 set 3 "g_minus_g_minus"
!{*----------------------------*}
if 9 eq 2 set 1
60 ! Chi-1
if 9 eq 2 set 2 -75 ! Chi-2
if 9 eq 2 set 3 "g_plus_g_minus "
!{*----------------------------*}
if 9 eq 3 set 1 -135 ! Chi-1
if 9 eq 3 set 2 -65 ! Chi-2
if 9 eq 3 set 3 "trans_g_minus
"
!{*----------------------------*}
if 9 eq 4 set 1 -70 ! Chi-1
if 9 eq 4 set 2 105 ! Chi-2
if 9 eq 4 set 3 "g_minus_g_plus "
!{*----------------------------*}
if 9 eq 5 set 1
if 9 eq 5 set 2
if 9 eq 5 set 3 "g_plus_g_plus
"
!{*----------------------------*}
if 9 eq 6 set 1 -170 ! Chi-1
if 9 eq 6 set 2
60 ! Chi-2
if 9 eq 6 set 3 "trans_g_plus
"
!{*----------------------------*}
if 9 eq 7 set 1 -70 ! Chi-1
if 9 eq 7 set 2 175 ! Chi-2
if 9 eq 7 set 3 "g_minus_trans
"
!{*----------------------------*}
if 9 eq 8 set 1
60 ! Chi-1
if 9 eq 8 set 2 135 ! Chi-2
if 9 eq 8 set 3 "g_plus_trans
"
!{*----------------------------*}
if 9 eq 9 set 1 -170 ! Chi-1
if 9 eq 9 set 2 125 ! Chi-2
if 9 eq 9 set 3 "trans_trans
"
!{*----------------------------*}
trim 3 from 2 to 16
set 3 @3

50 ! Chi-1
80 ! Chi-2

!{* Setup initial structure with specified Chi-1 and Chi-2. *}
coor init
coor copy selection XTAL end
ic edit
dihe 2 N
2 CA 2 CB 2 CG @1
dihe 2 CA 2 CB 2 CG 2 CD1 @2
end
ic build

!{* Minimize structure and align with crystallographic coordinates.
const dihed force @4 mini @1 -

*}

DIP 2 N DIP 2 CA DIP 2 CB DIP 2 CG

const dihed force @4 mini @2 -

DIP 2 CA DIP 2 CB DIP 2 CG DIP 2 CD1
minimize sd nstep 20 step 0.02 nprint 10 -

elec atom switch cdie eps 1.0 vdw vatom vswitch -

cutnb 50.0 ctofnb 46.0 ctonnb 30.0 wmin 1.0

minimize abnr nstep 100 step 0.02 nprint 10 -

elec atom switch cdie eps 1.0 vdw vatom vswitch -

cutnb 50.0 ctofnb 46.0 ctonnb 30.0 wmin 1.0

const cldh
minimize abnr nstep 100 step 0.02 nprint 10 -

elec atom switch cdie eps 1.0 vdw vatom vswitch -

cutnb 50.0 ctofnb 46.0 ctonnb 30.0 wmin 1.0

coor orient rms selection XTAL .and. .not. hydrogen end

!{* Write out final structure. *}
open unit 1 form write name isomer_@3.chr
write coord card unit 1
* isomer_@3.chr
* Trinitro cobalt GLY GLY dipeptide.
* ++++++++
* Energy minimized coordinates.

*

!{* Write out final energy. *}
write title unit 2
* @3 @1 @2
*

?ENER

incr 9 by 1
if 9 le 9 goto loop_isomer

stop
----------------------------------------------------------------------
| Molecular Mechanics File: map/map.inp
----------------------------------------------------------------------
* map.inp
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
* Map energy in Chi-1, Chi-2 torsion space.
* ++++++++
* C. Haydock
*

1-May-1996

set 4 400 ! Torsion constraints [Kcal/(mole*rad**2)].
bomlev -1 ! Don’t bomb out with non-integer charge warning.

open unit 1 form read name -

/fgp/e/haydock/dip/mechanics/toppar/toph22_haydk.inp

read rtf card unit 1
close unit 1

open unit 1 form read name -

/fgp/e/haydock/dip/mechanics/toppar/param22_haydk.inp

read parameter card unit 1
close unit 1

read sequence card
* Trinitro cobalt GLY LEU dipeptide.
*

2

GLY LEU

!{* Generate PSF *}
generate DIP setup
patch COGL warn DIP 1 DIP 2

!{* Get the crystallographic coordinates.
rename resname GLY selection resid 2 end
open unit 1 form read name -

*}

/fgp/e/haydock/dip/mechanics/xtal/tncogg.chr

read coor card unit 1
close unit 1
rename resname LEU selection resid 2 end

!{* Save crystallographic coordinates, get missing ic’s and setup loop. *}
define XTAL selection init end
coor copy comp selection XTAL end
ic param
open unit 1 write form name map.dat
write title unit 1
** map.dat
** Trinitro cobalt GLY LEU dipeptide.
** ++++++++
** Torsion constraint = @4
** (Chi_1) (Chi_2)
**
* Number_Increments 72
* End_Header
*
open unit 2 write unform name map.crd
trajectory iwrite 2 nfile 5184 skip 1 delta 0
* map.crd
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
*
set 2 -175 ! Chi-2 angle.
label loop_chi_2
set 1 -175 ! Chi-1 angle.
label loop_chi_1

(ENER)

!{* Setup initial structure with specified Chi-1 and Chi-2. *}
coor init
coor copy selection XTAL end
ic edit
dihe 2 N 2 CA 2 CB 2 CG @1
dihe 2 CA 2 CB 2 CG 2 CD1 @2
end
ic build

!{* Setup torsion constraints. *}
const cldh
const dihed force @4 mini @1 -

DIP 2 N

DIP 2 CA DIP 2 CB DIP 2 CG

const dihed force @4 mini @2 -

DIP 2 CA DIP 2 CB DIP 2 CG DIP 2 CD1

!{* Minimize structure.
minimize sd nstep 20 step 0.02 nprint 10 -

*}

elec atom switch cdie eps 1.0 vdw vatom vswitch -

cutnb 50.0 ctofnb 46.0 ctonnb 30.0 wmin 1.0

minimize abnr nstep 200 step 0.02 nprint 10 -

elec atom switch cdie eps 1.0 vdw vatom vswitch -

cutnb 50.0 ctofnb 46.0 ctonnb 30.0 wmin 1.0

!{* Write out final energies and coordinates. *}
write title unit 1
* @1 @2 ?ENER
*
trajectory write

incr 1 by 5
if 1 le 180 goto loop_chi_1
incr 2 by 5
if 2 le 180 goto loop_chi_2
close unit 1

stop
----------------------------------------------------------------------
| Molecular Mechanics File: minimum/geometry.inp
----------------------------------------------------------------------
* geometry.inp
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
* Distances and torsion angles for NMR model.
* ++++++++
* C. Haydock
*

7-May-1996

open unit 1 form read name ../isomer.psf
read psf card unit 1
close unit 1

!{* Write isomer trajectory. *}
open unit 2 write unform name geometry.crd
trajectory iwrite 2 nfile 9 skip 1 delta 0
* geometry.crd
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++

S1

* g-g- isomer
* g+g- isomer
* t g- isomer
* g-g+ isomer
* g+g+ isomer
* t g+ isomer
* g-t isomer
* g+t isomer
* t t isomer
*
set 9 1 ! Isomer counter.
label loop_trajectory
if 9 eq 1 set 3 g_minus_g_minus
if 9 eq 2 set 3 g_plus_g_minus
if 9 eq 3 set 3 trans_g_minus
if 9 eq 4 set 3 g_minus_g_plus
if 9 eq 5 set 3 g_plus_g_plus
if 9 eq 6 set 3 trans_g_plus
if 9 eq 7 set 3 g_minus_trans
if 9 eq 8 set 3 g_plus_trans
if 9 eq 9 set 3 trans_trans
coor init
open unit 1 read form name ../isomer_@3.chr
read coord card unit 1
close unit 1
trajectory write
incr 9 by 1
if 9 le 9 goto loop_trajectory

!{* Check trajectory file read. *}
open unit 1 read unform name geometry.crd
coor dyna first 1 begin 1 stop 9 nskip 1
open unit 1 write form name geometry.chr
write coord card unit 1
* geometry.chr
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
* Average coordinates.
*

!{* Inter-proton distances for modeling nuclear Overhauser enhancements. *}
set 9 1 ! Inter-proton distance counter.
label loop_noe
!{*----------------*}
if 9 eq 1 set 1 ha
if 9 eq 1 set 2 hb1
!{*----------------*}
if 9 eq 2 set 1 ha
if 9 eq 2 set 2 hb2
!{*----------------*}
if 9 eq 3 set 1 ha
if 9 eq 3 set 2 hg
!{*----------------*}
if 9 eq 4 set 1 hb1
if 9 eq 4 set 2 hg
!{*----------------*}
if 9 eq 5 set 1 hb2
if 9 eq 5 set 2 hg
!{*----------------*}
if 9 eq 6 set 1 hb1
if 9 eq 6 set 2 hb2
!{*----------------*}
if 9 eq 7 set 1 ha1
if 9 eq 7 set 2 ha2
!{*----------------*}
open unit 1 read unform name geometry.crd
open unit 2 write form name geometry_@1_@2.dat
correl maxtimesteps 512 maxseries 2 maxatoms 100 ! Default values.
if 9 ne 7 enter noe distance DIP 2 @1 DIP 2 @2
if 9 eq 7 enter noe distance DIP 1 @1 DIP 1 @2
trajectory firstu 1 begin 1 stop 9 skip 1
write noe unit 2 dumb
* No title
*
end
incr 9 by 1
if 9 le 7 goto loop_noe

!{* Measure 1/r^6 averaged distances. *}
set 9 1 ! Inter-proton distance counter.
label loop_ave_noe
!{*----------------*}
if 9 eq 1 set 1 ha
if 9 eq 1 set 2 hd1
!{*----------------*}
if 9 eq 2 set 1 ha
if 9 eq 2 set 2 hd2
!{*----------------*}
if 9 eq 3 set 1 hb1
if 9 eq 3 set 2 hd1
!{*----------------*}
if 9 eq 4 set 1 hb1
if 9 eq 4 set 2 hd2
!{*----------------*}
if 9 eq 5 set 1 hb2
if 9 eq 5 set 2 hd1
!{*----------------*}
if 9 eq 6 set 1 hb2
if 9 eq 6 set 2 hd2
!{*----------------*}
open unit 1 read unform name geometry.crd
open unit 2 write form name geometry_@1_@2.dat
open unit 11 write form name geometry_@1_@21.dat
open unit 12 write form name geometry_@1_@22.dat
open unit 13 write form name geometry_@1_@23.dat
correl maxtimesteps 512 maxseries 3 maxatoms 100
enter noe1 distance DIP 2 @1 DIP 2 @21
enter noe2 distance DIP 2 @1 DIP 2 @22
enter noe3 distance DIP 2 @1 DIP 2 @23
trajectory firstu 1 begin 1 stop 9 skip 1
write noe1 unit 11 dumb
* No title
*
write noe2 unit 12 dumb
* No title
*
write noe3 unit 13 dumb
* No title
*
mantime noe1 ipower -6
mantime noe2 ipower -6
mantime noe3 ipower -6
mantime noe1 add noe2
mantime noe1 add noe3
mantime noe1 divide 3
mantime noe1 log
mantime noe1 divide -6
mantime noe1 exp
write noe1 unit 2 dumb
* No title
*
end
incr 9 by 1
if 9 le 6 goto loop_ave_noe

!{* Torsion angles for modeling JJ coupling constants. *}
set 9 1 ! Torsion angle counter.

label loop_jj
!{*----------------*}
if 9 eq 1 set 1 ha
if 9 eq 1 set 2 ca
if 9 eq 1 set 3 cb
if 9 eq 1 set 4 hb1
!{*----------------*}
if 9 eq 2 set 1 ha
if 9 eq 2 set 2 ca
if 9 eq 2 set 3 cb
if 9 eq 2 set 4 hb2
!{*----------------*}
if 9 eq 3 set 1 hb1
if 9 eq 3 set 2 cb
if 9 eq 3 set 3 cg
if 9 eq 3 set 4 hg
!{*----------------*}
if 9 eq 4 set 1 hb2
if 9 eq 4 set 2 cb
if 9 eq 4 set 3 cg
if 9 eq 4 set 4 hg
!{*----------------*}
if 9 eq 5 set 1 ha
if 9 eq 5 set 2 ca
if 9 eq 5 set 3 cb
if 9 eq 5 set 4 cg
!{*----------------*}
if 9 eq 6 set 1 ca
if 9 eq 6 set 2 cb
if 9 eq 6 set 3 cg
if 9 eq 6 set 4 hg
!{*----------------*}
if 9 eq 7 set 1 c
if 9 eq 7 set 2 ca
if 9 eq 7 set 3 cb
if 9 eq 7 set 4 hb1
!{*----------------*}
if 9 eq 8 set 1 c
if 9 eq 8 set 2 ca
if 9 eq 8 set 3 cb
if 9 eq 8 set 4 hb2
!{*----------------*}
if 9 eq 9 set 1 n
if 9 eq 9 set 2 ca
if 9 eq 9 set 3 cb
if 9 eq 9 set 4 cg
!{*----------------*}
if 9 eq 10 set 1 ca
if 9 eq 10 set 2 cb
if 9 eq 10 set 3 cg
if 9 eq 10 set 4 cd1
!{*----------------*}
open unit 1 read unform name geometry.crd
open unit 2 write form name geometry_@1_@2_@3_@4.dat
correl maxtimesteps 512 maxseries 2 maxatoms 100 ! Default values.
enter jj dihedral DIP 2 @1 DIP 2 @2 DIP 2 @3 DIP 2 @4
trajectory firstu 1 begin 1 stop 9 skip 1
write jj unit 2 dumb
* No title
*
end
incr 9 by 1
if 9 le 10 goto loop_jj

!{* Backbone torsion angles. *}
open unit 1 read unform name geometry.crd
open unit 2 write form name geometry_backbone.dat
correl maxtimesteps 512 maxseries 4 maxatoms 100 ! Default values.
enter psi1 dihedral DIP 1 n DIP 1 ca DIP 1 c DIP 2 n
enter omg1 dihedral DIP 1 ca DIP 1 c DIP 2 n DIP 2 ca
enter phi2 dihedral DIP 1 c DIP 2 n DIP 2 ca DIP 2 c
enter psi2 dihedral DIP 2 n DIP 2 ca DIP 2 c DIP 2 oct1
trajectory firstu 1 begin 1 stop 9 skip 1
write all unit 2 dumb
* No title
*
end

stop
----------------------------------------------------------------------
| Molecular Mechanics File: average/geometry.inp
----------------------------------------------------------------------
* geometry.inp
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
* Distances and torsion angles for NMR model.
* ++++++++
* C. Haydock
*

16-Jul-1996

open unit 1 form read name ../isomer.psf
read psf card unit 1
close unit 1

!{* Check trajectory file read. *}
open unit 1 read unform name ../map/map.crd
coor dyna first 1 begin 1 stop 5184 nskip 1
open unit 1 write form name geometry.chr
write coord card unit 1
* geometry.chr
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
* Average coordinates.
*

!{* Inter-proton distances for modeling nuclear Overhauser enhancements. *}
set 9 1 ! Inter-proton distance counter.
label loop_noe
!{*----------------*}
if 9 eq 1 set 1 ha
if 9 eq 1 set 2 hb1
!{*----------------*}
if 9 eq 2 set 1 ha
if 9 eq 2 set 2 hb2
!{*----------------*}
if 9 eq 3 set 1 ha
if 9 eq 3 set 2 hg
!{*----------------*}
if 9 eq 4 set 1 hb1
if 9 eq 4 set 2 hg
!{*----------------*}
if 9 eq 5 set 1 hb2
if 9 eq 5 set 2 hg
!{*----------------*}
if 9 eq 6 set 1 hb1
if 9 eq 6 set 2 hb2
!{*----------------*}
if 9 eq 7 set 1 ha1
if 9 eq 7 set 2 ha2
!{*----------------*}
open unit 1 read unform name ../map/map.crd
open unit 2 write form name geometry_@1_@2.dat
correl maxtimesteps 8192 maxseries 2 maxatoms 100
if 9 ne 7 enter noe distance DIP 2 @1 DIP 2 @2
if 9 eq 7 enter noe distance DIP 1 @1 DIP 1 @2
trajectory firstu 1 begin 1 stop 5184 skip 1
write noe unit 2 dumb

S2

* No title
*
end
incr 9 by 1
if 9 le 7 goto loop_noe

!{* Measure 1/r^6 averaged distances. *}
set 9 1 ! Inter-proton distance counter.
label loop_ave_noe
!{*----------------*}
if 9 eq 1 set 1 ha
if 9 eq 1 set 2 hd1
!{*----------------*}
if 9 eq 2 set 1 ha
if 9 eq 2 set 2 hd2
!{*----------------*}
if 9 eq 3 set 1 hb1
if 9 eq 3 set 2 hd1
!{*----------------*}
if 9 eq 4 set 1 hb1
if 9 eq 4 set 2 hd2
!{*----------------*}
if 9 eq 5 set 1 hb2
if 9 eq 5 set 2 hd1
!{*----------------*}
if 9 eq 6 set 1 hb2
if 9 eq 6 set 2 hd2
!{*----------------*}
open unit 1 read unform name ../map/map.crd
open unit 2 write form name geometry_@1_@2.dat
open unit 11 write form name geometry_@1_@21.dat
open unit 12 write form name geometry_@1_@22.dat
open unit 13 write form name geometry_@1_@23.dat
correl maxtimesteps 8192 maxseries 3 maxatoms 100
enter noe1 distance DIP 2 @1 DIP 2 @21
enter noe2 distance DIP 2 @1 DIP 2 @22
enter noe3 distance DIP 2 @1 DIP 2 @23
trajectory firstu 1 begin 1 stop 5184 skip 1
write noe1 unit 11 dumb
* No title
*
write noe2 unit 12 dumb
* No title
*
write noe3 unit 13 dumb
* No title
*
mantime noe1 ipower -6
mantime noe2 ipower -6
mantime noe3 ipower -6
mantime noe1 add noe2
mantime noe1 add noe3
mantime noe1 divide 3
mantime noe1 log
mantime noe1 divide -6
mantime noe1 exp
write noe1 unit 2 dumb
* No title
*
end
incr 9 by 1
if 9 le 6 goto loop_ave_noe

!{* Torsion angles for modeling JJ coupling constants. *}
set 9 1 ! Torsion angle counter.
label loop_jj
!{*----------------*}
if 9 eq 1 set 1 ha
if 9 eq 1 set 2 ca
if 9 eq 1 set 3 cb
if 9 eq 1 set 4 hb1
!{*----------------*}
if 9 eq 2 set 1 ha
if 9 eq 2 set 2 ca
if 9 eq 2 set 3 cb
if 9 eq 2 set 4 hb2
!{*----------------*}
if 9 eq 3 set 1 hb1
if 9 eq 3 set 2 cb
if 9 eq 3 set 3 cg
if 9 eq 3 set 4 hg
!{*----------------*}
if 9 eq 4 set 1 hb2
if 9 eq 4 set 2 cb
if 9 eq 4 set 3 cg
if 9 eq 4 set 4 hg
!{*----------------*}
if 9 eq 5 set 1 ha
if 9 eq 5 set 2 ca
if 9 eq 5 set 3 cb
if 9 eq 5 set 4 cg
!{*----------------*}
if 9 eq 6 set 1 ca
if 9 eq 6 set 2 cb
if 9 eq 6 set 3 cg
if 9 eq 6 set 4 hg
!{*----------------*}
if 9 eq 7 set 1 c
if 9 eq 7 set 2 ca
if 9 eq 7 set 3 cb
if 9 eq 7 set 4 hb1
!{*----------------*}
if 9 eq 8 set 1 c
if 9 eq 8 set 2 ca
if 9 eq 8 set 3 cb
if 9 eq 8 set 4 hb2
!{*----------------*}
if 9 eq 9 set 1 n
if 9 eq 9 set 2 ca
if 9 eq 9 set 3 cb
if 9 eq 9 set 4 cg
!{*----------------*}
if 9 eq 10 set 1 ca
if 9 eq 10 set 2 cb
if 9 eq 10 set 3 cg
if 9 eq 10 set 4 cd1
!{*----------------*}
open unit 1 read unform name ../map/map.crd
open unit 2 write form name geometry_@1_@2_@3_@4.dat
correl maxtimesteps 8192 maxseries 2 maxatoms 100
enter jj dihedral DIP 2 @1 DIP 2 @2 DIP 2 @3 DIP 2 @4
trajectory firstu 1 begin 1 stop 5184 skip 1
write jj unit 2 dumb
* No title
*
end
incr 9 by 1
if 9 le 10 goto loop_jj

!{* Backbone torsion angles. *}
open unit 1 read unform name ../map/map.crd
open unit 2 write form name geometry_backbone.dat
correl maxtimesteps 8192 maxseries 4 maxatoms 100
enter psi1 dihedral DIP 1 n
enter omg1 dihedral DIP 1 ca DIP 1 c DIP 2 n DIP 2 ca
enter phi2 dihedral DIP 1 c
enter psi2 dihedral DIP 2 n

DIP 2 n DIP 2 ca DIP 2 c
DIP 2 ca DIP 2 c DIP 2 oct1

DIP 1 ca DIP 1 c DIP 2 n

trajectory firstu 1 begin 1 stop 5184 skip 1
write all unit 2 dumb
* No title
*
end

stop
----------------------------------------------------------------------
| Molecular Mechanics File: xtal/tncogg.chr
----------------------------------------------------------------------
* TNCOGG.CHR
* Trinitro cobalt GLY GLY dipeptide.
* ++++++++
* R. Herak et al., Revue de Chimie Minerale 19:282-290 (1982).
* Aminocarboxylatoglycylglycinatonitrocobaltate(III):
* + H(5),H(6),N(2),C(4),C(3),O(12) --> HT1,HT2,N,CA,C,O
* +
* +
* +
* +
* +
* ++++++++
*

N(1),C(2),C(1),O(1),O(11) --> N,CA,C,OCT1,OCT2

O(2) --> N1
N(3) --> N2
N(4) --> N3

Co --> MCO

21
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21

1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
2
2
2
2

HT1
HT2
N
CA
C
O
MCO
N1
O11
O12
N2
O21
O22
N3
O31
O32
N
CA
C
OCT1
OCT2

1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
1 GLY
2 GLY
2 GLY
2 GLY
2 GLY
2 GLY

7.10748 DIP
6.17445 DIP
7.10885 DIP
8.24495 DIP
8.98451 DIP
9.76798 DIP
7.24386 DIP
5.75733 DIP
5.84272 DIP
4.69639 DIP
8.29983 DIP
9.36780 DIP
7.91390 DIP
6.00019 DIP
5.12402 DIP
6.05661 DIP
8.69410 DIP
9.27265 DIP
8.49193 DIP
7.62339 DIP
8.76360 DIP

0.25245
8.97736
1.72040
8.82682
1.24542
8.55449
2.03549
9.12242
2.77414
7.97151
3.71849
8.24521
6.62272
1.13518
6.53459 -0.08508
5.78410 -1.06722
7.15064
0.08814
6.70702 -0.51518
6.09209 -0.64335
7.40953 -1.45999
2.61052
6.43742
2.61105
5.56138
3.57994
7.20695
2.28888
6.82881
2.79939
5.59443
2.14769
4.44215
1.26038
4.73090
2.44315
3.29261

0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
0.00000
----------------------------------------------------------------------
| Molecular Mechanics File: toppar/toph22_haydk.inp
----------------------------------------------------------------------
* ++++++++
* Topology file for Charmm Version 22
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
*
* Out of plane nitrates: /
-N2
*
\
*
*
O22
|
*
|
* O11
\
*
|
N1--MCO--N
*
|
*
/
|
* O12
*
|
*
*
*
*

OCT1--C HA HB2
|
OCT2

\
CA--CB--CG-HG
/\ |

O31
/
-N3
\
O32

HT1-N--CA-HA2

HD21 HD22

HD11 HD12

CD1--HD13

CD2--HD23

HT2 HA1

HB1
|

| /

| \

O21

C=O

|

|

\

/

\

/

1.00800 H ! Terminal amine hydrogens
1.00800 H ! Aliphatic hydrogens
12.01100 C ! LEU aliphatic carbons
14.00670 N ! Nitro nitrogen not in dipeptide ring plane
15.99940 O ! Dipeptide bond carbonyl and nitro oxygen
58.9332 Co ! Cobalt
14.00670 N ! Nitro nitrogen in dipeptide ring plane
14.00670 N ! Terminal amine nitrogen
14.00670 N ! Dipeptide bond amide nitrogen
12.01100 C ! GLY aliphatic carbon
12.01100 C ! Both carbonyl carbons
15.99940 O ! Terminal carbonyl oxygen not bound to cobalt
15.99940 O ! Terminal carbonyl oxygen bound to cobalt

AUTOGENERATE ANGLES DIHE
DEFAULT FIRST NTER LAST CTER

0.65 ! Amino terminal glycine of Cobalt dipeptide.

HT2 N

HA1

CA

O

+N

N
CA

CA
HA2

O

C

C

CA

*CA HA1
*CA HA2

0.0000
0.0000

0.00 120.00
0.00 240.00

0.00
0.00

0.0000
0.0000

-1.25 ! Carboxy terminal leucine of Cobalt dipeptide.

22

MASS
MASS
MASS
MASS
MASS
MASS
MASS
MASS
MASS
MASS
MASS
MASS
MASS

0
2 HC
3 HA
10 CT
38 NO2
40 O
99 MCO
235 NOP
236 NTY
237 NPY
238 CTY
239 CY
240 OCY
241 OCC

DECL -CA
DECL -C
DECL -O
DECL +N
DECL +H
DECL +CA
DECL -N

RESI GLY
GROUP

NTY

ATOM N
ATOM HT1 HC
ATOM HT2 HC
ATOM CA
ATOM HA1 HA
ATOM HA2 HA

CTY

GROUP

ATOM C
ATOM O

CY
O
BOND HT1 N
BOND C
+N
IMPH C
DONO HT1 N
DONO HT2 N
C
ACCE O
C
N
IC
IC
C
N
PATCH FIRST NONE

CA

RESI LEU
GROUP

ATOM N
ATOM CA
ATOM HA

GROUP

NPY
CT
HA

CT
ATOM CB
ATOM HB1 HA
ATOM HB2 HA
CT
ATOM CG
ATOM HG
HA
ATOM CD1 CT
ATOM HD11 HA
ATOM HD12 HA
ATOM HD13 HA
ATOM CD2 CT
ATOM HD21 HA
ATOM HD22 HA
ATOM HD23 HA

GROUP

-0.30
0.35
0.35
0.10
0.05
0.05

0.60
-0.55

-0.40
0.10
0.05

-0.10
0.05
0.05
-0.05
0.05
-0.15
0.05
0.05
0.05
-0.15
0.05
0.05
0.05

ATOM C
ATOM OCT1 OCC

CY

0.14 ! Same as carbonyl carbon.

-0.57 ! Cobalt ligand.

S3

-0.57 ! Same as carbonyl carbon.

CB

CG
OCT1 C
CB
CD1 HD13

HB1

OCT1 OCT2

CD1 CG
OCT2 C
CB
CD2 HD21

HB2

CD2 CG
CA
C
CG
HG
CD2 HD22

CD1
CD2

HD11
HD23

*CA CB
*CA HA
CB
CG
*CB HB1
*CB HB2
CG
CD1
*CG CD2
*CG HG
CD1 HD11
*CD1 HD12
*CD1 HD13
CD2 HD21
*CD2 HD22
*CD2 HD23

0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000

0.00 120.00
0.00 240.00
0.00 180.00
0.00 120.00
0.00 240.00
0.00 180.00
0.00 120.00
0.00 240.00
0.00 180.00
0.00 120.00
0.00 240.00
0.00 180.00
0.00 120.00
0.00 240.00

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000
0.0000

-1.40 ! Patch residue for trinitro Cobalt GLY LEU dipeptide

ATOM OCT2 OCY

CA
CA
HA
HD12
CA

BOND CB
BOND N
BOND CA
BOND CD1
IMPH C
ACCE OCT1 C
ACCE OCT2 C
C
N
IC
C
N
IC
CA
N
IC
CA
CG
IC
CA
CG
IC
CB
CA
IC
CB
CD1
IC
CD1
IC
CB
CG
CB
IC
HD11 CG
IC
HD11 CG
IC
CB
IC
CG
HD21 CG
IC
IC
HD21 CG
PATCH LAST NONE

PRES COGL
GROUP

GROUP

ATOM 1MCO

MCO

0.40

ATOM 1N1
ATOM 1O11
ATOM 1O12

NOP -0.30
-0.15
O
-0.15
O

ATOM 1N2
ATOM 1O21
ATOM 1O22

NO2 -0.30
-0.15
O
-0.15
O

GROUP

GROUP

ATOM 1N3
ATOM 1O31
ATOM 1O32

NO2 -0.30
-0.15
O
-0.15
O

1O11 1N1
1N

1MCO 2N

1O12

1N2
1O21 1N2
1MCO 2OCT1 1MCO 1N1

1O22

1N3
1MCO 1N2

1O31 1N3

1MCO

1O32
1N3

1O12 1O11
1O22 1O21
1O32 1O31

1N1
1N
2N

1N1
1N2
1N3
1MCO 1N
1MCO 1N2
1MCO 1N2
1N
2N
2OCT1 1MCO

1MCO 1HT2
1MCO 2CA

1N1
1N2
1N3
1MCO 1N

1MCO
1MCO
1MCO

1MCO 1O12
1MCO 1O22
1MCO 1O32

1N1
1N2
1N3
1MCO 2OCT1 2N
1MCO 1N3
1MCO 1N3
1N
2N

2OCT1 1MCO 1N2
1MCO 1N2
1N1
1N
1MCO 1CA
1MCO

1MCO

2N
1MCO
2OCT1 1MCO
1MCO
1N1

2OCT1
1N3
1N3

BOND 1N1
BOND 1MCO
ANGLE 1O11
ANGLE 1O21
ANGLE 1O31
ANGLE 1N1
ANGLE 1N
ANGLE 2N
ANGLE 1HT1
ANGLE 1C
ANGLE 2C
DIHE 1C
1CA
DIHE 1HA1
1CA
DIHE 1HA2
1CA
DIHE 2C
2CA
DIHE 2CB
2CA
DIHE 2HA
2CA
DIHE 1CA
1C
DIHE 1O
1C
2C
DIHE 2CA
DIHE 2OCT2 2C
DIHE 2C
DIHE 2C
DIHE 1C
DIHE 1C
DIHE 2CA
DIHE 2CA
DIHE 1CA
DIHE 1CA
DIHE 1CA
DIHE 1CA
DIHE 1O11
DIHE 1O12
DIHE 1O21
DIHE 1O22
DIHE 1O31
DIHE 1O32
DIHE 1O11
DIHE 1O12
DIHE 1O21
DIHE 1O22
DIHE 1O31
DIHE 1O32
IMPH 2N
IMPH 1N1
IMPH 1N2
IMPH 1N3
IMPH 1MCO
IMPH 1MCO
IMPH 1MCO

1MCO
1N
1MCO
1N
1MCO
1N
1MCO
2N
1MCO
2N
1MCO
2N
1MCO
2N
2N
1MCO
2OCT1 1MCO
2OCT1 1MCO

2OCT1 1MCO 1N2
2OCT1 1MCO 1N3
1MCO 1N2
2N
1MCO 1N3
2N
1MCO 1N2
2N
1MCO 1N3
2N
1MCO 2N
1HT1 1N
1MCO 1N1
1HT1 1N
1MCO 1N2
1HT1 1N
1MCO 1N3
1HT1 1N
1MCO 2OCT1
1O11 1N1
1MCO 2OCT1
1O12 1N1
1MCO 2OCT1
1O21 1N2
1MCO 2OCT1
1O22 1N2
1MCO 2OCT1
1O31 1N3
1MCO 2OCT1
1O32 1N3
1MCO 1N3
1O11 1N1
1MCO 1N3
1O12 1N1
1MCO 2N
1O21 1N2
1MCO 2N
1O22 1N2
1MCO 2N
1O31 1N3
1MCO 2N
1O32 1N3

2C
2OCT1 1MCO 2N
2C
2OCT1 1MCO 1N1
1MCO 1N
1C
2N
1MCO 2OCT1 1C
2N
1MCO 1N
2CA
2N
1MCO 2OCT1 2CA
2N
1MCO 2N
1N
1MCO 1N1
1N
1MCO 1N2
1N
1MCO 1N3
1N
1MCO 1N
1N1
1MCO 1N
1N1
1MCO 1N
1N2
1MCO 1N
1N2
1MCO 1N
1N3
1MCO 1N
1N3
1MCO 1N2
1N1
1MCO 1N2
1N1
1MCO 1N1
1N2
1MCO 1N1
1N2
1MCO 1N1
1N3
1MCO 1N1
1N3
1C
1MCO
2CA
1MCO 1O11 1O12
1MCO 1O21 1O22
1MCO 1O31 1O32
2N
2N
1N2

2OCT1 1N1
1N2
1N1
2OCT1 1N3

1MCO 2N
1MCO 2N
1MCO 1N2

1N
1N3
1N

1N1
1N1
1N3

1HT2 1N
1HT2 1N
1HT2 1N
1HT2 1N

1MCO
1MCO
1MCO
1MCO

2N
1N1
1N2
1N3

toppar/param22_haydk.inp

<<<<<<<<<< THE DISCLAIMER >>>>>>>>>>

END
----------------------------------------------------------------------
| Molecular Mechanics File:
----------------------------------------------------------------------
* ++++++++
* Parameter file for Charmm version 22
* Trinitro cobalt GLY LEU dipeptide.
* ++++++++
*
!
! This parameter input file is provided only as a complete
! record of the molecular mechanics parameters of this work.
! It has been validated only in the sence that the properties
! of interest in this work did not seem to be too sensitive
! to the values of the chelate ring parameters, see main text.
! These chelate ring parameters have NOT been adjusted to fit
! measured spectra or other properties of dipeptide chelate rings.
! Though this is a fully working parameter input file it is NOT
! intended for uncritical application to cobalt dipeptide molecular
! mechanics calculations. Instead it is provided for the purpose
! of comparison with other parameter sets and as a detailed example
! of how to obtain parameters for the cobalt dipeptide by adapting
! and supplementing an existing set of protein parameters.
!
!
! Comments following parameters indicate their similarity
! to the set of developmental parameters for proteins with all hydrogens
! found in the Charmm 22.0 release c22g2 file par_all22_prot_b3.inp.
! The reference numbers in square brackets following chelate ring
! parameters refer to the following references:
! 1. Buckingham, D. A., Cresswell, P. J., Dellaca, R. J., Dwyer, M.,
!
!
!
!
!
! 2. Prlesnik, B. V. and Herak, R. M. (1984).
!
!
!
! Conversion factors for energy constants (= 1/2 force constant):
!
!
!
! The special geometry of the Cobalt dipeptide ring system is accommodated
! by introducing nonstandard atom types for the peptide backbone as follows:
!

Gainsford, G. J., Marzilli, L. G., Maxwell, I. E., Robinson, W. T.,
Sargeson, A. M., and Turnbull, K. R. (1974).
Structure, conformational analysis, and properties of diastereomeric
forms of beta_1-glycinatotriethylenetetraminecobalt(III) ions.
Journal of the American Chemical Society 96:1713--1725.

The crystal structure of trans(N0_2,N=C--CH_3)-(N-ethylidene-
-ethylenediamine)glycylglycinatonitrocobalt(III) monohydrate,
[Co(glygly)NO_2(CH_3CH=en)]*H_2O. Croatica Chemica Acta 57:577--585.

10^5 dyne*cm-1*molecule-1 = 143.86 Kcalorie*mole-1*Angstrom-2
10^-11 ergs*radian-2*molecule = 143.86 Kcalorie*mole-1*radian-2

<<<<<<<<<< END >>>>>>>>>>

O21

O31

O

O

C

"

"

\

/

\

/

|

/

\

O

O

\

O

O

\

|

/

|

\

/

/

"

"
"

"
"

CY

"
"
"

C=O

| \

| /

"
"
"
"

HA
|

HA
|

HC
|

CT
HA
CY

HB1
|

CT
CTY

CD2-HD23

CD1-HD13

HT2 HA1

O(3)-C(3)

HD11 HD12

HD21 HD22

-NO2 -NO2

\
CY=O
/

HT1-N--CA-HA2

HC-NTY--CTY-HA

CT-HA
| \
HA HA

HA HA
| /
CT-HA

N(2)-Co(1)-N(1) [2]

/
-N3
\
O32

[2]
[2]
[2]
[2]
[2]
[2]
[2]

CT
CT
CT
CY
NPY CY

\
CT--CT--CT-HA
/\

\
CA--CB--CG-HG
/\ |

OCC--CY HA HA
|
OCY

OCT1--C HA HB2
|
OCT2

N(1)-C(3)-C(4) [2]
N(2)-C(4)-C(3) [2]
N(1)-C(2)-C(1) [2]

CT2 C
CT2 HB
NH3 HC
"
NH3 CT2 no U-B

|
|
|
NOP--MCO--NPY
|
|
|

309.0
330.0
403.0
222.5
250.0
250.0
525.0
525.0
200.0
320.0
370.0
362.0
362.0
125.9
125.9
125.9
125.9
125.9
620.0

C(2)-N(1)-C(3) [2]
Co(1)-N(2)-C(4) [2]
Co(1)-N(1)-C(3) [2]
Co(1)-N(1)-C(2) [2]
Co(1)-O(1)-C(1) [2]

CT2
CT2
HC
CT2
C(3)-C(4)
C
C(1)-C(2)
C
O(2)-C(1)
CC
"
O(1)-C(1)
CT2 N(2)-C(4)
CT1 N(1)-C(2)
N(1)-C(3)
C
O
(CHARMm 22)
"

58.35
52.00
50.00
28.77
28.77
28.77
28.77
26.50
35.50
50.00
51.50
48.00
50.00
36.00
44.00
44.00
30.00
70.00
80.00
43.70
50.00
48.91
48.91
48.91
48.91
48.91
48.91
48.91
48.91
80.00
80.00
160.00
160.00
60.00
60.00
40.00
40.00
100.00

113.60 ! CT2 CT2 CT2 no U-B
108.00 ! CT2 CT1 CC
122.90 ! CT1 NH1 C
108.60 ! Co-N-C [1]
117.20 !
115.50 !
114.30 ! Co-O-C [1]
CT2 CT2 no U-B
110.10 ! HA
CT2 HA
no U-B
109.00 ! HA
109.50 ! HB
CT1 CC
107.50 ! NH3 CT2 HB
108.00 ! NH1 CT1 HB
109.50 ! HB
115.00 ! HB
109.50 ! HC
109.50 ! "
109.50 ! HC
113.50 ! NH1 CT1 CT2
112.80 ! NH1 C
CT2
110.20 ! NH3 CT2 C
107.40 ! NH1 CT1 CC
90.00 ! N-Co-N [1]
90.00 !
83.60 !
90.00 !
95.75 !
95.75 ! N-Co-O [1]
84.90 !
90.00 !
O(3)-C(3)-C(4) [2]
C
120.00 ! O
C
O(3)-C(3)-N(1) [2]
127.20 ! O
NO2 O (CHARMm 22) O(4)-N(5)-O(5) [2]
119.70 ! O
119.70 ! "
"
120.15 ! Force const. guess.
120.15 !
117.5
119.8
122.7

1.111 ! HA
1.080 ! HB
1.040 ! NH3
1.530 ! CT2
1.509 ! CT2
1.519 ! CT1
1.233 ! OC
1.296 ! "
1.504 ! NH3
1.436 ! NH1
1.321 ! NH1
1.220 ! NO2
1.220 !
1.932 ! Co-N [1] Co(1)-N(5) [2]
1.932 !
Co(1)-N(2) [2]
1.944 !
1.881 !
Co(1)-N(1) [2]
1.911 ! Co-O [1] Co(1)-O(1) [2]
[2]
1.247 ! O

! Out of plane nitrates: /
-N2
!
\
!
!
O22
!
|
! O11
|
|
\
!
N1--MCO--N
!
|
!
/
|
! O12
!
|
!
!
!
!
BONDS
CT
HA
CTY
HA
NTY
HC
CT
CT
CTY CY
CY
CT
OCY
CY
CY
OCC
NTY CTY
NPY CT
NPY CY
NO2 O
NOP O
MCO NO2
MCO NOP
MCO NTY
MCO NPY
MCO OCC
O
!
ANGLES
CT
CT
CT
CTY NTY MCO
NPY MCO
CY
NPY MCO
CT
OCC MCO
CY
CT
HA
CT
HA
CT
HA
CTY NTY
HA
CT
HA
NPY
CTY CY
HA
CTY HA
HA
NTY HC
HC
NTY MCO
HC
HC
NTY CTY
NPY CT
NPY CY
NTY CTY CY
NPY CT
CY
NPY MCO NO2
NOP MCO NO2
NTY MCO NPY
NTY MCO NO2
NTY MCO NOP
OCC MCO NOP
OCC MCO NPY
OCC MCO NO2
CTY
CY
O
CY
O
NPY
NO2 O
O
NOP O
O
NOP MCO
O
O
NO2 MCO
OCC CY
OCY CY
OCY CY
!
DIHEDRALS
CT
CT
CT
CT
CT
CT
CT
HA
CT
HA
CT
HA
CT
HA
CTY NTY
CY
CTY NTY
CY
CTY NTY
HA
CTY NTY
HA
NPY
CT
CY
NPY
CT
CT
NPY
CT
HA
NPY
CT
CY
NPY
CT
CT
NPY
HA
CT
CTY
NPY CY
CTY
NPY CY
CTY
CY
O
CTY
O
CY
CT
OCC CY
CT
OCY CY
CT
OCC CY
CT
OCY CY
CT
OCC CY
CT
OCY CY
NPY
CTY CY
NPY
CTY CY
NPY
CTY CY
NPY
CY
O
NPY
CY
O
OCC
CT
CY
OCC
OCY CY
OCC MCO
CY
OCC MCO
CY
OCC MCO
CY
NPY MCO
CY
NPY MCO
CY
NPY MCO
CY
NPY MCO
CT
NPY MCO
CT
NPY MCO
CT
NTY MCO
X
NO2 MCO
X
X
NOP MCO
!
IMPROPER
CTY NPY
CY
OCC
CY
CT
NPY CY
CT
NO2 MCO O
NOP MCO O
X
MCO X
X
MCO X
!
NBONDED NBXMOD 5 ATOM CDIEL SWITCH VATOM VDISTANCE VSWITCH -
CUTNB 50.0 CTOFNB 46.0 CTONNB 30.0 EPS 1.0 E14FAC 0.5 WMIN 1.5
!
CY

CT1 CT2
0.200 3
CT1 CT2
0.200 3
"
0.200 3
"
0.200 3
"
0.200 3
"
0.200 3
"
0.200 3
CT2 NH3
0.100 3
"
0.100 3
"
0.100 3
"
0.100 3
CT1 NH1
1.600 1 180 ! CC
0 ! CT2 CT1 NH1
0.300 1
CT1 NH1
0 ! HB
0.000 1
NH1 CT1
0 ! H
0.000 1
NH1 CT1
0 ! H
0.000 1
0 ! HB
CT1 NH1
0.000 1
0 ! NH3 CT2 C
0.400 1
0 ! NH1 C
0.000 1
C
0 ! O
0.000 1
C
0 ! O
0.000 1
CC
0 ! OC
0.160 3
"
0 ! "
0.160 3
CC
0 ! OC
0.160 3
"
0 ! "
0.160 3
CC
0 ! OC
0.160 3
0 ! "
"
0.160 3
1.600 1
0 ! CT2 C
2.500 2 180 ! CT2 C
2.500 2 180 ! H
2.500 2 180 ! O
2.500 2 180 ! O
2.500 2 180 ! Force const. guess. > LEU C--O
2.500 2 180 !
2.500 2 180 ! Force const. guess (delocalized bond).
2.500 2 180 !
0.000 2
0 !
1.500 2 180 !
1.500 2 180 !
0.000 2
0 !
1.500 2 180 !
1.500 2 180 !
0 !
0.000 2
0 ! Force const. guess (12-fold NH3).
0.100 3
0 ! Force const. guess (4-fold NO2).
0.100 4
0 !
0.100 4

0 ! O
0 ! OC
0 ! Force const. guess (planar amide).
0 ! C
0 ! "
0 ! Force const. guess (4-coordinate planes).
0 !

X
X and X
"
"
"
"
"
"
"
"
"
"
X \
"
" /
" /
C \
C \
C
CC
CT2 /
H /
NH1 \
HB
NH3 /
HB /
CT2 \
"
HB
"
NH1 /
" /
CT1 \
CT1 \
CT2
CT1 /
H

CT
NPY
CY
CT
HA
NPY
CY
HC
MCO
HC
MCO
CY
CY
CY
MCO
MCO
MCO
NTY
HA
NTY
HA
CT
CT
HA
HA
NPY
NPY
CT
CT
MCO
CT
MCO
MCO
MCO
NPY
NOP
NO2
NTY
OCC
NO2
NTY
OCC
NO2
X
X
X

120.00
O
96.00
OCY
80.00
MCO
90.00
O
O
90.00
NOP 100.00
NO2 100.00

(360-83.6-84.9)/2
(360-83.6-84.9)/2
N(1)-Co(1)-O(1) [2]

0 ! X
0 ! X
0 ! "
0 ! "
0 ! "
0 ! "
0 ! "
0 ! X
0 ! "
0 ! "
0 ! "

O(1)-C(1)-C(2) [2]
O(2)-C(1)-C(2) [2]
O(1)-C(1)-O(2) [2]

"
CT1 no U-B
"
OC

CT3 X
"
"
"
"
"
"
"
"
"
"

CT2
CT2
CT2
CT1
"
CT1
"
CT1
"
NH1
NH1

NO2 (CHARMm 22)
"

NH1 C
C
C

CT1
"
"
"
"
"

CT
CT
CT
CT
CT
CT
CT

> GLY N--CA

> GLY CA--C

> LEU N--CA

> LEU CA--C

! OC
! "
! OC

> GLY C--N

CT
CT
OCC

"
"
"
"
"
"
"
"

"
"
"
"
"
"
"
"

"
"
"
"
"
"
"
"

"
"
"
"
"
"
"
"

"
"
"
"
"
"
"
"

-0.1100

0
0
0
0
0
0
0

no U-B

2.2500

NH1
NH1

CT2
NH1

CC
"
CC

"
"
"
"
"

C
CC

! C

"
"
"

X
X

X
X

X
"

X
"

"

\

"

"

"

"

\

"

"

"

0

"

"

/

"

"

"

/

/

"

"

"

"

S4

0

0
0

N%Y

0
0
0
0
0
0
0

-0.0100

! HA
! HC

! OC
! MFE (CHARMm 22)

1.9000 ! CT2

-0.2000
-0.1200

1.5500 ! NH1
1.4000 ! O

2.1750
1.3200
0.2245
1.8500
1.7000
1.7000
1.4650

-0.0550
-0.0220
-0.0460
-0.2000
-0.1200
-0.1200
-0.0200

4 REXP 6 HAEX 0 AAEX 0 NOACCEPTORS HBNOEXCLUSIONS ALL -

CT*
HA
HC
N*
O
OC*
MCO
!
! HBOND for analysis only
HBOND AEXP
CUTHB 0.5 CTOFHB 5.0 CTONHB 4.0 CUTHA 5.0 CTOFHA 90.0 CTONHA 90.0
!
O*
!
END
----------------------------------------------------------------------
| MATLAB v4 M-file: tes3
----------------------------------------------------------------------
select_speed=1;
most_likely_model=[1 0 1 1 1 1 1 1 1];
[0 0 0 0 0 1 1 0 0];
pdb_model=
pentagon_model=
[0 0 0 1 1 1 1 1 0];
geometry_basepath=’/fgp/e/haydock/dip/mechanics’;
map_basefile=’/fgp/e/haydock/dip/mechanics/map/map’;
select_geometry=3;
for select_assignment=[1:4];

2.9000

0.000

output_basefile=...

[’test’,’_a’,int2str(select_assignment),’g’,int2str(select_geometry)];

model(select_assignment,select_geometry,select_speed,...

most_likely_model,pdb_model,pentagon_model,...
geometry_basepath,map_basefile,output_basefile);

end
----------------------------------------------------------------------
| MATLAB v4 M-file: model
----------------------------------------------------------------------
function model(select_assignment,select_geometry,select_speed,...

most_likely_model,pdb_model,pentagon_model,...
geometry_basepath,map_basefile,output_basefile);

% MODEL Model NMR data.
% Open output file.
fid=fopen([output_basefile,’.out’],’w’);
% Get observations.
[spin_names,chemical_shifts,...

noe_jj_names,noe_jj_values,noe_jj_errors_low]=...

assign_observations(select_assignment,1);

[spin_names,chemical_shifts,...

noe_jj_names,noe_jj_values,noe_jj_errors_high]=...

assign_observations(select_assignment,2);

% Setup design matrix.
[design_matrix,observation_vector,...

torsions,isomer_names,observable,geometry,conversion_type,...
t_rms_diff_map_minima,o_rms_diff_average]=...
setup_design_matrix(noe_jj_names,noe_jj_values,noe_jj_errors_high,...
geometry_basepath,map_basefile,select_geometry);
if (length(most_likely_model)~=size(isomer_names,1))

error(’Bad most likely model length.’);

end
if (length(pdb_model)~=size(isomer_names,1))

error(’Bad PDB model length.’);

end
% Analyze most likely model.
model_analyze(design_matrix,observation_vector,most_likely_model,...

select_speed,[output_basefile,’_most_likely’],fid,’Most likely model:’,...
isomer_names,noe_jj_names,noe_jj_values,noe_jj_errors_high);

% Find simplest model.
[simplest_model,goodness_tmp,...

report,idx_simplest,idx_most_likely]=...
select_simplest(design_matrix,observation_vector,most_likely_model);

% Analyze simplest model.
model_analyze(design_matrix,observation_vector,simplest_model,...

select_speed,[output_basefile,’_simplest’],fid,’Simplest model:’,...
isomer_names,noe_jj_names,noe_jj_values,noe_jj_errors_high);

% Analyze pdb model.
pdb_observations=...

model_analyze(design_matrix,observation_vector,pdb_model,...
select_speed,[output_basefile,’_pdb’],fid,’PDB model:’,...
isomer_names,noe_jj_names,noe_jj_values,noe_jj_errors_high);

% Analyze pdb model with experimental, hydrogen distance, and Karplus errors.
pdb_observ_vector_high=pdb_observations./noe_jj_errors_high;
model_analyze(design_matrix,pdb_observ_vector_high,most_likely_model,...

select_speed,[output_basefile,’_pdb_reality’],fid,’PDB w/ real errors:’,...
isomer_names,noe_jj_names,pdb_observations,noe_jj_errors_high);

% Setup design matrix for experimental errors only.
num_isomers=size(design_matrix,2);
design_matrix_low=...

design_matrix.*((noe_jj_errors_high./noe_jj_errors_low)*ones(1,num_isomers));

pdb_observ_vector_low=pdb_observations./noe_jj_errors_low;
% Analyze pdb model with experimental errors.
model_analyze(design_matrix_low,pdb_observ_vector_low,most_likely_model,...

select_speed,[output_basefile,’_pdb_wishful’],fid,’PDB w/ low errors:’,...
isomer_names,noe_jj_names,pdb_observations,noe_jj_errors_low);

% Analyze pentagon model.
model_analyze(design_matrix,pdb_observ_vector_high,pentagon_model,...

select_speed,[output_basefile,’_pentagon’],fid,’Pentagon model:’,...
isomer_names,noe_jj_names,pdb_observations,noe_jj_errors_high);

% Output other information.
model_output_other(fid,...

spin_names,chemical_shifts,isomer_names,torsions,...
noe_jj_names,conversion_type,geometry,observable,...
t_rms_diff_map_minima,o_rms_diff_average,...
idx_simplest,idx_most_likely,report);

fclose(fid);
----------------------------------------------------------------------
| MATLAB v4 M-file: assign_observations
----------------------------------------------------------------------
function [spin_names,chemical_shifts,...

noe_jj_names,noe_jj_values,noe_jj_errors]=...

assign_observations(select_assignment,select_error);

% ASSIGN_OBSERVATIONS
% Get the NMR observations.
[assignments,assignment_pointers,observations]=nmr_observations;
% Parse string matricies.
num_spins=size(assignments,1);
spin_names=assignments(:,1:4);
orig_shifts=zeros(num_spins,1);
for i=1:num_spins

orig_shifts(i)=sscanf(assignments(i,5:12),’%f’,1);

end
num_observ_orig=size(observations,1);
noe_jj_names_orig=observations(:,1:16);
dummy_flg=zeros(num_observ_orig,1);
o_tmp=zeros(num_observ_orig,3);
for i=1:num_observ_orig

if (observations(i,20:24)~=’DUMMY’)

o_tmp(i,:)=sscanf(observations(i,17:40),’%f’,3)’;

else

end

o_tmp(i,:)=zeros(1,3);
dummy_flg(i)=1;

end
orig_values=o_tmp(:,1);
random_errors=o_tmp(:,2);
other_errors=o_tmp(:,3);
% Setup errors.
if (select_error==1)

orig_errors=random_errors;

elseif (select_error==2)

orig_errors=sqrt(random_errors.^2+other_errors.^2);

else

error(’Bad error selection’);

end
% Check assignment pointers.
if (size(assignment_pointers,2)~=num_spins)

error(’Bad assignment pointers.’);

end
if ((select_assignment<1)|(select_assignment>size(assignment_pointers,1)))

error(’Bad assignment selection.’);

end
% Setup observation pointer.
num_observ=0;
for i=1:num_observ_orig

idx_first_spin=str2idx(noe_jj_names_orig(i,1:4),spin_names);
if (idx_first_spin~=-1)
orig_first_spin=...

spin_names(assignment_pointers(select_assignment,idx_first_spin),:);

else

else

orig_first_spin=noe_jj_names_orig(i,1:4);

end
idx_last_spin=str2idx(noe_jj_names_orig(i,13:16),spin_names);
if (idx_last_spin~=-1)
orig_last_spin=...

spin_names(assignment_pointers(select_assignment,idx_last_spin),:);

orig_last_spin=noe_jj_names_orig(i,13:16);

end
orig_observ=[orig_first_spin,noe_jj_names_orig(i,5:12),orig_last_spin];
idx_orig_observ=str2idx(orig_observ,noe_jj_names_orig);
if (idx_orig_observ==-1)

error([’Observation ’,orig_observ,’ missing.’]);

end
if (~dummy_flg(idx_orig_observ))

num_observ=num_observ+1;
if (num_observ==1)

noe_jj_names=noe_jj_names_orig(i,:);

else

end

noe_jj_names=str2mat(noe_jj_names,noe_jj_names_orig(i,:));

end
observ_pointer(num_observ)=idx_orig_observ;

end
% Load observation vectors.
% In MATLAB syntax this is equivalent to: values=orig_values(pointer).
A=ptr2mat(assignment_pointers(select_assignment,:),num_spins);
B=ptr2mat(observ_pointer,num_observ_orig);
chemical_shifts=A*orig_shifts;
noe_jj_values=B*orig_values;
noe_jj_errors=B*orig_errors;
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function [assignments,assignment_pointers,observations]=nmr_observations();
% NMR_OBSERVATIONS The NMR data.
assignments=...
[’ha

nmr_observations

’hb1
’hb2
’hg
’hd1
’hd2

4.1710’;
1.5440’;
1.8125’;
1.6582’;
0.8700’;
0.8200’];

% 123456789012
assignment_pointers=...
[1,2,3,4,5,6;
1,2,3,4,6,5;
1,3,2,4,5,6;
1,3,2,4,6,5];
observations=...
[’ha
’ha
’ha
’hb1
’hb2
’ha
’ha
’hb1
’hb1
’hb2
’hb2
’ha ca cb
’ha ca cb
’hb1 cb cg
’hb2 cb cg
’ha ca cb
’ca cb cg
ca cb
’c
ca cb
’c

hb1
hb2
hg
hg
hg
hd1
hd2
hd1
hd2
hd1
hd2
hb1
hb2
hg
hg
cg
hg
hb1
hb2

0.041
0.038
0.013
0.040
DUMMY
0.000
0.014
0.000
0.022
0.023
0.000
4.549
7.381
8.070
4.999
3.000
5.000
4.200
5.300

0.010’;
0.010’;
0.010’;
0.010’;
’;

0.010
0.010
0.003
0.020

0.005
0.003
0.002
0.010
0.010
0.002
0.034
0.042
0.059
0.034
2.000
2.000
0.500
0.500

0.010’;% Check manually < ha to hd2 NOE.
0.010’;
0.010’;
0.010’;
0.010’;
0.010’;
1.000’;
1.000’;
1.000’;
1.000’;
1.000’;
1.000’;
1.000’;
1.000’];

% 1234567890123456789012345678901234567890
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
for select_error=1:2

assign_observ_test

fprintf(’\nError Level %1.0f\n\n’,select_error);
for select_assignment=1:4

fprintf(’Assignment %1.0f\n\n’,select_assignment);
[spin_names,chemical_shifts,noe_jj_names,noe_jj_values,noe_jj_errors]=...

assign_observations(select_assignment,select_error);

for i=1:length(spin_names)

fprintf(’%s %8.4f\n’,spin_names(i,:),chemical_shifts(i));

end
fprintf(’\n’);
for i=1:length(noe_jj_names)

fprintf(’%s %8.3f %8.3f\n’,...

end
fprintf(’\n’);

end

noe_jj_names(i,:),noe_jj_values(i),noe_jj_errors(i));

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function [A,b,isomer_torsions,isomer_names,...

setup_design_matrix

observable,geometry,conversion_type,...
t_rms_diff_map_minima,o_rms_diff_average]=...
setup_design_matrix(noe_jj_names,noe_jj_values,noe_jj_errors,...
geometry_basepath,map_basefile,select_geometry);

% SETUP_DESIGN_MATRIX Setup design matrix and observation vector.
temperature=300; % K
kboltz=1.9872159e-3; % Kcal/mol*K
% Get isomer names from energy minimum geometries.
for i=1:2

if (i==1)

else

filespec=[geometry_basepath,’/minimum/geometry_n_ca_cb_cg.dat’];

filespec=[geometry_basepath,’/minimum/geometry_ca_cb_cg_cd1.dat’];

end
fid=fopen(filespec);
[tor_tmp,num_tmp]=fscanf(fid,’%f’);
fclose(fid);
if (i==1)

num_isomers=num_tmp;
torsions_ene_min_geo=zeros(num_isomers,2);

end
torsions_ene_min_geo(:,i)=tor_tmp;

end
[isomer_names,torsions_ideal]=torsion2name(torsions_ene_min_geo);

S5

% Calculate observables from energy minimum geometries.
[observable,geometry,conversion_type]=...

geometry2observable([geometry_basepath,’/minimum/geometry’],noe_jj_names);

% Read energy maps and find ideal and minima indices.
[energy_map,x1_map,x2_map,isomer_pointer]=...

setup_energy_map([geometry_basepath,’/average/geometry’],map_basefile);

if ((x1_map(j)==torsions_ideal(k,1))&(x2_map(j)==torsions_ideal(k,2)))

index_minimum=zeros(1,num_isomers);
index_ideal=zeros(1,num_isomers);
length_map=size(energy_map,1);
for j=1:length_map

for k=1:num_isomers

index_ideal(k)=j;

end

end
i=isomer_pointer(j);
if ~((1<=i)&(i<=num_isomers))

end
if (index_minimum(i)==0)
index_minimum(i)=j;

index_minimum(i)=j;

end

error(’Map inconsistent with energy minimum geometries (bad pointer).’);

elseif (energy_map(j)<energy_map(index_minimum(i)))

error(’Map inconsistent with energy minimum geometries (missing well).’);

error(’Map inconsistent with energy minimum geometries (bad grid).’);

end
if (any(index_minimum==zeros(1,num_isomers)))

end
if (any(index_ideal==zeros(1,num_isomers)))

end
% Find map minima.
torsions_map_minima=zeros(num_isomers,2);
for i=1:num_isomers

[e_tmp,torsions_map_minima(i,1),torsions_map_minima(i,2)]=...

interpolate_map(energy_map,x1_map(1),x2_map(1),...

x1_map(index_minimum(i)),x2_map(index_minimum(i)));

end
% Find map average torsion angles (best positions).
prob_map=exp((min(energy_map)-energy_map)/(kboltz*temperature));
prob_norm=zeros(num_isomers,1);
torsions_best_position=zeros(num_isomers,2);
for j=1:length_map

i=isomer_pointer(j);
torsions_best_positions(i,:)=torsions_best_positions(i,:)+...

prob_map(j)*rep360([x1_map(j),x2_map(j)]-torsions_map_minima(i,:));

prob_norm(i)=prob_norm(i)+prob_map(j);

end
torsions_best_positions=...

torsions_map_minima+torsions_best_positions./(prob_norm*[1,1]);

% Read geometry maps.
[observable_map,geometry_map,conversion_type_map]=...

geometry2observable([geometry_basepath,’/average/geometry’],noe_jj_names);

% Calculate observables from energy and geometry maps.
num_observ=size(noe_jj_names,1);
o_ideal=zeros(num_observ,num_isomers);
o_minimum=zeros(num_observ,num_isomers);
g_ideal=zeros(num_observ,num_isomers);
g_minimum=zeros(num_observ,num_isomers);
for i=1:num_isomers

o_ideal(:,i)=observable_map(:,index_ideal(i));
o_minimum(:,i)=observable_map(:,index_minimum(i));
g_ideal(:,i)=geometry_map(:,index_ideal(i));
g_minimum(:,i)=geometry_map(:,index_minimum(i));

end
o_best_positions=zeros(num_observ,num_isomers);
g_best_positions=zeros(num_observ,num_isomers);
for j=1:num_isomers

for i=1:num_observ

o_best_positions(i,j)=...

interpolate_map(observable_map(i,:)’,x1_map(1),x2_map(1),...
torsions_best_positions(j,1),torsions_best_positions(j,2));

g_best_positions(i,j)=...

interpolate_map(geometry_map(i,:)’,x1_map(1),x2_map(1),...
torsions_best_positions(j,1),torsions_best_positions(j,2));

end

end
o_average=zeros(num_observ,num_isomers);
g_average=zeros(num_observ,num_isomers);
for j=1:length_map

i=isomer_pointer(j);
o_average(:,i)=o_average(:,i)+prob_map(j)*observable_map(:,j);
g_average(:,i)=g_average(:,i)+...

prob_map(j)*rep360(geometry_map(:,j)-g_minimum(:,i));

end
o_average=o_average./(ones(num_observ,1)*prob_norm’);
g_average=rep360(g_minimum+g_average./(ones(num_observ,1)*prob_norm’));
% Prepare torsion space difference report.
t_rms_diff_ene_min_geo=...

sqrt(sum(rep360(torsions_ene_min_geo-torsions_map_minima).^2’))’;

sqrt(sum(rep360(torsions_best_positions-torsions_map_minima).^2’))’;

t_rms_diff_best_positions=...

t_rms_diff_ideal=...

t_rms_diff_map_minima=...

sqrt(sum(rep360(torsions_ideal-torsions_map_minima).^2’))’;

[t_rms_diff_ene_min_geo,t_rms_diff_best_positions,t_rms_diff_ideal];

if (any(t_rms_diff_ene_min_geo>2.0))

disp(torsions_map_minima);
disp(torsions_ene_min_geo);
disp(t_rms_diff_ene_min_geo);
error(’Map inconsistent with energy minimum geometries (bad minima).’);

end
% Prepare observable difference report.
o_rms_diff_observable=sqrt(sum((observable-o_average).^2’)/num_isomers)’;
o_rms_diff_best_positions=...

sqrt(sum((o_best_positions-o_average).^2’)/num_isomers)’;

o_rms_diff_ideal=sqrt(sum((o_ideal-o_average).^2’)/num_isomers)’;
o_rms_diff_average=...

[o_rms_diff_observable,o_rms_diff_best_positions,o_rms_diff_ideal];

o_rms_diff_minimum_observable=...

sqrt(sum((o_minimum-observable).^2’)/num_isomers)’;
o_rms_observable=sqrt(sum(observable.^2’)/num_isomers)’;
if (any(o_rms_diff_minimum_observable>(0.05*o_rms_observable)))

disp(o_rms_diff_minimum_observable);
disp(o_rms_observable);
error(’Map inconsistent with energy minimum geometries (bad observables).’);

end
% Load selected geometry (conversion types differ in NOE scale factor).
if (select_geometry==1)

isomer_torsions=torsions_map_minima;
geometry=g_average;
observable=o_average;
conversion_type=conversion_type_map;

elseif (select_geometry==2)

isomer_torsions=torsions_best_positions;
geometry=g_best_positions;
observable=o_best_positions;
conversion_type=conversion_type_map;

elseif (select_geometry==3)

isomer_torsions=torsions_ene_min_geo;

elseif (select_geometry==4)

isomer_torsions=torsions_ideal;
geometry=g_ideal;
observable=o_ideal;
conversion_type=conversion_type_map;

else

error(’Unknown geometry.’);

end
% Setup design matrix.
A=observable./(noe_jj_errors*ones(1,num_isomers));
b=noe_jj_values./noe_jj_errors;
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function [names,torsions_ideal]=torsion2name(torsions);
% TORSION2NAME Convert torsion angle pairs to rotational isomer names.
% Torsion angles are in degree units.
num_isomers=size(torsions,1);
torsions_ideal=zeros(num_isomers,2);
for i=1:num_isomers

torsion2name

for j=1:2

t=rep360(torsions(i,j));
if ((-120<t)&(t<=0))

elseif ((0<t)&(t<=120))

x=’g-’;
a=-60;

x=’g+’;
a=+60;

else

x=’t’;
a=180;

end
if (j==1)
n=x;

else

n=[n,x];

end
if (i==1)

names=n;

else

end

end
torsions_ideal(i,j)=a;

names=str2mat(names,n);

J(theta)=A*cos(2*theta) - B*cos(theta) + C
J(theta)=A’*cos(theta)^2 - B’*cos(theta) + C’ [This form is used below.]

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function [observable,geometry,conversion_type]=...

geometry2observable

geometry2observable(geometry_basefile,noe_jj_names);

A’ = 2*A
B’ = B
C’ = C - A

A = A’/2
B = B’
C = C’ + A’/2

coupling constants in organic compounds.
Advances in Magnetic Resonance 1:195--316.

coupling constants on dihedral angle and substituents.
J. Chem. Soc. Perkin Trans. II 1936--1940.

states of peptide systems. Progress in Nuclear Magnetic Resonance
Spectroscopy 10:41--81. Part 2.

% GEOMETRY2OBSERVABLE
% Karplus equation coefficients.
%
%
%
%
%
% References:
% 1. Bystrov, V. F. (1976). Spin-spin coupling and the conformational
%
%
% 2. Pachler, K. G. R. (1972). The dependence of vicinal proton-proton
%
%
% 3. Bothner-By, A. A. (1965). Geminal and vicinal proton-proton
%
%
% 4. Cung, M. T. and Marraud, M. (1982). Conformational dependence
%
%
% 5. Breitmaier, E. and Voelter, W. (1990). Carbon-13 NMR Spectroscopy:
%
%
% 6. Wasylishen, R. and Schaefer, T. (1973). INDO molecular orbital
%
%
%
% 7. Fischman, A. J., Live, D. H., Wyssbrod, H. R., Agosta, W. C.,
%
%
%
%
%
coefficients=...
[’ethane

and Cowburn, D. (1980). Torsion angles in the cystein bridge
of oxytocin in aqueous solution: Measurements of circumjacent
vicinal couplings between H-1, C-13, and N-15.
Journal of the American Chemical Society 102:2533--2539.

calculations of nuclear spin-spin coupling constants over three
bonds between 13C and 1H in some simple molecules.
Canadian Journal of Chemistry 51:961--973.

High-Resolution Methods and Applications in Organic Chemistry and
Biochemistry. (VCH, Weinheim, Federal Republic of Germany).

of the vicinal proton coupling constant for the C-alpha--C-beta
bond in peptides. Biopolymers 21:953--967.

’s-butyl
’ha-hb
’propane
’c-hb

12.00
10.00
10.20
7.12
7.20

1.00
1.00
1.80
1.00
2.04

2.00’;%
2.00’;%
1.90’;%
0.70’;%
0.60’];% Ref. [7] page 2536.

Ref. [1] page 56.
Ref. [2] page 1939 and [3] page 205.
Ref. [4].
Ref. [5] page 143 and [6] page 963.

filespec=[geometry_basefile,’_’,st1,’_’,st2,’_’,st3,’_’,st4,’.dat’];

% 12345678901234567890123456789012
noe_scale_factor=nmr_geminal_noe(geometry_basefile);
num_observ=size(noe_jj_names,1);
noe_flags=zeros(num_observ,1);
first_noe=1;
for i=1:num_observ
% Assemble geometry matrix.
s1=noe_jj_names(i,1:4);
s2=noe_jj_names(i,5:8);
s3=noe_jj_names(i,9:12);
s4=noe_jj_names(i,13:16);
st1=string_trim(s1);
st2=string_trim(s2);
st3=string_trim(s3);
st4=string_trim(s4);
if ((length(st2)==0)&(length(st3)==0))

elseif ((length(st2)~=0)&(length(st3)~=0))

noe_flags(i)=1;

noe_flags(i)=0;

error(’Unidentified observation.’)

end
if (noe_flags(i))

filespec=[geometry_basefile,’_’,st1,’_’,st4,’.dat’];

else

else

end
fid=fopen(filespec);
[geo_tmp,num_tmp]=fscanf(fid,’%f’);
fclose(fid);
if (i==1)

num_isomers=num_tmp;
geometry=zeros(num_observ,num_isomers);
observable=zeros(num_observ,num_isomers);

elseif (num_tmp~=num_isomers)

error(’Geometry file sizes don’’t match.’);

end
geo_tmp=geo_tmp’;
geometry(i,:)=geo_tmp;
% Convert to observables.

if (noe_flags(i))
if (first_noe)

type=sprintf(’NOE scale factor = %9.4f’,noe_scale_factor);
first_noe=0;

else

type=’noe’;

else

end
observable(i,:)=noe_scale_factor*geo_tmp.^(-6);

idx_coefficients=-1;
if ((s1(1)==’h’)&(s4(1)==’h’))

if (strcmp(st1,’ha’)&strcmp(st2,’ca’)&...

strcmp(st3,’cb’)&strcmp(s4(1:2),’hb’))

idx_coefficients=str2idx(’ha-hb

’,coefficients(:,1:8));

else

S6

idx_coefficients=str2idx(’s-butyl ’,coefficients(:,1:8));

elseif (((s1(1)==’h’)&(s4(1)==’c’))|((s1(1)==’c’)&(s4(1)==’h’)))

if (strcmp(st1,’c’)&strcmp(st2,’ca’)&...

strcmp(st3,’cb’)&strcmp(s4(1:2),’hb’))

idx_coefficients=str2idx(’c-hb

’,coefficients(:,1:8));

idx_coefficients=str2idx(’propane ’,coefficients(:,1:8));

end

else

end

end
if (idx_coefficients==-1)

error(’No Karplus coefficients.’);

end
A=sscanf(coefficients(idx_coefficients, 9:16),’%f’,1);
B=sscanf(coefficients(idx_coefficients,17:24),’%f’,1);
C=sscanf(coefficients(idx_coefficients,25:32),’%f’,1);
type=sprintf(’%s %5.2f %5.2f %5.2f’,...

coefficients(idx_coefficients,1:8),A,B,C);

geo_tmp=cos(geo_tmp*(pi/180));
observable(i,:)=A*(geo_tmp.^2)-B*geo_tmp+C;

conversion_type=type;

end
if (i==1)

else

end

conversion_type=str2mat(conversion_type,type);

end
----------------------------------------------------------------------
| MATLAB v4 M-file: nmr_geminal_noe
----------------------------------------------------------------------
function noe_scale_factor=nmr_geminal_noe(geometry_basefile);
% NMR_GEMINAL_NOE Calculate NOE scale factor from geminal proton noe data.
geminal=...
[’ha1 ha2
’hb1 hb2

0.3900’;
0.4200’];

% 1234567890123456
num_geminal=size(geminal,1);
distance=zeros(num_geminal,1);
factors=zeros(num_geminal,1);
for i=1:num_geminal

s1=string_trim(geminal(i,1:4));
s2=string_trim(geminal(i,5:8));
filespec=[geometry_basefile,’_’,s1,’_’,s2,’.dat’];
fid=fopen(filespec);
[dis_tmp,num_tmp]=fscanf(fid,’%f’);
fclose(fid);
distance(i)=mean(dis_tmp);
factors(i)=sscanf(geminal(i,9:16),’%f’,1)*distance(i).^6;

end
noe_scale_factor=mean(factors);
----------------------------------------------------------------------
| MATLAB v4 M-file: geometry_test
----------------------------------------------------------------------
select_assignment=1;
select_error=1;
[spin_names,chemical_shifts,...

noe_jj_names,noe_jj_values,noe_jj_errors]=...

assign_observations(select_assignment,select_error);

geometry_basefile=’/fgp/e/haydock/dip/mechanics/minimum/geometry’;
[observable,geometry,conversion_type]=...

geometry2observable(geometry_basefile,noe_jj_names);

fprintf(’%s %s\n’,noe_jj_names(i,:),conversion_type(i,:));

fprintf(’%7.2f %7.2f %7.2f %7.2f %7.2f %7.2f %7.2f %7.2f %7.2f\n’,...

for i=1:length(noe_jj_names)

end
fprintf(’\n’);
for i=1:length(noe_jj_names)

geometry(i,:));

end
fprintf(’\n’);
for i=1:length(noe_jj_names)

observable(i,:));

fprintf(’%7.4f %7.4f %7.4f %7.4f %7.4f %7.4f %7.4f %7.4f %7.4f\n’,...

end
----------------------------------------------------------------------
| MATLAB v4 M-file: setup_energy_map
----------------------------------------------------------------------
function [energy_map,x1_map,x2_map,isomer_pointer]=...
setup_energy_map(geometry_basefile,map_basefile);

% SETUP_ENERGY_MAP Read energy map and arrange in geometry file order.
xnum=72;
low_left_x1_stdtor=-180;
low_left_x2_stdtor=-180;
xinc=360/xnum;
% Read geometry files and setup torsion maps.
fid=fopen([geometry_basefile,’_n_ca_cb_cg.dat’],’r’);
x1_geometry=fscanf(fid,’%f’,inf);
fclose(fid);
fid=fopen([geometry_basefile,’_ca_cb_cg_cd1.dat’],’r’);
x2_geometry=fscanf(fid,’%f’,inf);
fclose(fid);
if ((size(x1_geometry,1)~=xnum^2)|(size(x2_geometry,1)~=xnum^2))

error(’Wrong geometry file length.’);

end
low_left_x1_geometry=xinc*ceil((x1_geometry(1)-xinc/2)/xinc);
low_left_x2_geometry=xinc*ceil((x2_geometry(1)-xinc/2)/xinc);
majorant_x1_geometry=...

(abs(x1_geometry(2)-x1_geometry(1))>abs(x2_geometry(2)-x2_geometry(1)));

standard_order_geometry=...

(low_left_x1_geometry==(low_left_x1_stdtor+xinc))&...
(low_left_x2_geometry==(low_left_x2_stdtor+xinc));

x1_vec=zeros(1,xnum);
x2_vec=zeros(1,xnum);
for i=1:xnum

x1_vec(i)=low_left_x1_geometry+(i-1)*xinc;
x2_vec(i)=low_left_x2_geometry+(i-1)*xinc;

end
[x1_map,x2_map]=meshgrid(x1_vec,x2_vec);
if ~majorant_x1_geometry

x1_map=x1_map’;
x2_map=x2_map’;

end
x1_map=reshape(x1_map’,xnum^2,1);
x2_map=reshape(x2_map’,xnum^2,1);
rms_geometry_error=...

if (rms_geometry_error>1.0)

sqrt(sum(rep360(x1_geometry-x1_map).^2+rep360(x2_geometry-x2_map).^2))/xnum;

disp([’%%WARNING <setup_energy_map>, rms_geometry_error = ’,...

num2str(rms_geometry_error)]);

end
% Read and reorder energy map.
[isomer_names,isomer_torsions,energy_map,fix_flags,isomer_pointer]=...

contour_read(map_basefile);

if ~(standard_order_geometry&majorant_x1_geometry)

disp(’%%WARNING <setup_energy_map>, Non-standard geometry file order.’);
error(’Map shifting not currently supported.’);

reshape(

end
energy_map=
energy_map(2:xnum+1,2:xnum+1)’,xnum^2,1);
isomer_pointer=reshape(isomer_pointer(2:xnum+1,2:xnum+1)’,xnum^2,1);
% Check.
num_isomers=size(isomer_names,1);
index_minimum=zeros(num_isomers,1);
for j=1:xnum^2

i=isomer_pointer(j);
if ~((1<=i)&(i<=num_isomers))

error(’Bad isomer pointer.’);

end

if (index_minimum(i)==0)
index_minimum(i)=j;

index_minimum(i)=j;

end

elseif (energy_map(j)<energy_map(index_minimum(i)))

end
if (any(index_minimum==zeros(num_isomers,1)))

error(’Missing energy well.’);

end
check_torsions=zeros(num_isomers,2);
for i=1:num_isomers

check_torsions(i,1)=x1_map(index_minimum(i));
check_torsions(i,2)=x2_map(index_minimum(i));

end
if any(any(check_torsions~=isomer_torsions))
disp([check_torsions,isomer_torsions]);
error(’Can’’t find energy minima.’);

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function [isomer_names,isomer_torsions,energy_map,fix_flags,isomer_pointer]=...

contour_read

contour_read(basefile);

file from the CHARMM energy map. This program is available
from Christopher Haydock, Rochester, Minnesota 55901, USA.

% CONTOUR_READ Read contour plot data files.
% Note: The cellular automata program WELL generates a plot data
%
%
xnum=72;
record_length=60;
name_start=5;
name_length=4;
torsion_start=13;
torsion_length=10;
fid=fopen([basefile,’_map.dat’],’r’);
m_tmp=fscanf(fid,’%f’,[3,inf])’;
fclose(fid);
if (size(m_tmp)~=[(xnum+1)^2,3])

error(’Can not read energy map file.’);

end
energy_map=reshape((m_tmp(:,1)-min(m_tmp(:,1))),xnum+1,xnum+1);
fix_flags=reshape(m_tmp(:,2),xnum+1,xnum+1);
isomer_pointer=reshape(m_tmp(:,3),xnum+1,xnum+1);
fid=fopen([basefile,’_min.dat’],’r’);
m_tmp=fscanf(fid,’%c’,[record_length+1,inf])’;
fclose(fid);
isomer_names=m_tmp(:,name_start:name_start+name_length-1);
num_isomers=size(m_tmp,1);
isomer_torsions=zeros(num_isomers,2);
for i=1:num_isomers

isomer_torsions(i,:)=...

sscanf(m_tmp(i,torsion_start:torsion_start+torsion_length-1),’%f %f’,2)’;

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function [energy,x1_min,x2_min]=...

interpolate_map

interpolate_map(energy_map,low_left_x1,low_left_x2,x1,x2);

% INTERPOLATE_MAP Interpolate map at point x1,x2 and find nearest minimum.
% Shift maps to center x1,x2.
xnum=round(sqrt(length(energy_map)));
if (xnum^2)~=size(energy_map,1)

error(’Bad map size.’)

end
xinc=360/xnum;
low_left_x1_tmp=xinc*ceil((x1-180-xinc/2)/xinc);
low_left_x2_tmp=xinc*ceil((x2-180-xinc/2)/xinc);
x1_shift=(low_left_x1-low_left_x1_tmp)/xinc;
x2_shift=(low_left_x2-low_left_x2_tmp)/xinc;
energy_tmp=cyclic_shift(reshape(energy_map,xnum,xnum),x1_shift,x2_shift)’;
x1_tmp=[low_left_x1_tmp:xinc:low_left_x1_tmp+360-xinc];
x2_tmp=[low_left_x2_tmp:xinc:low_left_x2_tmp+360-xinc]’;
% Shift the map along the vertical axis to remove torsion discontinuities.
map_reference=energy_tmp(1+xnum/2,1+xnum/2);
if (abs(map_reference)>60)

energy_tmp=rep360(energy_tmp-map_reference);

else

map_reference=0;

end
% Interpolate and find minimum.
global energy_tmp x1_tmp x2_tmp;
x=[x1,x2];
energy=interpolate_map_fun(x);
if (map_reference~=0)

energy=rep360(energy+map_reference);

end
if (nargout==3)

xmin=fmins(’interpolate_map_fun’,x);
x1_min=xmin(1);
x2_min=xmin(2);

cyclic_shift

end
clear global energy_tmp x1_tmp x2_tmp;
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function B=cyclic_shift(A,i,j)
% CYCLIC_SHIFT Shift matrix by i rows and j columns.
[m,n]=size(A);
irep=irpmod(i,1,m);
jrep=irpmod(j,1,n);
b_tmp=zeros(m,n);
b_tmp(1:irep,:)=A(m-irep+1:m,:);
if (irep~=m)

b_tmp(irep+1:m,:)=A(1:m-irep,:);

end
B(:,1:jrep)=b_tmp(:,n-jrep+1:n);
if (jrep~=n)

B(:,jrep+1:n)=b_tmp(:,1:n-jrep);

interpolate_map_fun

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function f=interpolate_map_fun(x);
global energy_tmp x1_tmp x2_tmp;
x1=x(1);
x2=x(2);
f=interp2(x1_tmp,x2_tmp,energy_tmp,x1,x2,’cubic’);
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function fit_observations=...

model_analyze

model_analyze(design_matrix,observation_vector,model,select_speed,...
postscript_filename,output_fid,model_title,...
isomer_names,noe_jj_names,noe_jj_values,noe_jj_errors,...
Magnify_option);

% MODEL_ANALYZE Analyze model and output results.
if (observation_vector~=noe_jj_values./noe_jj_errors)

error(’Inconsistent observation vector.’);

end
if (select_speed==1)

num_monte_carlo=102400;
FWHM_resolution=8;

elseif (select_speed==2)
num_monte_carlo=10240;
FWHM_resolution=16;
elseif (select_speed==3)
num_monte_carlo=1024;
FWHM_resolution=32;

S7

else

error(’Unknown speed selection.’);

end
if (Magnify_option~=1)

FWHM_resolution=2*FWHM_resolution;

end
[densities,x0,lls_deviation,mc_mean,mc_median,mc_deviation,...

fit_observation_vector,chisq,goodness]=...
monte_carlo_density(design_matrix,observation_vector,model,...
num_monte_carlo,Magnify_option);

gel_probability(densities,FWHM_resolution,isomer_names,postscript_filename,...

Magnify_option);

fprintf(output_fid,’%s\n%s\n’,model_title,...

’

m-flg

x0

sd LLS

sd MC

<MC>-x0

median(MC)-x0’);

for i=1:size(isomer_names,1)

fprintf(output_fid,’%2.0f %s %1.0f %8.6f %8.6f %8.6f %9.6f %9.6f\n’,...

i,isomer_names(i,:),model(i),x0(i),lls_deviation(i),mc_deviation(i),...
mc_mean(i),mc_median(i));

end
fprintf(output_fid,...

’Chi-square = %8.2f Goodness-of-fit = %8.6g \n’,chisq,10^goodness);

tmp_observations=fit_observation_vector.*noe_jj_errors;
residuals=noe_jj_values-tmp_observations;
scaled_residuals=observation_vector-fit_observation_vector;
fprintf(output_fid,’%s\n’,...

’

data

error

fit

data-fit (data-fit)/error’);

for i=1:size(noe_jj_names,1)

fprintf(output_fid,’%2.0f %s %8.4f %8.4f %8.4f %8.4f %8.4f\n’,...

i,noe_jj_names(i,:),noe_jj_values(i),noe_jj_errors(i),...
tmp_observations(i),residuals(i),scaled_residuals(i));

end
if (nargout==1)

fit_observations=tmp_observations;

end
----------------------------------------------------------------------
| MATLAB v4 M-file: monte_carlo_density
----------------------------------------------------------------------
function [densities,x0,lls_deviation,mc_mean,mc_median,mc_deviation,...

fit_observation_vector,lls_chisq,goodness]=...
monte_carlo_density(design_matrix,observation_vector,model,...
num_monte_carlo,Magnify_option);

% MONTE_CARLO_DENSITY Calculate Monte Carlo parameter probability densities.
%
hist_length=1024;
% Transform design matrix to include only model isomer components.
[num_observ,num_isomers]=size(design_matrix);
mod2iso=ptr2mat(flg2ptr(model),num_isomers)’;
num_param=size(mod2iso,2);
model_design_matrix=design_matrix*mod2iso;
[x0,lambda,lls_chisq,goodness,lls_deviation]=...

lls_probability(model_design_matrix,observation_vector);

% Simulate data.
disp(’Simulating data...’);
fit_observation_vector=model_design_matrix*x0;
if (any(fit_observation_vector<zeros(num_observ,1)))

error(’Negative observations.’);

end
b=zeros(num_observ,num_monte_carlo);
randn(’seed’,0);
for j=1:num_monte_carlo
for i=1:num_observ

y=randn;
while ((fit_observation_vector(i)+y)<0)

y=randn;

end
b(i,j)=fit_observation_vector(i)+y;

end

end
% Fit simulated data.
disp(’Fitting simulated data...’);
x=zeros(num_param,num_monte_carlo);
for j=1:num_monte_carlo

end
% Generate probability histograms.
disp(’Generating probability histograms...’);
if (Magnify_option==1)

d_tmp=zeros(hist_length,num_param);
x_bins=zeros(1,hist_length);
for i=1:hist_length

x_bins(i)=(i-1)*(1/(hist_length-1));

end

else

d_tmp=zeros(hist_length+1,num_param);
x_bins=zeros(1,hist_length+1);
for i=1:hist_length+1

x_bins(i)=(i-1)*(1/(hist_length-1))/10;

end

end
for i=1:num_param

[x(:,j),lambda]=lls_probability(model_design_matrix,b(:,j));

d_tmp(:,i)=hist(x(i,:),x_bins)’/num_monte_carlo;

end
densities=d_tmp(1:hist_length,1:num_param);
% Transform output to include all isomers.
densities=densities*mod2iso’;
x0=mod2iso*x0;
lls_deviation=mod2iso*lls_deviation;
mc_mean=mod2iso*mean(x’)’-x0;
mc_median=mod2iso*median(x’)’-x0;
mc_deviation=mod2iso*std(x’)’;
----------------------------------------------------------------------
| MATLAB v4 M-file: lls_probability
----------------------------------------------------------------------
function [x,lambda,chisq,log10_goodness,deviation]=lls_probability(A,b);
% LLS_PROBABILITY Linear least squares with probability constraints.
%
%
%
%
%
%
%
%
%
%
%
%
% Minimize ||A*x-b||^2 subject to sum(x)=1 and x>=0.
% This is equivalent to minimizing 1/2x’*H*x + c*x subject to D*x = e, where:
% H=2*A’*A; c=-2*A’*b; D=ones(1,num_param); e=1; vlb=zeros(num_param,1).
[num_observ,num_param]=size(A);
x0=ones(num_param,1)/num_param;
[x,lambda,how]=...

Given a least squares design matrix A and observation vector b,
solve the linear least squares problem for x subject to the
linear constraints that the sum of the components of x is one and
that all components are non-negative. The vector lambda gives the
Langrangian multipliers, which will be zero for inactive constraints.
The first component of lambda is associated with the equality
(sum) constraint and the other components are associated
with the lower bound (non-negativity) constraints.
If requested, the parameter goodness of fit and deviation
are computed based only on components of x that have inactive
lower bound constraints.

qp(2*A’*A,-2*A’*b,ones(1,num_param),1,zeros(num_param,1),[] ,x0,1

);
,vub,x0,neqcstr);

%x=qp(H
if (strcmp(how,’ok’)~=1)

,c

,D

,e,vlb

disp(how);
error(’No quadratic programing problem solution.’);

end
if (nargout>2)

% Setup unconstrained linear least squares problem for components (xu) with
% inactive bounds constraints.
% constraint, one extra component with an inactive constraint must
% be eliminated.
% Compute goodness-of-fit.
chisq=sum((A*x-b).^2);
inactive_flg=lambda(2:num_param+1)==zeros(num_param,1);

In order to remove the equality (sum)

num_inactive=sum(inactive_flg);
degrees_freedom=num_observ-num_inactive+1;
log10_goodness=log10_gammainc_comp(chisq/2,degrees_freedom/2);
if ((nargout==5)&(num_inactive>1))

% Define transform from x to xi: xi=E*x.
E=ptr2mat(flg2ptr(inactive_flg),num_param);
% Setup design matrix Ai and observation vector bi for all components (xi)
% with inactive constraints.
Ai=A*E’;
bi=b;
% Verify variances don’t depend on which inactive component is removed.
for i_rem=1:num_inactive

% Define transform from components xu to xi: xi=C*xu + d.
C=zeros(num_inactive,num_inactive-1);
for i=1:num_inactive

if (i<i_rem)
C(i,i)=1;

elseif (i==i_rem)

else

end

C(i,i-1)=1;

C(i,:)=-ones(1,num_inactive-1);

end
d=zeros(num_inactive,1);
d(i_rem)=1;
% Setup design matrix Au and observation vector bu for components xu.
Au=Ai*C;
bu=bi-Ai*d;
% Verify that solution in xu space is the same as in original x space.
xu=Au\bu;
xi=C*xu+d;
x_tmp=E’*xi;
if (any(abs(x_tmp-x)>1.0e-10))

error(’Different qp and ls solutions.’);

end
% Moment matrix for xu solution.
Mu=inv(Au’*Au);
% Moment matrix in xi space, c.f. Cramer eq. (22.6.2).
Mi=C*Mu*C’;
% Moment matrix in original x space.
M_tmp=E’*Mi*E;
if (i_rem==1)
M=M_tmp;

elseif (any(abs(M-M_tmp)>1.0e-10))

error(’Moment matrix depends on removed component.’)

end

end
deviation=sqrt(diag(M));

elseif (nargout==5)

deviation=zeros(num_param,1);

end

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function y=log10_gammainc_comp(x,a);
% LOG10_GAMMAINC_COMP Log base 10 of the incomplete gamma function complement.
q=1-gammainc(x,a);
% If q is small recompute with Numerical Recipes function gcf.
if (q<1.0e-4)

log10_gammainc_comp

gold=0;
converged=0;
a0=1;
a1=x;
b0=0;
b1=1;
fac=1;
n=1;
while ~converged

na=n-a;
a0=(a1+a0*na)*fac;
b0=(b1+b0*na)*fac;
nf=n*fac;
a1=x*a0+nf*a1;
b1=x*b0+nf*b1;
if (a1~=0)

fac=1/a1;
g=b1*fac;
if (abs((g-gold)/g)<1.0e-10)

converged=1;

end
gold=g;

end
n=n+1;
if (n>100)

end

error(’Too many iterations.’);

end
y=-x+a*log(x)-gammaln(a)+log(g);

else

y=log(q);

end
% ln(x)=ln(10)*log10(x)
y=y/log(10);
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function gel_probability(Probabilities,FWHM_resolution,LaneLabels,filename,...

gel_probability

Magnify_option);

Probabilities is a matrix of probability densities arranged in columns.
The probability density at 0 is stored at row index 1 and
the density at 1 is stored in the largest row index.
The number of rows in this matrix determines the resolution
of the final image. The value 1024 is strongly recomended.
The FWHM_resolution determines the degree of smoothing of
the probability density funstions.
in row index units. LaneLabels is a string matrix of column labels.

%GEL_PROBABILITY Create gel probability image.
%
%
%
%
%
%
%
%
%
[Lane_length,number_Lanes]=size(Probabilities);
Lanes=Probabilities;
% Filter lane probabilities.
sigma=FWHM_resolution/sqrt(log(256));
for i=1:number_Lanes

This resolution is specified

Lanes(2:Lane_length-1,i)=...

extra_filter(Lanes(2:Lane_length-1,i),sigma,’second’)’;

end
luminance_maximum=max(max(Lanes(2:Lane_length,:)));
if (Magnify_option==1)

x_divisor=1;

else

x_divisor=10;

end
x=zeros(1,Lane_length);
for i=1:Lane_length

x(i)=(i-1)*(1/(Lane_length-1))/x_divisor;

end
figure(’Position’,[280,920-69*11,69*8.5,69*11],...

’PaperOrientation’,’portrait’,’PaperPosition’,[0,0,8.5,11]);

axes(’Position’,[0.10,0.55,0.85,0.40]);
hold on;
linetype=str2mat(’w-’,’w-.’,’w--’,’w:’);
for i=1:number_Lanes

[y_max,i_max]=max(Lanes(2:Lane_length,i));
x_max=x(i_max+1);
plot(x(2:Lane_length),Lanes(2:Lane_length,i),linetype(rem(i-1,4)+1,:));
text(x_max,y_max,int2str(i));

S8

end
set(gca,’XLim’,[x(1),x(Lane_length)]);
if (luminance_maximum~=0)

set(gca,’YLim’,[0,luminance_maximum]);

end
hold off;
axes(’Position’,[0.10,0.05,0.85,0.40]);
set(gca,’Visible’,’off’);
for i=1:number_Lanes

text_tmp=sprintf(’ %2.0f %s %8.6f %8.6f’,i,LaneLabels(i,:),...

Lanes(1,i),sum(Lanes(2:Lane_length,i)));

text(0.00,1-0.06*i,sprintf(’ %2.0f %s’,i,LaneLabels(i,:)));
text(0.15,1-0.06*i,sprintf(’ %8.6f %8.6f’,...
Lanes(1,i),sum(Lanes(2:Lane_length,i))));

end
eval([’print ’,filename,’ -dps;’]);
% Generate gel image.
gamma_midpoint=1.5;
FWHM_resolution_cells=round(Lane_length/64);
Lane_width_cells=round(Lane_length/16);
gel_graphic(Lanes,gamma_midpoint,luminance_maximum,...

FWHM_resolution_cells,Lane_width_cells,LaneLabels,...
Magnify_option);

eval([’print ’,filename,’ -append -dps;’]);
----------------------------------------------------------------------
| MATLAB v4 M-file: extra_filter
----------------------------------------------------------------------
function X=extra_filter(x,sigma,order);
%EXTRA_FILTER Extrapolate endpoints of vector x and Gaussian filter.
%
N=length(x);
if (rem(N,2)~=0)

The standard deviation sigma is measured in x index units.

error(’Dimension must be even.’);

end
if (any(imag(x)~=zeros(size(x))))

error(’Complex input.’);

end
% Widen domain.
Nw=3*N;
Hw=zeros(1,Nw);
% Fourier transform Gaussian (s.d. depends on extrapolation order).
if (strcmp(order,’first’))

elseif (strcmp(order,’second’))

Sw=sigma;

Sw=sigma/2;

else

error(’Unknown order.’)

end
Cw=((2*pi*Sw)/Nw)^2;
for n=1:Nw

n_frequency=irpmod(n-1,-Nw/2+1,Nw);
Hw(n)=exp(-0.5*Cw*n_frequency^2);

end
% Extrapolate x evenly.
r=reshape(x,1,N);
xw=[fliplr(r) r fliplr(r)];
% Fourier transform.
Xw=real(ifft(Hw.*fft(xw)));
X=Xw(1,N+1:2*N);
if (strcmp(order,’second’))

% Fourier transform Gaussian (s.d. = sigma).
Hw=Hw.^4;
% Extrapolate even x oddly.
norm_old=sum(X);
r=X;
xw=[2*r(1)-fliplr(r) r 2*r(N)-fliplr(r)];
Xw=real(ifft(Hw.*fft(xw)));
X=Xw(1,N+1:2*N);
norm_new=sum(X);
if (norm_new~=0)

X=X*(norm_old/norm_new);

elseif(norm_old~=0)

error(’Lost norm.’)

end

end
----------------------------------------------------------------------
| MATLAB v4 M-file: extra_filter_test
----------------------------------------------------------------------
x=[1:32];
%randn(’seed’,0);
y=x+4*randn(1,32);
norm=sum(y);
Y1=extra_filter(y,3,’first’);
disp([’Y1 norm diff = ’,num2str(sum(Y1)-norm)]);
Y2=extra_filter(y,6,’first’);
disp([’Y2 norm diff = ’,num2str(sum(Y2)-norm)]);
Y3=extra_filter(y,6,’second’);
disp([’Y3 norm diff = ’,num2str(sum(Y3)-norm)]);
plot(x,y,’:’,x,Y1,’--’,x,Y2,’-.’,x,Y3,’-’);
----------------------------------------------------------------------
| MATLAB v4 M-file: gel_graphic
----------------------------------------------------------------------
function h=gel_graphic(Lane_luminances,gamma_midpoint,luminance_maximum,...

FWHM_resolution_cells,Lane_width_cells,LaneLabels,...
YLabel_option);

The parameter

Note that these two parameters

Lane_luminances is a matrix of lane luminances with one lane
in each column. There is a one to one relation between matrix
column elements and image cells in the vertical direction, i.e.,
each matrix element down a column is mapped to one image cell
up the image. The luminances are converted to gray scale
values by a simulated photographic process.
A characteristic film curve converts the luminances into
film densities. The parameter gamma_midpoint specifies the
slope at the midpoint of the characteristic curve, assuming
that its density range is 10log2 or 3.0103.
luminance_maximum specifies the luminance at the end of the
characteristic curve sholder.
do not affect the Ansel Adams Zone bar, which is always created
with the assumption that eleven exposures Zones exactly cover
the luminance range of the characteristic curve.
The full density range of the characteristic curve is linearly
mapped to the full length of the gray scale colormap.
The FWHM_resolution_cells and Lane_width_cells are
in image cell units. A FWHM_resolution_cells of at least
several cells will make overexposed bands plainly visible.
LaneLabels is a string matrix of lane labels.
YLabel_option controls vertical labeling (first to last row of Lanes).

%GEL_GRAPHIC Create a gel graphic.
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
% Allocate space.
[Lane_length_cells,number_Lanes]=size(Lane_luminances);
image_height_cells=Lane_length_cells+2*Lane_width_cells;
image_width_cells=(2*number_Lanes+1)*Lane_width_cells;
C=zeros(image_height_cells,image_width_cells);
% Load Lane_luminances into image matrix.
% NOTE: The indices of C give the coordinates of the center of each image cell.
Lbottom=Lane_width_cells+1;
Ltop=Lane_width_cells+Lane_length_cells;
if (YLabel_option==0)

0 -- No labels.
1 -- 0.0 to 1.0.
2 -- 0.00 to 0.10.

LTick=99;
LTickLabels=’ ’;

if (YLabel_option==1)

fmtstr=’%3.1f’;

label_divisor=10;

else

fmtstr=’%4.2f’;
label_divisor=100;

end
LTick=zeros(11,1);
for i=1:11

LTick(i)=Lbottom+(Lane_length_cells-1)*((i-1)/10);
if (rem(i,2)~=0)

next_label=sprintf(fmtstr,(i-1)/label_divisor);

next_label=’ ’;

else

end
if (i==1)

LTickLabels=next_label;

LTickLabels=str2mat(LTickLabels,next_label);

else

end

end

else

disp(YLabel_option);
error(’Unrecognized YLabel option.’);

end
Lcenter=zeros(1,number_Lanes);
for i=1:number_Lanes

Lleft=Lane_width_cells*(2*i-1)+1;
Lright=Lleft+Lane_width_cells-1;
C(Lbottom:Ltop,Lleft:Lright)=Lane_luminances(:,i)*ones(1,Lane_width_cells);
Lcenter(i)=Lleft+(Lane_width_cells-1)/2;

end
% Filter image at desired resolution and convert to logarithmic values.
sigma=FWHM_resolution_cells/sqrt(log(256));
C=filter2_gauss(C,sigma);
C=C/luminance_maximum;
C=max(C,1.0e-10*ones(image_height_cells,image_width_cells));
C=log10(C);
C=min(C,zeros(image_height_cells,image_width_cells));
% Apply characteristic curve mapping: 3*x^2-2*x^3 for 0<=x<=1.
slope_midpoint=3/2;
luminance_range=(10*log10(2))*(slope_midpoint/gamma_midpoint);
C=C/luminance_range;
C=max(C,-1*ones(image_height_cells,image_width_cells));
C=1+C;
C=3*C.^2-2*C.^3;
% Convert to gray scale values.
length_colormap=256;
C=round(length_colormap-C*(length_colormap-1));
% Setup figure format.
portrait=1;
if (portrait)

h(1)=figure(’Position’,[300,900-69*11,69*8.5,69*11],...

’PaperOrientation’,’portrait’,’PaperPosition’,[0,0,8.5,11]);

else

h(1)=figure(’Position’,[300,900-69*8.5,69*11,69*8.5],...

’PaperOrientation’,’landscape’,’PaperPosition’,[0,0,11,8.5]);

end
% Setup colormap and generate image.
colormap(zone_gray(length_colormap));
h(2)=axes(’Position’,[0.10,0.15,0.85,0.80]);
image(C);
% Adjust and label axes.
set(gca,’AspectRatio’,[image_width_cells/image_height_cells,NaN]);
set(gca,’Ydir’,’normal’,’Box’,’on’);
set(gca,’XTick’,Lcenter,’XTickLabels’,LaneLabels);
set(gca,’YTick’,LTick,’YTickLabels’,LTickLabels);
set(gca,’GridLineStyle’,’:’,’YGrid’,’on’);
set(gca,’LineWidth’,[1.0],’FontSize’,[18]);
% Add zone color bar.
B=zeros(2,12);
BTick=zeros(11,1);
for i=1:11

x=(i-1)/10;
B(:,i)=ones(2,1)+round((3*x^2-2*x^3)*(length_colormap-1));
BTick(i)=i+0.5;

end
B(:,12)=B(:,11);
BTickLabels=str2mat(’ 0’,’ I’,’ II’,’III’,’ IV’,’ V’);
BTickLabels=str2mat(BTickLabels,’ VI’,’VII’,’VIII’,’ IX’,’ X’);
h(3)=axes(’Position’,[0.30,0.03,0.45,0.03]);
pcolor(B);
set(gca,’TickLength’,[0,0],’FontSize’,[8]);
set(gca,’XTick’,BTick,’XTickLabels’,BTickLabels);
set(gca,’YTick’,[1.5],’YTickLabels’,’ ’);
shading faceted;
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function X=filter2_gauss(x,sigma);
%FILTER2_GAUSS Gaussian filter image with standard deviation sigma cell units.
% Allocate space.
[Nv,Nh]=size(x);
if ((rem(Nv,2)~=0)|(rem(Nh,2)~=0))

filter2_gauss

error(’Dimensions must be even.’);

end
Hv=zeros(Nv,1);
Hh=zeros(1,Nh);
% Fourier transform gaussians.
Cv=((2*pi*sigma)/Nv)^2;
for n=1:Nv

n_frequency=irpmod(n-1,-Nv/2+1,Nv);
Hv(n)=exp(-0.5*Cv*n_frequency^2);

end
Ch=((2*pi*sigma)/Nh)^2;
for n=1:Nh

n_frequency=irpmod(n-1,-Nh/2+1,Nh);
Hh(n)=exp(-0.5*Ch*n_frequency^2);

filter2_gauss_test

end
% Fourier transform image.
X=real(ifft2((Hv*Hh).*fft2(x)));
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
Hn=16;
Vn=8;
FWHM_resolution_cells=3;
stop_adjust=0;
C=zeros(Vn,Hn);
C(ceil(Vn/2),ceil(Hn/2))=1;
sigma=FWHM_resolution_cells/sqrt(log(256));
C=filter2_gauss(C,sigma);
norm=sum(sum(C));
disp([’norm = ’,num2str(norm)]);
C=C/max(max(C));
C=max(C,1.0e-10*ones(Vn,Hn));
C=log10(C);
C=C+stop_adjust*log10(2);
C=C/2.0;
C=min(C,zeros(Vn,Hn));
C=max(C,-1*ones(Vn,Hn));
C=round(-C*63+1);
portrait=0;
if (portrait)

figure(’Position’,[300,900-69*11,69*8.5,69*11],...

’PaperOrientation’,’portrait’,’PaperPosition’,[0,0,8.5,11]);

figure(’Position’,[300,900-69*8.5,69*11,69*8.5],...

’PaperOrientation’,’landscape’,’PaperPosition’,[0,0,11,8.5]);

elseif((YLabel_option==1)|(YLabel_option==2))

else

S9

Get the standard gray colormap.

end
colormap(gray);
image(C);
set(gca,’Position’,[0.10,0.10,0.85,0.85]);
set(gca,’AspectRatio’,[Hn/Vn,NaN]);
set(gca,’Ydir’,’normal’,’Box’,’on’);
----------------------------------------------------------------------
| MATLAB v4 M-file: zone_gray
----------------------------------------------------------------------
function map=zone_gray(n);
% ZONE_GRAY
%
map=gray(n);
----------------------------------------------------------------------
| MATLAB v4 M-file: select_simplest
----------------------------------------------------------------------
function [simplest_model,log10_goodness,...
report,idx_simplest,idx_most_likely]=...
select_simplest(design_matrix,observation_vector,most_likely_model);
% SELECT_SIMPLEST Given the most likely model select the simplest model.
%
num_isomers=length(most_likely_model);
num_models=2^num_isomers-1;
% Setup model database.
model_database=zeros(num_models,4);
for i=1:num_models

model=idx2mod(i,num_isomers);
mod2iso=ptr2mat(flg2ptr(model),num_isomers)’;
num_param=size(mod2iso,2);
model_design_matrix=design_matrix*mod2iso;
[x,lambda,chisq,goodness]=...

lls_probability(model_design_matrix,observation_vector);

inactive_flg=mod2iso*(lambda(2:num_param+1)==zeros(num_param,1));
num_inactive=sum(inactive_flg);
flg_most_likely=all(~model|most_likely_model);
idx_solution=mod2idx(inactive_flg);
model_database(i,1)=num_inactive;
model_database(i,2)=goodness;
model_database(i,3)=flg_most_likely;
model_database(i,4)=idx_solution;

% fprintf(fmtlng,i,model_database(i,:),model);
end
for i=1:num_models
end
%Setup list of unique solutions based on inactive lower bound constraints.
num_solutions=0;
for i=1:num_models

idx_solution=model_database(i,4);
if (idx_solution~=model_database(idx_solution,4))

error(’Nonoptimal lls solution.’)

end
goodness=model_database(i,2);
goodness_solution=model_database(idx_solution,2);
if (abs(goodness-goodness_solution)>1.0e-10)

error(’The goodness-of-fit depends on active bound constraints.’)

end
% Check if idx_solution is already in the solution list.
found_it=0;
j=1;
while ((j<=num_solutions)&(~found_it))

if (idx_solution==solutions(j))

found_it=1;

else

end

j=j+1;

end
if (~found_it)

num_solutions=num_solutions+1;
solutions(num_solutions)=idx_solution;

end

end
% Setup solution database.
num_solutions=length(solutions);
solution_database=zeros(num_solutions,6);
for i=1:num_solutions

solution_database(i,1:4)=model_database(solutions(i),:);

end
for i=1:num_models

idx_solution=model_database(i,4);
% Find index in solution database.
j=1;
while(idx_solution~=solution_database(j,4))

j=j+1;

end
solution_database(j,5)=solution_database(j,5)+1;
if (model_database(i,3)==1)

solution_database(j,6)=solution_database(j,6)+1;

end

end
% Sort solution database.
sort_elements=zeros(1,num_solutions);
for i=1:num_solutions

num_inactive=solution_database(i,1);
goodness=solution_database(i,2);
sort_elements(i)=10000*num_inactive+min([9999,-goodness]);

end
[sort_jnk,I]=sort(sort_elements);
for j=1:6

solution_database(:,j)=solution_database(I,j);

end
% Index in solution database of solution to most likely model.
idx_solution=model_database(mod2idx(most_likely_model),4);
i=1;
while(idx_solution~=solution_database(i,4))

i=i+1;

end
idx_most_likely=i;
% Select simplest model.
best_goodness=-9999;
for i=1:num_solutions

end

end
found_it=0;
i=1;
while (~found_it)

goodness=solution_database(i,2);
flg_most_likely=solution_database(i,3);
if (flg_most_likely)

best_goodness=max(best_goodness,goodness);

goodness=solution_database(i,2);
flg_most_likely=solution_database(i,3);
idx_solution=solution_database(i,4);
if (flg_most_likely)

if (goodness>(2*best_goodness-1))

idx_simplest=i;
simplest_model=idx2mod(idx_solution,num_isomers);
log10_goodness=goodness;
found_it=1;

end

end
i=i+1;

end
% Prepare report.
fmt=’ %4.0f %2.0f %10.3f %1.0f %4.0f %3.0f %3.0f
for i=1:num_isomers

’;

fmt=[fmt,’%1.0f’];

end

for i=1:num_solutions

idx_solution=solution_database(i,4);
s=sprintf(fmt,i,solution_database(i,:),idx2mod(idx_solution,num_isomers));
if (i==1)

report=s;

else

end

report=str2mat(report,s);

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function model_output_other(output_fid,...

model_output_other

spin_names,chemical_shifts,isomer_names,torsions,...
noe_jj_names,conversion_type,geometry,observable,...
t_rms_diff_map_minima,o_rms_diff_average,...
idx_simplest,idx_most_likely,report);

% MODEL_OUTPUT_OTHER Output other model results.
fprintf(output_fid,’%s\n’,’Assignments:’);
for i=1:size(spin_names,1)

fprintf(output_fid,’%2.0f %s %8.4f\n’,i,spin_names(i,:),chemical_shifts(i));

end
fprintf(output_fid,’%s\n’,’Isomers:’);
for i=1:size(isomer_names,1)

fprintf(output_fid,...

’%2.0f %s %7.2f %7.2f\n’,i,isomer_names(i,:),torsions(i,:));

end
fprintf(output_fid,’%s\n’,’Conversion types:’);
for i=1:size(noe_jj_names,1)

fprintf(output_fid,’%2.0f %s %s\n’,i,noe_jj_names(i,:),conversion_type(i,:));

end
fprintf(output_fid,’%s\n’,’Geometries:’);
for i=1:size(noe_jj_names,1)

fprintf(output_fid,...

end
fprintf(output_fid,’%s\n’,’Observables:’);
for i=1:size(noe_jj_names,1)

fprintf(output_fid,...

’%2.0f %7.2f %7.2f %7.2f %7.2f %7.2f %7.2f %7.2f %7.2f %7.2f\n’,...
i,geometry(i,:));

’%2.0f %7.4f %7.4f %7.4f %7.4f %7.4f %7.4f %7.4f %7.4f %7.4f\n’,...
i,observable(i,:));

end
fprintf(output_fid,’%s\n%s\n’,’RMS diff torsion space minima:’,...

Minimum geometry

Best positions

Ideal geometry’);

for i=1:size(isomer_names,1)

fprintf(output_fid,...

%9.4f
’%2.0f %s
i,isomer_names(i,:),t_rms_diff_map_minima(i,:));

%9.4f

%9.4f\n’,...

end
fprintf(output_fid,’%s\n%s\n’,’RMS diff average observable:’,...

Minimum geometry

Best positions

Ideal geometry’);

’

’

%9.5f

%9.5f\n’,...

for i=1:size(noe_jj_names,1)

fprintf(output_fid,’%2.0f %s %9.5f

i,noe_jj_names(i,:),o_rms_diff_average(i,:));

end
fprintf(output_fid,’%s\n’,’Solution database:’);
for i=1:size(report,1)

if ((i==idx_simplest)&(i==idx_most_likely))

fprintf(output_fid,’%s\n’,...

[report(i,:),’ <-- Simplest and most likely models.’]);

elseif (i==idx_simplest)

elseif (i==idx_most_likely)

fprintf(output_fid,’%s\n’,[report(i,:),’ <-- Simplest model.’]);

fprintf(output_fid,’%s\n’,[report(i,:),’ <-- Most likely model.’]);

else

end

fprintf(output_fid,’%s\n’,report(i,:));

flg2ptr

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function ptr=flg2ptr(flg);
% FLG2PTR Convert flag vector to pointer vector.
% The flag vector contains zeros and nonzeros.
% Pointer is defined by index_input = pointer(index_output).
num_flg=length(flg);
num_ptr=sum(flg~=zeros(size(flg)));
if (length(num_ptr)~=1)

error(’Flags are not a vector.’);

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function model=idx2mod(idx,num_isomers);
% IDX2MOD Convert index to flag vector.
if (length(idx)~=1)

idx2mod

end
ptr=zeros(1,num_ptr);
j=0;
for i=1:num_flg

if (flg(i)~=0)

j=j+1;
ptr(j)=i;

end

error(’Nonscalar index.’);

end
model=zeros(1,num_isomers);
i=idx;
p=2^num_isomers;
if ((i<=0)|(i>=p))

error(’Index out of range.’);

end
for j=num_isomers:-1:1

p=p/2;
if (i>=p)
i=i-p;
model(j)=1;

end

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function i=irpmod(n,f,modulo);
%
if (n>=f+modulo)

IRPMOD Get n/modulo in {f,f+1,...,f+modulo-1}.

irpmod

i=n-fix((n-f)/modulo)*modulo;

elseif (n>=f)

i=n;

else

i=n+(fix((f-n-1)/modulo)+1)*modulo;

mod2idx

end
----------------------------------------------------------------------
| MATLAB v4 M-file:
----------------------------------------------------------------------
function idx=mod2idx(model);
% mod2idx Get index of model.
num_isomers=length(model);
idx=0;
p=1;
for j=1:num_isomers
if (model(j)==1)

idx=idx+p;

end
p=2*p;

end
if (idx==0)

S10

ha hd2
hb1 hd1
hb1 hd2
hb2 hd1
hb2 hd2

0.0025 0.0016
0.0035 0.0037
0.0306 0.0188
0.0196 0.0277
0.0041 0.0035

0.0417 0.0032 0.0010
0.0037 0.0354 0.0232
0.0285 0.0084 0.0149
0.0196 0.0050 0.0037
0.0037 0.0491 0.0412

0.0012 0.0399
0.0218 0.0312
0.0222 0.0036
0.0036 0.0233
0.0295 0.0227

0.0014 0.0019
0.0438 0.0454
0.0047 0.0053
0.0086 0.0070
0.0346 0.0353

Coefficients of Karplus equation J(theta) = A cos^2(theta) - B cos(theta) + C:

i

j

k

l

A

B

C

ha ca cb hb1
ha ca cb hb2
hb1 cb cg hg
hb2 cb cg hg
ha ca cb cg
ca cb cg hg
c
c

ca cb hb1
ca cb hb2

10.20 1.80 1.90
10.20 1.80 1.90
10.00 1.00 2.00
10.00 1.00 2.00
7.12 1.00 0.70
7.12 1.00 0.70
7.20 2.04 0.60
7.20 2.04 0.60

Vicinal coupling constants (Hz):

i

j

k

l

g-g-

g+g-

tg-

g-g+

g+g+

tg+

g-t

g+t

tt

ha ca cb hb1 13.8932 3.5250
2.9358 4.5211
ha ca cb hb2
2.7413 5.6097
hb1 cb cg hg
6.8430 3.5341
hb2 cb cg hg
2.8417 8.7784
ha ca cb cg
8.0283 8.7254
ca cb cg hg
1.0417 1.9929
c
2.1242 9.3572
c

ca cb hb1
ca cb hb2

2.7947 13.8982 3.1913
2.5324 13.8604
9.7203 3.0506 4.7941 13.8242 2.8342
4.0108 8.8196 12.4587 12.9997 3.3304
3.3035 12.9995
5.1230 2.9073 2.1863
2.9540 2.5415
6.4068 2.5836 8.5345
2.0529 2.2383
8.8129 6.3748 4.3246
9.6192 0.9468
6.0485 1.1086 2.0419
1.7812 2.1700
4.8369 1.9952 9.3825

3.8408 2.4651
4.0229 13.8143
2.8183 3.7890
8.9235 7.3110
8.8198 3.2304
6.2082 6.7513
1.5617 9.5994
9.6789 1.7756

error(’No isomers present.’)

end
----------------------------------------------------------------------
| MATLAB v4 M-file: ptr2mat
----------------------------------------------------------------------
function mat=ptr2mat(ptr,num_in);
% PTR2MAT Convert pointer to matrix transform.
% Pointer is defined by index_input = pointer(index_output), where
% a pointer value of minus one means that the matrix will transform
% that output element to zero.
% of the input index.
p1=ones(size(ptr));
if (any(ptr<(-p1))|any(ptr==(0*p1))|any(ptr>(num_in*p1)))

The parameter num_in gives the range

error(’Pointer out of range.’);

end
num_out=length(ptr);
mat=zeros(num_out,num_in);
for i=1:num_out

if (ptr(i)~=-1)

mat(i,ptr(i))=1;

end

end
if (any(sum(mat)>ones(1,num_in)))

error(’Duplicate pointer values.’);

end
----------------------------------------------------------------------
| MATLAB v4 M-file: rep360
----------------------------------------------------------------------
function y = rep360(x)
%REP360 Find y = x modulo 360 such that -180 < y <= 180.
%
y=x-360*ceil((x-180)/360);
if any(any((y<=-180)|(180<y)))

This version works element-by-element on matrices.

error(’This is broken. :-( !’);

end
----------------------------------------------------------------------
| MATLAB v4 M-file: str2idx
----------------------------------------------------------------------
function idx=str2idx(str,string_matrix);
% str2idx Find the row index of a string in a string matrix.
[num_strings,length_strings]=size(string_matrix);
if (length(str)~=length_strings)

error(’String lengths don’’t match.’);

end
found_it=0;
idx=1;
while ((idx<=num_strings)&(~found_it))

if (strcmp(str,string_matrix(idx,:)))

found_it=1;

idx=idx+1;

else

end

end
if (~found_it)

idx=-1;

end
----------------------------------------------------------------------
| MATLAB v4 M-file: string_trim
----------------------------------------------------------------------
function st=string_trim(s);
% STRING_TRIM Trim trailing blanks from string.
lenstr=length(s);
done=0;
while (~done)

if (lenstr>=1)

if (s(lenstr)~=’ ’)
st=s(1:lenstr);
done=1;

lenstr=lenstr-1;

else

end

else

st=’’;
done=1;

end

Isomer positions (degrees):

chi-1

chi-2

g-g- -74.67
g+g-
59.37
tg- -135.64
g-g+ -70.54
g+g+
50.32
tg+ -171.17
-70.46
g-t
60.88
g+t
-168.69
tt

-47.05
-73.78
-66.37
103.64
80.80
59.06
172.70
133.55
122.21

Distances (angstroms):

end
---------------------------------------------------------------------------------------
| Torsion angles and interatomic distances of energy minimized rotational isomers.
---------------------------------------------------------------------------------------

i

j

ha hb1
ha hb2
ha hg
hb2 hg
ha hd1
ha hd2
hb1 hd1
hb1 hd2
hb2 hd1
hb2 hd2

g-g-

g+g-

tg-

g-g+

g+g+

tg+

g-t

3.14
2.57
3.82
2.18
2.75
4.21
3.96
2.77
2.98
3.86

2.41
2.34
4.23
2.40
4.51
4.52
3.93
3.00
2.81
3.97

2.81
3.08
3.76
2.39
3.03
2.63
3.93
2.80
2.98
3.94

3.13
2.54
2.48
2.74
4.39
4.02
2.70
3.43
3.74
2.56

2.51
2.33
3.75
2.57
4.61
4.90
2.90
3.12
3.93
2.63

2.58
3.12
3.17
2.52
2.60
4.78
2.93
2.92
3.96
2.78

3.12
2.60
3.19
3.04
4.81
2.65
2.76
3.95
2.90
2.91

g+t

2.43
2.44
3.74
3.00
4.85
4.64
2.61
3.79
3.42
2.71

tt

2.54
3.12
2.42
2.97
3.82
4.41
2.59
3.70
3.54
2.70

Torsion angles (degrees):

i

j

k

l

g-g-

g+g-

tg-

g-g+

g+g+

tg+

g-t

g+t

tt

-62.95

102.76 179.27
hb1 178.58 -60.20
52.93 -142.36 -64.18
hb2 -65.24
49.24
hg
70.92
-41.61 -63.59
hg
cg
51.45 175.76
hg -161.21 173.60
hb1 -64.72
hb2

70.15
69.37 176.58
ha ca cb
56.43 -174.96
51.09 -175.26 -66.21
ha ca cb
59.92 -141.02 -166.88 -179.70 -65.28 -103.91 -112.08
hb1 cb cg
141.59 132.88
hb2 cb cg
54.29 -179.73 -47.89
ha ca cb
17.71
5.85
57.29
ca cb cg
57.75 -170.15
52.33 -170.57 -66.24
ca cb
c
c
171.96 -55.26
50.98
ca cb
---------------------------------------------------------------------------------------
| Calculated vicinal coupling constants and NOESY cross relaxation rates
| of energy minimized rotational isomers.
---------------------------------------------------------------------------------------

-52.33 104.79
-14.48
53.89
178.25 -15.04
52.86 -137.71 -63.71
52.84
-22.82

168.84 -50.41
-38.08 -59.22

166.37 -55.20

51.46 165.99

65.51 -179.59

-57.77

78.73

NOE scale factor:

13.7329 angstroms^6 x second^-1

NOESY cross relaxation rates (second^-1):

i

j

ha hb1
ha hb2
ha hg
hb2 hg
ha hd1

g-g-

g+g-

tg-

g-g+

g+g+

tg+

g-t

g+t

tt

0.0144 0.0704
0.0477 0.0835
0.0044 0.0024
0.1279 0.0712
0.0321 0.0016

0.0280 0.0147
0.0159 0.0508
0.0049 0.0586
0.0736 0.0325
0.0176 0.0019

0.0548 0.0471 0.0150
0.0867 0.0150 0.0440
0.0049 0.0135 0.0130
0.0480 0.0540 0.0174
0.0014 0.0441 0.0011

0.0668 0.0507
0.0652 0.0149
0.0050 0.0685
0.0189 0.0200
0.0011 0.0044

S11

