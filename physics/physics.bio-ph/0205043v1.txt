2
0
0
2
 
y
a
M
 
5
1
 
 
]
h
p
-
o
i
b
.
s
c
i
s
y
h
p
[
 
 
1
v
3
4
0
5
0
2
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

The Kinematics of Protein Folding

Sean Cahill,1, ∗ Michael Cahill,2, † and Kevin Cahill3, ‡
1Department of Computer Science, University of New Mexico, Albuquerque, NM 87131
2School of Medicine, Uniformed Services University, Bethesda, Maryland 20814
3Department of Physics and Astronomy, University of New Mexico, Albuquerque, NM 87131
(Dated: February 20, 2014)

We oﬀer simple solutions to three kinematic problems that occur in the folding of proteins. We
show how to construct suitably local elementary Monte Carlo moves, how to close a loop, and how
to fold a loop without breaking the bond that closes it.

PACS numbers: 87.15.-v,87.15.Cc,02.70.-c,05.10.Ln

Three Kinematic Problems
When one uses a Monte Carlo technique to search for the
low-energy states of a protein, three related kinematic
problems arise:

1. How does one design suitably local elementary
Monte Carlo moves? The choice of elementary
moves is almost as important as the choice of the
energy function.

2. How does one conﬁgure a strand of protein back-
bone between two ﬁxed points? This problem oc-
curs when one is given a primary sequence that
might form a loop between the two cysteines of a
disulﬁde bridge. It also occurs if one adds or deletes
residues in a backbone strand in order to model a
homologous or mutant protein from a known x-ray
structure.

3. How does one make Monte Carlo moves that are so
strictly local that they do not break the bond that
closes the loop?

Local Moves
The positions ~ri of the atoms of a protein are local coor-
dinates, but they are inconvenient. The dihedral angles,
φi and ψi, describe the state of a protein more eﬃciently,
but they are not local coordinates. A change in a dihe-
dral angle near the center of a protein rotates half of the
molecule relative to the other half, moving distant atoms
farther than nearby ones. Such thrashing violates the
conservation of angular momentum and of energy, and
engenders steric clashes. Real proteins do not thrash;
they wriggle. So if one uses the dihedral angles as non-
local coordinates, then one must craft elementary moves
that are suitably local.

How does one combine rotations about dihedral bonds
ˆbi so that the net motion is suitably local? This problem
was addressed by G¯o and Scheraga [1] and has since been
discussed in many papers on proteins [2, 3, 4, 5] and
polymers [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]. But
rotations are complicated. They are 3 × 3 orthogonal
matrices with elements that are sines and cosines of the
relevant angles. The nonlinearity of these trigonometric
functions has held back progress on this problem.

Yet every smooth function becomes linear when exam-
ined at a small-enough scale. Rotations of inﬁnitesimally
small angles are linear functions of those angles. Linear
algebra is relatively simple.

The change ~dr in the position ~r of an atom due to a
rotation by a small angle ǫ about a bond axis ˆb is the
cross-product of ǫ ˆb with the vector to the point ~r from
any point ~c on the axis

~dr = ǫ ˆb × (~r − ~c).

(1)

So the change ~dr due to n rotations by the small angles
ǫi about the bonds ˆbi is the sum

~dr =

ǫi ˆbi × (~r − ~ci)

n

i=1
X
n

=

=

i=1
X
n

 

i=1
X

ǫi ˆbi

!

ǫiˆbi × (~r − ~a + ~a − ~ci)

(2)

× (~r − ~a) +

ǫi ˆbi × (~a − ~ci)

n

i=1
X

which is a rotation and a translation. The point ~a is
entirely arbitrary; a convenient choice is the average po-
i ~ci of the points ~ci.
sition ~a = (1/n)
The rotation is less local than the translation because
its eﬀect is proportional to the length of the vector (~r−~a).
But it is easy to make the net rotation

P

vanish. A set of n vectors ˆbi is said to be linearly depen-
dent if there are coeﬃcients ǫi such that

n

ǫi ˆbi

× (~r − ~a)

 

i=1
X

!

ǫi ˆbi = ~0.

n

i=1
X

(3)

(4)

Any set of n vectors ˆbi in a space of d dimensions is lin-
early dependent if n > d. Since the bond vectors ˆbi are
three dimensional, any four or more are linearly depen-
dent. So if we use at least 4 bond vectors ˆbi, then we
always may ﬁnd angles ǫi that make the sum (4) vanish.

We may ﬁnd these angles by performing a singular-
value decomposition. Every n × m real matrix A may be
written as the product of an n × n orthogonal matrix U,
an n × m matrix Σ, and an m × m orthogonal matrix V
in the singular-value decomposition

A = U Σ V .

(5)

The matrix Σ is zero except for its diagonal matrix ele-
ments, which are the non-negative singular values of the
matrix A.

To ﬁnd small angles ǫi, such that

(6)

(7)

ǫi ˆbi = ~0,

n

i=1
X

b14
b24
b34

0
0
0 











b13
b23
b33

0
0
s3

n

k=1
X

we set n = 4 and form a 3×4 matrix A whose columns are
the 4 bond vectors ˆbi. Its singular-value decomposition
is

A =





= U

b11
b21
b31

b12
b22
b32

s1
0
0

0
s2
0





V11 V12 V13 V14
V21 V22 V23 V24
V31 V32 V33 V34
V41 V42 V43 V44

.






Because the matrices U and V are orthogonal, their rows
and columns are orthonormal vectors. In particular

Vik V4k = δi4.

(8)

So we may take the small angles to be ǫi = x V4i, where
x is a scale factor, because the orthonormality (8) of the
rows of V then implies

V11 V12 V13 V14
V21 V22 V23 V24
V31 V32 V33 V34
V41 V42 V43 V44

ǫ1
ǫ2
ǫ3
ǫ4











= 









0
0
0
x






V ǫ = 




and so

Aǫ =

ˆbi ǫi = U

n

i=1
X

0
s2
0

0
0
s3

s1
0
0





0
0
0
x

0
0
0 












= ~0.

(9)

Lapack [17] is stable correct software that solves many
problems of linear algebra.
Its subroutine dgesvd per-
forms singular-value decompositions in double-precision
arithmetic. The call to

dgesvd(n, a, 3, 4, A, 3, S, U, 1, V, 4, w, 402, info)

(10)

returns the matrix V , and the small angles ǫi may be
taken to be

ǫi = x V4i

(11)

2

Thrashing

Fourfold Thrashing

Wriggling

Sevenfold Thrashing

Sevenfold Wriggling

Sevenfold Way

d
s
m

r

)
˚A
(

1.5

2.5

3

2

1

0.5

0

0

20000

40000

60000

80000

100000

Monte Carlo sweeps

FIG. 1: For the protein 16pk, the lines trace the mean values
of the rmsd for 10 runs guided by algorithms that respec-
tively use thrashing, fourfold thrashing, wriggling, sevenfold
thrashing, sevenfold wriggling, and the sevenfold way.

where x is a random number in the range −δ < x < δ
where δ is small enough that the small-angle approxima-
tions (1–3) are valid. We set δ = 0.0125.

We use the word wriggling to denote this way of can-
celing the non-local eﬀects of rotations. We tested our
wriggling algorithm in Monte Carlo simulations of pro-
tein folding. To separate kinematic from dynamic is-
sues, we used as a nearly perfect but highly artiﬁcial
energy function, the rmsd between the ~Cαi of our wrig-
gling protein and those ~C0
αi of its pdb ﬁle. We tested
wriggling against an algorithm in which successive di-
hedral angles were varied independently, thrashing, and
also against one in which the dihedral angles were varied
in groups of four, fourfold thrashing. We made 10 runs
starting from highly denatured coils of phosphoglycerate
kinase (16pk.pdb, 415 aa). After 100,000 Monte Carlo
sweeps, the wriggling, thrashing, and fourfold-thrashing
algorithms respectively reduced their mean rmsd’s to
1.66±0.03, 2.44±0.08, and 1.88±0.04 ˚A [18]. In Fig. 1 the
mean rmsd’s are plotted against the number of sweeps.
The use of n = 4 bonds ˆbi is the simplest way of cancel-
ing the highly non-local eﬀects of rotations. But it is not
the best way. In further tests we have found much lower
rmsd’s by using n = 7 bonds ˆbi. We call this sevenfold
wriggling. The call now is

dgesvd(n, a, 3, 7, A, 3, S, U, 1, V, 7, w, 460, info)

(12)

and the angles are given by ǫi = x V7i where |x| < δ
is a random number, and δ is small enough that the
small-angle approximations (1–2) are valid. We used
δ = 0.0125.

Sevenfold wriggling drops the mean rmsd for 16pk to

3

exponential

Thrashing
linear

0.65 ± 0.01 ˚A, as shown in Fig. 1. We also experimented
with using more than seven bonds: n = 8 gave 0.68 ˚A;
n = 9 gave 0.65 ˚A; n = 10 gave 0.79 ˚A; and n = 20
gave 1.38 ˚A. Sevenfold thrashing gave a mean rmsd of
1.57 ± 0.03 ˚A.

By using seven or more bonds, we may cancel not only

the net rotation

but also the net translation

n

 

i=1
X

ǫi ˆbi

!

n

i=1
X

ǫi ˆbi × (~a − ~ci) = 0.

(14)

To see why this is so, we write these two conditions in
terms of the six-vectors

× (~r − ~a) = 0

(13)

d
s
m

r

)
˚A
(

1.5

2.5

3

2

1

0.5

0

0

as

si =

ˆbi
ˆbi × (~a − ~ci)

(cid:19)

(cid:18)

n

i=1
X

ǫi si = 0.

(15)

(16)

Because any 7 or more 6-vectors si are linearly depen-
dent, such small angles ǫi always exist if at least 7 bonds
ˆbi are used. We call such moves strictly local wriggling.
One might think (as we did) that strictly local wrig-
gling is the ideal way to fold a protein. But it is very
slow because it leaves the ﬁrst and last backbone atoms
unmoved to ﬁrst order in the small angles ǫi. What does
work well is the use of sevenfold wriggling and strictly
local wriggling on alternate Monte Carlo sweeps along
the protein. We call this technique the sevenfold way.
It reduced the mean rmsd of 16pk to 0.44 ± 0.02 ˚A, as
shown in Fig. 1.

As we shall see in what follows, however, strictly local
wriggling is ideally suited to our third kinematic prob-
lem, the folding of a loop without breaking the bond
that closes it.

Because our artiﬁcial energy function, the rmsd, is not
directly related to an energy, our ﬁxed-temperature sim-
ulations were carried out at zero temperature. We did
however test the sevenfold way against thrashing in runs
with simulated annealing. In these Monte Carlo simula-
tions, the temperature dropped either linearly or expo-
nentially with the sweep number from a very high T at
the start of the simulation to T = 0 at 80,000 sweeps.
These runs ﬁnished with 20,000 sweeps at T = 0.

As shown in Fig. 2, the sevenfold way reduced the mean
rmsd of 16pk to 0.42 ± 0.01 ˚A with exponential cooling
and to 0.40 ± 0.02 ˚A with linear cooling. thrashing re-
duced the mean rmsd to 2.01 ± 0.03 ˚A with exponential
cooling and to 1.58 ± 0.15 ˚A with linear cooling.

exponential

linear

Sevenfold Way

20000

40000

60000

80000

100000

Monte Carlo sweeps

FIG. 2: For the protein 16pk, the lines trace the mean values
of the rmsd for 10 runs guided by algorithms that respec-
tively use thrashing and the sevenfold way with linear and
exponential cooling.

To Close a Loop
Suppose that we have a strand of backbone in which there
are two cysteine residues, and that we wish to make a
disulﬁde bridge between them, forming a loop. Provided
the strand of backbone is long enough, we may change
the dihedral angles of the residues of the strand between
the cysteines so as to move the β-carbon and the γ-sulfur
of the second cysteine into the required positions opposite
those of the ﬁrst cysteine, which is held ﬁxed. Let ~Cβ0
and ~Sγ0 be the points to which the β-carbon and the
γ-sulfur should be moved, and let ~Cβ and ~Sγ be their
present locations.

We have seen in Eq.(2) that several small rotations
amount to a net rotation and a net translation. We may
choose the small angles of the rotations so as to correctly
orient the ~Cβ − ~Sγ bond and to move it to the right po-
sition. The required rotation and translation are

×

~Sγ0 − ~Cβ0

(cid:16)
~Sγ0 + ~Cβ0 − ~Sγ − ~Cβ

(cid:17)

(cid:17)
.

~θ =

~t =

~Sγ − ~Cβ
(cid:16)
1
2

(cid:16)

(cid:17)

(17)

(18)

Thus we must perform n ≥ 6 small rotations of angle ǫi
about bond ˆbi so that the net rotation is

~θ =

ǫi ˆbi

× (~r − ~a)

(19)

i=1
X
and the net translation is

 

!

~t =

ǫi ˆbi × (~a − ~ci).

(20)

n

n

i=1
X

d
s
m

r

)
˚A
(

2.5

1.5

0.5

3

2

1

0

0

2

4

6

8

10

Applications of the Transport Algorithm

FIG. 3: The values of the rmsd of ~Cβ and ~Sγ from ~Cβ0 and
~Sγ0 are plotted in 10 applications of the transport algorithm
to four random coils of the 44-bond loop of the protein 1boy.

These two conditions may be written in terms of the 6-
vectors

as

si =

ˆbi
ˆbi × (~a − ~ci)

(cid:19)

(cid:18)

n

i=1
X

ǫi si =

.

~θ
~t

(cid:18)

(cid:19)

(21)

(22)

.

(cid:1)

We form a matrix A whose ﬁrst n columns are the
6-vectors si and whose last column is the 6-vector
−

~θ ~t
In our transport algorithm, we use all the bonds of the
(cid:0)
loop. Thus in the case of the loop between residues 186
and 209 of the class-2 cytokine receptor 1boy.pdb we
used n = 44 bonds. A call to dgesvd returns the matrix
V , and the small angles ǫi are given by a suitably safe
version of ǫi = V (j, i)/V (j, n + 1), where j > 6 is the
row index with the largest value of |V (j, n + 1)|. The
application of 10 transports closed the loop of 1boy to
less than 10−8˚A, as shown in Fig. 3.

To Fold a Loop
When the preceding algorithm closes a loop, the loop
may well be of quite high energy with steric conﬂicts.
It is therefore necessary to vary the conformation of the
loop without breaking it. strictly local wriggling moves
are ideally suited to this task. But we have found that
the sevenfold way combined with the transport algorithm
does an even better job. We applied the transport algo-
rithm after every 200,000 sweeps of the sevenfold way
using as an energy function the all-atom rmsd between
the atoms of the folding loop and those of the pdb ﬁle. In
ten runs of 2,000,000 sweeps from fully denatured coils of
the 44-bond loop of 1boy, this process reduced the mean
all-atom rmsd of the loop to 0.55 ± 0.02 ˚A and the mean
whole-backbone rmsd of the loop to 0.32 ± 0.006 ˚A.

Summary
We have presented simple solutions to three kinematic

4

problems that occur in the folding of proteins. We have
shown how to construct suitably local elementary Monte
Carlo moves, how to close a loop, and how to fold a loop
without breaking the bond that closes it.

We have beneﬁted from conversations with S. Atlas,
D. Baker, M. Cahill, P. Cahill, K. Dill, D. Dix, H. Frauen-
felder, K. Frost, N. van Gulick, U. Hansmann, G. Herling,
D. Lanar, A. Parsegian, C. Seok, and C. Strauss. One
of us (SC) would like to thank Ken Dill for the hospital-
ity extended to him at UCSF. The UNM Research Al-
locations Committee provided a grant for software. Our
computations were performed in the Albuquerque High-
Performance Computing Center.

∗ Electronic address: locky@cs.unm.edu
† Electronic address: s4mcahill@usuhs.mil
‡ Electronic address: cahill@unm.edu

[1] N. G¯o and H. A. Scheraga, Macromolecules 3, 178 (1970).
[2] U. Burkert and N. L. Allinger, Molecular Mechanics, ACS
Monographs (American Chemical Society, Washington,
D.C., 1982).

[3] R. Bruccoleri and M. Karplus, Macromolecules 18, 2767

(1985).

[4] K. A. Palmer and H. A. Scheraga, J. Computational

Chemistry 12, 505 (1991).

[5] A. Elofsson, S. M. Le Grand, and D. Eisenberg, Proteins:

Structure, Function, and Genetics 23, 73 (1995).

[6] E. Helfand, Journal of Chemical Physics 54, 4651 (1971).
[7] J. Skolnick and E. Helfand, Journal of Chemical Physics

72, 5489 (1980).

[8] E. Helfand, Z. R. Wasserman, and T. A. Weber, Macro-

molecules 13, 526 (1980).

[9] E. Helfand, Z. R. Wasserman, and T. A. Weber, Poly-
mer Preprints (American Chemical Society, Division of
Polymer Chemistry) 22, 279 (1981).

[10] E. Helfand, Z. R. Wasserman, T. A. Weber, J. Skol-
nick, and R. J. H., Journal of Chemical Physics 75, 4441
(1981).

[11] T. A. Weber, E. Helfand, and Z. R. Wasserman, Simula-
tion of Polyethylene (American Chemical Society, Wash-
ington, DC, 1983), molecular-based study of ﬂuids 20, pp.
487–500, no. 204 in ACS Advances in Chemistry Series.

[12] E. Helfand, Science 226, 647 (1984).
[13] L. R. Dodd, T. D. Boone, and D. N. Theodorou, Molec-

ular Physics 78, 961 (1993).

[14] E. Leontidis, J. J. de Pablo, M. Laso, and U. W. Suter,

Advances in Polymer Science 116, 283 (1994).

[15] T. F. Schatzki, Polymer Preprints (American Chemical
Society, Division of Polymer Chemistry) 6, 646 (1965).
[16] I. Kolossv`ary and G. M. Keserˆu, Journal of Computa-

tional Chemistry 22, 21 (2001).

[17] E. Anderson, Z. Bai, C. Bischof, S. Blackford, J. Demmel,
J. Dongarra, J. Du Croz, A. Greenbaum, S. Hammarling,
A. McKenney, et al., LAPACK Users’ Guide (SIAM,
Philadelphia, PA, 1999), 3rd ed., available on-line at
http://www.netlib.org/lapack/lug/lapack lug.html.
[18] M. Cahill, S. Cahill, and K. Cahill, The Biophysical Jour-

nal 82, 2665 (2002), cond-mat/0108218.

