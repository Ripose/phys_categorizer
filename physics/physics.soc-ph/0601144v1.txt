6
0
0
2
 
n
a
J
 
9
1
 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 
1
v
4
4
1
1
0
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Eﬀect of size heterogeneity on community identiﬁcation in complex networks

Leon Danon,1 Albert D´iaz-Guilera,1 and Alex Arenas2
1Departament de F´isica Fonamental,Universitat de Barcelona, Marti i Franques 1, 08028 Barcelona, Spain
2Departament d’Enginyeria Inform`atica i Matem`atiques,
Campus Sescelades, Universitat Rovira i Virgili, 43007 Tarragona, Spain

Identifying community structure can be a potent tool in the analysis and understanding of the
structure of complex networks. Up to now, methods for evaluating the performance of identiﬁcation
algorithms use ad-hoc networks with communities of equal size. We show that inhomogeneities
in community sizes can and do aﬀect the performance of algorithms considerably, and propose
an alternative method which takes these factors into account. Furthermore, we propose a simple
modiﬁcation of the algorithm proposed by Newman for community detection (Phys. Rev. E 69
066133) which treats communities of diﬀerent sizes on an equal footing, and show that it outperforms
the original algorithm while retaining its speed.

PACS numbers: 89.75.Fb, 89.75.Hc, 89.20.Hh

I.

INTRODUCTION

Natural and artiﬁcial systems often have architectures
which are best described as complex networks. The
topologies of networks have been extensively studied in
various disciplines in recent years, particularly within
physics [1, 2, 3, 4, 5]. A part of that research has been
directed at the study of modules or communities in net-
works. Communities can be deﬁned as subsets of nodes
which are densely connected to each other and loosely
connected to the rest of the network. Such structures
have been discovered in networks as diverse as banking
networks, metabolic networks, the airport network and
most notably in social networks [6, 7, 8, 9, 10].

Despite eﬀorts spanning several decades in this direc-
tion [11, 12], the identiﬁcation of community structure in
networks remains an open problem. The space of possible
partitions of even a small network is very large indeed.
Several methods have been proposed for ﬁnding mean-
ingful partitions in networks of reasonable size. These
methods vary considerably from one another, not only in
their general approach, but also in sensitivity and compu-
tational eﬀort (for recent reviews, see [13, 14] and chapter
7.1 of [5]). In general, those methods which are more ac-
curate tend to be able to explore a larger portion of the
partition space, and are therefore computationally expen-
sive (see for example [15, 16]). On the other hand, those
methods which explore a smaller region of the partition
space tend to be faster, but as a consequence, less accu-
rate [17, 18]. The challenge, therefore, is to ﬁnd methods
which are both fast and accurate, and several attempts
have been made [19, 20, 21].

In this paper we reevaluate the benchmark most com-
monly used at present to measure the sensitivity of a
particular community identiﬁcation algorithm [22]. This
benchmark, although useful, does not take into ac-
count the fact that networks exhibit community structure
where the community sizes are highly skewed, despite the
fact that several authors have observed that distributions
of community sizes seem to follow power laws in many

cases [17, 18, 23, 24, 25, 26].
In the next section we
propose a benchmark for measuring algorithm sensitiv-
ity which takes this skew into account. In section III we
examine Newman’s Fast algorithm (NF) for community
detection [17], and see that it is aﬀected by a skew in the
community size distribution, showing a tendency to ﬁnd
large communities at the expense of smaller ones. We
propose a modiﬁcation of the algorithm, in which the
communities of diﬀerent sizes are treated equally, and in
section IV we show that it outperforms the NF algorithm
in sensitivity, with no tradeoﬀ in terms of computational
eﬀort.

II. EVALUATING ALGORITHM
PERFORMANCE ON AD-HOC NETWORKS

To quantify how good a particular network partition
is, the modularity measure Q was introduced in [22], and
has been widely used since then. Based on a predeﬁned
set of communities i in a network, a community connec-
tion matrix eij is deﬁned, where each member represents
the proportion of links from community i to community
j. Note that the matrix is normalised, that is, each of
the members of the matrix eij = Lij
, Lij being the
Ltotal
number of links between community i and community j,
and Ltotal is the total number of links in the network
[22]. The proportion of links belonging to community i
is denoted ai and is simply the sum, ai =
Pi eij. The
computation of Q is as follows:

(eii − a

2
i )

Q =

X
j

(1)

The modularity, Q, quantiﬁes the diﬀerence between
the intra-community links and the expected value for the
same communities in a randomised network. Note that
the modularity is a relative value, and while it gives an
idea of how good a partition of the network is, it cannot
tell us whether this partition is the best one possible. It

does provide a useful way of comparing the performance
of diﬀerent community identiﬁcation algorithms applied
on one particular network.

The method most commonly used to compare the sen-
sitivity of community identiﬁcation methods was also
proposed in [22], and is independent of the modularity
It uses a benchmark test based on networks
measure.
typically containing 128 nodes grouped into four com-
munities which contain the same number of nodes, 32,
and links (on average 16 per node, k = 16). Pairs of
nodes belonging to the same community are linked with
probability pin, whereas pairs belonging to diﬀerent com-
munities are joined with probability pout. The value of
pout controls the average number of links a node has to
members of any other community, zout. While pout (and
therefore zout) is varied freely, the value of pin is cho-
sen to keep the total average node degree k constant.
As zout is increased from zero, the communities become
more and more fuzzy and harder to identify. Diﬀerent
community detection algorithms, when applied to these
networks may give diﬀerent results, reﬂecting their sensi-
tivity. Since the ‘real’ community structure is well known
in this case, it is possible to measure how well the par-
titions the algorithm ﬁnds compare to the original parti-
tions.

Here we use a measure based on information theory
for this purpose. The normalised mutual information,
I(A, B), explicitly measures the amount of information
about partition A that is gained by knowing partition
B [27, 28].
In other words, it is the amount of infor-
mation the algorithm is able to extract from the pre-
deﬁned partition just from the topology.
[14]. This in-
dependent measure is based on deﬁning a confusion ma-
trix M, where rows correspond to “real” communities,
and columns correspond to “found” communities. The
element of M, Mij is the number of nodes in the real
community i that appear in the found community j. A
measure of similarity between the partitions, is then:

I(A, B) =

−2

cA
i=1

P

cA
i=1 Mi. log

cB
j=1 Mij log (cid:16)

Mij N
Mi.M.j (cid:17)
cB
j=1 M.j log (cid:16)

+

P

P
Mi.
N (cid:1)

(cid:0)

P

M.j
N (cid:17)

(2)
where the number of real communities is denoted cA
and the number of found communities is denoted cB, N
is the number of nodes, the sum over row i of matrix Mij
is denoted Mi. and the sum over column j is denoted
M.j.

Because of the particular deﬁnition of these ad-hoc net-
works, it is tempting to think that similar networks with
four communities sharing the same value of zout/k will
have an equivalent community structure, and that a par-
ticular method of community identiﬁcation will perform
equally well. This, however, is highly dependent on the
number of nodes that the network has, and more im-
portantly the number of nodes in each community. For
example a network with 128 nodes with four communities

2

NF 128
Modified 128
NF 512
Modified 512
Pre-defined

NF 128
Modified 128
NF 512
Modified 512

Q

)

B
A

,

(
I

0.6
0.5
0.4
0.3
0.2
0.1

0.8

0.6

0.4

0.2

0

0

0.2

0.4

0.6

0.8

1

zout/k

FIG. 1: (Colour online) Sensitivity of the NF algorithm and
the modiﬁcation described in Section III, applied to ad-hoc
networks with four equal-sized communities, for two network
sizes, 128 nodes and 512 nodes, with average degree k = 16.
The top ﬁgure shows the variation of modularity found by the
algorithms with zout/k. For low values of zout/k, the value of
Q of the partitions found closely follow the expected modular-
ity. For higher values of zout/k, the partitions found show a
better modularity than pre-deﬁned partitions. There is little
diﬀerence between results for diﬀerent network sizes. In the
bottom ﬁgure the comparison between pre-deﬁned and found
partitions using the mutual information measure I(A, B) is
shown. Both algorithms have similar sensitivity for both net-
work sizes, but the sensitivity is reduced at the same value
of zout/k for the larger network, suggesting that communities
are more fuzzy the larger they are as discussed in the text.

each of size 32 with k = 16 and zout = 6, say, will have a
better deﬁned community structure than a network with
the same values of k and zout which is comprised of 512
nodes with four communities each of size 128. This is
simply due to the fact that the internal links are spread
out over a larger number of nodes, thus making the com-
munities less dense, in terms of proportion of actual links
to possible links. In Figure 1, we can see that the same
algorithm will perform signiﬁcantly better on a network
with 128 nodes than on one with 512 nodes with the same
values of k and zout.

Furthermore, in real networks the distribution of com-
munity sizes is highly skewed, and has been observed to
follow power laws in many cases [13, 18, 23, 24, 25]. We
argue that this diﬀerence in sizes is important and aﬀects
diﬀerent identiﬁcation algorithms in diﬀerent ways. To
be able to evaluate the eﬀect that a spread in community
sizes will have on the performance of any algorithm, we
ﬁrst need to be able to create networks with controlled
community structure of diﬀering community sizes.

Consider a set of Nc communities where each commu-
nity contains ni nodes. Considering pairs of nodes, if
both nodes are in the same community a link is placed
between them with probability Pin, otherwise they are
connected with probability Pe. Should Pin be constant
for all communities, the number of links of community i
would scale as the square of its size, n2
i . To give the same
weight to communities of diﬀerent sizes, we propose that
Pin = F/ni where F is a control parameter. In this way
we are able to control both internal and external cohesion

by varying F and Pe respectively. This method of net-
work creation is equivalent to creating a random Erd¨os-
Renyi network with the probability of linking being equal
to Pe and then superposing Nc random networks whose
sizes correspond to ni where the probability of internal
linking is F/ni.

Figure 2(a and b) shows two networks with 5 commu-
nities each, containing one community of 64 nodes and
4 communities of 16 nodes each for two diﬀerent values
of Pe and F . Figure 2c shows the value of Q when the
network partition corresponds exactly to the prescribed
communities as a function of F and Pe. While these com-
munity sizes are chosen to be illustrative, this method of
network creation is completely general and community
sizes can be drawn from any given distribution.

(a)

(b)

N/A
0.0 
0.2 
0.4 
0.6 

14

12

10

8

6

4

2

F

i

 
,
n
o
s
e
h
o
c
 
l
a
n
r
e
t
n
I

0.005

0.010

0.015

0.020

0.025

External cohesion, Pe

(c)

FIG. 2:
(Colour online) Two examples networks created as
described in the main text with 5 communities four of which
have 16 nodes and one has 64, (a) has Pe = 0.007 and F = 8
and in (b) Pe = 0.03 and F = 3.
(c) The modularity Q
of networks as generated in the main text for values of Pe
between 0.001 and 0.03, and values of F between 1 and 14.
The dark zones represent parts of the parameter space where
the networks constructed were disconnected for more than 1
in 100 realisations.

3

III. DYNAMICS OF THE FAST ALGORITHM
AND ITS MODIFICATION

The performance of various community identiﬁcation
algorithms has recently been studied both in terms of
speed and in terms of accuracy. Having a method of gen-
eration of networks with communities of diﬀering sizes
puts us in a position to test the way these sizes can af-
fect the performances of identiﬁcation algorithms.
In
particular we concentrate on Newman’s Fast algorithm
It is dubbed fast since it runs in
as proposed in [17].
almost linear time for sparse networks, O(n log
n) [18],
and while it is not the most accurate method, it remains
the only algorithm able to extract community structure
information from very large networks [14].

2

Let us consider a network that has been partitioned in
some arbitrary way. Joining two neighbouring partitions
i and j, would produce a change in modularity:

dQij = 2(eij −

aiaj
2Ltotal

)

(3)

This can be interpreted as a measure of aﬃnity of com-
munities i and j, and can subsequently be used to ﬁnd
the two communities which are most alike (highest dQ).
Starting with each node in the network in its own commu-
nity, one can join pairs of communities with the highest
dQ. This process can then be performed and repeated
until the whole network is contained in one community.
As the author states in [13], this is very similar to agglom-
erative hierarchical clustering methods [29, 30]. Here,
“distance” measures such as single linkage or complete
linkage are replaced by dQ. It also diﬀers from hierar-
chical clustering in that not all pairs of clusters are com-
pared, only those connected by real links in the network.
Let us analyse carefully how the algorithm proceeds
when applied on the well studied karate club friendship
network of Zachary [31]. Data on the network was col-
lected over a two year period before the club split due
to an internal dispute during which some of the mem-
bers started their own club. The ﬁssure is apparent in
the topology of the network before the split (see Figure
3a), and this data set has become somewhat of a stan-
dard case study for community detection algorithms in
the literature [10, 13, 19, 20, 21, 32, 33, 34, 35].

Figure 3c shows the dendrogram as generated by the
fast algorithm, with the diﬀerent colours depicting the
partition at the highest value of Q = 0.3807. In the ﬁrst
step of the algorithm, ai is simply the degree of node
i and eij is 1 for any neighbour pair. Hence, the pair
of nodes that will be joined ﬁrst is the neighbour pair
that has the smallest product of degrees. In the case of
the karate club network, these are nodes 6 and 17 with
degrees 3 and 2 respectively. Note that once a commu-
nity has joined with another, the resulting community
tends to join again, since the ﬁrst term of 4, eij, tends
to be increased by the joining of neighbouring communi-
ties, especially in networks with high clustering. So, the

17

6

5

22

18

25

(c)

(d)

35

30

25

20

15

10

5

0

35

30

25

20

15

10

5

0

e
m
T

i

e
m
T

i

cluster of nodes 6 and 17 absorb their common neigh-
bour, node 7. This larger cluster now has an even larger
eij to common neighbours and in the following steps ab-
sorbs nodes 1, 5 and 11, until no common neighbours
exist. This process occurs in a similar fashion for nodes
24, 27, 28, 30 and 34. We observe that when choosing
the pair of communities to be joined, large communities
are favoured at the expense of smaller ones. In turn, this
leads to the formation of a few large clusters in networks
where a larger number of smaller clusters may represent
the real community structure better.

(a)

7

11

13

12

4

1

2

32

28

8

26

14

9

31

3

20

10

29

33

34

16

19

15

24

30

21

23

27

(b)

0.5

0.4

0.3

Q

0.2

0.1

0

0

10

20

Time

30

6  17 7  1  5  11 12 20 13 4  8  3  10 14 18 2  22 9  31 33 15 16 19 26 25 32 29 27 30 34 24 28 21 23

18 2  22 20 12 1  13 4  8  14 10 3  29 11 5  17 6  7  28 24 26 25 32 21 34 27 30 15 33 16 19 23 31 9 

FIG. 3: (Colour online) (a) Zachary’s karate club network
(b) Modularity as algorithms progress (c) Dendrogram rep-
resenting the progress of fast algorithm, where formation of
large clusters is favoured early (d) Dendrogram representing
the progress of our modiﬁcation, all clusters are treated on an
equal footing and individual nodes are absorbed into clusters
early.

To avoid this and to treat each community as equal,

we normalise dQ by the number of links:

dQ

′
ij =

dQij
ai

2
ai

=

(eij −

aiaj
2ltotal

)

(4)

It is important to note that while the pair of nodes
with the largest value of dQ′ is chosen, the real value of Q
must be calculated at each step using the original dQ, or
measuring the value of Q explicitly. Note that as opposed
to the original formulation, this measure is asymmetric,
that is dQ′
ij 6= dQ′
ji. But, the implementation of the
algorithm ensures that both dQ′
ji are considered
when choosing the pair of communities to join, and, since
we are interested in only the largest value of dQ′ at each
step, this poses no problem.
In essence, the modiﬁed
algorithm is able to take a diﬀerent path in the partition

ij and dQ′

4

space from the original, in part due to this asymmetry.
For each possible merging of neighbouring communities,
there exists only one value of dQ, whereas dQ′ takes two
diﬀerent values, if the two communities have a diﬀerent
number of links ai 6= aj.

This normalisation insures that clusters with fewer
links have the largest values of dQ′, and therefore are
joined earlier. Taking the karate club network as an ex-
ample again, we see that neighbouring nodes where one
neighbour has the smallest degree are joined ﬁrst. This
ensures that nodes with only one link are joined at the
beginning of the process, such as node 12 (see Fig. 3d.).
Curiously, using another method based on synchronisa-
tion recently proposed by two of us produces a very simi-
lar dendrogram [36]. We argue that this is a better way to
proceed. A partition containing a single node will always
contribute negatively to the value of Q, even if the degree
of that node is 1. For example in [37] the authors ﬁnd
a partition with Q = 0.412 which has node 12 as a sep-
arate community, using an entirely diﬀerent method for
exploring the partition space. But, Qi=12 = −1/78 and
the same partition, only with node 12 contained within
it’s neighbour community, has Q = 0.418 [42].

While the NF algorithm also ensures that single node
partitions are not found in the optimal state, our modiﬁ-
cation performs this absorption much earlier. This means
that in the ﬁrst few steps of our algorithm will inevitably
appear to performing worse than the NF algorithm. As
it progresses, however, it overtakes the NF algorithm in
terms of Q, as we can see in Figure 3b. Indeed, we ﬁnd
that when our modiﬁcation does not match the perfor-
mance of the NF algorithm in terms of Q, it improves
it.

IV. TESTING THE MODIFICATION

To test the performance of the modiﬁcation proposed,
we have applied the algorithm on several networks, both
ad-hoc and real. To begin with we look at networks with
four equal sized communities, as described in [22].

As zout/k increases, the modularity of the pre-deﬁned
partition decreases as Q = 3/4 − zout/k irrespective of
network or community size. Figure 1a shows the ex-
pected modularity value compared with those found by
the NF algorithm and our modiﬁcation. For low values of
zout/k both algorithms ﬁnd communities with the value
of Q following the expected value closely. For higher
zout/k these values deviate from the expected value as
the communities found by the algorithm do not corre-
spond exactly to pre-deﬁned communities.
In fact, as
zout/k increases above 0.5 the pre-deﬁned partitions give
a lower value of Q than those found by the algorithm,
which tend towards the value that random networks ex-
hibit due to ﬂuctuations [16]. The values of Q found by
our modiﬁcation is very similar to those found by the NF
algorithm.

The deviation between pre-deﬁned and found parti-

tions is seen more clearly by looking at the mutual in-
formation measure I(A, B) in the lower part of Figure
1. As zout/k increases beyond the point where commu-
nities are well deﬁned, the amount of information about
community structure the algorithms are able to extract
decreases. When the communities found have hardly any
relation to pre-deﬁned ones, as is the case for high zout/k,
I(A, B) tends to zero. As network size increases how-
ever, the algorithms are able to extract less information
from the network structure. This supports the suggestion
that communities in these networks become more fuzzy
as their size increases. Once again, our modiﬁcation per-
forms very similarly to the NF algorithm.

It seems logical that both algorithms perform with sim-
ilar accuracy for these networks. As we have seen in
III the NF algorithm seems to favour the formation of
larger communities. However when the communities to
be found are all of the same size, one would expect it to
perform quite well. Our modiﬁcation has little eﬀect in
this case.

The diﬀerence between the algorithms appears when
communities of diﬀerent sizes are present within the net-
work. Using the network construction method proposed
in Section II, we study the performance of the algorithm
on networks with 21 communities. The communities are
chosen by hand, with one community of 128 nodes, four
communities with 32 nodes each and 16 communities con-
taining 8 nodes each. This corresponds to a size distribu-
tion which follows a power law (with only three points),
where the exponent is -1. In Figure 4 we show the dif-
ference in performance between the NF algorithm and
our modiﬁcation. They are compared both in terms of
modularity and mutual information. Our modiﬁcation
performs better in all parts of the parameter space, with
some regions showing up to 25% improvement over the
original algorithm. The regions where the improvement
is largest are those where the communities are fuzzy, that
is, for high values of external cohesion Ps and low values
of internal cohesion F .

This suggests that our modiﬁed algorithm will perform
better in real networks, where the size of communities
is highly heterogeneous and the community structure is
fuzzy. To check this, we also performed tests on some
real networks. Table I shows the comparison of our mod-
iﬁed algorithms with Newman’s original formulation and,
where possible with the extremal optimisation algorithm.
We looked at the network of Jazz bands with nodes repre-
senting the bands, and links between bands representing
at least one musician that played in both [26]; the e-mail
network of University Rovira i Virgili [23] where e-mail
addresses are connected by exchanging messages; and the
network of users of the pretty good privacy (PGP) algo-
rithm for secure information transactions [38]. These are
medium sized networks and are still tractable with the
Extremal Optimisation (EO) algorithm [20], which has
a larger running time scaling as O(n2 log n).
In these
networks, the EO algorithm clearly performs best out
of the three, which is no surprise since it explores much

5

0.00 
0.02 
0.04 
0.06 

14

12

10

8

6

4

2

F

i

 
,
n
o
s
e
h
o
c
 
l
a
n
r
e
t
n
I

0.00 
0.05 
0.10 
0.15 
0.20 
0.25 

14

12

10

8

6

4

2

F

 
,

i

n
o
s
e
h
o
c
 
l

a
n
r
e
n

t

I

0.005

0.010

0.015
External cohesion, Pe

0.020

0.025

(a)

0.005

0.025

0.010

0.020

0.015
External cohesion, Pe
(b)

FIG. 4:
(Colour online) Diﬀerence in performance between
the NF algorithm and our modiﬁcation (a) proportion of im-
provement in Q (b) proportion of improvement in I(A,B). Our
modiﬁed algorithm outperforms the NF algorithm in all parts
of parameter space, but the diﬀerence is most pronounced for
low values of Pe and high values F , i.e. where the communi-
ties are fuzzy.

TABLE I: Table of optimal modularity values obtained by
the Extremal Optimisation algorithm, QEO [20], the NF algo-
rithm, QNF [17], and the modiﬁcation presented here, QQM .

Network

Size QEO QNF QM

0.4188 0.381 0.4087
34
Zachary
198
0.4452 0.4389 0.4409
Jazz bands
1144 0.5738 0.4796 0.5569
E-mail
10680 0.8459 0.7329 0.7462
PGP
arXiv
44337 N/A 0.7165 0.7606
WWW 325729 N/A 0.9269 0.9403
374511 N/A 0.6829 0.7194
Actor

more of the partition space than either of the others.
It is, however, impractical to use in very large networks
due to running time. In large networks such as the co-
authorship network of the arXiv preprint database [39],
the network of web pages within the nd.edu domain [40],
or the actor network [41], our algorithm is still able to
run in a reasonable time. It improves on the results of
the NF algorithm, ﬁnding partitions up to 16% better in
terms of Q, with no tradeoﬀ in speed.

V. CONCLUSION

To conclude, in this paper we have proposed a more
realistic benchmark test for community detection algo-
rithms in complex networks which takes into account the
heterogeneity of community size observed in real net-
works. We have also shown that Newman’s fast com-
munity detection algorithm tends to favour the creation
of large communities at the expense of smaller ones. We
propose a simple modiﬁcation of the fast algorithm which
can ensure that communities of diﬀering sizes are treated
on an equal footing, thus side-stepping this potential

problem. Upon comparing the sensitivity of our mod-
iﬁcation to that of the original algorithm, we saw that
they perform almost identically in ad-hoc networks with
communities of equal size. However, when compared us-
ing the proposed benchmark test, the improvement in
sensitivity increases. Therefore, we claim that the het-
erogeneity in community size should be considered when
evaluating community detection algorithms.

Furthermore, we have seen that our modiﬁed algorithm
gives improved results for all real networks studied. This
improvement is up to 16% in some studied networks. The
improvement in results comes at no extra computational
cost, and a reasonable implementation of the algorithm
n) time. We recommend the use
will run in O(n log

2

of this simple modiﬁcation for the study of community
structure in very large complex networks.

6

VI. ACKNOWLEDGEMENTS

We thank J. Duch and M. Bogunya for useful discus-
sions and Mark Newman for providing the arXiv net-
work data. This work has been supported by DGES
of the Spanish Government Grant No. BFM-2003-
08258 and EC-FET Open Project No. IST-2001-33555.
L.D. gratefully acknowledges funding from Generalitat
de Catalunya.

[1] A. L. Barabasi and R. Albert, Review of Modern Physics

[23] R. Guimera, L. Danon, A. Diaz-Guilera, F. Giralt, and

74, 47 (2002).

[2] S. N. Dorogovtsev and J. F. F. Mendes, Evolution of Net-
works: From biological nets to the internet and WWW
(Oxford University Press, Oxford, 2003).

[3] M. E. J. Newman, SIAM Review 45, 167 (2003).
[4] S. H. Strogatz, Nature 410, 268 (2001).
[5] S. Boccaletti, V. Latora, Y. Moreno, M. Chavez, and D.-

U. Hwang, Physics Reports p. in press (2006).

[6] M. Boss, H. Elsinger, M. Summer, and S. Thurner, cond-

mat/0309582 (2003).

[7] E. Ravasz, A. L. Somera, D. A. Mongru, Z. N. Oltvai,

and A.-L. Barabsi, Science 297, 1551 (2002).

[8] R. Guimer`a and L. N. A. Amaral, Nature 433, 895

A. Arenas, Physical Review E 68 (2003).

[24] G. Palla, I. Derenyi, I. Farkas, and T. Vicsek, Nature

435, 814 (2005).

[25] A. Arenas, L. Danon, A. Diaz-Guilera, P. M. Gleiser,
and R. Guimer`a, European Physical Journal B 38, 373
(2004).

[26] P. Gleiser and L. Danon, Advances in Complex Systems

6, 565 (2003).

[27] A. L. N. Fred and A. K. Jain, Proc. IEEE Computer Soci-
ety Conference on Computer Vision and Pattern Recog-
nition, CVPR, USA pp. II–128–133 (2003).

[28] L. I. Kuncheva and S. T. Hadjitodorov, Systems, Man
and Cybernetics, 2004 IEEE International Conference 2,
1214 (2004).

[9] R. Guimer`a and L. N. A. Amaral, JSTAT p. P02001

[29] B. Everitt, Cluster Analysis, 3rd edition (Edward Arnold,

[10] M. Girvan and M. E. J. Newman, Publications of the
National Academy of Sciences USA 99, 7821 (2002).
[11] B. W. Kernighan and S. Lin, The Bell System Tech J 49,

[30] J. Scott, Social Network Analysis, a handboook (SAGE

publications, London, 2nd edition, 2000).

[31] W. W. Zachary, Journal of Anthropological Research 33,

[12] A. Pothen, Parallel Numerical Algorithms (Kluwer Aca-
demic Press, 1996), chap. Graph partitioning algorithms
with applications to scientiﬁc computing.

[13] M. E. J. Newman, European Physics Journal B 38, 321

452 (1977).

view E 70 (2004).

[32] S. Fortunato, V. Latora, and M. Marchiori, Physical Re-

[33] H. Zhou, Physical Review E 67, 041908 (2003).
[34] H. Zhou and R. Lipowsky, Lecture Notes in Computer

London, 1993).

(2005).

(2005).

291 (1970).

(2004).

[14] L. Danon, A. D´iaz-Guilera, J. Duch, and A. Arenas, J.

[35] D. Gfeller, J.-C. Chappelier, and P. DeLosRios, Physical

[15] J. Reichardt and S. Bornholdt, Phys. Rev. Lett. 93,

[36] A. Arenas, A. Diaz-Guilera, and C. J. Perez-Vicente, pp.

Sciences 3038, 1062 (2004).

Review E 72, 056135 (2005).

cond–mat/0511730 (2005).

Stat. Mech p. P09008 (2005).

218701 (2004).

[16] R. Guimera, M. Sales-Pardo, and L. N. A. Amaral, Phys-

[37] L. Donetti and M. A. Mu˜noz, Journal of Statistical Me-

ical Review E 70, 025101(R) (2004).

[17] M. E. J. Newman, Physical Review E 69, 066133 (2004).
[18] A. Clauset, M. E. J. Newman, and C. Moore, Physical

Review E 70, 066111 (2004).

[19] J. P. Bagrow and E. M. Bollt, Physical Review E 72,

chanics: Theory and Experiment (2004).

[38] X. Guardiola, R. Guimer`a, A. Arenas, A. Diaz-Guilera,
D. Streib, and L. Amaral, cond-mat/0206240 (2002).
[39] M. E. J. Newman, Physical Review E 64, 016132 (2001).
[40] R. Albert, H. Jeong, and A.-L. Barab´asi, Nature 401,

[20] J. Duch and A. Arenas, Physical Review E 72, 027104

[21] F. Wu and B. Huberman, Eurpean Physics Journal B 38,

[22] M. E. J. Newman and M. Girvan, Physical Review E 69,

046108 (2005).

(2005).

331 (2004).

026113 (2004).

130 (1999).

[41] A.-L. Barab´asi and R. Albert, Science 286, 509 (1999).
[42] Such a partition is found by a more exhaustive search of
the partition space, by using for example the EO algo-
rithm by Duch and Arenas [20].

