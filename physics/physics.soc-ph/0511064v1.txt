Europhysics Letters

PREPRINT

5
0
0
2
 
v
o
N
 
7
 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 
1
v
4
6
0
1
1
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Logarithmic Growth Dynamics in Software Networks

Sergi Valverde 1 and Ricard V. Sol´e 1,2
1 ICREA-Complex Systems Lab - Universitat Pompeu Fabra, Dr. Aiguader 80, 08003
Barcelona, Spain
2 Santa Fe Institute - 1399 Hyde Park Road, New Mexico 87501, USA

PACS. 89.75.-k – Complex systems.
PACS. 89.65.-s – Social systems.
PACS. 05.10.-a – Computational methods in statistical physics and nonlinear dynamics.

Abstract. – In a recent paper, Krapivsky and Redner [1] proposed a new growing network
model with new nodes being attached to a randomly selected node, as well to all ancestors of the
target node. The model leads to a sparse graph with an average degree growing logarithmically
with the system size. Here we present compeling evidence for software networks being the result
of a similar class of growing dynamics. The predicted patternd of network growth, as well as
the stationary in- and out-degree distributions are consistent with the model. Our results
conﬁrm the view of large-scale software topology being generated through duplication-rewiring
mechanisms. Implications of these ﬁndings are outlined.

Introduction. – The structure of many natural and artiﬁcial systems can be depicted
with networks. Empirical studies on these networks have revealed that many of them display
a heterogenous degree distribution p(k) ≈ k−γ, where few nodes (hubs) have a large number
of connections while the majority of nodes have one or two links [2]. The existence of hubs
has been related to multiplicative eﬀects aﬀecting network evolution [3]. Such topological
patterns have been explained by a number of mechanisms, including preferential attachment
rules [4] and network models based on simple rules of node duplication [5]. A very simple
approach is given by the growing network model with copying (GNC) [1]. The network grows
by introducing a single node at a time. This new node links to m randomly selected target
node(s) with probability p as well to all ancestor nodes of each target, with probability q (see
ﬁg. 1). The discrete dynamics follows a rate equation [1]

L(N + 1) = L(N ) +

(p + qjµ)

(1)

m
N *

µ
X

+

where L and N are the number of links and nodes, respectively. The second term in the
right-hand side describes the copying process, where the average number of links added is
given by p + qjµ . The µ index refers to the node µ, to be selected uniformly from among
the N elements. Assuming a continuum approximation, the number of links is driven by the
following diﬀerential equation:
c(cid:13) EDP Sciences

2

EUROPHYSICS LETTERS

Fig. 1 – (A) Illustration of the copying rule used in the network growth model. Each node is labeled
with a number indicating its age (number one is the oldest). In the ﬁgure, new node v6 attaches to
target node v4 with probability p. This new node inherits every link from target node (dashed links),
with probability q. (B) Synthetic network obtained with the GNC model with N = 100, m = 1, p = 1
and q = 1. (C) Synthetic network obtained with the GNC model with N = 100, m = 4, p = 0.25
and q = 0.25. These networks have a scale-free in-degree distribution and an exponential out-degree
distribution.

dL
dN

= mp + mq

L
N

(2)

The asymptotic growth of the average total number of links depends on the extent of
copying deﬁned by the product mq. In particular, logarithmic growth is recovered when mq =
1 and L(N ) = mpN log N . This corresponds to a marginal situation separating a domain of
linear growth (mq < 1) to a domain of exponential growth (2 > mq > 1).
Interestingly,
for mq = 1 the GNC model predicts a power-law in-degree distribution Pi(k) ≈ k−γi with
exponent γi = 2 and an exponential out-degree distribution Po(k), independently of copying
parameters. Actually, their derivation for the in-degree distribution can be generalized for
arbitrary q and p values, leading to a scaling law Pi(k) ≈ k−2 for the parameter domain of
interest. In ref. [1] the authors showed that the GNC model seems to consistently explain the
patterns displayed by citation networks. Here, we show that a GNC model is also consistent
with the evolution of software designs, which also display the predicted logarithmic growth.

Software Networks. – One of the most important technological networks, together with
the Internet and the power grid, is represented by a broad class of software maps. Software
actually pervades technological complexity, since the control and stability of transport systems,
Internet and the power grid largely rely on sotfware-based systems. In spite of the multiplicity
and diversity of objectives and functionalities addressed by software projects, we have pointed
out the existence of strong universals in their internal organization [7]. Computer programs
are often decomposed in a collection of text ﬁles written in a given programming language. In
this paper, we will study computer programs written in C or C++ [6]. Program structure can
be recovered from the analysis of program ﬁles by means of a directed network representation.
In a software network, software entities (ﬁles, classes, functions or instructions) map onto
nodes and links representing syntactical dependencies [7]. Class graphs (also called ’logical

Sergi Valverde and Ricard V. Sol´e: Logarithmic Growth Dynamics in Software Networks3

(cid:0)

(cid:1)

(cid:2)

γ c
i = 0.97

c
γ = 1.22
i

0
10

-1

10

-2

10

0
10

-1

10

-2

10

n
o
i
t
u
b
i
r
t
s
i
D
 
e
v
i
t
a
l
u
m
u
C

-3

10

0
10

1
10

2
10

3
10

0
10

k

1
10

k

2
10

Fig. 2 – (A) Largest connected component of the XFree86 include network at 15/05/1994 (with
N = 393) displays scale-free behavior (see text). In (B), the cumulative distributions Pi>(k) and
Po>(k) are shown for a more recent version of the XFree86 include network with N = 1299 (not shown
here). The power-law ﬁt of the in-degree distribution yields Pi(k) ∼ k−γ
i = 0.97 ± 0.01
while the out-degree distribution is exponential.
In (C) we can notice similar features for the in-
degree and out-degree distributions of the Aztec include network at 29/3/2003. For this system, the
power-law ﬁt of the in-degree distribution yields an exponent γc

i −1 with γc

i = 1.22 ± 0.03.

c

dependency graph’ [8]) are a particular class of software networks that has been shown to
be small-world and scale-free network with an exponent γ ≈ 2.5 [7, 9, 10]. Interestingly, the
frequencies of common motifs displayed in class graphs can be predicted by a very simple
duplication-based model of network growth [11]. This result indicates that the topology of
technological designs, in spite of being planned and problem-dependent, might actually emerge
from common, distributed rules of tinkering [12]. In the following, we provide further evidence
for the importance of duplication processes in the evolution of software networks.

Here, we study a new class of software networks. We use the so-called ’include graph’ (or
’physical dependency graph’ in [8]) G = (V, E) where vi ∈ V is a program ﬁle and a directed
link (vi, vj) ∈ E indicates a (compile-time) dependency between ﬁle vi and vj .
In C and
C++, such dependencies are encoded with the keyword ”#include” followed by the name of
the refereed source ﬁle [8].
In order to recover the include graph, we have implemented a
network reconstruction algorithm that analyses the contents of all ﬁles in the software project
looking for this reserved keyword. Every time this keyword is found in a ﬁle vi, the name
of the refereed ﬁle vj is decoded and a new link (vi, vj) is added. No other information
is considered by the network reconstruction algorithm. Notice that the include network is
unweighted because it makes no diﬀerence to include the same ﬁle twice.

In this paper, we investigate the structure and evolution of software maps by looking
at their topological structure and the time series of aggregate topological measures, such as
number of nodes N (t), number of links L(t) or average degree k(t) = L(t)/N (t). It is worth
mentioning that the number of nodes in a include graph coincides with the number of ﬁles in
the software project, which is often used as a measure of project size.

Software maps typically display asymmetries in their in-and out-degree distributions [9,
10] although the origins of such asymmetry remained unclear. Notice how the out-degree
and in-degree distributions of real include networks are quite similar to the corresponding
distributions obtained with the GNC model (see previous section). The in-degree and out-

4

EUROPHYSICS LETTERS

degree distributions for the largest component of two diﬀerent systems are shown in ﬁg. 2B

∞

P (k)dk. In both
and ﬁg. 2C, where we have used the cumulative distributions P>(k) =
cases, in-degree distributions display scaling Pi(k) ≈ k−γi, where the estimated exponent
is consistent with the prediction from the GNC model, whereas out-degree distributions are
single-scaled (here the average value for the systems analysed is hγii = 2.08 ± 0.04 [13]). As
shown in the next section, these stationary distributions result from a logarithmic growth
dynamics consistent with the GNC model.

k
R

Software Evolution. – Although an extensive literature on software evolution exists (see
for example [14, 15], little quantitative predictions have been presented so far. Most studies
are actually descriptive and untested conjectures about the nature of the constraints acting
on the growth of software structures abound. It is not clear, for example, if the large-scale
patterns are due to external constraints, path-dependent processes or speciﬁc functionalities.
In order to answer these questions, we have compared real software evolution with models of
network growth, where software size is measured as the number of nodes in the correspond-
ing include graph. In this context, the assumptions of the GNC model are consistent with
observations claiming that code cloning is a common practice in software development [15].
Indeed, comparison between real include graphs and those generated with the GNC model
suggests the extent of copying performed during software evolution is a key parameter that
explains the overall pattern of software growth. Such a situation has been also found in class
diagrams [11].

The growth dynamics found in include graphs is logarithmic (see ﬁg. 3A) thus indicating
that we are close to the mq = 1 regime. Indeed, the sparseness seen in software maps is likely
to result from a compromise between having enough dependencies to provide diversity and
complexity (which require more links) and evolvability and ﬂexibility (requiring less connec-
tions). Here we have uneven, but detailed information of the process of software building.
In this context, diﬀerent software projects developments display speciﬁc patterns of growth.
Speciﬁcally, the number of nodes N grow with time following a case-dependent functional
form N = φ(t). Using dL/dt = (dL/dN )(dφ/dt), we have from, eq. (2),

=

mp + mq

dL
dt

(cid:20)

−1

˙Φ

L
Φ(t)

(cid:21)

with a general solution

L(t) = emq

R

(Φ ˙Φ)

−1

dt

−mq

(Φ ˙Φ)

−1

mp

e

(cid:20)

Z

R

dt ˙Φ

−1dt + Γ

(cid:21)

where Γ is a constant. Using a linear law growth (which is not uncommon in software devel-
opment), i.e. N (t) = N0 + at, and assuming mq = 1, we have,

L(t) = (N0 + at)

mp log

N0 + at

(cid:18)

N0 (cid:19)

+

L0
N0 (cid:21)

(cid:20)

However, typical time series of L(t) in real software evolution is subject to ﬂuctuations
(see ﬁg. 3A). In order to reduce the impact of ﬂuctuations we use the cumulative average

degree K(t) =

(L/N )dt, instead. Assuming the number of nodes growths linearly in time,

t

0
R

we obtain:

(3)

(4)

(5)

Sergi Valverde and Ricard V. Sol´e: Logarithmic Growth Dynamics in Software Networks5

Table I – Predictions of eq. (6) for diﬀerent systems.

Project
XFree86
Postgresql
DCPlusPlus
TortoiseCVS
Aztec
Emule
VirtualDub

a
0.0086 ± 0.0001
0.0066 ± 0.0002
0.004 ± 0.0001
0.0057 ± 0.0001
0.026 ± 0.002
0.016 ± 0.0006
0.0079 ± 0.0004

N0
622.17 ± 10.92
601.42 ± 11.35
101.51 ± 2.42
97.57 ± 2.62
205.12 ± 22.17
98.01 ± 6.37
167.04 ± 12.44

mp
2.20 ± 0.01
1.78 ± 0.05
0.70 ± 0.03
1.59 ± 0.02
0.97 ± 0.03
1.65 ± 0.11
1.34 ± 0.05

L0
1419.80 ± 4.09
243.89 ± 8.46
338.96 ± 1.30
105.76 ± 1.58
622.61 ± 4.77
223.80 ± 9.34
381.50 ± 5.16

T
243
31
74
107
14
54
35

K(t) =

mp(N0 + at)
a

log

(cid:20)

(cid:18)

N0 + at

− 1

+

t +

L0
N0

mpN0
a

N0 (cid:19)

(cid:21)

(6)

The above expressions can be employed to estimate the parameters L0 and mp describing
the shape of the logarithmic growth of number of links L(t) and the parameters N0 and a con-
trolling the linear growth of the number of nodes N(t). We used the following ﬁtting procedure.
For each software project, we have recovered a temporal sequence {Gt = (Vt, Et) |0 ≤ t ≤ T }
of include networks corresponding to diﬀerent versions of the software project. Time is mea-
sured in elapsed hours since the ﬁrst observed project version (which can or cannot coincide
with the beginning of the project). This temporal sequence describes the evolution of the
software project under study. From this sequence, we compute the evolution of the number of
nodes n0, n1, n2, ..., nT , the evolution of the number of links l0, l1, l2, ..., lT and the evolution
of the average degree k0, k2, ..., ki = li/ni, ..., kT . In general, available data is a partial set of
records of development histories and often misses the initial project versions corresponding to
the early evolution. Then, t0 6= 0 and this explains why the initial observations for n0 and l0
are higher than expected. However, we have rescaled time so the ﬁrst datapoint corresponds to
zero. We have collected partial (1) evolution registers for seven diﬀerent projects (relevant time
period is in parenthesis): XFree86 (16/5/94 - 1/6/05), Postgresql (1/1/95 - 1/12/04), DC-
PlusPlus (1/12/01 - 15/12/04), TortoiseCVS (15/1/01 - 1/6/05), Aztec (22/3/01 - 14/4/03),
Emule (6/7/02 - 26/7/05) and VirtualDub (15/8/00 - 10/7/05) [13]. The full database com-
prises 557 include networks (see table I).

Then, we proceed as follows. First, for each software project, its time series for the
number of nodes is ﬁtted under the assumption of linear growth, i.e. N (t) = N0 + at, and
thus yielding N0 (initial number of nodes) and a (rate of addition of new ﬁles). In table I , we
can appreciate that the majority of projects growth at a rate a proportional to 10−3 ﬁles/hour
while two medium size projects (Aztec and Emule) actually grow by an order of magnitude
faster. Next, we compute the time series of cumulative average degree K(t) by integrating
numerically the sequence of kt values. This new sequence will be ﬁtted with eq. 6 in order
to estimate the parameters L0 (initial number of links) and the product mp controlling the
extent of duplication.

(1)Actually, these datasets constitute a coarse sampling of the underlying process of software change. Col-
lecting software evolution data at the ﬁnest level of resolution requires a monitoring system that tracks auto-
matically all changes made by programmers. Instead, it is often the programmer who decides when a software
register is created. The issue of ﬁne-grained sampling is an open research question in empirical software
engineering that deserves more attention. These limitations preclude us a more direct testing of the GNC
model.

A

t1

2t

6

)
t
(
L

 
,
)
t
(

N

6000

5000

4000

3000

2000

1000

EUROPHYSICS LETTERS

B

)
t
(
k

 
e
v
i
t
a
l
u
m
u
C

5
10

4
10

3
10

C

5
10

4
10

0

4
2×10

4
4
4×10
6×10
Time (hours)

4
8×10

5
1×10

0

4
5×10
Time (hours)

5
1×10

4
10

5
10

Fig. 3 – (A) The top curve shows the comparison between the time evolution of number of links
L(t) in XFree86 between 16/05/1994 and 01/06/2005 (points) and the prediction of eq. (5) (dashed
line). In the bottom curve we compare the time evolution of system size N (t) and its linear ﬁtting
N (t) = N0 + at (dashed line). We observe an anomalous growth pattern followed by a discontinuity
(here indicated as t1 and t2) in L(t). Notice how t2 signals a discontinuity both in L(t) and N (t), while
discontinuity t1 only takes place in L(t). (B) Comparison between time evolution of the cumulative
average degree in XFree86 during the same time period as in (A) and the analytic prediction of eq. (6).
(C) The inset shows the same data as in (B) but in a double logarithmic plot. The ﬁtting parameters
are: N0 = 622.17 ± 10.92, a = 0.0086 ± 0.0002, L0 = 1419.8 ± 4.1, and mp = 2.20 ± 0.01. Time is
measured in hours.

In ﬁg. 3B we show the result of the previous ﬁtting procedure to the time series of cu-
mulative average degree K(t) in XFree86, a popular and freely re-distributable open source
implementation of the X Windows System [13]. As shown in the ﬁgure, the agreement between
theory and data is very good. We have validated the same logarithmic growth pattern in the
evolution of other software systems (see table I). In particular, we provide a prediction for
the average number of links to target nodes, mp, which is found to be small. This is again
expected from the sparse graphs that are generated through the growth process.

Together with the overall trends, we also see deviations from the logarithmic growth fol-
lowed by reset events. In ﬁg. 3A we can appreciate a pattern of discontinuous software growth
in the number of links L(t) for XFree86. The time interval delimited by t1 and t2 is the
signature of a well-known major redesign process that enabled 3D rendering capabilities in
XFree86. This new feature of XFree86 was called Direct Rendering Infrastructure (DRI). De-
velopment of DRI is cleary visible in the time series of L(t). At t1 (i.e., August of 1998) the
design of DRI was oﬃcially initiated and the event t2 (i.e., July of 1999) corresponds to the
ﬁrst public release of the DRI technology (i.e., DRI 1.0) [16]. A careful look at the time series
L(t) shows that before the discontinuities (indicated by t1 and t2), some type of precursor
patterns were detectable.

The above example suggests how deviations from the logarithmic growth pattern can pre-
dict future episodes of costly internal reorganization (so called refactorings [17]). In XFree86,
the integration of DRI was a costly redesign process characterized by an exponential growth
pattern in the number of links L(t). This accelerated growth pattern starts at t1 and ﬁnishes
in a clearly visible discontinuity (indicated here by t2) that signals a heavy removal of links.
After t2 we observe a pattern of fast recovery eventually returning to the logarithmic trend
described by eq. (5)(dashed lines in ﬁg ﬁg. 3A). Such type of reset pattern has been also found
in economic ﬂuctuations in the stock market [18]. This trend needs to be explained and might

Sergi Valverde and Ricard V. Sol´e: Logarithmic Growth Dynamics in Software Networks7

actually result from conﬂicting constraints leading to some class of marginal equilibrium state.
This is actually in agreement with the patterns of activity change displayed by the community
of software developers (unpublished results) which also exhibits scale-free ﬂuctuations.

∗ ∗ ∗

We thank our colleague J. F. Sebastian for useful suggestions. This work has been sup-
ported by grants BFM2001-2154 and by the EU within the 6th Framework Program under
contract 001907 (DELIS) and by the Santa Fe Institute.

REFERENCES

[1] Krapivsky, P. L., and Redner, S., Phys. Rev. E 71 036118 (2005).
[2] Dorogovtsev, S. N. and Mendes, J. F. F., Evolution of Networks: From Biological Nets to

the Internet and WWW (Oxford Univ. Press, New York) 2003.

[3] Barab´asi, A.-L., and Albert, R., Science 286 (1999) 509.
[4] Caldarelli, G., Capocci, A., De Los Rios, P., and Munoz, M.A., cond-mat/0207366 v2

(2002).

[5] Sol´e, R. V., Pastor-Satorras, R., Smith, E. D. and Kepler, T., Adv. Complex Syst. 5
43 (2002); Vazquez, A., Flammini, A., Maritan, A. and Vespignani, A., Complexus 1 38
(2003); Pastor-Satorras, R., Smith, E. D. and Sol´e, R. V., J. Theor. Biol. 222 (2003) 199;
Kim, J. , Krapivsky, P. L., Kahng, B., and Redner, S., Phys. Rev. E 66 055101 (2002).

[6] Stroustrup, B., The C++ Programming Language (Addison Wesley) 1985.
[7] Valverde, S., Ferrer-Cancho, R. & Sol´e, R. V., Europhys. Lett. 60 (2002) 512.
[8] Lakos, J., Large Scale C++ Software Design (Addison-Wesley, New York) 1996.
[9] Valverde, S., & Sol´e, R. V., Santa Fe Inst. Working Paper, SFI/03-07-044 (2003)
[10] Myers, C. R., Phys. Rev. E 68 046116 (2003).
[11] Valverde, S. and Sol´e, R. V., Phys. Rev. E 72 026107 (2005).
[12] Sol´e, R. V., Ferrer, R., Montoya, J. M. & Valverde, S., Complexity 8 20 (2002).
[13] XFree86
Plus
Aztec
(http://aztec.sf.net);
(http://www.virtualdub.org).

(http://www.xfree86.org);
(http://dcplusplus.sourceforge.net);

(http://www.emule-project.net);

(http://www.postgresql.org);

DCPlus-
(http://www.tortoisecvs.org);
VirtualDub

TortoiseCVS

Postgresql

Emule

[14] Belady, L. A, & Lehman, M. M., IBM Systems Journal 15 3 (1976) 225.
[15] Godfrey, M., and Tu, Q., Proc. of 2001 Intl. Workshop on Principles of Software Evolution

(IWPSE-01), Vienna (2001).

[16] Hammel, M. J., Linux Magazine, December (2001).
[17] Fowler, M., Beek, K., Brant, J., and Opdyke, W., Refactoring (Addison-Wesley, Boston

MA) 1999.

[18] Sornette, D. and Johansen, A., Physica A 245 (1997) 411.

