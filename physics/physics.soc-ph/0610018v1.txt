6
0
0
2
 
t
c
O
 
3
 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 
1
v
8
1
0
0
1
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Error and Attack Tolerance of Layered Complex Networks

Maciej Kurant∗ and Patrick Thiran
EPFL, Switzerland
(Dated: February 2, 2008)

Many complex systems may be described not by one, but by a number of complex networks
mapped one on the other in a multilayer structure [1]. The interactions and dependencies between
these layers cause that what is true for a distinct single layer does not necessarily reﬂect well the
state of the entire system. In this paper we study the robustness of three real-life examples of two-
layer complex systems that come from the ﬁelds of communication (the Internet), transportation
(the European railway system) and biology (the human brain). In order to cover the whole range of
features speciﬁc to these systems, we focus on two extreme policies of system’s response to failures, no
rerouting and full rerouting. Our main ﬁnding is that multilayer systems are much more vulnerable
to errors and intentional attacks than they seem to be from a single layer perspective.

PACS numbers: 89.75.Hc, 89.75.Fb, 89.40.Bb, 89.20.Hh

The robustness of a complex system can be deﬁned
by how it behaves under stress. There are two general
categories of such stress: errors - failures of random com-
ponents, and attacks - failures of components that play a
vital role in the system. Recently, many complex systems
have been successfully described in terms of complex net-
works [2]. These graphs may greatly diﬀer in their re-
sponse to failures. For instance, the ‘scale-free’ networks
(i.e., networks whose node degree distribution is heavy-
tailed [3]) such as World Wide Web, Internet, protein net-
works, ecological networks or cellular networks, exhibit
remarkable robustness to errors , but at the same time,
they are very vulnerable to attacks such as the removal
of the most highly connected nodes [4][5][6][7]. Subse-
quent studies of other attack strategies[8][9], cascading
failures [10][11], defensive strategies [10][12][13][14][15],
and vulnerability of weighted networks [16] gave us valu-
able insights into the robustness of complex networks
treated as distinct objects. Many of such networks, how-
ever, are only a part of larger systems, where a num-
ber of coexisting topologies interact and depend on each
other [1]. For instance, in the Internet, a graph formed
by an application (such as WWW or Peer-To-Peer) is
mapped onto the IP network that, in turn, is mapped on
a physical mesh of cables and optical ﬁbers. The topol-
ogy at every layer is diﬀerent. Similarly, it is convenient
to view a transportation network as a two-layer system,
with a network of traﬃc demands mapped onto the phys-
ical infrastructure. This layered view sheds a new light
on the issue of the error and attack tolerance of many
complex systems. We show in this paper that what is
observed at a single layer does not necessarily reﬂect well
the state of the entire system. On the contrary - a tiny,
seemingly unharmful (from one-layer perspective) disrup-
tion of the lower layer graph may destroy a substantial
part of the upper layer graph rendering the whole system
useless in practice.

∗Electronic address: Maciej.Kurant@epﬂ.ch

|Eφ|

Data set
Railway
Gnutella 16’911 37’849 3.7 1’214 31’193
Brain

|V φ|
|Eλ| hmi
4’853 5’765 53.8 2’509 7’038 9.9
2.8
4’445 20’967 9.1 1’013 15’369 10.3

|V λ|

hli

TABLE I: Two-layer systems analyzed in this paper:
‘Rail-
way’ - train traﬃc ﬂows on top of the railway network of cen-
tral Europe; ‘Gnutella’ - Gnutella P2P network on top of the
AS level Internet; ‘Brain’ - long distance cortex-to-cortex ax-
onal connections in the human brain on top of the 3D lattice
in the white matter. hli is the average shortest path length;
hmi is the average mapping length.

A framework for an analysis of layered complex net-
works was recently introduced in [1].
In a two-layer
case, the system consists of a weighted logical graph
Gλ = (V λ, Eλ) and the underlying physical graph Gφ =
(V φ, Eφ). The logical nodes are a subset of physical
nodes, V λ ⊂ V φ. Every logical edge eλ = (uλ, vλ) is
mapped on the physical graph as a physical path M (eλ)
connecting the nodes uφ and vφ, corresponding to uλ and
vλ.

This layered framework allows us to study the robust-
ness of the entire system. As the mapping of logical edges
is usually longer than one hop, many physical links serve
more than one logical edge (see Fig. 1). A failure of such
a physical link aﬀects all logical edges that are mapped
on it. In other words, failures at the physical layer prop-
agate to the logical layer, and at the same time they
multiply. Moreover, the resulting failures at the logical
layer are strongly correlated in time and space. These
three phenomena make the response of a layered system
to failures much more complex than what is observed at
a single layer.

In our study we use three large examples of layered sys-
tems that come from ﬁelds as diﬀerent as transportation,
communication and biology. We present an overview of
these data sets in Table I, and describe each of them
below.

Our ﬁrst data set, called ‘Railway’, is the European
railway system. It is extracted from timetables of 60’775

Gλ

Logical
Mapping
Physical

Gφ

M

eφ
1
eφ
3

eφ
2

FIG. 1: Illustration of failure propagation, multiplication, and
correlation in a two-layer system. A single failure in the phys-
ical graph results in three correlated failures in the logical
graph.

trains in central Europe with the algorithm described
in [17]. The resulting physical graph reﬂects the real-
life infrastructure that consists of 4’853 nodes (stations)
and 5’765 edges (rail tracks). The logical graph contains
7’038 edges, each connecting the ﬁrst and the last station
of a train. The logical edge weight is the number of trains
following the same route. The route itself is the mapping
of this edge on the physical graph.

The second data set, called ‘Gnutella’, is an example
of a large Peer-To-Peer (P2P) application in the Inter-
net. In a P2P system the links between users are virtual
and therefore they are usually created independently of
the underlying Internet structure, forming a very diﬀer-
ent topology. Due to its immense size and dynamics, the
exact map of the Internet at the IP level (i.e., where the
nodes and IP routers and hosts) is still beyond our reach.
Therefore we focus on its aggregated version, where each
node is an Autonomous System AS (usually an Internet
Service Provider), and where edges reﬂect the connec-
tions between the ASes. The topology of such AS-level
Internet is well known thanks to numerous Internet map-
ping projects such as DIMES [18] or CAIDA [19]. For our
physical graph we take the 09/2004 topology provided by
CAIDA, which consists of 16’911 nodes and 37’849 edges.
For the logical graph we take a snapshot of the Gnutella
P2P network collected in September 2004 by the crawler
developed in [20]. It consists of around 1 million users,
connected by several million links. In order to obtain the
AS-level version of this network, we translated the IP ad-
dresses of the users into the corresponding AS numbers.
All users with the same AS number become one node in
the logical graph, and all links connecting the same pair
of ASes become one edge of weight equal to the number
of contributing links. As a result we obtain an AS-level
logical graph of Gnutella with 1’214 nodes and 31’193
edges. The mapping of each logical edge is obtained by
the shortest path in the physical graph connecting its

2

end-nodes.

Our third data set, called ‘Brain’, captures the large
It was inferred
scale connectivity of the human brain.
from MRI scans with the approach described in [21]. In
particular, the brain cortex and the brain white matter
are partitioned into a set of compact regions of compa-
rable size. There are 1’013 regions in the cortex and
3’432 regions in the white matter. Every region becomes
a node in the physical graph. The logical edges in this
data set are the long distance axonal connections between
the 1’013 regions in the cortex. Each such connection eλ
traverses the white matter; the sequence of white mat-
ter regions on its path deﬁnes the mapping M (eλ). At
the physical layer, two nodes are connected by a phys-
ical edge eφ if they appear directly connected (i.e., are
consecutive in the sequence of regions) in at least one
mapping M (eλ). By this procedure we have obtained a
two-layer structure, where the logical graph consists of
the long-range connections in the brain and is mapped
on the physical layer that reﬂects the ‘3D white matter
structure’ used to establish these long-range connections.
Of course, many real-life systems have mechanisms to
partially or fully recover from failures. For instance, the
Internet consists of several (seven layers in the classic
view) layers that are speciﬁed in the ISO/OSI network
model [22]. Some of these layers, e.g., the ‘network layer’
with its IP protocol, attempt to ﬁnd an alternative path
around a failing link or node. This requires, among oth-
ers, the physical graph to be connected. The situation
gets more diﬃcult in railway networks, because for a train
its entire path is important, not only the end-points. Al-
though it is sometimes possible to slightly change the
itinerary of the train or to organize alternative means of
transportation (e.g., a bus) around the failing section,
the common practice is to halt all the trains that use it.
In order to keep our analysis general and to cover the
whole spectrum of possible situations, in this paper we
study two extreme policies: no rerouting, and full rerout-
ing. In the former case we delete immediately all logical
edges aﬀected by a physical failure. In the latter case,
we delete any aﬀected logical edge eλ only when there is
no path in the physical graph Gφ between the end-nodes
of eλ (i.e., end-nodes of eλ belong to diﬀerent compo-
nents of Gφ). Otherwise, the logical edge eλ remains in
the graph, and its mapping is updated by the shortest
path in Gφ. Consider the example in Fig. 1. Under the
no rerouting policy, three logical edges are removed after
the failure of eφ
1 . However, as the physical graph Gφ is
still connected, under the full rerouting policy all these
three logical links can be rerouted and thus remain in the
logical graph.

By studying the two extreme policies, no rerouting and
full rerouting, we also capture the speciﬁc features of our
three data sets. For instance, in the railway system every
rail track has a limited capacity that cannot be exceeded.
Therefore, even if we allow for rerouting, some routes will
be forbidden due to a possible overload. In the Gnutella
data set, the AS graph routing depends on the internal

Railway

Gnutella

Brain

)

l

(
P

10-2

10-3

10-4

10-5

10-6

10-7

10-2

10-3

10-4

10-5

10-1
10-2
10-3
10-4
10-5
10-6
10-7
10-8
10-9
10-10

10-6

10-7

10-8

10-2

10-3

10-4

10-5

10-6

10-7

10-8

10-3

10-4

10-5

10-6

10-7

101

100

101

102

103

100

101

104

105

0 250 500 7501000

Load l

0

75000

150000

102

103

Load l

0

2500 5000 7500

102

103

Load l

104

FIG. 2: Edge load distribution in three layered systems. The
main plots are in log-log scale (log-binned); the insets present
the same distributions in log-lin scale (lin-binned).

policy of involved ASes and peering relationships estab-
lished between the ASes [23]. This results in routes that
are not necessarily the shortest possible, and makes some
of the routes invalid. These additional constraints im-
posed on the Railway and Gnutella paths naturally limit
the performance of these systems below the ‘full rerout-
ing’ level. Finally, the brain has some ability to reroute
around broken connections too. However, this process
takes substantial time. Therefore, an initial response of
the brain would be better described by the no rerout-
ing policy, but in time the brain will slowly recover and
reroute some of the lost connections. This slow recovery
process can be observed at patients that suﬀer from e.g.,
a stroke, or have undergone a brain surgery.

In other words, all responses of real systems to physical
failures are located somewhere between the no rerouting
and the full rerouting policy. This is especially impor-
tant, because, as we show later the diﬀerence between
these two extreme scenarios is often very small.

Before we simulate the impact of failures on our sys-
tems directly, let us try to roughly predict what will hap-
pen by studying related distributions. In a layered sys-
tem, every physical node or edge can be characterized by
the load. The load l of the physical node vφ or edge eφ
is the sum of weights of all the logical edges whose paths
traverse vφ (eφ) [1]. The load becomes a very impor-
tant parameter when we allow for failures in the system.
Clearly, the higher the load of a failing physical compo-
nent, the more it aﬀects and perturbs the logical layer. If
the load is distributed evenly in the physical graph, a ran-
dom failure will not be very diﬀerent from an intentional
attack. If, however, the load distribution is very uneven,
the highly loaded parts become an obvious target for an
eﬃcient attack. In Fig. 2 we present the load distribution
in the three layered systems we study. In each case the
distribution is broad (covering 4-5 decades) and heav-
ily right-skewed. This means that there is a signiﬁcant
number of physical links that carry a lot more traﬃc than
the other links. Consequently, we can anticipate that an
attack targeted on the most loaded links will harm the
system much more eﬃciently than a random error sce-
nario.

We verify this intuition by simulating the error and
attack scenarios on the three studied systems. The re-
sults are presented in Fig. 3. Although the exact system

3

response varies in all three cases, there are a number of
features common to all or most of them:
1) The attacks are much more harmful than errors. For
example, in Gnutella with no rerouting, half of the log-
ical mass (total edge weight) is erased after 22% physi-
cal edges randomly fail, or after only 0.04% most loaded
edges are attacked. Although under the ‘full rerouting’
policy this diﬀerence is smaller, we still need about 60
times more random failures than attacks to achieve the
same goal.
2) When the system is attacked, the logical graph is usu-
ally aﬀected much faster than the physical graph. For in-
stance, in Gnutella, an attack (with or without rerouting)
on 5% of the physical edges hardly aﬀects the physical
graph - the largest connected physical component cov-
ers almost the entire original graph. At the same time,
this seemingly unharmful attack deletes more than 95%
of logical edges! We obtain similar results when we con-
sider the size of the largest connected component in the
logical graph as the measure of robustness. (These re-
sults are not shown in Fig. 3 for better readability.)
3) The attack under the full rerouting policy aﬀects the
physical graph more than under no rerouting. When
rerouting is allowed the logical edges are deleted only
when the physical graph gets partitioned. This, in turn,
eﬀectively reduces the size of the largest connected phys-
ical component. This phenomenon is especially pro-
nounced in the last plot in Fig. 3 (brain, attack toler-
ance). Under full rerouting, the size of the largest compo-
nent in the physical graph (ﬁlled triangles) drops rapidly
after about 55% of physical edges are attacked. Clearly,
this component splits into two components of compara-
ble size. This behavior can be explained on the example
in Fig. 1. Initially, the physical edge eφ
1 is used by three
logical links.
It is the most loaded edge in the physi-
cal graph and hence it is removed as ﬁrst by our attack.
Now, under no rerouting policy, three logical edges are
deleted. In what remains, the load is distributed equally
on four physical edges, so there is no preferred edge for
our attack. In particular, in the second round the attack
may remove the physical edge eφ
3 , keeping the physical
In contrast, under the full rerouting
graph connected.
policy, after the removal of eφ
1 the three aﬀected logical
links are rerouted. As all of them must treverse the edge
eφ
2 increases to 4 and eφ
2 , the load of eφ
2 is removed in
the second round of the attack. This eﬃciently splits the
physical graph into two components of three nodes each.
[25]
4) The logical graph is strongly aﬀected by attacks re-
gardless of the rerouting policy. This is expressed by the
proximity of the ﬁlled and unﬁlled circles under attack
in Fig. 3 (especially for Railway and Gnutella). As any
real-life failure recovery policy falls between these two ex-
tremes (no rerouting and full rerouting), we expect this
feature to be quite general and universal.

To conclude, the response of a multi-layer system to
failures is much more complex than what is observed at a
single layer. In particular, such systems are more vulner-

Europe

Gnutella

Human brain

4

e
c
n
a
r
e
l
o
t

r
o
r
r
E

e
c
n
a
r
e
l
o
t

k
c
a
t
t
A

1

0.8

n
o
i
t
c
a
r
F

0.6

0.4

0.2

n
o
i
t
c
a
r
F

0.8

0.6

0.4

0.2

0

0

1

0

1

0.8

0.6

0.4

0.2

0

1

0.8

0.6

0.4

0.2

0

1

0.8

0.6

0.4

0.2

0.8

0.6

0.4

0.2

0

0

1

0

0.1

0.2

0.3

0.4

0

0.2

0.4

0.6

0.8

1

0.2

0.4

0.6

0.8

1

0.1

0.4
0.2
0
Physical edges deleted (fraction)

0.3

0.2

1
0
Physical edges deleted (fraction)

0.4

0.6

0.8

0.2

0
1
Physical edges deleted (fraction)

0.4

0.6

0.8

Largest connected component in physical graph, no rerouting

Largest connected component in physical graph, full rerouting

Total weight of remaining logical edges, no rerouting

Total weight of remaining logical edges, full rerouting

FIG. 3: Error and attack tolerance of three layered systems. At each iteration we remove one physical edge eφ
del either at
random (‘error tolerance’, top), or by choosing the most loaded one (‘attack tolerance’, bottom). In both cases we observe the
size of the largest connected component in the physical graph Gφ (triangles) and the total weight of the remaining logical edges
(circles). Every logical edge eλ whose mapping contains eφ
del is deleted either directly (‘no rerouting’, unﬁlled symbols), or only
when there is no path in Gφ between the end-nodes of eλ (‘full rerouting’, ﬁlled symbols).

able than they seem to be from a single layer perspective.
This is very important, because the multi-layer structure
is a model that ﬁts well many real-life systems.

This work is only the ﬁrst step towards understand-
ing the behavior of layered systems under stress. There
are numerous aspects that require further investigation.
What is the impact of traﬃc locality, weight and load dis-

tribution, failure correlation, or topological properties at
the two layers on the robustness of the system? Do there
exist attacks even more eﬃcient than the one proposed
in this paper? Is it possible to signiﬁcantly improve the
resilience of a system, e.g., by adding a relatively small
number of physical or logical edges? We are planning to
address these issues in our future work.

[1] M. Kurant and P. Thiran. Layered complex networks.

Phys. Rev. Lett., 96(13):138701, April 2006.

[2] Mark Newman, Albert-Laszlo Barabasi, and Duncan J.
Watts. The Structure and Dynamics of Networks. Prince-
ton University Press, 2006.

[3] Barab´asi A. and Albert R. Emergence of scaling in ran-

dom networks. Science, 286:509–512, 1999.

[4] R. Albert, H. Jeong, and A.-L. Barab´asi. Error and at-
tack tolerance in complex networks. Nature, 406:378,
2000.

[5] Reuven Cohen, Keren Erez, Daniel ben Avraham, and
Shlomo Havlin. Resilience of the internet to random
breakdowns. Phys. Rev. Lett., 85:4626, 2000.

[6] Reuven Cohen, Keren Erez, Daniel ben Avraham, and
Shlomo Havlin. Breakdown of the internet under inten-
tional attack. Phys. Rev. Lett., 86:3682, 2001.

[7] Duncan S. Callaway, M. E. J. Newman, Steven H. Stro-
gatz, and Duncan J. Watts. Network robustness and
fragility: Percolation on random graphs. Phys. Rev. Lett.,
85:5468, 2000.

[8] Petter Holme and Beom Jun Kim. Attack vulnerability
of complex networks. Phys. Rev. E, 65:056109, 2002.
[9] Lazaros K. Gallos, Reuven Cohen, Panos Argyrakis,
Armin Bunde, and Shlomo Havlin. Stability and topology
of scale-free networks under attack and defense strategies.
Phys. Rev. Lett., 94:188701, 2005.

[10] Adilson E. Motter. Cascade control and defence in com-
plex networks. Phys. Rev. Lett., 93(9):098701, 2004.
[11] L. Zhao, K. Park, and Y.-C. Lai. Attack vulnerability of
scale-free networks due to cascading breakdown. Phys.
Rev. E, 70:035101(R), 2004.

[12] Luciano da Fontoura Costa. Reinforcing the resilience of

complex networks. Phys. Rev. E, 69:066127, 2004.
[13] T. Tanizawa, G. Paul, R. Cohen, S. Havlin, and H. E.
Stanley. Optimization of network robustness to waves of
targeted and random attacks. Phys. Rev. E, 71:047101,
2005.

[14] Vito Latora and Massimo Marchiori. Vulnerability and
protection of infrastructure networks. Phys. Rev. E,
71:015103(R), 2005.

[15] Mirko Sch¨afer, Jan Scholz, and Martin Greiner. Proactive
robustness control of heterogeneously loaded networks.
Phys. Rev. Lett., 96:108701, 2006.

[16] Luca DallAsta, Alain Barrat, Marc Barth´elemy, and
Alessandro Vespignani. Vulnerability of weighted net-
works. physics/0603163, 2006.

[17] M. Kurant and P. Thiran. Trainspotting: Extraction
and analysis of traﬃc and topologies of transportation
networks. physics/0510151, accepted for publication in
Phys. Rev. E, 2005.
[18] http://www.netdimes.org.
[19] http://www.caida.org/.
[20] Daniel Stutzbach, Reza Rejaie, and Subhabrata Sen.
Characterizing unstructured overlay topologies in mod-
ern p2p ﬁle-sharing systems. Proc. of IMC’05, 2005.
[21] Hagmann P., Kurant M., Gigandet X., Thiran P.,
Wedeen V., Meuli R., and Thiran J.P. Mapping brain

5

networks of structural connectivity with MRI tractogra-
phy. Manuscript in preparation, 2006.

[22] James F. Kurose and Keith W. Ross. Computer Net-

working. Addison Wesley, 2003.

[23] L. Gao. On inferring autonomous system relationships in
the internet. IEEE/ACM Transactions on Networking,
9(6):733–745, 2001.

[24] M. E. J. Newman and M. Girvan. Finding and evalu-
ating community structure in networks. Phys. Rev. E,
69:026113, 2004.

[25] This phenomenon is similar in spirit to the clustering
algorithm proposed by Newman [24]. There, at every it-
eration, the edge with the highest betweenness is deleted.
(The betweenness of a vertex or an edge is the fraction of
shortest paths between all pairs of vertices in a network,
that pass through it.) This results in physical graph par-
titions that correspond to its clusters (or ‘communities’).
It can be viewed as a special case of our attack, i.e., as-
suming the logical topology a fully connected unweighted
graph. However, as the real-life traﬃc patterns are much
more heterogenous [1], the attack under full rerouting
produces partitions that correspond to the high traﬃc
cut-sets in the physical graph, rather than to communi-
ties.

