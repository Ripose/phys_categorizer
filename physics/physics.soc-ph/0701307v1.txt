7
0
0
2
 
n
a
J
 
6
2
 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 
1
v
7
0
3
1
0
7
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Network automata and the functional dynamic network framework

David M.D. Smith1,∗ Jukka-Pekka Onnela1,3, Chiu Fan Lee1, Mark Fricker2, and Neil F. Johnson1
1Department of Physics, Clarendon Laboratory, University of Oxford, Oxford, OX1 3PU, U.K.
2Department of Plant Sciences, University of Oxford, Oxford, OX1 3RB, U.K.
3Laboratory of Computational Engineering, Helsinki University of Technology, FIN-02015HUT, Finland
(Dated: September 28, 2013)

We introduce the Functional Dynamic Network framework for dealing with networks in which
the topology evolves according to some speciﬁed microscopic rules and, simultaneously, there is a
dynamic process taking place on the network that both depends on its structure but is also capable
of modifying it. As such it is a generic framework for dealing with the types on systems in which
network structure, dynamics, and function are interrelated. As a prerequisite for the framework,
we develop Network Automata, a generalization of Cellular Automata, which in itself is capable
of replicating many familiar network models as shown. To demonstrate the Functional Dynamic
Network in action, we develop a simple biologically inspired model of fungal growth.

PACS numbers: 89.75.Fb, 89.75.Fb, 87.18.Bb, 87.80.Vt

I.

INTRODUCTION

The framework of complex networks has proved very
successful in the study of various interacting systems. In
the network description, the interacting elements are de-
picted as nodes and the interactions between the elements
are represented by links connecting the corresponding
nodes. The science of complex networks has progressed
very quickly in the last few years, and some excellent re-
views have been written covering both the methodology
and key results [1, 2, 3]. The strength of the complex net-
work paradigm lies in its ability to capture some of the
essential structural characteristics of interacting systems
while disregarding the details of both the elements and
their interactions. Consequently, the early complex net-
work literature was almost exclusively focused on struc-
tural properties of networks. While structural properties
remain important in constraining the behavior of the sys-
tem, there is a growing interest in dynamical processes
taking place on networks [4]. Ultimately, the eﬀective-
ness of a network is to be judged based on the function it
performs, so network structure, dynamics, and function
are all very closely tied.

Consider a situation in which the topology of a network
evolves while there is simultaneously some process tak-
ing place on it. While its architecture constrains the type
of dynamics that may unfold on it, the dynamical pro-
cess may be able to modify the topology of the network,
meaning that its structural properties are coupled to its
function. This paper is an attempt to introduce a generic
framework for dealing with these types on systems in
which network structure, dynamics, and function are in-
terrelated. We call this the Functional Dynamic Network
(FDN) framework and introduce it in Section V. It en-
ables the speciﬁcation of microscopic rules for the struc-
tural and functional evolution of the system. The FDN

∗Electronic address: d.smith3@physics.ox.ac.uk

requires some preliminaries, namely, the development of
diﬀerent variants of Network Automata (NA) covered in
Sections II and III, which can be seen as natural exten-
sions of the Cellular Automata (CA) framework [5]. To
demonstrate the versatility of NA itself, we show how
some familiar network models can be recast in the NA
framework in Section IV. We expect there to be many
application domains for the FDN from social to biolog-
ical systems. As a demonstration of the strength of the
framework, we construct a simple, biologically inspired,
‘vanilla’ model of woodland fungal growth in Section VI.
Although the model consists of a simple rule set, it is
nevertheless capable of producing structures qualitatively
similar to certain fungal growth.

II. NETWORK AUTOMATA

Consider an arbitrary weighted or unweighted, di-
rected or undirected network at some time t. Information
regarding its topology is entirely encompassed within the
adjacency matrix A(t). The matrix holds information
about which links exist, their direction and, if appropri-
ate, weights. One might consider the evolution of the
network as a process that alters the adjacency matrix.
We shall base a framework of network growth around this
concept and explore it for some simple example cases.

Suppose we label the nodes from 1 to N such that the
adjacency matrix is of dimension N . Let each node have
some information associated with it. This might be a list
of network characteristics such as its degree, between-
ness, age, or some other feature. We denote the piece of
information held by node i with Si(t), and the informa-
tion state of all nodes at time t is expressed as a vector
S(t) of dimension N . Let us denote the potential link
between two nodes i, j as α whether or not it exists. The
state of this link Γα(t) can be expressed in terms of the
adjacency matrix values at time t relating to the nodes
at each end of it, namely, Ai,j (t) and Aj,i(t). For the
undirected, unweighted case this would be binary and, of

course, Ai,j (t) = Aj,i(t).

We can now model the evolution of the network. At
each time step all possible N (N − 1)/2 links within the
adjacency matrix A(t) are visited once. The information
available to the link is its own state, and the information
states of the two nodes which it can potentially connect
[13]. This update then generates A(t + 1). The evolution
of the system can be described in terms of some operation
F acting on the adjacency matrix and the node states as

2

We now restrict the network to an underlying lattice,
U such that only those links that exist within the un-
derlying structure can be formed in A. Note that the
underlying lattice is undirected such that Ui,j = Ui,j.
For visual clarity, we shall make this an undirected de-
gree 4 lattice with cyclic boundary conditions. Clearly
this construction fulﬁlls the criterion of being a Network
Automaton, but since it is restricted to an underlying
static network U , we call it a Restricted Network Au-
tomaton (RNA). The evolution of the state of a speciﬁc
link α can be described as some operation

A(t + 1) = F

A(t), S(t)

.

(1)

If we restrict the node states to be a network character-
istic (e.g. degree) such that

(cid:0)

(cid:1)

Γα(t + 1) = F

Γα(t), Ui,j, ki(t) + kj(t)
`

´
Ai,j(t) +

= F “Ai,j(t), Ui,j,

X
j

Ai,j(t)”.(4)

X
i

S(t) = G

A(t)

,

(2)

(3)

where G is some operation, then we can simplify the ex-
pression to

(cid:0)

(cid:1)

A(t + 1) = F

A(t)

(cid:0)

(cid:1)

Thus, the update and consequential evolution of the net-
work is entirely governed by the network itself. Deﬁni-
tion: The Network Automaton (NA) is a network whose
evolution is determined by its own current conﬁguration
[14]. Note that this deﬁnition can extend to more than
one piece of information per node regarding the state of
that node, as long as that information is obtainable from
the adjacency matrix. Also, it can encompass the feature
that the link has access to the information held by not
only the adjacent nodes but also their nearest neighbors
or, even their nearest neighbors etc., again if, and only
if, that information is in some way retrievable from A(t).
No restriction has yet been made as to the directionality
or weight of links.

III. RESTRICTED NETWORK AUTOMATA

Having deﬁned Network Automata we shall now ex-
plore a simple example that can encapsulate some famil-
iar Cellular Automata (CA) behaviour [6]. We will im-
pose some constraints such that this example is a small
subclass of the NA framework. First, we shall look at
the undirected graph with unweighted links such that
the state of a link at time t can be described in terms of
the two nodes it can potentially connect Γα(t) = Ai,j (t).
Let the information held by a node i be simply its de-
gree such that Si(t) = ki(t). At the start of a time step
in the update process we let the information available
to the link (existent or not) be the degree of the nodes
to which it might connect as well as its own state. We
impose some simple rules to govern the evolution of the
system, namely, that the state of a link at time t + 1 is
a function of the combined degree of the adjacent nodes
ki(t)+ kj(t) at the beginning of the time step and its own
state Γα(t).

As an example of the RNA framework, let us construct
the rules of the game in the nomenclature of the “life-
like” CA models [6]. Consider the survival and birth of
a link according to the value of ki(t) + kj(t). We can
express a rule set for the survival process of the link in
terms of a number (or a set of numbers) xs such that if
ki(t)+kj(t) = xs and the state of the link Γα(t) = 1, then
Γα(t + 1) = 1 and is zero otherwise. Likewise, for link
birth, we have a number xb such that if ki(t) + kj(t) = xb
and Γα(t) = 0, then Γα(t + 1) = 1 and, consequently,
Ai,j(t + 1) = Aj,i(t + 1) = Γα(t + 1). These rules are con-
ventionally expressed “survival set/birth set”, and de-
noted as xs/xb. The rules in this particular example
relate the number of neighboring links to the future ex-
istence of a link. For example, according to rule “3/2” a
link will survive if the combined degree of the two nodes it
connects is 3 (xs), and a non-existent link will be “born”
if the combined degrees of the two nodes between which
it might exist is 2 (xb). This rule set is given explicitly
in Table I.

time t

time t + 1

ki(t) kj(t) Ai,j(t) Aj,i(t) Ai,j(t + 1) Aj,i(t + 1)

1
0
2
2
1

0
0
0
1
1

1
2
0
1
2
otherwise

0
0
0
1
1

Ui,j
Ui,j
Ui,j
1
1
0

Ui,j
Ui,j
Ui,j
1
1
0

TABLE I: The rules of game 3/2 on an arbitrary underlying
network U . A link will be born if it has 2 neighboring links
and it must have only 1 neighbor to survive.

The top three rows of Table I refer to the birth of links
and the next two refer to link survival. Clearly, if a link
exists then the degree of the nodes at each end must be
greater than zero. As such, the fourth and ﬁfth lines of
Table I cover all eventualities of link survival for this rule
set. The explicit inclusion of the (symmetric) underlying
matrix U reﬂects the restricted nature of the automaton.
Naturally, ki(t) and kj(t) can be expressed in terms of

the network’s adjacency matrix A(t) as the ith and jth
element of A(t) ∗ 1 where 1 is a vector with all elements
equal to one and of dimension N . More concisely, in
terms of some operation F

A(t + 1) = F

A(t), U

.

(5)

(cid:16)

(cid:17)

We can now observe the evolution of the automaton
on some initial conﬁgurations of A(0) using the rule set
3/2 and underlying lattice of order 4. We can observe
‘blinkers’ which are motifs which return to their original
position after some period. There are also motifs that
replicate themselves after a number of steps but are spa-
tially translated as shown in Fig. 1. These are known as
‘spaceships’ in the CA nomenclature because they prop-
agate through the space. There are many other inter-
esting conﬁgurations and many rule sets to explore, even
with the order 4 underlying lattice. There are a number
of ‘still lifes’ (objects that remain unchanged), blinkers
of long periods, and ‘puﬀers’ (debris leaving spaceships)
which have been found [15]. As yet, there are no known
‘guns’ (objects that replicate like blinkers but emit space-
ships in the process). Trivially, implementation on the
order 5 lattice would enable any of the Game of Life type
objects to be emulated within the NA framework [16].

t = 0

t = 1

t = 2

FIG. 1: A simple spaceship of period two in the 3/2 game
with underlying lattice of order 4. Repeated application of
the automaton rules will clearly perpetuate its motion.

IV. STOCHASTIC NETWORK AUTOMATA

We can also use the Network Automata framework
to construct more conventional evolving networks. To
do this we augment the NA framework, which consists
of purely deterministic rules, by adding one or more
stochastic rules and, thus, arrive at Stochastic Network
Automata (SNA). To implement SNA, we need two addi-
tional deﬁnitions. We denote the outcome of a Bernoulli
trial with ω(x) deﬁned as

3

Note that SNA can be restricted to a ﬁxed underlying
lattice (network) U , resulting in Restricted Stochastic
Network Automata (RSNA). We follow this approach in
developing the biologically inspired model in Section VI,
but emphasize that in this section there is no constraining
underlying lattice structure imposed.

A. Random attachment model

The random attachment algorithm for building a single
component network is very straightforward [8]. We con-
sider a simple case in which at each time step a new node
is connected to the existing network with one undirected
link. Growing networks such as this one are known as
non-equilibrium networks to distinguish them from equi-
librium networks in which the number of nodes is con-
stant [8]. The node in the existing network to which the
new node is to be connected is chosen at random. The
process is repeated until the required number of nodes
is connected to the network. The conventional analysis
for such a process is based on master equations [8]. Let
there be N (t) nodes at time t in the connected compo-
nent of the network of which Xk(t) are of degree k. For
k > 1, the evolution of Xk can be written in terms of the
probabilities of the new node connecting either to a node
degree k − 1, thereby increasing Xk, or connecting to a k
degree node, thereby reducing it. This can be written as

Xk(t + 1) = Xk(t) +

Xk−1(t)
N (t)

−

Xk(t)
N (t)

.

(7)

For k = 1, the new node (being of degree 1) will always
increase X1(t + 1), but through connecting to a degree 1
node in the existing network, it can decrease it too, such
that

X1(t + 1) = X1(t) −

(8)

X1(t)
N (t)

+ 1.

We make a steady state approximation by assuming
that the fraction of degree k nodes remains constant in
time such that Xk(t) = ckN (t) ≈ ckt, implying that
Xk(t + 1) − Xk(t) ≈ ck.
It is interesting to note that
the justiﬁcation for treating the discrete process in this
continuous manner is based on the assumption that, on
average, one new node is connected to the network per
time step with one undirected edge. The recurrence rela-
tion for the degree distribution of the system can be now
written as

We also deﬁne the Heaviside-like step function φ(x) as

P (ω(x) = 0) = 1 − x
P (ω(x) = 1) = x.

(cid:26)

φ(x) =

1 if x > 0
0 if x ≤ 0

(cid:26)

ck =

ck−1
2

c1 =

1
2

,

(9)

which yields the degree distribution P (k) = ck = 2−k.

Next we will emulate this process in the SNA frame-
work. Let us denote the state of a node i as being

(6)

4

BA Network Automaton
BA Master Equation
RA Network Automaton
RA Master Equation

0
10

−1

10

−2

10

−4

10

−5

10

)
k
(
P

−3

10

−6

10

0
10

Si(t) = 1 if it has at least one link and Si(t) = 0 other-
wise. Suppose we wish to grow the network to Ntot nodes,
so that the adjacency matrix is of dimension Ntot. At
each time step, we consider the links from nodes within
the connected network component to nodes outside of it.
Consequently, there are a total of N (t)(Ntot − N (t)) links
that may be added, but we wish that on average only one
of them is added per time step, so that the probability
for a link to be born is P (t) = [N (t)(Ntot − N (t)]−1.

time t

time t + 1

Ai,j(t) Aj,i(t) φ(ki(t)) φ(kj(t)) Ai,j(t + 1) Aj,i(t + 1)
0
1
0
1
1

ω(P (t)) Ai,j(t + 1)
ω(P (t)) Ai,j(t + 1)

0
0
0
0
1

0
0
0
0
1

0
0
1
1
1

0
1

0
1

0

0

TABLE II: The stochastic rules to replicate random attach-
ment network growth. The resulting distribution is shown in
Fig. 2.

The explicit rules for this particular SNA are expressed
in Table II. They state that the link can only be born
if the node i is already in state 1 (part of the com-
ponent) and node j is not in the component (or vice-
versa) and ω(P (t)) = 1.
If the link already exists, it
stays. We seed the automaton with initial conﬁguration
of A1,2(0) = A2,1(0) = 1 reﬂecting a single component of
2 nodes. All links are only considered once in the update
stage and both Ai,j(t + 1) and Aj,i(t + 1) are simultane-
ously updated [17]. The comparison of the degree distri-
bution of the network generated by the SNA to that of
the master equation analysis is shown in Fig. 2.

It is clear from the binomial process governing the ad-
dition of new links (and nodes) to the existing compo-
nent of the network that, on average, one new link and
one new node are added, although clearly more than one
new node could be attached with more than one new link
allowing loops to be formed.

We also note that the SNA process of visiting all pos-
sible links is a somewhat less eﬃcient way of generating a
network that by directly implementing the algorithm out-
lined earlier. However, one can envisage a faster imple-
mentation within the SNA framework. All nodes within
the system are labelled, indicating their position in the
adjacency matrix. As such, it is possible to consider each
node in turn, thereby “adding” it to the “existing” net-
work. This would only require visiting those links possi-
ble between a single (“new”) node and those considered
already part of the network whether connected or not.

B. Barab´asi-Albert model

The SNA framework can also emulate a preferential
attachment model such as that by Barab´asi and Albert
[9]. In the BA-model the probability for a new node to

1
10

2
10

degree k

3
10

FIG. 2:
(Color online) The resulting degree distributions
P (k) for the random attachment (RA) model and the pref-
erential attachment (BA) model. The analytical results ob-
tained using the master equation approach for these models
are P (k) = 2−k and P (k) = 2m(m + 1)/ [k(k + 1)(k + 2)] re-
spectively [1], with here m = 1. These are plotted with lines.
Superimposed, are the corresponding distributions for one re-
alization of the SNA, grown to only 10, 000 nodes. Clearly
the two approaches are consistent.

time t
Ai,j(t) Aj,i(t) φ(ki(t)) φ(kj(t))

0
0

0
0
1

0
0

0
0
1

0
0

1
1
1

time t + 1

Ai,j(t + 1)
0
kj (t)

Aj,i(t + 1)
0

ω “
ω “

K(t) (Ntot −N(t)) ” Ai,j(t + 1)
K(t) (Ntot −N(t)) ” Ai,j(t + 1)

ki(t)

0
1

0
1

0
1

0
1
1

TABLE III: The stochastic rule set needed to replicate pref-
erential attachment network growth. A small simulation dis-
tribution is shown in Fig 2.

attach to an existing node is proportional to the degree
of the existing node, i.e., the attachment probability is
a linear function of the node degree. This attachment
mechanism is achieved in the SNA framework by simply
modifying the probability of link birth, and the rule set
for this process is presented in Table III, where K(t) =
i ki(t) denotes the sum of degrees over all nodes in the

network.
P

The analytical result obtained using the master
equation approach is given by P (k) = 2m(m +
1)/ [k(k + 1)(k + 2)] , where m is the (ﬁxed) degree of
the new node entering the network [1]. Asymptotically
this leads to P (k) ∼ kγ with γ = 3. The analytically ob-
tained distribution is plotted in Fig. 2 together with the
corresponding distribution obtained from one realization
of an SNA simulation.

C. Watts-Strogatz model

5

The rule set for this system, which is is given in terms
of the link removal probability p and the link birth prob-
ability pb, is shown in Table IV. In an actual implemen-
tation of the model, one runs through all possible links,
whether they exist or not, and updates their state ac-
cording to the rules. The result of applying this rule set
is shown in Fig. 4, depicting the normalised clustering
coeﬃcient and mean shortest path for the networks gen-
erated. It is interesting to note that this implementation
of the SNA requires only one time step. Successive appli-
cations yield networks comparable to the classic random
graphs of Erd¨os and R´enyi [7] in that all links will even-
tually be rewired and replaced randomly.

time t = 0

time t = 1

Ai,j(0) Aj,i(0) Ai,j(1) Aj,i(1)
1 − ω(p) Ai,j(1)
ω(pb) Ai,j(1)

1
0

1
0

TABLE IV: The simple stochastic rule set for replication of
the Watts and Strogatz small world network model. The top
row represents the removal of a link with probability p and the
bottom, the rewiring of a link with probability pb as deﬁned
in equation 11. Note that the network is undirected, yielding
a symmetric adjacency matrix A.

Clustering
Mean Shortest Path

−3

10

−2

10
Rewiring Probability p

−1

10

0
10

FIG. 4:
(Color online) The normalised clustering coeﬃcient
and average shortest path of the networks generated using
the Watts and Strogatz small-world mechanism implemented
in the Network Automata framework. Here, k = 10 and
N = 400. Each marker represents a simulated network, with
the line being the mean values over 100 simulations. The
normalising coeﬃcients C(0) and l(0) are the clustering coef-
ﬁcient and average shortest path of the network prior to any
rewiring.

FIG. 3: The initial network conﬁguration of the Watts Stro-
gatz model for k = 4.

We have demonstrated how non-equilibrium growing
networks can be generated within the SNA framework.
Here we turn to equilibrium networks and discuss the
rules necessary to generate small world networks in the
manner of Watts and Strogatz [10]. The WS model
starts from considering a one-dimensional lattice com-
prising N nodes with all nodes having the same degree
k (through connections to nearest neighbors, then next
nearest neighbors etc) and cyclic boundary conditions
[18]. An initial conﬁguration for k = 4 is shown in Fig. 3,
as an example. Each link in the network is visited and
it is rewired with probability p. The original rewiring
mechanism was such that one end of the link remained
where it was and the other vertex was chosen at random
from the rest of the network. In practise, the addition
of shortcuts is the important aspect of this model so we
choose a slightly simpler mechanism such that both ends
of the rewired link are chosen at random. We aim to em-
ulate this modiﬁed process within the SNA framework
because it results in somewhat simpler rule set than the
original model.

Initially, there are N k/2 links within the system. The
expected number which are to be rewired is pN k/2. This
process might be considered ‘link death’. The number of
nodes remains constant, and we wish the number of links
to remain constant too. Therefore, the expected number
of links to be born is set equal to the expected number
of links dying. This is consistent with the notion of link
rewiring in the model of Watts and Strogatz although we
note that the number of links removed and those “born”
are not necessarily equal. Assuming no loops of length
one (melons) such that Ai,i = 0, the total number of links
in the system that are not alive (and therefore capable
of being born) is

N (N − 1)
2

−

N k
2

.

We can then describe the time-independent birth proba-
bility of links by

P (t) = pb =

kp
(N − k − 1)

.

(10)

(11)

)
0
(
C

/
)
p
(
C

 
 
 
)
0
(
l
/
)
p
(
l

1

0.8

0.6

0.4

0.2

0
10

−4

V. FUNCTIONAL DYNAMIC NETWORK
FRAMEWORK

Consider a situation in which the architecture of a net-
work evolves while there is simultaneously some process
taking place on the network. At any given time the topol-
ogy of the network constrains the type of dynamics that
may unfold on it. However, the dynamical process may
be able to modify the topology of the network, mean-
ing that its structural properties are coupled to its func-
tion and vice versa. A related real-world example is the
growth of a city, where more aﬄuent, well-connected ar-
eas are more prone to further expansion. A similar situ-
ation may arise in the context of social networks, where
one’s current social opportunities and dynamics are lim-
ited by the existing network structure, but they can be
widened by extending the network. The state of a node
in these types of settings now not only depends upon its
network characteristics, but also on the process running
on it. For example, the state of a node might be described
by the number of random walkers currently residing on
that node. The states of all nodes at some time t can
now be written S(t) such that the ith row corresponds
to the list of information associated with node i.

Since the functional process requires a network on
which to perform, we can decouple the evolution of the
network into two distinct phases, namely, that aﬀecting
its architecture and that governing the functional pro-
cess. As such the formal description of the evolution can
be expressed in terms of some operators F and G as

.

(cid:1)

(12)

, St
(cid:1)

= F

At+1
St+1

At, St
At+1
= G
(cid:0)
(cid:0)
This expression states that the network evolves according
to some process, which is determined by its own conﬁgu-
ration and also by some attributes of its nodes that may
include function based information. The functional pro-
cess then occurs on this network to generate the new set
of information. The system is synchronously updated
according to these rules. These ideas lead us to the fol-
lowing. Deﬁnition: The feedback process of Eq. 12 relat-
ing the physical evolution of the network to the function
of the network, deﬁnes the Functional Dynamic Network
(FDN). Clearly, Network Automata are a subclass of the
FDN.

VI. BIOLOGICALLY INSPIRED MODEL

In this Section we construct a simple model of wood-
land fungi [11] to demonstrate the versatility of the Func-
tional Dynamic Network framework. Foraging fungi grow
out from a resource base in the search for more resources.
All the growth takes place at the tips of the growing hy-
phae so the assimilated nutrients must be transported
from the initial resource through the developing network
to the growing margin. Whilst growth is initially fairly

6

uniform, over time the network establishes preferential
transport pathways termed cords.

Incorporating these growth and distribution processes
within the fungi requires pooling together concepts from
both the Restricted Network Automata (Section III) and
the Stochastic Network Automata (Section IV). Al-
though the model is biologically inspired, its aim is not to
incorporate a large number biological facts. Instead, we
adopt a minimalist approach to emulate fungal growth
from a small set of microscopic rules. We start from a
biologically naive but mathematically simple model. We
then modify the model according to some basic physi-
cal and biological considerations. The end product, the
‘vanilla’ model of fungal growth, may serve as a platform
for more elaborate future models.

Agent Layer

R

E

R
E

Resource Layer

(Color online) A biologically inspired multi-agent
FIG. 5:
model whereby the agent layer is superimposed upon a re-
source layer. Agents above a resource can accumulate re-
sources at some rate RE

Consider a system of agents who are interconnected in
a two dimensional lattice, each of which might represent
a portion of the fungal mycelium. The connectivity be-
tween agents is North, South, East and West reﬂecting
a possible connectivity of 4, such that the agents are re-
stricted to local information. The model develops in the
absence of long range communication. The agent layer is
superimposed on a resource layer as in Fig. 5. The rules
of the system are very simple. If an agent is above a re-
source, it assimilates that resource at some rate RE. The
objective of each agent is two-fold: (1) grow into available
neighboring space until fully connected, and (2) redis-
tribute resources to the newly formed agents. We allow
each agent to grow only one new neighbor at a time step
but only if the agent has resources to do so. To mimic
active transport of resources, an agent passes resources
to its neighbor cell provided that the neighbor does not
pass resources to it. We now endeavor to categorize this
simple multi-agent system in the FDN framework. This
serves not only to clarify any ambiguity, but also as a

time t

(i) time t + 1

(ii) time t + 1

(iii) time t + 1

Ai,j(t) Aj,i(t) φ(Si(t)) φ(Sj(t)) Ai,j(t + 1)

0
1

0
1
0
1
0
1
0
1
0
1

0
0

Aj,i(t + 1)
0
1
d−kj (t) ”

ω “

1
ω “
d−ki(t) ”
1
ω
2 ´
`
0
0
0
0
1
1
1
1

0
1 − Ai,j(t + 1)
1
1
1
1
0
0
0
0

Ai,j(t + 1)
0
0

1
ω “
d−ki(t) ”
1
ω
2 ´
`
0
0
0

Aj,i(t + 1)
0
1
d−kj (t) ”

ω “

0
1 − Ai,j(t + 1)
1
1
1

Ai,j(t + 1)
0
0

g
ω “
d−ki(t) ”
1
ω
2 ´
`
0
0
0

δ(kin,i, d)ω

1 − Ai,j(t + 1) δ(kin,i, d)ω

1
d ´

`

1
d ´

`

1
1
1

0
0
0

1
d ´

`

1
1
1

1 − Aj,i(t + 1) δ(kin,i, d)ω

1 − Aj,i(t + 1) δ(kin,i, d)ω

7

Aj,i(t + 1)
0
g
d−kj (t) ”

ω “

0
1 − Ai,j(t + 1)
1
1
1
1 − Ai,j(t + 1)
0
0
0

1
d ´

`

0
0

0
0
0
0
0
0
1
1
1
1

0
0

0
0
1
1
1
1
0
0
0
0

0
0

1
1
0
0
1
1
0
0
1
1

TABLE V: Diﬀerent rule sets (the columns labeled ‘time t+1’)
for the biologically inspired model: (i) the simplest scenario,
(ii) incorporating conservation of resources, and (iii) imple-
menting delay factor. See Eq. B2 for the deﬁnition of δ and
Appendix B for details.

potential aid to improving eﬃciency in that the required
iteration and information storage/retrieval aspects are
clearly deﬁned by the rule sets imposed.

We start from a simple scenario in which resources are
neither consumed nor conserved. Let us ﬁrst look at the
growth (structural) stage. Each cell or agent represents a
node and the boundary between two neighbouring agents
represent a link through which resource is passed is rep-
resented by a link, requiring a directed implementation
of the RSNA. Consider the state information of a node
to be simply the amount of resource it has and its in and
out degree. For clarity we write them as distinct vectors
such that Si(t) refers to the resource (functional variable)
that agent i has at time t. The element ki(t) is its total
degree and ko,i(t) its out degree. These node states are
thus vectors of some dimension N where N is the number
of nodes in the underlying lattice U that we take to be
of order d = 4.

We will grow the FDN in an unweighted but directed
adjacency matrix A such that if Ai,j = 1 the link exists
and is directed from i to j, whereas if Aj,i = 1 the link
exists and is directed from j to i. If neither Ai,j = 1 nor
Aj,i = 1 then the link does not exist. Here Ai,j = 1 and
Aj,i = 1 are mutually exclusive. The structural update
process runs though all links by considering all nodes
i = 1 → N and for each value i through all possible
neighbors j = 1 → i where Ui,j = 1. As such, each
possible link between nodes i and j is considered once
and the information Ai,j and Aj,i regarding its state and
direction is updated at the same time [19].

We can now write the network update procedure in
terms of an exhaustive truth table in Table V. Note that
if Ai,j(t) = Aj,i(t) = 0, the total degree of both nodes
i and j is less than d. Also, the dependence on the un-
derlying lattice is implicit and, as such, its cumbersome
presence will not be explicitly included in the rule set.

The resource distribution (functional) stage is slightly
more straight-forward. We start by mapping the adja-
cency matrix A
t+1
such that an element Tt+1(i, j) = At+1(i, j)/ko,i(t+1) for
out degree of node i greater than zero. We can write the
update for the distribution process as

to a normalised transition matrix T

t+1

S(t + 1) = T †(t + 1)S(t) + ξ(t),

(13)

where the vector ξ corresponds to agents who can accu-
mulate resources.
If we wish to impose the constraint
that only ‘alive’ (i.e. active) agents can accumulate re-
source through this process, then we write

ξi(t) = RE φ(Si(t)) Li

(14)

where the vector L denotes the (binary) existence of re-
source at position of node (agent) i in the resource layer.
Note that this could be made time dependent (i.e. ﬁnite)
although here we will not consider this eﬀect.

j

r

m

i

q

FIG. 6: The inﬂux of resource into node labelled i. The
amount this node receives from node j is related to how many
out degrees node j has. This amount would be expressed as
Sj(t)/ko,j(t).

For the example of Fig. 6, the amount of resources that

node i has at time t + 1 is

Si(t + 1) = Aj,i

+ Am,i

Sj(t + 1)
ko,j(t)
Sr(t + 1)
ko,r(t)

Sm(t + 1)
ko,m(t)
Sq(t + 1)
ko,q(t)

+Ar,i

+ Aq,i

=

Sj(t + 1)
ko,j(t)

+

Sr(t + 1)
ko,r(t)

+

Sq(t + 1)
ko,q(t)

.(15)

We can now observe the FDN in operation as shown
in Fig. 7. Let us start with a single node η above a single
food source such that at time t = 0 the agent has some re-
source. In the initial conﬁguration the adjacency matrix
is all zeros Ai,j(0) = 0 ∀i, j, and the resource information
vector is all zeros except Sη(0) = RE such that the initial
agent has amount RE. The (static) resource accumulat-
ing vector ξ(t) is also all zeros except ξη(t) = RE ∀ t.
We observe both the network and functional aspect of
the system. The nodes (agents) are superimposed on the
directed network, and the amount of resources a node
has is indicated by its color (see Appendix A for details)
ranging from blue (low concentration) to dark red (high
concentration). Only nodes that have resources are in-
cluded and the result is independent of the choice of RE.
Note that under this rule set and functional update
stage resources are not conserved. As such, if an agent
has no daughters, the resources held by the agent are
‘lost’ in the functional update stage of the process. How-
ever, conservation and consumption of resources can also
be incorporated by making further modiﬁcations to the
functional update stage. The details of these modiﬁca-
tions are given in Appendix B. An example of the evo-
lution of the resulting ‘vanilla’ model is shown in Fig. 8.
Emergent canalized ﬂux channels are clear. Such chan-
nels are comparable with cord development observed ex-
perimentally in a wide class of real biological fungi [11].

VII. CONCLUDING REMARKS AND
DISCUSSION

In this paper we have developed the concepts of Net-
work Automata (NA) together with its restricted (RNA)
and stochastic (SNA) variants. Their development was
motivated by the introduction of the Functional Dynamic
Network (FDN) framework, the main contribution of this
paper, which couples evolution and function of complex
networks by using simple microscopic rules at the level
of nodes and links. This generic framework can encom-
pass many familiar models. We demonstrated its ability
to reproduce Cellular Automata type models in Section
III, and also equilibrium (random attachment, Barab´asi-
Albert) and non-equilibrium (Watts-Strogatz) growing
network moldels in Section IV.

We have demonstrated the practicability of the FDN
framework by applying it to construct a remarkably
simple biologically inspired resource distributing model,
which produces structure qualitatively similar to the

t = 0

8

t = 2

t = 4

t = 6

FIG. 7:
(Color online) The evolution of the biologically in-
spired FDN. The colors represent the amount of resource Si(t)
a node has (the functional aspect) superimposed on a directed
network (the structural aspect).

FIG. 8:
(Color online) Incorporating conservation and con-
sumption of resources. The simulation is seeded with one
resource, one agent, RE = 20, 000, RC = 1 and after 500 time
steps there are 15, 984 agents. The simulation used rule set (ii)
of Table V, and the functional update is that of Eqs. B1, B3,
B4. The lattice is of length 300.

early growth patterns of woodland fungi. The well de-
ﬁned and simple rule set not only makes replication pos-
sible but also aids implementation at the programming
level.
In the study of emergent phenomenon involving
networks, this framework enables concise and clear es-
tablishment of microscopic rules. One can easily think of

more complex rule sets to more accurately model a real
system, such as adding transport costs or ﬁnite resources,
both of which can easily be accomplished. In related bi-
ological systems, the observations can encompass both
the developing network architecture and also the physio-
logical function which might be obtained by radioactive
labeling of food sources [11]. In designing models for such
systems it seems sensible to retain this functional infor-
mation not only because that function might be inherent
to its development but also for comparative purposes.
It is then interesting to ask what level of complexity is
required to capture the essence of real biological systems.
One can envisage applying the FDN framework also
to discrete diﬀerential equation modelling and Diﬀusion
Limited Aggregation (DLA) systems and, indeed, to any
system in which the dynamics of network topology is re-
lated to the function performed thereon. An interest-
ing potential application might be that of computer chip
design. There are certain biological systems which can
quasi-solve increasingly complex problems in a constant
time [12]. Given that it might be possible to model these
systems within the FDN framework, it might suggest how
to design a hardware based implementation to perform
the same calculations in constant time. It is interesting
to pose the question as to what kind of problems could
be solved by such a system and how complex the micro-
scopic rules would be for a given problem. Presumably,
this would reﬂect the minimum length of rule set that
would have to be employed by such a system in both
the network and functional update stages. The physical
replication into a digit system, and the length of the in-
formation processes thereon, alludes to a measure for the
complexity of the system.

Acknowledgements: D.M.D.S. acknowledges sup-
port from the European Union under the MMCOMNET
program. C.F.L. is supported by a Glasstone Fellowship
(U.K.) and J-P.O. by a Wolfson College Junior Research
Fellowship (Oxford, U.K.). We thank Dan Bebber for
discussions.

APPENDIX A: COLOR SCALING IN
FUNCTIONAL DYNAMIC NETWORK

9

A linear scale would simply apportion the color bin
according to the resource. The problem with this imple-
mentation is that in this system, there are many nodes
with low amounts of resource compared with the node
with the most. A more sensible implementation is to try
to make the occupancy of all color bins roughly equal.
This technique is used in image manipulation to max-
imise contrast. As we are looking for interesting struc-
ture within the network, this is appropriate.
In order
to achieve this scaling, we ﬁrst order the normalised re-
source information s from lowest to highest. We can
then look at the cumulative number of nodes with re-
source ≤ s. We denote this number as C(s). Of course
all nodes will have resource ≤ 1.

Normalizing C(s) against the total number of nodes
and multiplying by the number of bins, we have a suitable
mechanism for specifying the color bins with normalised
resource s. This implementation does assume that the
nodes, in general, do not have equal amount of resource.

APPENDIX B: CONSERVATION AND
CONSUMPTION OF RESOURCES: VANILLA
MODEL

We can incorporate conservation of resources in the
model by modifying the update stage of the functional
process. This requires rewriting the transition matrix as

Tt+1(i, j) =

At+1(i,j)
ko,i(t+1)
0

for ko,i(t + 1) > 0
for ko,i(t + 1) = 0

Tt+1(i, i) =

0 for ko,i(t + 1) > 0
1 for ko,i(t + 1) = 0.

(B1)

(

(cid:26)

Note that the above modiﬁcation allows an agent to
accumulate resource indeﬁnitely if its in-degree is equal
to the degree of the underlying lattice, i.e., ki(t) = d.
This undesirable feature can be overcome by having this
agent ﬂip the direction of, on average, one of its d links.
To implement this we make use of the Kronecker delta
function deﬁned as

The choice of color scaling when plotting the biolog-
ically inspired Functional Dynamic Network of subsec-
tion VI represents an interesting problem in itself. Each
node (agent) has an amount of resource. The color sys-
tem employed comprises 64 discrete colors ranging from
dark blue through to dark red. We wish that the node
with lowest amount of resource is dark blue and that
with the highest dark red. However, assigning those
in between to one of the 64 bins requires some sensi-
ble scaling. Firstly, we can normalize the resource on
each node against the node with the highest amount
si = Si/ max(S). Although this isn’t strictly required
to perform the process, it is useful for clarity purposes
here.

δ(x, y) =

0 for x 6= y
1 for x = y.

(cid:26)

(B2)

The modiﬁed rule set (ii) is given in Table V .

We can also incorporate consumption of resources in
the model by making further modiﬁcations to the func-
tional update stage, resulting in our ‘vanilla’ model. If an
agent has more than some residual consumption amount,
then RC , the rate of consumption, is deducted from it. If
the agent has less than this value, all of that agent’s re-
sources are removed such that the agent might be consid-
ered dead. An agent which remains alive now distributes
its resource according to the number of its out-links if it
has any, or retains its resources if it has none according

10

to

S′(t + 1) = T †(t + 1)S(t),

(B3)

where S′ is the resource of every node prior to consump-
tion. The transition matrix is as deﬁned in Eq. B1. We
can then write the update for S as

Si(t + 1) = φ(S′

i(t + 1) − RC )(S′

i(t + 1) − RC )

+ RE φ(Si(t)) Li,

(B4)

which makes use of the step function of Eq. 6. Note that
only agents (nodes) active in the network can accumulate

resources from the resource layer. The eﬀect of this ‘cost’
of living clearly limits the potential size of the system.

In the ‘vanilla’ model the physical transport of nutrient
is of comparable speed to that of the growth, which is
clearly not reasonable for most biological systems. To
introduce two diﬀerent time scales in the model, we can
delay the growth process by introducing a parameter g
to the stochastic growth terms in the rule set, such that
an agent grows on average one neighbor every 1/g time
steps. This is depicted explicitly in rule set (iii) of Table
V in rules 1 and 2. The result of such a delay is the build
up of resource towards the periphery of the object as one
might expect (not shown).

[1] R. Albert and A.-L. Barab´asi, Rev. Mod. Phys 74, 47

[2] M.E.J. Newman, SIAM Rev. 45, 167 (2003).
[3] S.N. Dorogovtsev and J.F.F. Mendes, Adv. Phys. 51,

(2002).

1079 (2002).

[4] A.E. Motter, M.A. Matas, J. Kurths, and E. Ott (Eds.),

Physica D 224, 1 (2006).

[13] Because each link can see the requisite information at the
start of the time step, the system is synchronously up-
dated. This is useful in that the action of the object (link)
in a given time step is not dependent on the actions of
other objects within that time step, although there might
be situations whereby this process should be relaxed.
[14] The concept of a Network Automaton has been alluded

[5] S. Wolfram, A New Kind of Science (Wolfram Media,

to before although not formally deﬁned [5].

2002).

(1959).

[6] J. von Neumann and A. W. Burks, Theory of Self-
reproducing Automata (University of Illinois Press, Ur-
bana, 1966).

[7] P. Erd¨os and A. R´enyi, Publ. Math. Debrecen 6, 290

[8] S.N. Dorogovtsev and J.F.F. Mendes, Evolution of Net-

works (Oxford University Press, 2003).

[9] A.L. Barab´asi and R. Albert, Science 286, 509 (1999).
[10] D. J. Watts and S. H. Strogatz, Nature 393, 440 (1998).
[11] M. Tlalka, S.C. Watkinson, P.R. Darrah, and M.D.

Fricker, New Phytologist 153, 173 (2002).

[12] T. Nakagaki, R. Kobayashi, Y. Nishiura, and T. Ueda,

Proc. Biol. Sci. 271, 1554:2305 (2004).

[15] See http://www.physics.ox.ac.uk/users/smithdmd/FDN.pdf

for details and examples.

[16] See http://mathworld.wolfram.com/Life.html for details

on J.H.Conway’s “Game of Life”.

[17] This might be achieved in practice by running through
all nodes i = 1 → Ntot and then neighbors j = 1 → i (the
lower triangular portion of the adjacency matrix) or by
selecting those nodes within the network and those ex-
ternal to it and exploring all possible combinations once.
[18] Note that a two dimensional lattice of degree 4 would be

inappropriate in that it has zero clustering.

[19] It might be convenient to consider each direction of a link
in its own right but we will not be pursuing this here.

