5
0
0
2
 
v
o
N
 
9
 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 
1
v
4
8
0
1
1
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Comment on “Scientiﬁc collaboration networks. II. Shortest paths, weighted
networks, and centrality”

Tao Zhou1,∗ Jian-Guo Liu2, and Bing-Hong Wang1
1Department of Modern Physics and Nonlinear Science Center,
University of Science and Technology of China, Hefei, 230026, PR China
2Institute of System Engineering, Dalian University of Technology, Dalian, 116023, PR China
(Dated: January 28, 2014)

In this comment, we investigate a common used algorithm proposed by Newman [M. E. J. New-
man, Phys. Rev. E 64, 016132(2001)] to calculate the betweenness centrality for all vertices. The
error of Newman’s algorithm is pointed out and a corrected algorithm, also with O(M N ) time com-
plexity, is given. In addition, the comparison of calculating results for these two algorithm aiming
the protein interaction network of Yeast is shown.

PACS numbers: 89.75.Hc, 89.65.-s, 89.70.+c, 01.30.-y

Betweenness centrality, also called load or between-
ness for simplicity, is a quite useful measure in the net-
work analysis. This conception is ﬁrstly proposed by
Freeman[1] and introduced to physics community by
Newman[2], which has been widely used to estimate the
capacity of network traﬃc[3], to detect communities[4],
to defense cascading failures[5], and so on. The between-
ness of a node v is deﬁned as

B(v) := X

s6=t,s6=v

σst(v)
σst

,

(1)

where σst(v) is the number of shortest paths going from
s to t passing through v and σst is the total number of
shortest paths going from s to t. The end points of each
path is counted as part of the path[2]. Newman pro-
posed a very fast algorithm taking only O(M N ) time to
calculate the betweenness of all vertices[2], where M and
N denote the number of edges and vertices, respectively.
The whole algorithm processes are as follows.

(1) Calculate the distance from a vertex s to every

other vertex by using breadth-ﬁrst search.

v, taking the initial value 1, is assigned

(2) A variable bs

to each vertex v.

(3) Going through the vertices v in order of their dis-
tance from s, starting from the farthest, the value of bs
v is
added to corresponding variable on the predecessor ver-
tex of v. If v has more than one predecessor, then bs
v is
divided equally between them.

(4) Go through all vertices in this fashion and records
the value bs
v for each v. Repeat the entire calculation
for every vertex s, the betweenness for each vertex v is
obtained as

B(v) = X
s

bs
v.

(2)

Since to a vertex v’s betweenness B(v), the contribu-
tions of its predecessors are not equal, it is not proper

∗Electronic address: zhutou@ustc.edu

1(cid:13)

0(cid:13)

1(cid:13)

1(cid:13)

1(cid:13)

1(cid:13)

2(cid:13)

4(cid:13)

1(cid:13)

1(cid:13)

3(cid:13)

5(cid:13)

1(cid:13)

6(cid:13)

1(cid:13)

7(cid:13)

2(cid:13)

8(cid:13)

4(cid:13)

9(cid:13)

(a)(cid:13)

1(cid:13)

0(cid:13)

1(cid:13)

2(cid:13)

1(cid:13)

4(cid:13)

1(cid:13)

1(cid:13)

2(cid:13)

3(cid:13)

3(cid:13)

5(cid:13)

(b)(cid:13)

FIG. 1: The two examples used to illuminate the diﬀerence
between Newman’s and the corrected algorithms.
(a) The
[2], also bas been used as a sketch map for
copy from Ref.
Newman’s algorithm. (b) The minimal network that can il-
luminate the diﬀerence. The hollow circles represent the ver-
tices and the solid lines represent the edges. Each vertex is
marked with a natural number inside the corresponding circle,
and the number beside each vertex v is σ0v.

TABLE I: Calculation results of ﬁgure 1(a)

0

1
Vertices
Newman’s 9 34 5
Corrected 9 34 1

2
6 28 1
3 28 1

3
6 22 1
3 21 2

4
2 29 1
30

5
3 21 2
21

6
3 14 1
14 2

7
4 14 1
3 14 2

8
4 21 5
3 21 2

9
6 24 1
6
24

3

3

to divide bs
v equally between them. Clearly, if the vertex
v has n predecessors labelled as u1, u2, · · · , un and σsv
diﬀerent shortest paths to vertex s, then we have

σsv =

σsui .

(3)

n

X
i=1

The diﬀerent shortest paths from s to v are divided into
n sets G1, G2, · · · , Gn. The number of elements in Gi,
that is also the number of diﬀerent shortest paths from
s to ui , gives expression to the contribution of the pre-
decessor ui to v’s betweenness. Therefore, the vertex v’s

2

corrected algorithms. The comparisons between these
two algorithms are shown in table (1) and (2). The two
algorithms produce diﬀerent results even for networks of
very few vertices.

In addition, we compare with the performances of
these two algorithms on the protein interaction network
of Yeast[7]. This network has 2617 vertices, but only
its maximal component containing 2375 vertices is taken
into account. Figure 2(a) and 2(b) report the absolute
diversity and relative diversity between Newman’s and
the accurate (obtained from the corrected algorithm) re-
sults, respectively. The departure is distinct and can not

18000

16000

(a)

y
t
i
s
r
e
v
D
e

 

i

t

l

u
o
s
b
A

14000

12000

10000

8000

6000

4000

2000

0
0.30

y
t
i
s
r
e
v
D
e
v
i
t

 

i

l

a
e
R

0.25

0.20

0.15

0.10

0.05

0.00

(b)

3x10

(c)

Zipf Plot

5

5

5

4x10

2x10

5

10

s
s
e
n
n
e
e
w
e
B

t

 Accurate results

 Newman’s results

0

500

1000

1500

2000

2500

Vertex Label

Rank

1

10

100

TABLE II: Calculation results of ﬁgure 1(b)

Vertices
Newman’s
Corrected

0
6 3
4
6 2
3

1
6 3
4
6 2
3

2
11 1
2
11 2
3

3
11 1
2
11 2
3

4
6 3
4
6 2
3

5
6 3
4
6 2
3

betweenness, induced by the given source s, should be di-
vided proportionally to σsui rather than equally between
its predecessors. The corrected algorithm is as follows.

(1) Calculate the distance from a vertex s to every
other vertex by using breadth-ﬁrst search, taking time
O(M ).

(2) Calculate the number of shortest paths from
vertex s to every other vertex by using dynamic
programming[6], taking time O(M ) too. The processes
are as follows.
(2.2) If all the
(2.1) Assign σss = 0.
vertices of distance d(d ≥ 0) is assigned (Note that the
distance from s to s is zero), then for each vertex v whose
distance is d + 1, assign σsv = Pu σsu where u runs over
all v’s predecessors. (2.3) Repeat from step (2.1) until
there are no unassigned vertices left.

(3) A variable βs

v, taking the initial value 1, is assigned

to each vertex v.

(4) Going through the vertices v in order of their dis-
tance from s, starting from the farthest, the value of
βs
v is added to corresponding variable on the predeces-
If v has more than one predecessor
sor vertex of v.
u1, u2, · · · , un, βs
v is multiplied by σsui /σsv and then
added to σsui .

(5) Go through all vertices in this fashion and records
the value βs
v for each v. Repeat the entire calculation
for every vertex s, the betweenness for each vertex v is
obtained as

B(v) = X
s

βs
v.

FIG. 2: The comparisons between Newman’s and the cor-
rected algorithms on the protein interaction network of Yeast.
(a) and (b) shown the absolute diversity and relative diversity
between Newman’s and the accurate results, respectively. (c)
is the Zipf plot of the 100 vertices with highest betweenness.

(4)

Clearly, the time complexity of the corrected algorithm

is O(M N ) too.

These two algorithms, Newman’s and the corrected
one, will give the same result if the network has a tree
structure. However, when the loops appear in the net-
works, the diversity between them can be observed. Fig-
ure (1) exhibits two examples, the ﬁrst one is copied from
the Ref. [2], and the second is the minimal network that
can illuminate the diﬀerence between Newman’s and the

be neglected. Fortunately, the statistical features may
be similar. Although the details of the Zipf plot[8] of the
top-100 vertices are not the same, both the two curves
obey power-law form with almost the same exponent.
We also have checked that the scaling law[9] of between-
ness distribution in Barab´asi-Albert networks[10] is kept,
while the power-law exponents are slightly changed.

[1] L. C. Freeman, Sociometry 40, 35 (1977).
[2] M. E. J. Newman, Phys. Rev. E 64, 016132 (2001).
[3] R. Guimer´a et al., Phys. Rev. Lett. 89, 248701 (2002).
[4] M. Girvan, and M. E. J. Newman, Proc. Natl. Acad. Sci.

U.S.A. 99, 7821 (2002).

[5] A. E. Motter, Phys. Rev. Lett. 93, 098701 (2004).
[6] R. E. Bellman, and S. E. Dreyfus, Applied Dynamic Pro-
gramming (Princeton University Press, New Jersy, 1962).

[7] H. Jeong, S. Mason, A. -L. Barab´asi, and Z. N. Oltvai,

Nature 411, 41 (2001).

[8] G. K. Zipf, Human Behavior and the Principal of Least

Eﬀort (Addison-Wesley, Cambridge, MA, 1949).

[9] K. -I. Goh, B. Kahng, and D. Kim, Phys. Rev. Lett. 87,

278701 (2001).

[10] A. -L. Barab´asi, and R. Albert, Science 286, 509 (1999).

