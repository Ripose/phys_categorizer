6
0
0
2
 
v
o
N
 
5
 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 
1
v
7
3
0
1
1
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Computer-Simulation des Wettbewerbs zwischen Sprachen

D. Stauﬀer1, C. Schulze1, S. Wichmann2
1 Theoretische Physik, Universit¨at, D-50923 K¨oln, Euroland
2 Abteilung f¨ur Linguistik, Max Planck Institut f¨ur Evolution¨are Anthropologie
Deutscher Platz 6, D-04103 Leipzig, Germany

Zusammenfassung
Recent computer simulations of the competition between thousands of languages
are reviewed, and some new results on language families and language similarities
are presented.

1. Einleitung
Bereits im Jahre 2006 hat K¨olner Universit¨at die Integration der passenden Di-
daktiken in die Mathematisch-Naturwissenschaftliche Fakult¨at vollzogen, was im
Saarland zu der Zeit eingeleitet wurde, als DS dort war (1974-77, Gruppe Binder).
Deshalb und weil DS auch jahrzehntelang die Lehramtskommission der K¨olner Fach-
gruppe Physik leitete und das Lehramtsstudium gegen die diversen Vorgaben von
oben verteidigte, sind wir jetzt berechtigt, Herrn Patt zum 70. Geburtstag zu ehren.
Theoretische Physik ist heute auch nicht mehr das, was sie fr¨uher einmal war.
Auf dem Computer sind bis zu 1013 Teilchen simuliert werden, und so k¨onnen kom-
plexe System simuliert werden, wo das Verhalten des Gesamtsystems nicht direkt
aus dem Verhalten der einzelnen Teilchen erschlossen werden kann. Ein Beispiel
daf¨ur sind reale Gase, die seit 1872 durch die Gleichung von van der Waals ap-
proximiert werden. Aus der Tatsache, dass sich die Teilchen teilweise anziehen und
teilweise abstoßen, kann man nicht direkt erkennen, dass es ein Gleichgewicht von
Dampf und Fl¨ussigkeit und eine kritische Temperatur gibt. Auch der Unterschied
von Massenpsychologie zur Psychologie der Einzelnen kann als Komplexit¨at gelten.
So haben in den letzen Jahren die Physiker auf ihren Computern nicht nur Bio-
logie simuliert (Biologie ist eine alte Liebe der Physik, die erst seit kurzem erwidert
wird), sondern auch B¨orsenkurse, Meinungsbildung, soziale Netzwerke, . . . [1]. Seit
2004 hat diese Seuche auch die Sprachwissenschaft erreicht [2], und umgekehrt be-
nutzen Linguisten auch Methoden aus der Physik komplexer Systeme [3]. Diese
Arbeiten [2] f¨uhrten kurz danach an sechs verschiedenen Unis unabh¨angig von ei-
nander zu weiteren Simulationen des Wettbewerbs zwischen Sprachen. ¨Uber diese
Computersimulation der Wechselwirkung zwischen verschiedenen Sprachen wird hier
berichtet; eine ausf¨uhrlichere aber schon veraltende ¨Ubersicht ist [4]. Wir benutzen
die seit einem halben Jahrhundert in der Physik vorhandenen Methoden der Simu-
lation einzelner Teilchen, ohne dass wir n¨aherungsweise ¨uber viele Teilchen mitteln;

1

 1000

n
e
h
c
a
r
p
S

 
r
e
d
 
l
h
a
Z

 100

 10

 1

 1

 10

 1

n
e

i
l
i

m
a
F
 
r
e
d
 
l
h
a
Z

 10

 100

 1000

 1 M

 10 M

 100 M  1000 M

 10000
 100000
Zahl der Sprecher

Realitaet, aus  www.ethnologue.org und [3]

 1

 10

 100

 1000

Zahl der Sprachen

Abbildung 1: Empirische Verteilung der realen Sprachgr¨oßen [4] (oben) und Fami-
liengr¨oßen [3] (unten).

in anderen Wissenschaften ist diese Methode neuer und wird oft “Agenten-basiert”
genannt [5]. ¨Ubrigens hat Selten, Wirtschaftsnobelpreistr¨ager in Bonn, schon viel
fr¨uher Spieltheorie auf Sprachen angewandt [6].

Heute sprechen die Menschen etwa 7000 Sprachen, davon alleine etwa 800 in
Papua-Neuguinea. Alle zehn Tage stirbt im Durchschnitt eine Sprache aus. Werden
in einigen Jahrtausenden alle Menschen die gleiche Sprache (und ihre Varianten)
sprechen [7]? K¨onnen wir die reale Verteilung der Sprachgr¨oßen in einer Simula-
tion reproduzieren: Wieviel Sprachen gibt es, die jeweils N Leute als Muttersprache
haben? Diese reale Verteilung in Abb.1a ist eine Log-Normal-Verteilung mit einer
Erh¨ohung bei den ganz kleinen Sprachen, die nur noch von ein paar Leuten gespro-
chen werden. Eine Parabel in dieser doppelt-logarithmischen Abbildung entspricht
einer lognormalen Verteilung. Mandarin-Chinesisch wird von mehr als einer Mil-

2

liarde gesprochen, und etwa 50 Sprachen nur noch von einer Person.

Im n¨achsten Abschnitt werden die beiden Modelle erkl¨art, mit denen wir 7000
Sprachen gleichzeitig simulieren k¨onnen, und im ¨ubern¨achsten Abschnitt bringen wir
ausgew¨ahlte Resultate. ¨Uberall z¨ahlt die Gr¨oße einer Sprache die Zahl der Sprecher
dieser Sprache. Ein Anhang listet eines der benutzten Fortran-Programme.

2. Vielsprach-Modelle
2.1 Schulze-Modell
Dieses erste Modell f¨ur viele Sprachen gibt es in diversen Versionen, deren Resultate
meist ¨ahnlich sind; hier wird die letzte Version erkl¨art. Auf jedem Gitterpunkt
eines L × L Quadratgitters lebt ein Mensch, der genau eine Sprache spricht. Diese
Sprache wird deﬁniert durch F Eigenschaften, von denen jede durch eine ganze Zahl
zwischen 1 und Q characterisiert ist. Beispiele sind grammatische Eigenschaften
wie die Reihenfolge von Subjekt, Objekt und Verb. Typische Werte sind Q = 2 bis
5, F = 8 oder 16. Bei Q = 2 kann man eﬃzienter rechnen, wenn F = 8, 16, 32
oder 64 Eigenschaften dann in einem einzigen Computerwort (Bitstring) als Bits
abgespeichert werden. Bei einer Iteration wird jeder Gitterpunkt einmal behandelt.
Mit Wahrscheinlichkeit p, unabh¨angig f¨ur jede der F Eigenschaften, ¨andert sich
die betrachtete Eigenschaft der am betrachteten Gitterpunkt gesprochen Sprache.
Diese Wahrscheinlichkeit p ist in der Realit¨at etwa ein Prozent pro menschlicher
Generation. Außerdem springt mit Wahrscheinlicheit 1 − x2 oder (1 − x)2 jemand
von einer Sprache, die von einem Bruchteil x der Gesamtbev¨olkerung gesprochen
wird, zur Sprache einer zuf¨allig ausgew¨ahlten (benachbarten) Person. Letzterer
Prozess ist eine typisch menschliche Eigenschaft, dass man von einer “kleinen” zu
einer weit verbreiteten Sprache springt, wie es in der Physikforschung in der zweiten
H¨alfte des 20. Jahrunderts geschah.

Dar¨uber hinaus k¨onnen auch Eigenschaften von einem zuf¨allig ausgew¨ahlten
Nachbarn ¨ubernommen werden. Beispiele f¨ur diese linguistische Diﬀusion sind franz-
¨osische Lehnworte oder englische Grammatik im Deutschen: “Ich ging in 2005 zwei-
mal zum Friseur”.

2.2 Viviane Model

Die Kolonisierung eines zun¨achst menschenleeren Kontinents wurde von Viviane
de Oliveira et al modelliert [8] und wird hier brasilianischem Stil entsprechend mit
dem Namen Viviane bezeichnet. Zun¨achst beschreiben wir die urspr¨ungliche Version
[8], dann eine bessere Modiﬁkation in zwei Varianten a und b [9].

2.2.1 Urspr¨ungliche Version

3

Auf jedem Gitterpunkt j eines L × L Quadratgitters leben entweder cj Menschen,
oder niemand, mit 1 ≤ cj ≤ m zuf¨allig gew¨ahlt, und m ∼ 102. Auf einem bewohn-
ten Gitterplatz wird nur eine Sprache gesprochen. Anfangs ist nur ein Gitterpunkt
bewohnt, so wie Amerika wohl von der Beringstraße aus besiedelt wurde. Danach
breitet sich die Bev¨olkerung aus, Schritt f¨ur Schritt in einen freien Nachbarn be-
wohnter Pl¨atze; dieser wird mit einer Wahrscheinlichkeit cj/m ausgew¨ahlt. Dort
wird erst die Sprache k eines der bewohnten Nachbarpl¨atze gesprochen, der mit
einer Wahrscheinlichkeit proportional zur Sprachgr¨oße Nk (“Fitness”) ausgew¨ahlt
wird. Anschließend ¨andert sich die Sprache am neu besiedelten Platz mit einer
Wahrscheinlichkeit α/N ′
k die kleinere der beiden Zahlen Nk und Mk ist,
und die Grenze Mk anfangs zuf¨allig zwischen 1 und Mmax ∼ 20m festgelegt wird.
Der Mutationsfaktor α ist ein freier Parameter. Die neue Sprache bekommt eine
neue Nummer; andere mehr inhaltliche Sprachelemente hat das urspr¨ungliche Mo-
dell nicht. Die Sprachen auf den bereits besetzten Pl¨atzen ¨andern sich nicht mehr.
Die Simulation endet, wenn alle Gitterpl¨atze besetzt sind.

k wobei N ′

2.2.2 Modiﬁzierte Versionen [9].
a) Zun¨achst kann jeder Sprache des Viviane-Modells ein Bitstring zugeordnet wer-
den, also eine Kette von 8 bis 64 bin¨aren Variablen in den bisherigen Simulationen
(siehe Programm im Anhang). Diese Bits geben der Sprache einen Inhalt und erlau-
ben, die Unterschiedlichkeit verschiedener Sprachen zu bestimmen (siehe Abschnitt
3.2). Wie zuvor f¨uhrt jede Mutation bei der Besiedlung eines neuen Platzes zu einer
neuen Sprache.
b) Stattdessen kann auch eine Sprache nur dann als neu deﬁniert werden, wenn der
Bitstring sich ¨andert und eine bisher nicht aufgetretene Folge von Bits darstellt.
Die Zahl der verschiedenen Sprachen ist dann die Zahl der verschiedenen Bitstrings.
Die ¨Anderung einer Sprache kann damit auch zu einer bereits vorhandenen Sprache
f¨uhren, etwa wenn das erste Bit von 01011000 von Null auf Eins springt und der
Bitstring 11011000 schon auf einem anderen Gitterplatz mit einer anderen Vorges-
chichte realisiert ist. Außerdem wird ber¨ucksichtigt, dass die meisten Gegenden der
Erde weniger attraktiv sind als die großen Metropolen; die Bev¨olkerungsdichte c
zwischen 1 und m wird nicht gleichf¨ormig bestimmt, sondern mit einer Wahrschein-
lichkeit proportional zu 1/c, analog zu realen Gr¨oßenverteilung von St¨adten. Dann
ist es eﬃzienter, die Auswahl eines unbewohnten Nachbarplatzes proportional zu
seiner Attraktivit¨at c dadurch zu realisieren, dass zwei solche unbewohnte Nachbarn
zuf¨allig ausgew¨ahlt werden, und der mit dem gr¨oßeren c anschließend besiedelt wird.

4

Start mit Dominanz, rho=0.9 (+) and 0.5 (x), L=3001,F=8,Q=5,q=0.5,r=0.9,t=300; *: L=10001

 0.2

 0.4

 0.6

 0.8

 1

Wie oben, aber Q = 2 und: F = 8 (+,x) oder 16 (*,sq), rho = 0.9 (+,*) and 0.5 (x,sq.)

l
i

e
t
n
A

 
r
e
t
s
k
r
e
a
t
S

l
i

e

t

n
A

 
r
e

t
s
k
r
e
a
S

t

 1

 0.8

 0.6

 0.4

 0.2

 0.8

 0.6

 0.4

 0.2

 0

 0

 1

 0

 0

p

p

5

 0.2

 0.4

 0.6

 0.8

 1

Abbildung 2: Anteil der h¨auﬁgsten Sprache an der Gesamtbev¨olkerung im l¨ochrigen
Schulze-Modell.

3. Resultate
3.1 Schulze-Modell
Wenn anfangs Alle die gleiche Sprache sprechen, dann kann eine hinreichend hohe
¨Anderungswahrscheinlichkeit p zu einer Fragmentation f¨uhren wie beim Turmbau zu
Babel: Die Bev¨olkerung verteilt sich etwa gleichm¨aßig auf die QF m¨oglichen Spra-
chen. Man kann aber auch mit so einer fragmentierten Bev¨olkerung beginnen und
dann bei hinreichend kleinem p sehen, wie nach einiger Zeit eine Sprache dominiert
und von den meisten Leuten gesprochen wird; die Anderen sprechen meist eine Va-
riante dieser dominierenden Sprache. Wir sehen einen Phasen¨ubergang erster Art,
mit Hysterese. Nur im Nichtgleichgewicht und mit zus¨atzlichen Rausch-Eﬀekten

L = 20,000; 7500 Sprachen; 5940 Millionen Leute

n
e
h
c
a
r
p
S

 
r
e
d
 
l
h
a
Z

 1000

 100

10.0

1.00

0.10

0.01

 1

 10  100  1 K  10K 100K 1 M  10M 100M 1 G

Zahl der Sprecher

Abbildung 3: Gr¨oßenverteilung der Sprachen im modiﬁzierten Viviane-Modell, Fall
b, 13 Bits pro Bitstring, α = 0.1, m = 63, Mmax = 255.

[10] konnte eine Gr¨oßenverteilung ¨ahnlich zu Abb.1 simuliert werden.

Dinge wurden nicht besser, wenn Dreik¨orper- und F¨unfk¨orper-Kr¨afte angenom-
men wurden: Eine Eigenschaft wurde von einer anderen Sprache ¨ubernommen nur,
wenn zwei, oder alle vier, Nachbarn die gleiche Eigenschaft hatten.

Ganz anders ist die Situation in der l¨ochrigen Version, wenn nur ein zuf¨alliger
Anteil ρ aller Pl¨atze bewohnbar ist. “Bekanntlich” bilden sich dann auf dem Qua-
dratgitter bei ρ < 0, 593 nur endliche Cluster bewohnbarer Nachbarn, w¨ahrend bei
ρ > 0, 593 auch ein unendliches Cluster sich von einem Ende des Gitters zum an-
deren erstreckt. Abb.2 zeigt nun mit wachsendem p einen kontinuierlichen Abfall
des Anteils der h¨auﬁgsten Sprache, ¨ahnlich zum Viviane-Modell: Die Unordnung
hat den Phasen¨ubergang zerst¨ort. Die Gr¨oßenverteilung der Sprachen stimmt aber
immer noch nicht.

3.2 Viviane-Modell
Im urspr¨unglichen Viviane-Modell stimmt die Gr¨oßenverteilung besser und erstreckt
sich in großen Gittern von 1 bis zu einer Milliarde. Nur gibt die doppelt-logarithmi-

6

100 * L=10,000; 8(+), 16(x), 32(*), 64(Qu.) Bits

 1

 10

 100

 1000

Zahl der Sprachen

100 x L=10.000, 5 extra Iterationen

 1 M

 100000

 10000

 1000

 100

 10

 1

 10000

 1000

 100

n
e

i
l
i

m
a
F
 
r
e
d

 
l

h
a
Z

n
e

i
l
i

m
a
F
 
r
e
d
 
l
h
a
Z

 1

 10

 100

 1000

Zahl der Sprachen

Abbildung 4: Einteilung der Sprachen in Sprachfamilien im modiﬁzierten Viviane-
Modell, Summe ¨uber 100 Gitter, zu vergleichen mit Abb. 1b. Oben: Fall a, α =
0.05, m = 127, Mmax = 255. Unten: Fall b, α = 0.10, m = 63, Mmax = 255.

sche Darstellung keine Parabel, sondern zwei Geraden, die zwei Potenzgesetzen ents-
prechen. Nur wenn wieder Rauschen [10] eingebaut wird, sieht die Verteilung or-
dentlich aus [9].

Viel besser funktioniert die von Paulo Murilo de Oliveira (nicht mit Viviane de
Oliveira verwandt) modiﬁzierte Version (Fall b in Abschnitt 2.2.2). Abb.3 aus [9]
zeigt eine leicht schiefe Parabel, ¨ahnlich zu Abb.1, mit 6 Milliarden Menschen und
7500 Sprachen.

Die Einteilung der Sprachen in Familien (z.B. die indogermanische Sprachfamilie)
funktioniert in beiden F¨allen a und b. Eine neue Sprachfamilie startet genau dann,
wenn eine gerade mutierte Sprache sich um mindestens i Bits von der historisch

7

Modifiziertes Viviane-Modell, Fall b; Gerade = Zufall

n
e
n
o

i
l
l
i

M
 
n
i
 
d
n
a
t
s
b
A
-
g
n
m
m
a
H

i

 14

 12

 10

 8

 6

 4

 2

 0

 0

 2

 4

 6

 8  10  12  14  16  18  20

Abstand in 1000

Abbildung 5: Un¨ahnlichkeit zwischen Sprachen als Funktion des geographischen
Abstands. Die Einheit der horizontalen Achse sind 1000 Gitterkonstanten. Die
horizontale Gerade zeigt den summierten Hammingabstand an, wenn die Sprachen
v¨ollig unkorreliert w¨aren. 13 Bits, α = 0.1, m = 63, Mmax = 255, L = 20.000.

ersten Sprache dieser Sprachfamilie unterscheidet. Bei i = 1 bildet jede neue Sprache
eine neue Sprachfamilie: uninteressant. Von i = 2, 3 und 4 funktioniert i = 2 am
besten, und Abb. 4 zeigt oben i = 2 mit Bitstrings der L¨ange 8, 16, 32 und 64: Kein
Einﬂuss der Zahl der Bits. Die Gerade hat die Steigung –0,525, die dem empirischen
Exponenten von −1, 905 = −1/0, 525 der Realit¨at nach [3] entspricht. Der untere
Teil zeigt Fall b mit 13 Bits, wobei zu f¨unf Zeiten im gleichen Abstand auch die
l¨angst besetzten Pl¨atze ihr Sprache ¨andern k¨onnen, wie es dauernd bei den neu
besetzten Pl¨atzen geschieht.

Auch die Geographie spielt eine Rolle, und je weiter die Sprachen r¨aumlich vonei-
nander getrennt sind, um so mehr unterscheiden sie sich im Durchschnitt. Holman
und Wichmann haben das f¨ur die Realit¨at untersucht [11], und eine ganz ¨ahnliche
Kurve liefert Fall b des modiﬁzierten Viviane-Modells in Abb.5. Hier wird der Unter-
schied zwischen den Sprachen durch den Hamming-Abstand zwischen den Bitstrings

8

gemessen, also durch die Zahl der verschiedenen Bits bei einem Position-f¨ur-Position
Vergleich der beiden Bitstrings. Wenn die Sprachen gar nicht mehr korreliert w¨aren,
w¨urden sie in der H¨alfte der Bits ¨ubereinstimmen, was durch die Gerade in Abb.5
symbolisiert wird. ¨Ahnlich zur Realit¨at [11] sind die Sprachen erst dann nahezu
unkorreliert, wenn wir von einem Ende des 20.000 × 20.000 Gitters zum anderen
gehen.

4. Diskussion
Nach vielen Anl¨aufen sind im letzten Jahr sind erhebliche Fortschritte dabei ge-
macht worden, die quantitative ¨Ubereinstimmung von Simulation und Realit¨at zu
verbessern. Die Zahl der Sprachen als Funktion der Zahl der Sprecher stimmt gut,
Abb. 1 und 3, die der Zahl der Sprachfamilien als Funktion der Zahl der Spra-
chen in Abb. 1 und 4 stimmt einigermaßen. Abb.5 suggeriert, dass eine Gitte-
reinheit knapp einem Kilometer entspricht, was auch mit der Bev¨olkerungsdichte
1 ≤ cj ≤ m ∼ 102 zusammenpasst. Man sollte man nach alternativen Model-
len suchen, die ¨Ahnliches leisten; derzeit ist das Schulze-Modell gegen¨uber dem
Viviane-Modell etwas zur¨uckgeblieben.

5. Anhang
Das folgende Fortran-Programm addiert zum urspr¨unglichen Viviane Modell nur die
Bitstrings des modiﬁzierten Viviane-Modells und z¨ahlt neben den Sprachen nlang
auch die Sprachfamilien ifam. In den zwei Zeilen vor dem ersten Print-Befehl muss
nach integer* bzw. data Lg/ die gleiche Zahl 8, 4, 2 oder 1 untereinander angege-
ben werden f¨ur 64, 32, 16 oder 8 Bits pro Bitstring. Zum Schluss wird ausgedruckt
die Zahl ns der Sprachen einer bestimmten Gr¨oße, die Zahl nf der Sprachfami-
lien (mit Gr¨oße = Zahl der Sprachen in der Familie) und das Histogram nhist
der Zahl der 1-Bits. Die ersten beiden Gr¨oßen werden in Zweierpotenzen zusam-
mengefasst, also z.B. von 32 bis 63. Weitere Fragen beantwortet bis Anfang 2008
stauffer@thp.uni-koeln.de.

parameter(L=10000,L2=L*L,L0=1-L,L3=L2+L,L4=25*L+1000,L5=32767,

1

iscale= 7, imax=11)

c
c
c
c
c

language colonization of de Oliveira, Gomes and Tsang, Physica A
add bitstring to each language; with Hamming family analysis
ifam(lang) gives the family to which language "lang" belongs
nlang(ifam) gives the number of languages within one family
grammar bitstring has Lg bytes = 8*Lg bits, integer*Lg grammar
integer*8 ibm,mult,icount(L5),jpower,numpop,nhist(0:64)
integer*2 lang,limit,mother(L5),nlang(0:L5)

9

c
c

c

byte isite, c
byte isite
integer*2 c
dimension neighb(0:3),isite(L0:L3),list(L4),lang(L2),c(L2),f(L5),

1 nf(0:40),ns(0:40),limit(L5),grammar(0:L5),popct(0:255),ifam(L5)

integer*8 grammar,grammd,bit(0:63)
data Lg/8/,iseed/2/,alpha/0.05 /,ns/41*0/,nf/41*0/,nrun/100/
print *, ’# ’, L, iseed, alpha, nrun, Lg, iscale, imax, ’ >=2’
if(iscale.gt.7.or.imax.gt.15) stop 6
if(Lg.eq.8) kshift=-58
if(Lg.eq.4) kshift=-59
if(Lg.eq.2) kshift=-60
if(Lg.eq.1) kshift=-61
bit(0)=1
do 25 i=1,63

25

bit(i)=ishft(bit(i-1),1)

mult=13**7
mult=mult*13**6
ibm=(2*iseed-1)*mult
ibm=ibm*16807
factor=(0.25d0/2147483648.0d0)/2147483648.0d0
fac=1.0/2.0**iscale
do 17 j=0,255

ici=ici+iand(1,ishft(j,-i))

18
17

22

ici=0
do 18 i=0,7

popct(j)=ici

neighb(0)= 1
neighb(1)=-1
neighb(2)= L
neighb(3)=-L
do 11 irun=1,nrun
call flush(6)
do 22 ici=0,64
nhist(ici)=0

numpop=0
do 10 j=2,L5
nlang(j)=0
ifam(j)=0
mother(j)=0

10

icount(j)=0
ibm=ibm*mult
limit(j)=1+ishft(ibm,imax-64)
f(j)=0.0
do 6 j=L0,L3

if(j.le.0.or.j.gt.L2) goto 6
lang(j)=0
ibm=ibm*16807
c(j)=ishft(ibm,iscale-64)
if(c(j).eq.0) goto 9
numpop=numpop+c(j)
isite(j)=0

10

9

6

c

print *, limit, ’ limit, c ’, c
j=L2/2+1
isite(j)=1
isite(j+1)=2
isite(j-1)=2
isite(j+L)=2
isite(j-L)=2
list(1)=j+1
list(2)=j-1
list(3)=j+L
list(4)=j-L
isurf=4
nempty=L2-5
number=1
mother(1)=1
lang(j)=1
ifam(1)=1
ifamj=1
nfam=1
nlang(nfam)=1
nlang(0)=0
grammar(number)=0
icount(1)=1
f(1)=c(j)*fac
surface=2, occupied=1, empty=0
end of initialisation, start of growth
do 1 itime=1,2000000000

c
c

13

ibm=ibm*16807

11

index=1.0+(0.5+factor*ibm)*isurf
if(index.gt.isurf.or.index.le.0) goto 13
j=list(index)
if(itime.eq.(itime/500000 )*500000 )

1

print*,itime,number,isurf,nfam

ibm=ibm*mult
if(0.5+factor*ibm .ge. c(j)*fac) goto 1
list(index)=list(isurf)
isurf=isurf-1
isite(j)=1
now select language from random neighbour; prob. propto fitness
fsum=0
do 5 idir=0,3
if(isite(j+neighb(idir)).eq.1) fsum=fsum+f(lang(j+neighb(idir)))
ibm=ibm*16807
idir=ishft(ibm,-62)
i=j+neighb(idir)
if(isite(i).ne.1) goto 3
ibm=ibm*mult
if(0.5+factor*ibm .ge. f(lang(i))/fsum) goto 3
lang(j)=lang(i)
ifam(lang(j))=ifam(lang(i))
grammar(lang(j))=grammar(lang(i))
f(lang(j))=min(limit(lang(j)), f(lang(j)) + c(j)*fac)
now come mutations inversely proportional to fitness f
ibm=ibm*16807
if(0.5+factor*ibm .lt. alpha/f(lang(j)) ) then

c
c

c

c

5
3

number=number+1
ifamj=ifam(lang(j))
nlang(ifamj)=nlang(ifamj)+1
ifam(number)=ifamj
if(number.gt.L5) stop 8
ibm=ibm*mult
nbit=ishft(ibm,kshift)
grammar(number)=ieor(grammar(lang(j)),bit(nbit))
lang(j)=number
f(lang(j))= c(j)*fac
mother(number)=mother(lang(i))

end if
icount(lang(j))=icount(lang(j)) + c(j)

12

c

c

c

now determine Hamming distance (grammd) to previous ancestor
grammd=ieor(grammar(lang(j)),grammar(mother(lang(i))))
ici=0
do 23 ibyte=0,Lg-1

23

ici=ici+popct(iand(255,ishft(grammd,-8*ibyte)))

if(ici.ge.2) then

new family starts here; subtract previously added language
mother(lang(j))=lang(j)
nlang(ifamj)=nlang(ifamj)-1
nfam=nfam+1
ifam(lang(j))=nfam
if(nfam.ge.L5) stop 7
nlang(nfam)=1

end if
if(isurf.eq.0) goto 8
now determine new surface sites as usual in Eden model
do 2 idir=0,3

i=j+neighb(idir)
if(i.le.0.or.i.gt.L2) goto 2
if(isite(i).ge.1) goto 2
isurf=isurf+1
if(isurf.gt.L4) stop 9
nempty=nempty-1
list(isurf)=i
isite(i)=2

2
1
8

7

continue

continue
continue
if(L.eq.79) print 7, lang
format(1x,79i1)
print *, irun, number, itime, numpop, nfam
do 11 k=1,number

if(icount(k).gt.0) j=alog(float(icount(k)))/0.69314
if(k.gt.0.and.k.le.nfam.and.nlang(k).gt.0) then

i=alog(float(nlang(k)))/0.69314
nf(i)=nf(i)+1

end if
ns(j)=ns(j)+1

11

jpower=1
do 12 j=0,37

13

if(j.gt.0) jpower=jpower*2
if(ns(j).gt.0) print *, jpower,ns(j),nf(j)

ici=ici+popct(iand(255,ishft(grammd,-8*ibyte)))

nhist(ici)=nhist(ici)+1

do 21 ici=0,64

if(nhist(ici).gt.0) print *, ici, nhist(ici)

langsum=langsum+nlang(i)
if(nlang(i)+ifam(i).ne.0) print *, i, nlang(i),ifam(i)

12

20
19

21

24

do 19 j=1,number

grammd=grammar(j)
ici=0
do 20 ibyte=0,Lg-1

if(nrun.gt.1) stop
langsum=0
do 24 i=1,number

print *, langsum
stop
end

Literatur

[1] D. Stauﬀer, S. Moss de Oliveira, P.M.C. de Oliveira, J.S. S´a Martins, Biology,
Sociology, Geology by Computational Physicists. Amsterdam: Elsevier 2006.

[2] D. Abrams and S.H. Strogatz, Nature 424, 900 (2003); M. Patriarca and T.

Lepp¨anen, Physica A 338, 296 (2004).

[3] S. Wichmann, J. Linguistics 41, 117 (2005).

[4] C. Schulze and D. Stauﬀer, S.311 in: B.K. Chakrabarti, A. Chakraborti, and
A. Chatterjee (Hgg.), Econophysics and Sociophysics: Trends and Perspectives.
Weinheim: Wiley-VCH Verlag 2006.

[5] F.C.Billari, T. Fent, A. Prskawetz and J. Scheﬀran (Hgg.) Agent-based compu-

tational modelling, Heidelberg: Physica-Verlag 2006.

[6] R.Selten und J. Pool, S.64 in: R. Selten (Hg), Game Equilibrium Models IV,

Berlin-Heidelberg: Springer 1992.

[7] P. van Parijs, Int. Polit. Sci. Rev. 21, 217 (2000).

14

[8] V.M. de Oliveira, M.A.F. Gomes and I.R. Tsang, Physica A 361, 361 und 368,

257 (2006).

[9] P.M.C. de Oliveira, D. Stauﬀer, F.W.S. Lima, A.O. Sousa, C. Schulze and S.

Moss de Oliveira, Physica A, in press (2007).

[10] D. Stauﬀer, C. Schulze, F.W.S. Lima, S. Wichmann and S. Solomon, Physica

[11] E.W. Holman, C. Schulze, D. Stauﬀer und S. Wichmann, eingeschickt an Lin-

A 371, 719 (2006).

guistic Typology.

15

