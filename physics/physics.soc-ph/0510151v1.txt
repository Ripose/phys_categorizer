5
0
0
2
 
t
c
O
 
7
1
 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 
1
v
1
5
1
0
1
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Extracting the Traﬃc Flows and the Physical
Graphs from Timetables

Maciej Kurant, Patrick Thiran

Abstract

Timetables of mass transportation systems contain an information
not only about the traﬃc ﬂows in the network, but also about the
topology of the physical infrastructure of the network. However, this
data is not given explicitly; it requires an nontrivial preprocessing to be
revealed. We propose an algorithm that extracts the physical structure
and the network of traﬃc ﬂows from timetables. We then apply the
algorithm to the timetables of the Swiss railway system, and evaluate
our approach.

1

Introduction

Timetables of trains, buses, trams, metros and other means of mass trans-
portation (henceforth called vehicles) are publicly available. They explicitly
provide us with the available connections and their times. They also contain
the information about the physical structure of the network, and the traﬃc
ﬂows in it. These data are very useful for the studies in the ﬁeld of complex
networks. However, in timetables, this information is given in an implicit
form, and needs some nontrivial processing to be extracted. As an example,
consider a train that stops successively at the stations A−B− C−D. A naive
approach would be to interpret every direct connection as a physical link
(rail track); this would imply three physical links: A−B, B−C and C−D.
Let us take a second train (an express one), stopping at A−C−D. The naive
approach would add another physical link, A−C, to the previous set. Never-
theless, it is very likely that the second train passes through the station B,
but does not stop there. So the link A−C is a shortcut link that does not
actually exist in the physical topology, which means that the naive approach
is not suﬃcient. In this paper we propose an algorithm that extracts the
physical structure and the network of traﬃc ﬂows from timetables, and that
resolves ambiguous duplications of physical links (such as the one mentioned

1

above). We then apply the algorithm to the timetables of the Swiss railway
system.

2 Related work

The graphs based on the physical infrastructure of transportation networks
were analyzed on the examples of a power grid [1, 2], railway network [3],
road networks [4, 5, 6, 7], or urban mass transportation systems [8, 9, 10,
11, 12, 13].

In the mass transportation systems (railway, subway, busses, trams, etc),
the set of nodes is deﬁned by the set of all stations. However, it is not
obvious what should be interpreted as an edge. There are three approaches
that deﬁne three diﬀerent spaces1:

Space P Two stations are considered to be connected by a link when there
is at least one vehicle which stops at both stations [3]. In other words,
all stations used by a single vehicle are fully interconnected forming
a clique. This approach neglects the physical distance between the
stations. Instead, in the resulting topology, the length of a shortest
path between two arbitrary stations A and B is the number changes
(of the mean of transportation) one needs to get from A to B. This
approach was used in [3, 10, 12].

Space K Two stations are connected only if they are physically directly
connected (with no intermediate stations). This reﬂects the topology
of the real-life infrastructure. This approach was used in [8, 9, 11, 13].
Here, the length of a shortest path between two stations is the minimal
number of stations one has to traverse (stopping or not).

Space L Two stations are connected if they are two consecutive stops on a
route of at least one vehicle [12]. This approach interprets the shortcut
links as legitimate edges. Here, the length of a shortest path between
two stations is the minimal number of stops one needs to make. Note,
that the number of stations traversed on the way might be larger,
because the vehicles do not necessary stop on all of them.

It is easy to see, that the graph in space K is a subgraph of the graph in
space L, which in turn is a subgraph of the graph in space P.

In some works mentioned above, the data is taken from timetables (e.g.,
in [3, 12]). They analyzed the graphs in space P and in space L, which

1The spaces L and P were deﬁned in [12]. Here we add the space K.

2

can be directly obtained from timetables. In space P, for each vehicle, we
fully connect all stations it stops at. In space L, we use the naive approach
described in the previous section. The topology in space K is far more chal-
lenging to obtain. This is due to the existence of shortcut links that should
be eliminated. In some special cases, for instance for most of the subway
networks, the vehicles stop at each station they traverse and therefore the
topologies in space L and in space K coincide. This is not true in a general
case, with both local and express vehicles.
Extracting the real physical structure (a topology in space K) from timeta-
bles is the main objective of this paper. The same problem was addressed
in the context of railway networks in the PhD dissertation of Annegret
Lebers [14]. The proposed solution ﬁrst obtains the physical graph in
space L. This graph contains all real edges, and many shortcut edges that
do not exist in reality. Next, speciﬁc structures in the initial physical graph,
called edge bundles, are detected. The Hamilton paths2 within these bundles
should indicate the real edges. Unfortunately, the bundle recognition prob-
lem turned out to be NP-complete. The heuristics proposed in [14] result in
a correct real/shortcut classiﬁcation of 80% of edges in the studied graphs.
The approach we propose in this paper is based on simple observations that
were, for some reason, discarded in [14]. This results in a much simpler and
more eﬀective algorithm.

3 Notation

3.1 Two layers

We follow the two-layer framework introduced in [??]. The lower-layer topol-
ogy is called a physical graph Gφ = (V φ, Eφ), and the upper-layer topology
is called a logical graph Gλ = (V λ, Eλ). Let N be the number of nodes,
i.e., N = |V φ| = |V λ|. Every logical edge eλ = {uλ, vλ} is mapped on the
physical graph as a path M (eλ) ⊂ Gφ connecting the nodes uφ and vφ,
corresponding to uλ and vλ. (A path is deﬁned by the sequence of nodes
it traverses.) The set of paths corresponding to all logical edges is called a
mapping M (Eλ) of the logical topology on the physical topology.

In the ﬁeld of transportation networks the undirected, unweighted phys-
ical graph Gφ captures the physical infrastructure of a transportation net-
work in space K, and the logical graph Gλ reﬂects the undirected traﬃc
ﬂows. Every logical edge eλ is created by connecting the ﬁrst and the last
2Hamilton path is a path that passes through every vertex of a graph exactly once

3

φ
λ
G = (V, E)
V
E
u, v, . . .
e
M (eλ)
M (Eλ)
w(eλ)
|R|
ri
R = {ri}i=1..|R|
f irst(·)
last(·)

“physical”
“logical”
graph
set of vertices
set of edges
vertices
edge
a mapping of the logical edge eλ on the physical graph
a mapping of all logical edges on the physical graph
a weight of the logical edge eλ
total number of vehicles
the route of ith vehicle (the list of nodes it traverses)
the list of routes of all vehicles
the ﬁrst element (e.g., the ﬁrst node of a path or of an edge)
the last node of a path, or the second node of an edge

Table 1: The notation used in the paper.

node of the corresponding traﬃc ﬂow, and by assigning a weight w(eλ) that
represents the intensity of this ﬂow. The mapping M (eλ) of the edge eλ is
the path taken by this ﬂow.

3.2 Timetable data

We take a list of all vehicles departing in the system within some period
(e.g., one weekday). Denote by R = {ri}i=1..|R| the list of routes followed
by these vehicles, where |R| is the total number of vehicles. A route ri of
ith vehicle is deﬁned by the list of nodes it traverses.

4 Algorithm

The algorithm has two phases.
In the ﬁrst one (initialization) we group
the vehicles with identical routes, and obtain the logical graph Gλ, the
physical graph Gφ in space L, and the mapping M (Eλ). In the second phase,
these structures are iteratively reﬁned, mainly by detecting and erasing the
shortcut links in the physical graph. This process aﬀects the physical graph
and the mapping. The resulting physical graph is a proper graph in space K.

4

4.1

Initialization

Based on the list R of routes, we ﬁnd groups of vehicles that follow the same
route (in any direction). Each such group deﬁnes one edge eλ in the logical
graph; eλ connects the ﬁrst and the last node of the route. The number
of vehicles that follow the route becomes the weight w(eλ) of the edge; the
route itself becomes the initial mapping M (eλ) of the edge eλ. Formally this
can be stated as follows:

1. Eλ = ∅, M = ∅, V φ = V λ = Si V (ri)

2. FOR i = 1 TO |R| DO:

(a) eλ
(b) IF eλ

i = {f irst(ri), last(ri)}
i ∈ Eλ THEN w(eλ

ELSE Eλ = Eλ S{eλ

i ) + +
i }, M (eλ

i ) = ri, w(eλ

i ) = 1

3. Eφ = Seλ∈Eλ E(M (eλ))

Where:
• f irst(ri) is the ﬁrst node in the route ri
• last(ri) is the last node in the route ri.
• E(M (eλ)) is the set of all physical edges in the mapping of eλ

4.2 Deleting the shortcuts

In the initialization part we have obtained:
• the set of nodes V φ(= V λ),
• the set of logical edges Eλ, together with the corresponding weights w(Eλ),
• the set of physical edges in space L Eφ, and
• the mapping of the logical edges M (Eλ) onto the physical graph.
The sets V φ(= V λ), Eλ and w(Eλ) will not change. However, the set Eφ
of physical edges at the end of the initialization phase still contains many
shortcut links that do not exist in reality. Here, we detect and delete these
shortcuts, and update the mapping M (Eλ). The algorithm is as follows:

1. Find a tuple (eφ, eλ), such that:

eφ(1) ∈ M (eλ)

and eφ(2) ∈ M (eλ) and eφ /∈ M (eλ).

2. IF no (eφ, eλ) found THEN RETURN Eφ and M (Eλ).

3. Peφ = subpath of M (eλ) from eφ(1) to eφ(2)

5

4. FOR all eλ ∈ Eλ DO:

• Replace in M (eλ) every occurrence of (eφ(1), eφ(2)) with Peφ
• Replace in M (eλ) every occurrence of (eφ(2), eφ(1)) with Reverse(Peφ )

5. Eφ = Eφ \ {eφ}

6. GOTO 1

Where:
• eφ(1), eφ(2) are the ﬁrst and the second node of eφ, respectively.

In Step 1, we search for a physical link that is a shortcut. We declare a
physical link eφ to be a shortcut if there exists a traﬃc ﬂow M (eλ), such that
eφ connects two nonconsecutive nodes in M (eλ). If no physical edge meets
this requirement, the algorithm quits in Step 2, returning Eφ and M (Eλ).
Otherwise, in Step 3, we ﬁnd the path Peφ that this shortcut should take.
(In the example of Section 1, eφ = A−C is a shortcut, and Peφ = A−B−C is
the corresponding path.) In Step 4 we update the mapping M (Eλ), and in
Step 5 we delete the shortcut eφ. We iterate these steps until no shortcut is
found (Step 2).

4.3 Accuracy of the traﬃc estimation

Interpreting the routes of trains, buses, trams, metros, etc, as traﬃc ﬂows
gives us the picture at a low level of granularity. We view every vehicle
as a traﬃc unit, regardless of its size or the number of people it carries.
Moreover, people usually use these vehicles only on a portion of its total
journey, not from the ﬁrst to the last station. Clearly the vehicle routes are
the result of an optimization process taking into account many factors, such
as people’s demand, continuity of the path, traveling times and availability
of stock. However, we believe that they reﬂect well the general direction
and intensity of travels, and we take a vehicle as a basic traﬃc unit. After
all, these are the vehicles that appear on the roads and cause traﬃc, not the
people they transport.

5 Example

In this section we apply our algorithm to extract the data from the timeta-
bles of the Swiss railway system. The timetables are available online on
www.cﬀ.ch. We have collected the routes of trains of the following types:
CIS, E, EC, EN, IC, ICE, ICN, IR, R, RE, S, TGV. This amounts to

6

|R| = 8686 diﬀerent trains on |Eλ| = 919 diﬀerent routes (usually there
is more than one train following the same route during one day). Our data
contained N = 1680 stations in Switzerland, together with their physical co-
ordinates. In Fig. 1(top) we present the physical graph in space L, obtained
by taking the set Eφ of physical edges resulting from the initialization phase
of our algorithm (see Section 4.1).
In this graph the number of physical
edges is |Eφ| = 2008. In Fig. 1(bottom) we present the physical graph after
the application of our algorithm. It has the same set of vertices, but the
shortcut links are ﬁltered out, resulting in the decrease of the total number
of physical edges from 2008 to 1754. More importantly, the deleted links
turn out to greatly aﬀect the properties of the graphs. For instance the
average node-to-node distance (in number of hops) has increased from 16.2
to 44.6, and the diameter from 68 to 128. The algorithm needed about ﬁve
iterations to converge. For a comparison, we present the real map of the
Swiss railway system in Fig. 2; we observe very few diﬀerences.

The logical topology for our dataset is presented in Fig. 3. Here we
represent every train as an edge (8686 edges), which results in a multigraph
(a graph with multiple edges). The multiplicity of an edge is the intensity
of the corresponding traﬃc ﬂow.

6 Conclusions

The algorithm proposed in this paper is a very useful tool for collecting data
about the physical structure and the network of traﬃc ﬂows in public mass
transportation systems. Note, that this data includes not only the topology,
but also the real traﬃc pattern, which gives a comprehensive view of the
studied system.

The work presented in this paper was ﬁnancially supported by grant

DICS 1830 of the Hasler Foundation, Bern, Switzerland.

References

[1] D. J. Watts and S. H. Strogatz. Collective dynamics of “small-world”

networks. Nature, 393:440–442, 1998.

[2] Reka Albert, Istvan Albert, and Gary L. Nakarado. Structural vulner-
ability of the north american power grid. Phys. Rev. E, 69:025103(R),
2004.

7

[3] Parongama Sen, Subinay Dasgupta, Arnab Chatterjee, P. A. Sreeram,
G. Mukherjee, and S. S. Manna. Small-world properties of the Indian
railway network. Phys. Rev. E, 67:036106, 2003.

[4] Sergio Porta, Paolo Crucitti, and Vito Latora. The network analysis of

urban streets: A dual approach. cond-mat/0411241, 2004.

[5] Michael T. Gastner and M. E. J. Newman. The spatial structure of

networks. cond-mat/0407680, 2004.

[6] M. Rosvall, A. Trusina, P. Minnhagen, and K. Sneppen. Networks and
cities: An information perspective. Phys. Rev. Lett., 94:028701, 2005.

[7] Sergio Porta, Paolo Crucitti, and Vito Latora. The network analysis of

urban streets: A primal approach. physics/0506009, 2005.

[8] V. Latora and M. Marchiori. Eﬃcient behavior of small-world networks.

Phys. Rev. Lett., 87:198701, 2001.

[9] V. Latora and M. Marchiori. Is the boston subway a small-world net-

work? Physica A, 314:109, 2002.

[10] Katherine A. Seaton and Lisa M. Hackett. Stations, trains and small-

world networks. Physica A, 339:635, 2004.

[11] Michael T. Gastner and M. E. J. Newman. Shape and eﬃciency in

spatial distribution networks. cond-mat/0409702, 2004.

[12] J. Sienkiewicz and J. A. Ho lyst. Statistical analysis of 22 public trans-

port networks in poland. physics/0506074, 2005.

[13] I. Vragovi´c, E. Louis, and A. Diaz-Guilera. Eﬃciency of informational
transfer in regular and complex networks. Phys. Rev. E, 71:036122,
2005.

[14] Annegret Liebers. Analyzing Train Time Table Graphs. PhD thesis,
University of Konstanz, Department of Computer and Information Sci-
ence, 2001.

8

Figure 1: Two physical graphs obtained from the timetables of the Swiss
railway system:
in space L (top) and in space K (bottom). In both cases
there are 1680 nodes. The physical graph in space L (2008 edges) was
obtained directly from the timetables by using the naive approach. The
physical graph in space K (1754 edges) was obtained by application of the
algorithm proposed in this paper.
9

Figure 2: The original physical graph of the Swiss railway system. The
comparison with the graph extracted from timetables (in Fig. 1-bottom)
reveals very few diﬀerences.

10

Figure 3: The logical graph obtained from the timetables of the Swiss railway
system. 8686 edges (trains) connecting 919 diﬀerent pairs of nodes. The
traﬃc intensities (weights) are reﬂected by multiedges.

11

