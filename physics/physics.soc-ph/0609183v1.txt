Europhysics Letters

PREPRINT

6
0
0
2
 
p
e
S
 
1
2
 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 
1
v
3
8
1
9
0
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Crossover from Endogenous to Exogenous Activity in Open-
Source Software Development

Sergi Valverde 1
1 Complex Systems Lab (ICREA-UPF), Barcelona Biomedical Research Park (PRBB-
GRIB), Dr. Aiguader 88, 08003 Barcelona, Spain

PACS. 05.70.-Ln – Nonequilibrium and irreversible thermodynamics.
PACS. 89.65.-s – Social systems.
PACS. 05.10.-a – Computational methods in statistical physics and nonlinear dynamics.

Abstract. – We have investigated the origin of ﬂuctuations in the aggregated behaviour of an
open-source software community. In a recent series of papers [1-3], de Menezes and co-workers
have shown how to separate internal dynamics from external ﬂuctuations by capturing the
simultaneous activity of many system’s components. In spite of software development being a
planned activity, the analysis of ﬂuctuations reveals how external driving forces can be only
observed at weekly and higher time scales. Hourly and higher change frequencies mostly relate
to internal maintenance activities. There is a crossover from endogenous to exogenous activity
depending on the average number of ﬁle changes. This new evidence suggests that software
development is a non-homogeneous design activity where stronger eﬀorts focus in a few project
ﬁles. The crossover can be explained with a Langevin equation associated to the cascading
process, where changes to any ﬁle trigger additional changes to its neighbours in the software
network. In addition, analysis of ﬂuctuations enables us to detect whether a software system
can be decomposed in several subsystems with diﬀerent development dynamics.

Multiple time series are available for complex systems whose dynamics is the outcome of
a large number of agents interacting through a complex network. Recent measurements on
the ﬂuctuations at network nodes [1-4] indicate a power-law scaling between the meanhfii

and the standard deviation σi =

of the time-dependent activity fi(t) of node

i=1. . . N , that is,

(fi − hfii)2

E

rD

σi ∼ hfiiα

(1)

where α is an exponent which can take the values between 1/2 and 1 [1]. It seems that
real systems accept a classiﬁcation in two diﬀerent classes depending on the value of this
exponent. Systems with internal (or endogenous) dynamics like the physical Internet and
electronic circuits show the exponentα = 1/2. On the other hand, systems either involving
human interactions (i. e, WWW, highway traﬃc) or strongly inﬂuenced by external forces
(i.e., rivers) belong to the class deﬁned by the universal exponent α = 1.
Interestingly,
c(cid:13) EDP Sciences

2

-1

10

A

i

σ

-2

10

EUROPHYSICS LETTERS

1
10

B

C

)
t
∆
(
α

0.6

0.58

0.56

0.54

0.52

0.5

0.5

0
10

0.6

-4

10

-2

10

-1

10

1
10

1
10

-3

10
<fi>

0
10
<fi>

2
10
∆t

3
10

Fig. 1 – Scaling of ﬂuctuations σi ∼
with average change activity for the software project
Inkscape, measured at diﬀerent time resolutions: (A) ∆t=1 hour and (B) ∆t=1000 hours. (C) shows
the dependence of the exponent α with the time window ∆t. Here, the exponent α grows from 0.5
to 0.6. Other software projects have larger maximum exponents.

(cid:11)

α

f ∆t
i
(cid:10)

some systems display both types of behaviour when analysed at diﬀerent scales of detail.
For example, visits to web pages and routing of data packets in the Internet are dynamical
processes with diﬀerent origins [1]. The former process is driven by user’s demands while
the latter accounts for a signiﬁcant amount of internal activity even in the absence of human
interaction (i.e., routing protocols).

Here, we introduce for the ﬁrst time this theoretical framework to the analysis of human
dynamics observed in open-source software development. Open-source software (OSS) [4]
often requires the collective eﬀorts of a large number of experienced programmers (also called
developers or software engineers). How individual expertise and social organization combines
to yield a complex and reliable software system is still largely unknown. Interestingly, many
remarkable features of OSS cannot be detected in the activity of single programmers [6]. This
suggests that, in order to understand how OSS takes place, the activities of many developers
must be studied simultaneously.

Detailed activity registers of the OSS community reside in centralized source code reposi-
tories, like the Concurrent Version System (CVS) [5]. During the process of software change,
developers access ﬁles to add, change or remove one or more lines of source code. The CVS
database tracks each ﬁle revision submitted by a developer. The activity of many developers
progresses in parallel with simultaneous changes to many ﬁles. However, the CVS system
provides some mechanisms to ensure that any given ﬁle cannot be changed by more than one
developer simultaneously. In addition, the CVS stores all source code ﬁles required to build
the software system [11]. We have demostrated this set of project ﬁles describes a complex
network with an asymmetric scale-free architecture [9]. Following [9], we can reconstruct this
software network G = (V, E) from the collection of source code ﬁles, where each node vi ∈ V
represents a single source ﬁle and the link (vi, vj) ∈ E indicates a compile-time dependency
between ﬁles vi and vj. It can be shown that the number of links L(t) growths logarithmically
with the number of nodes N (t) in the software network [9].

In the following study, we will combine structural information provided by the software
network with the time series of ﬁle changes stored in the CVS. We have validated our results
with several software projects [12].

Sergi Valverde: Crossover from Endogenous to Exogenous Activity...

Analysis of ﬂuctuations. – We have analysed the aggregated activity of software de-
velopers at diﬀerent timescales. Given a ﬁxed measurement time window ∆t, we measure
development activity by looking at the dynamics of single ﬁle changes:

where ci(t) = 1 when ﬁle vi has been changed at time t and ci(t) = 0 otherwise. Notice
how eq. (2) corresponds to the coarse-graining of the time series of ﬁle change events. In the
following, we will omit the subscript ∆t whenever the timescale is implicit. We also deﬁne
global activity F ∆t(t) or the number of project changes at time t:

f ∆t
i

(t) =

ci(τ )

Xτ ∈[t,t+∆t]

F ∆t(t) =

f ∆t
i

(t).

N

Xi=1

In ﬁgure 1C we display the scaling of ﬂuctuations with the average activity (see eq. (1))
in a software project at diﬀerent time scales. There is a dependence of the scaling exponent
with the time window ∆t. The observed exponent is less than 1 for a wide range of time
scales (see 1A) , thus suggesting and endogenous origin of development activity. On the other
hand, the analysis of ﬂuctuations in various OSS projects at monthly and large time scales
yields an exponent closer to 1 (see 1B). The external driving force becomes stronger when
∆t increases. In the following, we further investigate the origin of ﬂuctuations in software
development dynamics with a more robust measure.

Crossover in internal dynamics. – We can determine if OSS dynamics has an endoge-
nous or exogenous origin by separating internal and external contributions [2]. We split the
timeseries of individual ﬁle changes fi(t) in two diﬀerent components: (i) internal ﬂuctua-
tions f int(t) governed by local interaction rules and (ii) external ﬂuctuations f ext(t) caused
by environmental variations, that is,

where the external activity f ext(t) represents the expected fraction of changes shared by

ﬁle vi:

vi:

fi(t) = f int(t) + f ext(t)

f ext

i

(t) = Ai

fi(t)

N

Xi=1

Ai =

T
t=1 fi(t)
N
i=1 fi(t)

T
P
t=1

3

(2)

(3)

(4)

(5)

(6)

Here Ai is ﬁle centrality [2], deﬁned as the overall fraction of changes received by the ﬁle

P

P
and T is the timespan of software development. Notice that ﬁle centrality Ai is independent
of the observation window ∆t. By deﬁnition, external ﬂuctuations allways scale linearly with
the average number of ﬁle changes, σext ∼ hf i. On the other hand, the exponent α governing
the scaling of internal ﬂuctuations with average ﬂux σint ∼ hf iα indicates if dynamics has an
endogenous (α = 0.5) or exogenous (α = 1) origin. Interestingly, we observe a crossover in
the internal activity of open-source software development depending on the average number
of ﬁle changes hf i (see ﬁg. 2A). The crossover is less visible at large time scales ∆t.

4

EUROPHYSICS LETTERS

A

0.5

-1

10

t
n
i
σ

0.74

B

C

0.1 0.2 0.3 0.4 0.5 0.6
η
i

y
c
n
e
u
q
e
r
F

250

200

150

100

50

0

y
c
n
e
u
q
e
r
F

30

20

10

0

-2

10

-4

10

-3

10

-2

10

-1

10

0.4

0.5

0.7

0.8

0.6
η

i

<f>

Fig. 2 – (A) Apache. Crossover observed in the scaling of internal ﬂuctuations with average ﬂux,
around 10−2. In (B) and (C) we show the binned distribution of ratios for the two project ﬁle subsets
hf i < 10

−2 (black circles), respectively. In all plots, ∆t = 10 hours.

−2 (open circles) and hf i > 10

i

i /σint

The analysis of single node ﬂuctuations provides additional evidence for this crossover.
The ratio ηi = σext
between external and internal ﬂuctuations indicates wether node
dynamics is external (ηi >> 1) or internal (ηi << 1). In order to characterize the system’s
overall behavior, we can compute the distribution of ratios P (ηi) [2]. This measure was shown
to be robust to variations in the measurement time window ∆t. For example, ﬁgure 2 displays
the distribution of ratios P (ηi) measured in two diﬀerent subsets of ﬁles in the Apache project.
On the one hand, we can see that P (ηi) is peaked around 0.55 (see ﬁg. 2C) for the subset
of ﬁles with hf i > 10−2. This suggests exogenous activity in a core set of project ﬁles (those
depicted with black circles in ﬁg.2A and ﬁg.2C). Moreover, P (ηi) is skewed towards lower
ratios (around 0.1) for project ﬁles with hf i < 10−2 (white circles in ﬁg.2A and ﬁg.2B) . On
the other hand, activities involving less changed ﬁles have an endogenous origin (see ﬁg. 2B).

Propagation of Changes. – Crossover in internal ﬂuctuations stems from the inhomoge-
neous nature of software development. A large development eﬀort aims to a small number of
core ﬁles, which change more frequently than other project ﬁles. In a related paper, network
heterogeneity was shown to have an impact in the dynamics of diﬀusion processes [3]. When
the diﬀusive process is multiplicative and the underlying topology is intrinsically inhomoge-
neous, there is a crossover from α = 0.5 to α = 1 in the scaling of ﬂuctuations with the average
ﬂux (eq.(1)). Such diﬀusive network processes can be modeled through the Langevin equation
by a mean-ﬁeld approximation [3]. The change of mass at node i during a unit time interval
is:

fi(t + 1) = fi(t) +

ηj(t)fj(t)

(7)

ki

Xj

1
kj

where the second term represents the incoming mass from the nearest neighbors and ηj(t)
is a uniform random variable (i.e., multiplicative noise term). Because we are focusing in the
internal diﬀusion process we do not take into account additional terms like outgoing mass

Sergi Valverde: Crossover from Endogenous to Exogenous Activity...

5

)

i
 

f
(

>

P

3
10

2
10

1
10

0
10

A

-1.04

0.34

i
 

0.8

k

 

g
o
l

1.2

1

0.6

0.4

0.2

>

n
n

 

f
<
g
o
l

-2

-2.2

-2.4

-2.6

-2.8

-3

-3.2

B

C

0
10

1
10

2
10

3
10

f i

-4 -3.5 -3 -2.5 -2 -1.5 -1
log <f>

-4 -3.5 -3 -2.5 -2 -1.5 -1
log <f>

Fig. 3 – Measuring internal propagation of changes in the Apache project. (A) The cumulative total
activity distribution P>(fi) is broad scale. (B) Scaling of average activity/ﬂux with node degree,
ki ∼ hf iβ, with β ≈ 0.34. (C) Average neighbors activity hfnni scales with average node activity
−2.5 is reached, hf i > f0.
hf i < f0 and then saturates hfnni = const once the crossover f0 = 10
In order to reduce the noise, data have been logarithmically binned in (B) and (C) plots. The
measurement window is ∆t = 10 hours.

and/or uncorrelated Gaussian noise. This type of diﬀusion processes display a characteristic
−1−µ [3]. The continuous approximation of
scaling in the probability distribution P (fi) ∼ fi
the previous equation is

(8)

(9)

df
dt

∼=

ki

Xj

1
kj

ηj(t)fj(t) ∼= hkii

hηj(t)fj(t)i

1
hknni

where hknni denotes the average degree of a node’s nearest neighbors. Because ηj(t) and

fj(t) are independent variables and assuming that hknni is function of hki:

df
dt

∼=

hki
hknni

hηj i hfnni ≡ J (hki) hfnni

where hfnni indicates the average incoming mass in the nearest neighbors of a node. For
the Barab´asi-Albert network [10], the numerical solution of the above equation shows that
hfnni decreases as hf i increases and then saturates to a constant value for hf i > f0 (see [3] for
details). The observed value of f0 indicates the crossover between endogenous and exogenous
dynamics.

Interestingly, model requeriments (i.e, diﬀusion process on a heterogeneous network) are
meet by software projects. Empirical studies of software maintenance reported that change
propagation is a central feature of software development [7]. Propagation is necessary because
there are dependencies between project ﬁles and developers must ensure that related ﬁles are
changed in a consistent way. Recall the software network G captures these ﬁle dependencies
(see above). The software network displays a scale-free structure due to extensive reuse during
software development [9].

Furthermore, our measurements on real OSS projects seem consistent with model pre-
dictions. We have observed that, for all software projects analyzed here, the propability
distribution P>(fi) has a long tail. For example, power-law ﬁtting for the Apache project pre-
dicts an exponent −1 − µ ≈ −2.04 for the incoming ﬂux distribution (see ﬁg. 3A, cumulative

6

(cid:1)

EUROPHYSICS LETTERS

0.85

0
10

(cid:3)

s
n
o
i
t
a
u
t
c
u
l
F

 
l
a
n
r
e
t
n
I

-1

10

-2

10

-4

10

-3

10

-2

10
Average Flux

-1

10

Fig. 4 – Scaling of internal ﬂuctuations in diﬀerent subsystems of the TortoiseCVS software project.
(A) Modular organization of the corresponding software network, where node represents ﬁles and
links depict dependencies. Nodes within the same subsystem are displayed in the same colour. (B)
Diﬀerent scaling laws of internal subsystem ﬂuctuations with average ﬂux, σi ∼ hfiiαint , for the main
application subsystem (black balls) and for the window subsystem (so-called wxwin, white balls).

probability distribution is used to reduce the impact of noisy ﬂuctuations). As hypothesized
above, the plot in ﬁg. 3B demostrates that key ﬁles having a large number of dependencies are
changed more frequently. We have checked that hknni is a function of hki (not shown here).
As seen in ﬁg. 3C, the average neighbour activity increases with average node activity hf i
and it is approximately constant hfnni ≈ const for hf i > f0 with f0 = 3.16 ∗ 10−3. This value
of f0 is consistent with the observation made in ﬁg. 2A. In this case, eq. (9) yields hf i ∼ hkiα
with α = 1 to be compared with the measured exponent 0.85 (see ﬁg. 2A).

Diﬀerent subsystems display diﬀerent scaling laws. – A practical application of ﬂuctua-
tion analysis is the identiﬁcation of ﬁles that change together [8]. This suggests a method for
community detection based on individual node dynamics. In our context, we have observed
that some subsystems are characterized by diﬀerent scaling laws in their internal ﬂuctuations
with average activity. For example, ﬁgure 4 summarizes the analysis of internal ﬂuctuations
in the software project TortoiseCVS. There are two clearly deﬁned subsystems, the main ap-
plication subsystem (dark balls) and the window library wxwin (white balls), characterized
by diﬀerent change dynamics (see ﬁg. 4A). The crossover behaviour can be appreciated in
the scaling of internal ﬂuctuations for the main TortoiseCVS subsystem (the exponent for
hf i > f0 is αint ≈ 0.85, see ﬁg. 4B). The main subsystem concentrates the largest fraction
of changes. On the other hand, the crossover is not observed in the scaling for the wxwin
subsystem (see ﬁg. 4B), which is an utility library imported from an external development
team. The minimal amount of activity regarding the wxwin subsystem (sporadic changes in
the library communicated by the external team and minor adjustments required by the main
subsystem) suggests an explanation for the absence of a crossover.

In short, we have demostrated that a well deﬁned crossover exists in the dynamics of
software change. This is the ﬁrst reported example of such behaviour in a large-scale tech-
nological system. It shows that OSS systems exhibit some traits in common with other com-
plex networks. The presence of crossover allows to distinguish between internal and external
components of the dynamics and then provides a powerful approach to uncover the relative

Sergi Valverde: Crossover from Endogenous to Exogenous Activity...

7

importance of exogenous versus endogeneous dynamics.

∗ ∗ ∗

Conclusions. – Sergi Valverde dedicates this paper to his daugther Violeta. We thank
Ricard Sol´e and Damien Challet for useful discussions. This work has been supported by the
EU within the 6th Framework Program under contract 001907 (DELIS).

REFERENCES

[1] de Menezes, M. A. and Barab´asi, A.-L., Phys. Rev. Lett 92 28701 (2004).
[2] de Menezes, M. A. and Barab´asi, A.-L., Phys. Rev. Lett 93 68701 (2004).
[3] Yook, S. H., and de Menezes, M. A., Europhys. Lett. 72 4 541–547 (2005).
[4] Raymond, E. S., First Monday 3 3 (1998).
[5] Bar, M. and Fogel, K., Open Source Development with CVS, Third Edition (Paraglyph Press)

2003.

(1998).

[6] Barab´asi, A.-L., Nature 435 (2005) 207–211.
[7] Hassan, A. E., and Holt, R. C., Proc. Int. Conf. Softw. Maint. (ICSM-04) 284–293 (2004).
[8] Gall, H., Hajek, K., and Jazayeri, M., Proc. Int. Conf. Softw. Maint. (ICSM-98) 190–198

[9] Valverde, & Sol´e, R. V., Europhys. Lett. 72 5 858–864. (2005)
[10] Barab´asi, A.-L., and Albert, R., Science 286 (1999) 509.
[11] Lakos, J., Large Scale C++ Software Design (Addison-Wesley, New York) 1996.
[12]

(http://www.inkscape.org),

(http://www.apache.org),

Inkscape

Apache

TortoiseCVS

(http://www.tortoisecvs.org).

