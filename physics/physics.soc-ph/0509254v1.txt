5
0
0
2
 
p
e
S
 
0
3
 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 
1
v
4
5
2
9
0
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Algorithme de d´etection de communaut´es
recouvrantes en temps lin´eaire : l’algorithme P&A

Nicolas Pissard et Houssem Assadi

nicolas.pissard@francetelecom.com - houssem.assadi@francetelecom.com

France Telecom R&D, Issy-les-Moulineaux, France

Abstract

Cet article d´ecrit un nouvel algorithme - l’algorithme P&A - per-
mettant de d´etecter des communaut´es recouvrantes dans un graphe
valu´e non orient´e sans qu’il soit n´ecessaire de d´eterminer pr´ecis´ement
leur nombre ou leur taille. La complexit´e de l’algorithme propos´e est
minimale dans la mesure o`u le nombre d’op´erations n´ecessaires croit
de fa¸con lin´eaire avec le nombre de sommets du graphe.

1

Introduction

Un grand nombre d’algorithmes ont d´ej`a ´et´e propos´es pour calculer des
partitions de graphes. Ces algorithmes se classent globalement en deux
cat´egories : les m´ethodes agglom´eratives dans lesquelles on calcule des
distances entre sommets et on agr´ege les points les plus proches ; les
m´ethodes divisives dans lesquelles on part du graphe entier et on sup-
prime it´erativement des arcs, scindant `a cette occasion le graphe en
nouvelles composantes connexes.

N´eanmoins, dans certains contextes d’application de ces m´ethodes de
partition de graphes, le fait de proposer des partitions strictes, o`u
un noeud du graphe se retrouve aﬀect´e `a une unique classe, peut se
r´ev´eler inadapt´e. Nos travaux de recherche sur la partition de graphes
sont appliqu´es dans le domaine de l’entreprise, o`u l’objectif ﬁnal con-
siste - grosso modo - `a d´ecouvrir des ”communaut´es professionnelles”
`a partir de l’analyse de graphes constitu´es par les traces d’´echanges
´electroniques entre les employ´es. Dans ce type d’application, une pro-
pri´et´e souhait´ee est d’obtenir au ﬁnal des ”partitions recouvrantes”
des graphes, c’est-`a-dire des partitions o`u un noeud - repr´esentant dans
notre application un employ´e de l’entreprise - peut ˆetre ´eventuellement
aﬀect´e `a plusieurs communaut´es. Par exemple, il est fr´equent de ren-
contrer dans des entreprises mettant en oeuvre des organisations ma-
tricielles des employ´es qui participent `a plusieurs projets et autres
structures organisationnelles et qui font partie de plusieurs commu-
naut´es professionnelles simultan´ement.

1

Le nombre d’algorithmes qui int`egrent la capacit´e de d´ecouvrir des
communaut´es recouvrantes est relativement faible [04] [09]. N´eanmoins,
il faut noter que de telles formes de r´esultats peuvent ´egalement ˆetre
obtenues par l’agr´egation de partitions calcul´ees sur des jeux de donn´ees
al´eatoirement modiﬁ´ees ou de partitions calcul´ees au moyen d’algorithmes
non d´eterministes [02].

2 Notre algorithme

L’algorithme que nous proposons n’est ni divisif, ni agglom´eratif. Il fait
partie d’une nouvelle classe d’algorithmes en deux phases consistant `a
d’abord extraire du graphe des ”paquets” de points li´es, puis d’agr´eger
ces paquets en communaut´es stables. Nous allons l’appeler par la suite
algorithme ”Pull & Aggregate” ou algorithme P&A.

2.1 Extraction de paquets de points...

Le but de cette premi`ere phase est de constituer une liste de paquets de
sommets globalement li´es entre eux, paquets qui entreront dans la com-
position lors de la seconde phase d’une mˆeme communaut´e. Diﬀ´erentes
m´ethodes sont envisageables pour trouver ces paquets de points, par
exemple, les m´ethodes par simulation de marches al´eatoires. Nous
avons retenu une autre m´ethode, d´eterministe et relativement ´econome
en calculs : le calcul barycentrique.

Pour se repr´esenter physiquement le syst`eme, il faut imaginer un en-
semble de pivots repr´esentant les sommets reli´es par des ressorts de
longueur initiale nulle et de raideur d´eﬁnie par la valeur de l’arc. Le
principe est d’appliquer `a ce syst`eme physique un certain nombre de
forces externes ponctuelles ou uniformes. Pour calculer les positions
d’´equilibre, nous utiliserons les travaux de Huberman sur les potentiels
´electriques [06]. Il d´emontre en eﬀet qu’un algorithme it´eratif de calcul
successif de moyennes pond´er´ees permet la r´esolution des ´equations de
Kirchhoﬀ en un nombre d’op´erations ne d´ependant pas du nombre de
sommets. Nous utiliserons ce type d’algorithme pour le calcul des po-
sitions des pivots dans les dimensions ou seules des forces ponctuelles
s’exercent, et un algorithme de mˆeme nature mais l´eg`erement modiﬁ´e
quand il s’agira de prendre ´egalement en compte des forces uniformes.

Dans le cadre de grands graphes, nous travaillons en deux dimensions :
une dimension suivant X (forces ponctuelles), et une dimension suivant
Z (forces ponctuelles et forces uniformes). Pour les graphes plus petits,
certaines adaptations sont n´ecessaires (ajout d’une dimension Y, choix
de plusieurs pˆoles), mais cela ne fait pas l’objet du pr´esent article.

2

2.1.1 Positions d’´equilibre suivant X

Pour la dimension X, nous consid´erons successivement chacun des som-
mets du graphe. A une ´etape i, nous notons ce point Ai et ﬁxons sa
valeur 1. Nous ﬁxons ´egalement tous les sommets ´eloign´es de plus
de n marches ou dilu´es de plus qu’un seuil x dans le cas de graphes
valu´es (distance entre sommets inf´erieure `a un certain seuil x au sens
de la multiplication de la valeur des arcs) `a une valeur 0. Pour trouver
rapidement ces points, nous utilisons l’algorithme Breath First Search
[13] pour des arcs non valu´es et l’algorithme de Dijkstra [14] pour
des arcs valu´es. Tous les autres points sont mobiles. Nous calculons
ensuite it´erativement par moyennes pond´er´ees la position d’´equilibre
de l’ensemble des points mobiles jusqu’`a atteindre un ´equilibre stable.
Huberman d´emontre [06] que cette phase de l’algorithme se r´ealise
en un temps qui ne d´epend pas de n. Les r´esultats de Huberman
s’appliquent ´egalement dans notre cas car on peut faire l’analogie en-
tre les lois r´egissant l’´etablissement du courant ´electrique dans un cir-
cuit et le principe de l’´equilibre des forces : somme des forces nulle et
somme des intensit´es nulle en chaque noeud ; I = 1/R*U et la force
d’un ressort F = k*L ; notion de diﬀ´erence de potentiel homog`ene `a la
distance (diﬀ´erence de longueur).

2.1.2 Positions d’´equilibre suivant Z

C’est `a cette phase que se situe la nouveaut´e par rapport aux m´ethodes
barycentriques de base. Il se peut en eﬀet dans certains cas que des
points n’ayant rien `a faire avec l’amas tir´e par le pˆole se retrouvent
situ´es au mˆeme endroit [voir ﬁgure]. Si on se base uniquement sur un
calcul de distances pour d´eterminer le contenu des amas, de tels points
sont donc ajout´es `a tort.

Pour rep´erer ces points, l’id´ee est d’appliquer une force externe
suivant Z qui va nous indiquer si chaque point est globalement li´e
avec des points proches suivant la dimension X. Le calcul des positions
d’´equilibre de syst`emes comprenant des forces externes uniformes passe
par la r´esolution de syst`emes d’´equations, ce qui implique une com-
plexit´e importante. Nous sommes donc contraints de nous ´eloigner
de la r´ealit´e physique et de proposer un mod`ele qui aura les mˆemes
avantages mais dont la r´esolution est d’une complexit´e lin´eaire. Nous
conservons la mˆeme d´eﬁnition des points ﬁxes et mobiles que dans
le calcul des coordonn´ees X. La valeur des points ﬁxes est 1, celle
des points mobiles est initialis´e `a 1 ´egalement. Nous allons calculer
it´erativement les coordonn´ees suivant Z de chaque point mobile par

3

moyenne pond´er´ee par la valeur des liens et l’´eloignement des voisins.
L’´ecart entre la position `a l’it´eration pr´ec´edente et la nouvelle position
est not´e d1. Pour repr´esenter la force uniforme, nous allons appliquer
au point mobile un d´eplacement suppl´ementaire d2.

Le d´eplacement suppl´ementaire d2 est fonction de X et Z :

d2 (X, Z) = d2x (X) * d2z (Z)

Plusieurs choix de fonctions sont possibles pour d2x et d2z. d2x
est ´etudi´ee aﬁn que seuls les points ayant la plus grande probabilit´e
d’appartenir `a la communaut´e du pˆole tombent sous l’eﬀet de la force
externe et d2z de sorte `a ce que les points aient tendance `a se coller
aux bornes. L’intervalle de d´eplacement suivant Z est born´e entre 0 et
1 : toute position ﬁnale non comprise dans cet intervalle est ramen´e `a
la borne la plus proche.

En pratique, nous avons retenu pour d2x une fonction sigmo¨ıde :

deplacement d2x
deplacement d2x

Sommets
Sommets
deplacement d2x

 0.4
 0.4

 0.2
 0.2

 0
 0

-0.2
-0.2

-0.4
-0.4

-0.6
-0.6

-0.8
-0.8

-1
-1

-1.2
-1.2

 0
 0

 0.2
 0.2

 0.4
 0.4

 0.6
 0.6

 0.8
 0.8

 1
 1

et pour d2z une fonction carr´e :

4

 0

 0

 0.2

 0.6
 0.4
valeur du point suivant z

 0.8

 1

Le calibrage de la fonction sigmo¨ıde d´epend du nombre de points
attendus dans les communaut´es (dernier point r´ef´erence). Si la taille
estim´ee des communaut´es est totalement inconnue ou tr`es variable, on
peut aussi essayer plusieurs valeurs et retenir celle juste avant un saut
en terme de nombre de points s´electionn´es dans le ”paquet”.

 1.5

 2

 1

 0.5

l

t
n
e
m
e
c
a
p
e
d
 
u
d
 
n
o
i
t
a
c
i
f
i
l

p
m
a

l

s
e
n
n
o
i
t
c
e
e
s
 
s
t
n
o
p
 
e
d
 
e
r
b
m
o
n

i

 60

 50

 40

 30

 20

 10

 0

 0

coefficent amplification

sommet 0
sommet 1
sommet 2
sommet 3

5

 10

 20

 30

 40

 50

 60

dernier point reference

A l’´equilibre, on consid`ere que le paquet de points `a retenir est
constitu´e par tous les points dont la coordonn´ee Z est inf´erieure `a un

certain seuil.

Note : Nous n’avons pas la preuve th´eorique que la mise en oeuvre
de telles fonctions permet une convergence et encore moins en un temps
ne d´ependant pas de n. La pratique montre cependant que les coor-
donn´ees suivant Z convergent en quelques dizaines d’it´erations, quelle
que soit la taille du probl`eme.

2.2 Regroupement des paquets de points en com-
munaut´es stables

La deuxi`eme partie de cet algorithme est inspir´ee d’un algorithme de
Huberman [05] modiﬁ´e pour prendre en compte le fait que nous n’avons
pas en entr´ee une liste de partitions d’un graphe, mais seulement des
”paquets de points” formant des sous parties de communaut´es.

2.2.1 D´etermination des attracteurs pour l’initialisation

Il s’agit de d´eﬁnir, en reprenant le vocabulaire de Huberman [05], une
”masterList” initiale, sorte de squelette des composants principaux
de chacune des communaut´es. Nous proc´edons par simple comptage.
Consid´erons un point donn´e X du graphe qui est pr´esent dans N pa-
quets. On va calculer pour chacun des autres points Y, combien de fois
Y se trouve dans le mˆeme paquet que X. On met ensemble les points
Yi qui sont plus de 50% des fois ensemble avec X : on vient de con-
stituer un premier attracteur. Dans les points restants, on choisit le
point pr´esentant le plus d’occurrences dans les paquets et on proc`ede
de mˆeme pour d´eterminer le second attracteur. On poursuit jusqu’`a
ce que la liste des points soit vide ou que plus aucun attracteur trouv´e
n’ait une taille suﬃsante (taille signiﬁcativement diﬀ´erente de la taille
des attracteurs d´ej`a trouv´es). Ainsi, s’il reste des points `a la ﬁn de
cet algorithme, qui ne sont rattach´es `a aucun attracteur, on peut alors
consid´erer que ces points sont soit des points peu li´es aux commu-
naut´es, soit des points li´es de fa¸con identique `a plusieurs communaut´es.
Quoiqu’il en soit, ils seront diﬃciles `a classer.

2.2.2 Rattachement des paquets de points aux attracteurs

La suite de l’algorithme est quasiment identique `a celle de Huberman,
`a la diﬀ´erence pr`es que la formule retenue pour la mesure de prox-

6

imit´e prend en compte la non homog´en´eit´e du nombre d’occurrences
des points : en eﬀet, dans le cas trait´e par Huberman, les nombres
d’occurrences de chaque point sont ´egaux car un point est repr´esent´e
juste une fois dans chaque partition. Pour chacun des groupes de
points, on calcule donc sa proximit´e `a chacune des communaut´es de la
masterList puis on fusionne le groupe `a sa communaut´e la plus proche.
Cette op´eration a un coˆut en O(n) car on peut restreindre l’´etude de la
distance aux seules communaut´es comprenant au moins un des points
de notre groupe. La valeur de t est alors le nombre de fois o`u l’´el´ement
de la masterList a ´et´e choisi pour fusionner. Une fois que tous les
groupes de points ont ´et´e fusionn´es aux attracteurs, il ne reste plus
qu’`a enlever les points d´eﬁnis de fa¸con artiﬁcielle comme attracteurs `a
l’initialisation puis calculer la part relative de pr´esence de chacun des
points dans chaque communaut´e.

Note : Cette phase de rattachement aux attracteurs peut quelque-
fois produire des r´esultats diﬀ´erents suivant l’ordre de pr´esentation
des paquets. Cet ordre ´etant arbitraire, nous avons choisi de r´ep´eter
l’op´eration d’agr´egation un grand nombre de fois avec des ordres de
pr´esentation variables puis de faire une moyenne par attracteur aﬁn
d’obtenir des r´esultats stables (le choix des attracteurs ´etant constant
quel que soit l’ordre de pr´esentation).

3 Applications

Nous allons rapidement pr´esenter les r´esultats que l’on obtient sur des
graphes simples de taille moyenne (quelques centaines de points). Ces
graphes ne sont pas valu´es et n’ont pas de structure de communaut´es
recouvrantes a priori. Nous utilisons donc dans ces deux cas notre al-
gorithme pour faire du partitionnement. Celui-ci produisant en sortie
des communaut´es ﬂoues, nous consid´erons que les partitions sont com-
pos´ees des points qui appartiennent aux communaut´es avec un taux
maximum.

3.1 Graphes g´en´er´es automatiquement

Nous ´etudions les performances de notre algorithme P&A sur un graphe
comprenant 192 sommets r´epartis en 12 communaut´es de tailles ´egales,
le degr´e moyen ”intra”+”inter” des sommets ´etant ﬁx´e `a 16. Nous
faisons varier le degr´e ”intra-communautaire” de chaque sommet et
d´eterminons la r´eussite du d´ecoupage produit par l’algorithme pour
chaque cas. Pour cela, nous d´eterminons un ”taux de r´eussite”, qui
repr´esente le pourcentage de recouvrement des graphes de coapparte-
nance `a la mˆeme communaut´e form´e par la ”solution trouv´ee” et le
graphe form´e par la solution qui a servi `a g´en´erer le graphe.

Comme nous pouvons le constater, l’algorithme fonctionne parfaite-
ment quand le nombre de liens intracommunautaires d´epasse celui des

7

liens intercommunautaires (intra 8.5 - inter 7.5 - taux de r´eussite :
100%).

taux de resussite

 1.2

 1

 0.8

 0.6

 0.4

 0.2

 0

e
t
i
s
s
u
e
r
 
e
d
 
x
u
a
t

-0.2

 0

 2

 4

 8
nombre moyen de liens intra-communautaires

 10

 6

 12

 14

 16

3.2 Le championnat de football

Nous avons test´e notre algorithme sur le jeu de donn´ees ”College foot-
ball 2000” qui a d´ej`a ´et´e analys´e entre autres par Newman [01] et Radic-
chi [07]. Nous avons choisi comme mod`ele de force celui du ressort, et
un voisinage de 2 pour la d´etermination des points mobiles.

Voici les partitions obtenues par l’algorithme P&A (not´e PA), com-
par´ees `a celles de Newman (not´e GN) et Radicchi (not´e RA)...

8

L’algorithme P&A d´etaille en plus le degr´e d’appartenance de chaque
sommet `a chaque communaut´e...

On peut par exemple voir que d’apr`es l’algorithme, le point 84 ap-

partient `a 87% `a la communaut´e 2 et `a 13% `a la communaut´e 8.

On peut ainsi rep´erer les points ”`a cheval” sur deux ou plusieurs com-
munaut´es que les algorithmes de partitionement strict attribueront ar-
bitrairement `a l’une d’entre elles... Par exemple, d’apr`es l’algorithme
P&A, le point 50 appartient `a 54% `a la communaut´e H et `a 44% `a
la communaut´e J. Les deux algorithmes GN et RA l’attribuent `a la
communaut´e J, mais ils auraient tout aussi bien pu l’attribuer `a H...

On note ´egalement que l’algorithme P&A classe tous les points, con-
trairement aux deux autres algorithmes.

4 Conclusion et ouverture

L’algorithme P&A propos´e, outre sa faible complexit´e qui le rend par-
faitement adapt´e aux calculs dans de tr`es grands graphes, pr´esente un
bon nombre d’autres avantages.

En premier lieu, l’algorithme P&A est facilement impl´ementable en
parall`ele, du moins pour la phase d’extraction des paquets qui com-
pose la plus grande partie des calculs : des machines ou processeurs
diﬀ´erents peuvent se charger de calculer leur lot de pˆoles de fa¸con to-
talement ind´ependante.

De plus, dans la mesure o`u il s’appuie sur des comportements locaux,
l’algorithme P&A permet de d´etecter les communaut´es de certaines

9

parties du graphe, sans pour autant examiner l’int´egralit´e du graphe.
Il suﬃt pour cela de ne choisir pour pˆoles que les points sur lesquels
on veut trouver les communaut´es, ainsi que leurs voisins `a rang n.

Enﬁn, l’algorithme P&A est plus facilement adaptable que des m´ethodes
purement math´ematiques : choix de seuils, de fonctions (forces ponctuelles
: ressorts, ´elastiques, mod`eles `a rupture... ; forces uniformes : lin´eaire,
sinuso¨ıde, sigmo¨ıde...) tout en conservant des valeurs par d´efaut eﬃ-
caces. Il est donc particuli`erement adapt´e aux r´eseaux `a interactions
complexes (r´eseaux sociaux par exemple).
Il faut n´eanmoins noter
que suivant les formes de forces, il n’y a pas de preuve formelle que
l’algorithme converge et encore moins en un temps lin´eaire. Nous pou-
vons seulement en faire la constatation pratique...

Pour aller plus loin, nous allons prochainement proposer un nombre
plus important d’applications de cet algorithme sur des graphes r´eels
valu´es qui comportent des communaut´es recouvrantes, tels que des
r´eseaux sociaux extrapol´es de graphes de communications. Nous y
appliquerons d’autres mod`eles de forces revˆetant de possibles signiﬁ-
cations sociologiques.

5 Remerciements

Nous remercions tout particuli`erement Pascal Pons pour nous avoir
fourni son programme de g´en´eration de graphes al´eatoires, ainsi que
Mark Newman pour les donn´ees du championnat de football.

6 Bibliographie

01 - M. Girvan and M. E. J. Newman (2001). Community structure in
social and biological networks. Sante Fe Institute & Cornell University.

02 - J. R. Tyler, D. M. Wilkinson, B. A. Huberman (2002). Email as
Spectroscopy: Automated Discovery of Community Structure within
Organizations. HP Labs.

03 - M. Girvan and M. E. J. Newman (2003). Finding and evalu-
ating community structure in networks. Sante Fe Institute & Cornell
University.

04 - J. Baumes, M. Goldberg, M. Magdon-Ismail (2003). Eﬃcient
identiﬁcation of Overlapping Communities. Rensselear Polytechnic In-
stitute.

05 - B. A. Huberman and D. Wilkinson (2004). A method for ﬁnding
communities of related genes. HP Labs.

06 - B. A. Huberman and F. Wu (2004). Finding communities in

10

linear time: a physics approach. HP Labs.

07 - F. Radicchi, C. Castellano, et al. (2004). Deﬁning and identi-
fying communities in networks. The National Academy of Science of
the USA.

08 - M. E. J. Newman (2004). Fast algorithm for detecting community
structure in networks. University of Michigan.

09 - J. Reichardt and S. Bornholdt (2004). Detecting fuzzy community
structure in Complex Networks with a Potts Model.

10 - J. P. Bagrow and E. M. Bollt (2004). A local method for De-
tecting Communities.

11 - L. Donetti and M. A. Mu˜noz (2004). Detecting network com-
munities: a new systematic and eﬃcient algorithm.

12 - M. Latapy and P. Pons (2005). Computing communities in large
networks using random walks.

13 - http://fr.wikipedia.org/wiki/Algorithme de parcours en profondeur

14 - http://fr.wikipedia.org/wiki/Algorithme de Dijkstra

11

