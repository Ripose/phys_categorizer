Unstable Optical Resonators & Fractal Light

MSci Project Report

Jarvist Moore Frost
(email: jarvist.frost@ic.ac.uk)

February 2, 2008

6
0
0
2
 
c
e
D
 
3
 
 
]
s
c
i
t
p
o
.
s
c
i
s
y
h
p
[
 
 
1
v
7
2
0
2
1
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Abstract

Codes were written to simulate the propagation of monochromatic light
through a bare optical resonator, using a computational Fourier method to
solve the Huygens-Fresnel integral. This was used, in the Fox-Li method, to
ﬁnd the lowest-loss eigenmodes of arbitrary cavity designs. An implicit shift
‘hopping’ method was employed to allow a series of increasingly higher-loss
eigenmodes to be found, limited in number by computational time.

Codes were conﬁrmed in their accuracy against the literature, and were

used to investigate a number of diﬀerent cavity conﬁgurations.

In addition to conﬁrming the fractal nature of eigenmodes imaged at the
1) resonator, an initial study was
conjugate plane of a symmetric (g <
made of how the (imperfect) quality of the fractal ﬁt varied as the deﬁning
aperture was moved around the cavity.

−

A comparison was also made with the fractal-patterns produced by codes

written to simulate basic video-feedback.

i

Acknowledgements

Many thanks to my supervisor, Professor Geoﬀ New, for the sheer amount
of time he invested in an undergraduate project, specially prepared notes
& loans of reference books. Perhaps more importantly - he was always
upbeat no matter how slow progress was going, and took a very philosophical
attitude towards bugs & setbacks!

Thanks to Benjamin Hall, my lab partner, for sharing the work-load,
helping me get up to speed with geometric optics at the start of the year
and discussions over an uncountable number of cups of tea and reams of
scribbled diagrams.

ii

Contents

1 Theoretical Groundwork

1.1 Optical Resonators . . . . . . . . . . . . . . . . . . . . . . . .
1.2 Stability Condition . . . . . . . . . . . . . . . . . . . . . . . .
1.3 Transverse Eigenmodes
. . . . . . . . . . . . . . . . . . . . .
1.4 Geometrically Stable Cavities & Hermite-Gaussian Modes . .
. . . . . . . . . . . . . . . . . . . . . . . .
1.5 Planar Resonators
1.6 Unstable Cavities . . . . . . . . . . . . . . . . . . . . . . . . .
1.7 Virtual Source Technique
. . . . . . . . . . . . . . . . . . . .
1.8 Huygens’ Integral . . . . . . . . . . . . . . . . . . . . . . . . .
1.9 Ray Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.10 Polygonal Mirrors & Nonorthogonal Basis . . . . . . . . . . .

2 Relevant Previous Studies

2.1 Experimental Work . . . . . . . . . . . . . . . . . . . . . . . .

3 Numerical Methods

3.3.1 Testing Correctness

3.1 Fox-Li Power Method . . . . . . . . . . . . . . . . . . . . . .
3.2 Light Propagation . . . . . . . . . . . . . . . . . . . . . . . .
3.2.1
Implementation . . . . . . . . . . . . . . . . . . . . . .
3.2.2 FFT Guard Bands . . . . . . . . . . . . . . . . . . . .
3.3 Lensing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
3.4 Bare Optical Resonator
. . . . . . . . . . . . . . . . . . . . .
3.5 Detection of Eigenmodes . . . . . . . . . . . . . . . . . . . . .
Implicit Shift . . . . . . . . . . . . . . . . . . . . . . .
3.6 Polygon Apertures . . . . . . . . . . . . . . . . . . . . . . . .
3.7 Outputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.7.1 Representing Phase & Intensity . . . . . . . . . . . . .
3.8 Sampling Fractal Dimension . . . . . . . . . . . . . . . . . . .

3.5.1

4 Results

4.1 Equivalent Confocal Cavity . . . . . . . . . . . . . . . . . . .
4.2 Conﬁrmation of Codes Accuracy . . . . . . . . . . . . . . . .
4.3 The Conjugate Plane . . . . . . . . . . . . . . . . . . . . . . .
4.4 Moving the Location of the Aperture . . . . . . . . . . . . . .

5 Video Feedback

6 Conclusions

A Cavity Simulator Codes

B Video Fractal Codes

iii

1
1
1
1
2
2
2
2
3
3
4

4
4

5
5
5
6
7
8
9
9
9
10
11
11
12
12

13
13
14
14
16

18

20

22

37

List of Figures

3

2

1

. .

4
5

. . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . .

Propagation of oﬀ axis rays introduces a phase retardation
proportional to the extra distance that the ray has to travel .
The ﬁnite nature of the Discrete Fourier Transform results in
an inﬁnite series of propagating waveforms, either side of the
(dotted) region one is using. As such, light can leak across
from either side, producing an incorrect ﬁeld distribution.
Eﬀect of an inﬁnitely thin lens is to induce a spherical curva-
ture to the wavefront, resulting in a hitherto parallel collec-
tion of rays converging on it. The 2D pictures below (colour
representing phase, intensity representing intensity) are data
from our codes, which show a circular cross-section plane
wave focusing down to a diﬀraction limited spot near the
focal point, before expanding again.
Unfolded optical cavity.
Gamma factors for the ﬁrst 15 Eigenmodes of a low-magniﬁcation
symmetric cavity (M = 1.1) with a hexagonal limiting aper-
ture. Each ‘spoke’ of the wheel represents the gamma factor
of the eigenmode, the square of the length of which (the ab-
solute value of the complex γ factor) represents the energy
retained after each round trip in this eigenmode.
Intensity plots of the 6 lowest loss eigenmodes from (ﬁg. 5);
colour is phase of light on HSV[12] colour wheel.
Intensity mode-proﬁles for a 1D (and similarly, cross section
on square aperture 2D) unstable confocal cavity with M =
2.8,2.9. Neq = 49.4 . . . . . . . . . . . . . . . . . . . . . . . .
Corresponding transverse 2D plots.
. . . . . . . . . . . . . .
Location of the U ′ and V ′ conjugate planes in a confocal
. . . . . . . . . . .
cavity, by a simple ray tracing argument.
10 Eigenmode projected to U ′ conjugate plane, plotted against
a M stretched version of itself - showing clear self similarity.
Neq = 49.4, M = 1.3.
2D Intensity plot and Hurst analysis of ﬁrst eigenmode at
conjugate plane with M = 1.3, Neq = 49.4. The Pentagonal
aperture has been slightly toned to allow its location; that
pattern does not really exist in the eigenmode.
. . . . . . . .
Schematic of Video-Feedback. . . . . . . . . . . . . . . . . . .

12
13 Typical video-feedback ‘eigenmode’ - imprecise fractal self-
similarity expressed on the ‘curved coastline’. M = 1.4,
pwidth = 0.65 & M = 1.3, pwidth = 0.6 respectively.

. . . . . . . . . . . . . . . . . . . . . .

. . . . . . .

. . . . . . .

. . . . . .

8
9

11

6

7

6

7

8
9

13

13

14
14

15

16

17
18

19

iv

1 Theoretical Groundwork

1.1 Optical Resonators

The simplest optical resonator consists of two curved mirrors set up facing
each other. We can deﬁne some useful quantities known as g-factors that
deﬁne the behaviour of the beam in terms of spacing and radius of curvature
of the mirrors [Eqn. 1]. These are a scale independent way of deﬁning the
behaviour of the cavity.

g1 ≡

1

−

L
R1

g2 ≡

1

−

L
R2

(1)

1.2 Stability Condition

A stable cavity is one in which (by a simple geometric argument) any light
ray in the cavity will be trapped between the mirrors and redirected towards
the centre of the cavity.

This condition can be easily deﬁned in terms of the g-factors [Eqn. 2]
and gives rise to a region on a g1vs.g2 plot that corresponds to stable cavity
conﬁgurations.

g1g2 ≤
When the g-factors exceed this region, a round-trip of the cavity becomes
overall magnifying, and light inevitably ‘spills’ over the edge of the mirrors.

(2)

≤

0

1

1.3 Transverse Eigenmodes

By considering a short pulse or ‘slab’ of radiation indeﬁnitely recirculat-
ing between the mirrors of the cavity, and demanding that the transverse
beam pattern be unchanged by propagation (i.e. a stable ‘lasing’ beam) one
can identify a transverse pattern of the ﬁeld that supports such indeﬁnite
oscillations without changing. This is known as the Transverse Eigenmode.
The action of the optical resonator can be considered as a matrix oper-
ator M which modiﬁes the transverse proﬁle of the wavefront U . This leads
to a basic eigenvalue equation:

Finding the eigenmodes of an optical resonator is simply a matter of
solving this equation. However, M is not a simple linear operator but cor-

responds to the physical evolution of light (including diﬀraction eﬀects) as
it passes around the cavity.

These Un show a certain transverse (across the cavity) distribution that
is very strongly dependent on varying cavity design. There are many such

M Un = γnUn

1

eigenmodes for a given cavity. The higher the order mode, the greater the
round-trip loss of energy.

1.4 Geometrically Stable Cavities & Hermite-Gaussian Modes

In stable optical resonators, the eigenmodes produced are essential plane
waves, multiplied by a transverse mode function. When expanded in rect-
angular transverse coordinates, these modes are given almost exactly by
Hermite-Gaussian functions[9].These are often referred to as T EMn,m waves[9].
The transverse distribution of light intensity resembles a combination
of Gaussian distributions. Therefore the majority of energy in the beam is
concentrated in only a small region of the gain medium, leaving most of the
gain underutilised.

1.5 Planar Resonators

The planar resonator occupies the [1,1] point of the g-factor stability dia-
gram, and as such it might be considered somewhat surprising that stable
eigenmodes exist on this boundary. The analytic treatment is far more dif-
ﬁcult than for stable cavities, but in appearance the Eigenmodes are very
similar to the T EM modes, with the addition of Bessel functions adding
diﬀraction ripples.

Unlike in a confocal resonator, these modes do not go to zero at the

mirror edges, and a quantity of light is lost around the edges.

1.6 Unstable Cavities

Due to the positive magniﬁcation on each round trip of the cavity, a large
proportion of the energy is lost past the mirror - in fact this can form a
useful ‘doughnut’ output beam. Analytic expressions for the mode patterns
are diﬃcult to ﬁnd, and it is these cavity designs which we used for the
majority of our project.

Unstable Cavities have a number of beneﬁts for high-power laser systems,

including far better utilisation of the bulk of the gain-medium.

1.7 Virtual Source Technique

By unfolding the mirrored cavity into a series of eﬀective apertures and
lenses, the modal pattern can be inferred from taking a weighted sum of the
edge diﬀraction eﬀects & the non-diﬀracted plane wave passing through[10].
However, this technique has been mainly developed for square or 1D slit
apertures[4], and so with the far more complicated mirror shapes that we
hope to study, we will be forced to take an entirely numerical approach.

2

1.8 Huygens’ Integral

By considering the propagation of a light beam as the combination & in-
terference of spherical Huygens’ wavelets originating at the source, the light
ﬁeld at any observable location can be derive. By considering a paraxial
beam, where the distance between input & output planes is considered large
enough so that cosθ
1 and utilising a simpliﬁed Paraxial-Spherical form of
propagating wavelets, one can form the Fresnel approximation to Huygens’
integral[9].

≈

This is made further useful for us by separating it into two one-dimension

integrals [Eqn. 3][9].

˜u(x, y) =

˜u0(x0 z0)exp(

j
Lλ Z

r

π(x

x0)2

j

−

−
Lλ

)dx0

(3)

This form of the integral represents a convolution of the input ﬁeld ˜u0
jπx2
z0)λ). Convolution can be
with a spherical wave-function exp(
−
easily achieved by Fourier-transforming the two functions, doing a product
multiplication of the results, then inverse Fourier transforming to produce
the desired convolution[9].

0/(z

−

This process can then be repeated for a given laser cavity with suitable
interacting gain medium, until convergence on a ‘steady state’ modal pattern
is observed[11] which can be considered an eigenmode of the given cavity.

1.9 Ray Matrices

Within the paraxial treatment, the eﬀect of a number of optical elements
(such as thin lenses, mirrors etc.) can be considered as items that modify
the slope & displacement of incoming light beams by linear transformation.
Therefore, one can deﬁne a rank 2 tensor (ray matrix) that acts upon a ray
vector to transform it into what is present after the optical element.

When multiple elements are cascaded together, an overall ray matrix can
be calculated by simply taking the normal matrix product of the constituent
elements, algebraically arranging the ray matrices in inverse order to that
which the ray physically encounters the elements[9].

Huygens’ Integral can be generalised to an equation that includes the
Ray Matrix of an overall system (even allowing for complex ray matrix
coeﬃcients)[9], and which describes the entire paraxial propagation of light
through the system, including any diﬀraction (but not aperture) eﬀects.
Limiting apertures (such as those forming the polygonal mirrors of our cav-
ity) require propagation of light to this plane, then spatial ﬁltering to pro-
duce the apertures.

3

1.10 Polygonal Mirrors & Nonorthogonal Basis

Previous studies have used a nonorthogonal basis[4] to describe the ﬁeld
intensity across the cavity. This allows polygonal and rhombus aperture
shapes to be described exactly by the discretised mesh, whereas a standard
Cartesian discretisation would necessitate a far ﬁner mesh to describe the
aperture with suﬃcient accuracy, and to not introduce signiﬁcant errors
from the ‘jagged edges’.

This introduces complications in the numerical code, as Huygens’ in-
tegral takes on a modiﬁed Fourier form, such as the ‘Hankel’ transform
encountered when using cylindrical coordinates[9]. As this causes consid-
erable constraints in choice of aperture shapes, and is fundamentally more
diﬃcult to visualise what is occurring, we decided to stick with a Cartesian
grid.

2 Relevant Previous Studies

Previous work[4], utilising a Fourier convolution method to solve the Huy-
gens’ integral, have been used to investigate unstable cavities with small
Fresnel number Neq and linear magniﬁcations of 1
2, with detailed
≤
study of the 8 lowest loss eigenmodes of M = 1.3 cavities.

M

≤

In order to produce eigenmodes of fractal nature, target mirrors of reg-
ular polyhedral & rhomboid shape were constructed. The produced mode
patterns show self-similar structure, with higher Neq factors leading to a
more complex & developed fractal structure. The fractal dimension of these
patterns were found to be 1
2, embedded in the 2D transverse plane
of the cavity.

D

≤

≤

2.1 Experimental Work

A prototype laser, utilising modiﬁed Iris diagrams to produce an aperture of
variable size & shape, has been constructed from a He-Xe laser[2]. Evidence
was found of the excess noise factor K depending highly on aperture shape
and Neq, as would be expected when producing fractal mode patterns, but
there is little direct experimental evidence of fractal structure in a laser
beam.

4

3 Numerical Methods

Though the equations and methods used in our numerical simulation are
present in the standard text[9], there were many subtleties and nuances
encountered when implementing a working system. Most infuriatingly, there
are many diﬀerent ways of formulating the equations into a form suitable
for solution on a computer - and it was diﬃcult to separate descriptions of
the general method from speciﬁcs of one implementation! This section along
with consultation of the codes in Appendix A should allow one to quickly
built a working code base.

3.1 Fox-Li Power Method

The Power method[9] is a very simple concept from linear algebra. When
given any eigensystem, the repeated action of the operator (physical propa-
gation around a cavity) on an initial eigenvector (the ﬁeld distribution) will
eventually lead to convergence if the system has a dominant eigenvalue[8].
The mode found will be the one with the highest absolute eigenvalue, cor-
responding to the lowest-loss case. Convergence can be extremely slow, in
particular when one is in a region where two eigenvalues are nearly the
same strength - a ‘mode crossing’. Also, repeated action of the operator will
cause the eigenvector (ﬁeld proﬁle) to tend asymptotically to either inf or
0. Scaling of the light intensity after every round-trip is necessary to keep
the values at some sensible (and therefore more accurate) level.

As such, to ﬁnd the lowest-loss mode pattern one simply needs to devise
a system for propagating light around a cavity and then apply repeatably
until converging at an eigenmode.

3.2 Light Propagation

≈

The Huygens-Fresnel integral [Eqn. 3] can be described as a convolution
operation. Propagating light from one reference frame to the next is achieved
by summing contributions to the electric ﬁeld from all the Huygens wavelets.
n2
With a discretised grid of n units, this requires computational time of O
in 1D, O

n4 in 2D and quickly becomes intractable.

≈

Convolution in real-space becomes a product in the Fourier domain,
which brings enormous computational savings. A more innate physical un-
derstanding is garnered by interpreting the Fourier transform of a ﬁeld proﬁle
as a collection of inﬁnitely wide plane waves with varying angle to the nor-
mal of the reference plane (Fig. 1). These can then be propagated (in either
direction) by making an allowance for the diﬀerent path-lengths travelled
by the waves. This involves applying a phase change equivalent to the extra
distance that non-axial rays have to travel to reach the new plane. The light
ﬁeld distribution can then be recovered by undertaking an inverse Fourier

5

transform.

O

D

S

Figure 1: Propagation of oﬀ axis rays introduces a phase retardation pro-
portional to the extra distance that the ray has to travel

The path diﬀerence (Fig. 1) is ﬁrst approximated in the paraxial approx-
imation to be equal to the diﬀerence parallel to the plane of the optical cav-
ity and then the circular arc of equi-distance is approximated as a parabola.
Therefore, the extra length of a non-axis plane wave is proportional to Lλk2,
with k being the spectral angle.

ζ0(ki, kj) = F(η0(i, j))
ζ1(ki, kj) = ζ0(ki, kj )eiπLλ(k2
η1(i, j) = F−1(ζ1(ki, kj)

i +k2
j )

(4)

(5)

(6)

3.2.1

Implementation

We used the high-performance FFTW[6] library routines to undertake our
Fast Fourier Transforms (FFTs). In spite of the high eﬃciency, the FFT
step was found to be by far the most time-consuming step of running the
simulation, which meant that none of our code was particularly speed criti-
cal.

N in 1D and η1 = η0

Our FFT routines were found to require a rescaling to conserver energy
of η1 = η0
N 2 in 2D after every application of a pair of
transform & inverse transform. Like many Fast-Fourier-Transform methods
FFTW[6] ﬂips the placement of high & low spectral frequencies for per-
formance reasons. Rather than waste time remapping these into a scratch
buﬀer, modulo arithmetic was used to rearrange the array lookups in situ
whilst working in the Fourier domain.

When working on a N xN discretised grid with a full-width aperture size
2 locating the axis of propagation, we need to do the following in

A and N
the Fourier domain:

L

L

6

out[i][j]
∗

= cexp(iπ L∗λ

A2 (((i + N

2 )%N

N

2 )2 + ((j + N

2 )%N

N
2 )2);

−

−

3.2.2 FFT Guard Bands

∞

The FFT is not a true Fourier transform (which is an integral from
−∞
to +
), but an inﬁnite series of ﬁnite integrals. Within the framework
of considering the physical interpretation of the mathematics, this can be
visualised as an inﬁnite series of screens onto which the light is imaged. As
can be seen (ﬁg. 2) one needs to use use a Guard Band around the edges
of the usefully-propagated region, in order to stop spillover from adjoining
cells.

A

A

A

Figure 2: The ﬁnite nature of the Discrete Fourier Transform results in an
inﬁnite series of propagating waveforms, either side of the (dotted) region
one is using. As such, light can leak across from either side, producing an
incorrect ﬁeld distribution.

The requirement of this G factor can be indicated [11] by considering the
amount of light spilling from a single aperture uniformly illuminated due to
a combination of the overall geometric magniﬁcation and an edge diﬀraction
pattern.

This spillover is proportional to the equivalent Fresnel number Neq and
the magniﬁcation of the setup. With esoteric cavity designs we found that
the actual required G factor generally far exceeded this amount (and was
even inﬂuenced by the shape of the aperture in 2D). In general we conﬁrmed
the suﬃciency of the guard bands by varying them slightly and seeing if there
was any change of the supposed eigenmode produced.

The maximum energy spillover was found to be less than 10−2 for reliable

eigenmode formation.

The most elegant and simple test of the propagation subroutine was to

7

generate a test Gaussian wavefront, then propagate varying distances to
conﬁrm that the standard beam propagation relations were reproduced.

3.3 Lensing

Our optical cavity is unfolded into an inﬁnite series of thin lenses & free-
space propagation.
In the paraxial approximation, with a mirror surface
that causes no overall phase-shift to the reﬂected light and with perfectly
aligned optics, a lens is simulated by that of a phase shift proportional to
the square of the distance from the optical axis, scaled to produce correct
focal-point eﬀect (ﬁg. 3).

Figure 3: Eﬀect of an inﬁnitely thin lens is to induce a spherical curvature to
the wavefront, resulting in a hitherto parallel collection of rays converging on
it. The 2D pictures below (colour representing phase, intensity representing
intensity) are data from our codes, which show a circular cross-section plane
wave focusing down to a diﬀraction limited spot near the focal point, before
expanding again.

Mathematically, what we are doing in the Spatial domain is:

u1(i, j) = u0(i, j)e

iπ

f λ (i2+j2)

On a discretised grid of N xN units, with a full-width aperture of A, this

corresponds to pseudo-code of:

ap[i][j]
∗

= cexp( iπ
f Λ

A2
N 2 ((i

N
2 )2 + (j

N
2 )2));

−

−

8

3.3.1 Testing Correctness

The main mechanism to test the eﬀect of lensing was to apply a lens to plane-
parallel light, then propagate forwards to various points (most importantly,
the focal length f and the image point 2f ) to conﬁrm that the correct
behaviour was observed. In 2D with a ‘square’ chunk of light, the focusing
eﬀect was lost amid pronounced edge diﬀraction, whereas a circular beam
of plane light was far more elegant (ﬁg. 3).

3.4 Bare Optical Resonator

A basic bare optical resonator is one in which two mirrors face each other
across a non-interacting medium.
In terms of our simulation, we unfold
these two mirrors into an inﬁnite series of thin lenses & propagation over
free-space (ﬁg. 4).

L

L

L

L

Figure 4: Unfolded optical cavity.

For a situation where the deﬁning aperture is one of the mirrors (such
as most unstable cavities) it is possible to condense any combination of
intervening optical elements into a single ABCD matrix. This can then be
expanded into an ‘equivalent lens guide’[9] of lens & free-space (Fig. 4).
This results in a vast saving in computational time, as each ABCD element
with a non zero B component (representing some free-space propagation)
otherwise requires two FFTs. For a two-mirror cavity setup with one mirror
deﬁning the aperture of the system this doubles the speed of calculation.

Though there are methods[9] of incorporating a general ABCD matrix
directly into the Huygens-Fresnel integral, we found it better to use an
equivalent Lens & Free-Space inﬁnite series, as we found it far easier to
debug and visualise what was going on. We soon garnered an intuitive
grasp of how requirements of minimum discretisation (N ) and guard bands
(G) varied with diﬀerent cavities.

3.5 Detection of Eigenmodes

The Fox-Li method will eventually deliver the simulation at an eigenmode,
whereupon Eqn. 7 is held. It is essential to be able to detect when an eigen-

9

mode has been reached, and derive a quantitative ﬁgure for the eigennumber
of the mode (γ).

M ηn = γnηn

(7)

The spatial variation of the ﬁeld remains unchanged after a round-trip of
the cavity - however, it is necessary for there to be an overall phase change
& energy loss associated with the eigenmode. This can be represented as
the γ factor, a complex scalar by which all the points making up the spatial
representation of the eigenmode are multiplied by to arrive at the exact
pattern produced after one more round-trip.

The unchanging nature of the gamma factor upon successive round trips,
and the fact that all points across the spatial domain have to simultaneously
obey it when at an eigenmode was used to simultaneously detect eigenmodes
and quantify γ. After each round trip of the cavity, the average γ factor
was calculated by comparing each η1(i, j) with η0(i, j), ignoring positions
corresponding to relatively small values of η with the justiﬁcation that the
error in γ would scale with 1
η . Once this average γ ﬁgure was calculated, it
was compared with all the individual γ(i, j) measurements. An eigenmode
was detected if none of the γ(i, j) ﬁgures disagreed with the overall γ factor
by more than a certain tolerance, generally taken to be 1 part in 10000.

This method was found to be very ﬂexible and established the most ac-
curate possible γ factor. The tolerance was derived experimentally, set at a
point where the ‘eigenmodes’ produced no longer varied with a changing tol-
erance value. It was generally found that convergence on the ﬁrst eigenmode
came within 100 passes for an unstable cavity conﬁguration, but exceptional
cases near mode-crossings could take up to 1000 passes.

3.5.1

Implicit Shift

The basic Fox-Li power method is only capable of ﬁnding the lowest loss
eigenmode for the resonator.
In order to allow higher-loss modes to be
found, one must somehow cancel the presence of the dominant lower modes.
This can be accomplished by using knowledge of the γ factor associated
with a given mode to destroy the contribution of that mode in the overall
pattern. Considering the measured light ﬁeld as a summation of various
eigenmodes, then after one round trip we will a ﬁeld of these modes multi-
plied by their respective γ factors:

η0 = u1 + u2 + u3 + u4 . . .
η1 = γ1u1 + γ2u2 + γ3u3 + γ4u4 . . .

(8)

(9)

If we take our round-trip proﬁle η1 and subtract a known γ1η0 factor
(using the previously found γ and the prior light ﬁeld distribution), then we

10

will destroy any presence of the this eigenmode in η1. However, since this
step can never be perfect (due to inaccuracy in our estimation of γ) and the
natural tendency of the system to want to generate the lowest-loss eigenmode
- we must apply this cancellation repeatably during the simulation. Each
mode that we ﬁnd gives us another γ factor that we can apply in succession
in order to ﬁnd higher modes. This is equivalent to the Shift method in
linear algebra[8].

The most eﬀective method of mode-searching that we found was to it-
erate in successive round-trips of the cavity over a ‘carousal’ of the found γ
factors, then allow a number of normal unperturbed round trips (generally
10) to see if a new eigenmode would stabilise before already-known lower-loss
eigenmodes arose from the background noise. For instance, if we consider
there to be an error of σ associated with each γ factor, and a carousal of
three known eigenmodes the process will be:

η0 = u1 + u2 + u3 + u4 . . .
η1 = σ1u1 + γ2u2 + γ3u3 + γ4u4 . . .
1 u1 + σ2u2 + γ2
η2 = σ1γ2
1 u1 + σ2γ2u2 + σ3u3 + γ3
η3 = σ1γ3
1 u1 + σ2γ2
η4 = σ1γ4

2 u2 + σ3γ3u3 + γ4

3u3 + γ2

4u4 . . .

4 u4 . . .

4u4 . . .

(10)

(11)

(12)

(13)

(14)

Clearly - new modes stop being found once the error in σ is such that the

higher-loss higher-order mode is never able to dominate (i.e. when σ1γn−1
1 ≈
γn
i ). Modes often require a number of such cycles to become dominate &
be identiﬁed but even imperfect mode cancellation allows the un part of
the overall η distribution to be suﬃciently strong so that it stabilises to an
eigenmode.

3.6 Polygon Apertures

A method was sought to be able to easily produce regular polygon apertures.
The best method found was to use a standard point inclusion in polygon
test [5], then ﬁll in an aperture mask using this selection criteria.

3.7 Outputs

A simple data format was used containing tab-separated values for the
various measurements across the middle of the aperture (or along the in-
ﬁnitely thin slice when running in 1D). These values included the loca-
tion x, complex and imaginary parts of η, the intensity (Iαη2) and phase
(φx = atan ℑ(ηx)

ℜ(ηx) ).

The η ﬁeld variation across the centre of a 2D square aperture should
agree exactly with a 1D inﬁnitely thin slit with identical cavity conﬁguration.
This was used as an indicator that the overall 2D functioning was correct.

11

3.7.1 Representing Phase & Intensity

In order to show both phase and intensity information in one ﬁgure, a routine
was written to output colour representations of the transverse light ﬁeld,
with the ‘brightness’ of the pixel representing the intensity, and the phase
(0
2π) sampling a colour from a standard HSV colour wheel[12], with
no phase (φ = 0) as cyan. These could then easily be separated at a later
date into monochrome intensity plots (desaturation) or pure phase plots
(full saturation).

→

3.8 Sampling Fractal Dimension

There are a number of, seemingly contradictory, methods of deﬁning the
fractal dimension of a particular object (D). As we are dealing with graphs
(the transverse eigenmodes) with an unclear relationship between the scaling
of the physical dimension versus the intensity, simple box counting methods
are less than ideal. A method of calculating the Hurst exponent using the
rescaled range was found to be the easiest to implement and was imple-
mented in our codes.

The Hurst exponent can be considered a measurement of the persistence
of the function - the extent to which it is predictable. Fractal dimension,
for a 2D graph is related by:

D = 2

H

(15)

−
A predictable linear varying function will have a Hurst exponent of 1
(range scales directly with sample size) and therefore a fractal dimension
of 1 - it is a 1D object embedded in a 2D graph. Conversely, the more
complexity in the mode pattern, the lower the Hurst exponent and the
higher fractal dimension. However - pure noise has a Hurst coeﬃcient of
zero, implying the highest possibly degree of fractal structure. Therefore,
though Hurst analysis can be used to quantify the degree of fractal structure,
it is not suﬃcient to declare whether a particular structure is a (self-similar)
fractal or not.

12

4 Results

4.1 Equivalent Confocal Cavity

A general cavity can be converted into an equivalent confocal form by plac-
ing the ABCD matrix between two opposite lenses. This can then be easily
unfolded into an equivalent lens guide, allowing one to halve the compu-
tational eﬀort necessary to locate eigenmodes. We generally investigated
symmetric cavities (g1 = g2).

Eigenvalues are located on a convex hull in the complex plain, but due
to the way that the carousal-algorithm ‘hops’ shifts the origin on the plane,
the modes are not discovered in strict order of lowest loss but that each
found eigenmode is the one furthest away (therefore greatest in magnitude)
from the γ values being used to suppress the lower order eigenmodes.

A typical set of eigenvalues is represented (ﬁg. 5), along with the as-
sociated 2D plots (ﬁg. 6). Weak self similar structures are demonstrated
in these transverse patterns, with the structure of the aperture (an n-side
polygon) being replicated at smaller and smaller scales.

 1

 0.5

 0

-0.5

a
m
m
a
G

 
t
n
e
n
o
p
m
o
C
 
g
a
m

I

-1

-1

-0.5

 0

 0.5

 1

 0

 2

 4

 6

 8

 10

 12

 14

Real Component Gamma

Eigenmode

Figure 5: Gamma factors for the ﬁrst 15 Eigenmodes of a low-magniﬁcation
symmetric cavity (M = 1.1) with a hexagonal limiting aperture. Each
‘spoke’ of the wheel represents the gamma factor of the eigenmode, the
square of the length of which (the absolute value of the complex γ factor)
represents the energy retained after each round trip in this eigenmode.

Figure 6:
colour is phase of light on HSV[12] colour wheel.

Intensity plots of the 6 lowest loss eigenmodes from (ﬁg. 5);

)

2

 0.8

a
m
m
a
G

i

(
 
t
n
e
m
n
a
t
e
R
 
p
i
r
T
-
d
n
u
o
R

 1

 0.6

 0.4

 0.2

 0

13

4.2 Conﬁrmation of Codes Accuracy

In order to assure that our codes were ﬁnding eigenmodes correctly, we repli-
cated data from the literature, in particular Fig. 4 of [7]). This consisted of
locating lowest-loss eigenmodes for a symmetric cavity with magniﬁcations
1.8 & 1.9, using a relatively low equivalent Fresnel number of 49.4. Agree-
ment is extremely good, and gave us conﬁdence in the ability of our codes
to ﬁnd accurate eigenmodes.

M=2.8, Neq=49.4

M=2.9, Neq=49.4

"2.9.log" u 1:5

)
.
u
.
a
(
 
y
t
i
s
n
e
t
n
I

 2.5

 2

 1.5

 1

 0.5

 0

 0

 0.5

 1.5

 2

 0.5

 1.5

 2

 1

x/a

 1

x/a

Intensity mode-proﬁles for a 1D (and similarly, cross section on
Figure 7:
square aperture 2D) unstable confocal cavity with M = 2.8,2.9. Neq = 49.4

Figure 8: Corresponding transverse 2D plots.

4.3 The Conjugate Plane

Considering a symmetric cavity, with g <
1, one can identify by a simple
ray tracing argument the existence of two conjugate planes. These planes

−

)
.
u
.
a
(
 
y
t
i
s
n
e
t
n
I

 0.9

 0.8

 0.7

 0.6

 0.5

 0.4

 0.3

 0.2

 0.1

 0

 0

14

U ′ & V ′ image onto each other after a half-trip of the cavity (with a mag-
niﬁcation of the half-trace of the cavity: m = √M ), and onto themselves
after a full round trip of the cavity (Fig. 9).

Figure 9: Location of the U ′ and V ′ conjugate planes in a confocal cavity,
by a simple ray tracing argument.

With the simple case of where the deﬁning aperture of the cavity is
at one of the mirrors, and then propagating to a suitable conjugate plane,
one discovers that the pattern of the eigenmodes bare a very clear fractal
character. In fact, if one overlaps the mode pattern against a Magniﬁcation-
factor stretched version of itself (Fig. 10), there is extremely good agreement
in pattern (peaks and troughs) but not the magnitude of the eigenmode.

Perhaps this should not be too surprising - by its very deﬁnition, the
U ′ and V planes are self-imaging, but do so with a round trip magniﬁca-
tion. Any eigenmode rendered at the image plane will have to obey such a
situation, and so must display a self-similar nature.

Generating these modes was extremely computationally demanding, the
cavity setup requiring an extremely large FFT Guard Band, far in excess of
what is predicted by considering the Neq & M parameters. This is believed
to be due to the naive (non ABCD equivalent lens guide) stepwise method
by which we propagated light around these more complex cavities.

As such this was even slower in 2D but we did manage to capture a
lowest-loss eigenmode11. Curiously, there was no pattern observable in the
phase information whatsoever - just uniform circular fringes. The reasons
for this are not well understood.

The Hurst analysis for a 1D eigenmode (Fig. 11) with identical cavity
parameters, at both the aperture deﬁning mirror (shallow line) and conju-
gate plane (steeper line) shows a clear diﬀerence between Hurst coeﬃcients.
The eigenmode rendered at the conjugate plane has a fractal dimension of
D = 1.977, whereas at the aperture mirror D = 1.84. The conjugate plane
possesses a far higher degree of fractal structure, which conﬁrms the quali-

15

Figure 10: Eigenmode projected to U ′ conjugate plane, plotted against a
M stretched version of itself - showing clear self similarity. Neq = 49.4,
M = 1.3.

tative appreciation of the ‘stretched ﬁt’ (Fig. 10).

4.4 Moving the Location of the Aperture

The fractal eigenmode produced at the conjugate plane is not perfect. It
was hypothesised that this was due to the deﬁning aperture of the system
occurring at a non-self-imaging location, and that the quality of the fractal
would be increased by moving the limiting aperture to the imaging plane.

However, this was found to be a numerically impossible situation to
simulated - as the ABCD matrix evaluated for the round trip between the
image plane and itself has a zero B value. This corresponds to there being no
eﬀective distance between the two planes, and an inﬁnite equivalent Fresnel
number.

In order to avoid this numerical impossibility, we attempted to shift the
aperture towards the complex pattern, and see whether an improvement in
the fractal ﬁt of the eigenmode occurred. We produced some qualitative
evidence for this increase in fractal quality as the aperture shifted towards
the conjugate planes, but were limited from quantifying it by an inability
to deﬁne mathematically how good the fractal ﬁt actually was, especially as
Neq

and so the amount of patterning increased.

+

→

∞

16

Figure 11: 2D Intensity plot and Hurst analysis of ﬁrst eigenmode at con-
jugate plane with M = 1.3, Neq = 49.4. The Pentagonal aperture has been
slightly toned to allow its location; that pattern does not really exist in the
eigenmode.

17

5 Video Feedback

A number of articles[1][3] draw a parallel between the fractals character of
unstable resonator modes, and the patterns produced by a ‘Monitor-Outside-
a-Monitor’ pixelated video feedback. The process of geometric magniﬁcation
in the two systems is the same, but instead of having the Huygens-Fresnel
(Eqn. 3) to select which part of the ﬁeld contributes to the next intensity
distribution (i.e. the vector sum of the Cornu spiral), a pixel-function is
deﬁned that allows for the overlap & ﬁnite size of pixels.

Figure 12: Schematic of Video-Feedback.

As shown in Fig. 12, the ‘pixel-function’ deﬁnes the way in which the
magniﬁed pixels of one frame inﬂuence the pixels produced in the next frame.
Each successive frame is comprised of a magniﬁcation of the previous pat-
tern, with distorted edge eﬀects (caused by the mismatched grid overlap)
that have a clear parallel with edge diﬀraction ripples occurring in a cavity
simulation.

With a simple ‘perfect’ grid pixel function, no fractal behaviour is demon-
strated. Real video fractals occur due to the pixel structure (the ﬁnite size
of the photo-sensitive element in the CCD grid) causing an uneven over-
lay of the grid. The perfect grid situation is equivalent to the geometric
limit of the cavity simulation - where no diﬀraction eﬀects take place and
no patterned eigenmode exists.

There wasn’t enough time for the codes written simulating video-feedback
to acquire suﬃcient ﬁnesse (in particular with the deﬁnition of the pixel
function) to be able to make direct quantitative predictions of real cavity
eigenmodes such as has been demonstrated in [1] However very similar be-
haviour was observed in both simulated video feedback & the laser cavity
simulation. In particular, ﬁrst order eigenmodes (Fig. 13) with fractal char-
acter are readily established by running light around the feedback system
(i.e. in a parallel to the Fox-Li power method), which are entirely indiﬀerent
to starting conditions, suggesting that they result from the underlying setup
of the feedback system rather than the initial ﬁeld distribution.

18

Figure 13: Typical video-feedback ‘eigenmode’ - imprecise fractal self-
similarity expressed on the ‘curved coastline’. M = 1.4, pwidth = 0.65 &
M = 1.3, pwidth = 0.6 respectively.

19

6 Conclusions

A set of ﬂexible and eﬃcient codes were produced that could accurate pre-
dict eigenmodes produced in an arbitrary & easily-speciﬁed bare optical res-
onator conﬁguration using the Fox-Li power method. Higher order modes
could be located (at computational expense) by the shift-method. The codes
can seamlessly change between 1D and 2D cavities with n
sided regular
polygon mirrors.

−

The vast majority of time in the project was taken up in developing these
codes and proving them qualitatively against the literature, leaving little
time to actually use them to explore the behaviour of unstable resonator
modes.

However, we clearly demonstrated that some unstable modes have self-
similar characteristics, that an n-sided polygon aperture has that motif re-
peated at smaller and smaller sizes in the eigenmode and that a far higher
quality of fractal eigenmode is rendered by projecting to an image plane in
a symmetric g <

1 resonator.

Further work could use these codes to study the conjugate plane in
greater detail, and attempt to derive would would occur in a real system with
the aperture creating an inﬁnite equivalent Fresnel number situation. The
biggest stumbling block that we found to this was to ﬁnd a suitably rigorous
way of deﬁning how accurate the M-stretched pattern (Fig. 10) matched
itself. We investigated using a least-squares method to compare, but due
to the lack of magnitude conservation in the stretched pattern, we found
it would be necessary to use some kind of rescaled range at the very least.
Alternatively, one could break down the pattern into a simpliﬁed description
- such as locating the peaks & troughs, then comparing these; or using a
spectral (FFT) method to investigate self-similarity in the bandwidth occu-
pied by the pattern. There is also the unresolved issue of considering how
to counteract the eﬀect of the increasing Fresnel number in the calculations.
These codes could also be used to investigate what happens at the stabil-
ity boundaries on the g-factor diagram, investigating whether the transition
from stable to unstable modes is as truly sharp as suggested in the reference
texts[9].

−

Codes were developed to simulate a basic Video-Feedback system, and
the fractal nature & ability of a system to develop eigenmodes independent
of the starting ﬁeld distributions was demonstrated. Further work could
develop these into a (far faster) method of predicting eigenmodes for an
optical cavity[1], and could even be used to ‘seed’ a standard Fox-Li power
method near an eigenmode such as is commonly done to improve accuracy
of Prony & VS eigenmodes.

20

References

[1] Jogannes Courtial and Miles J. Padgett. Monitor-outside-a-monitor
eﬀect and self-similar fractal structure in the eigenmodes of unstable
optical resonators. Physical Review Letters, 85(25):5320–5323, 2000.

[2] G. P. Karman et al. Excess-noise dependence on intracavity aperture

shape. Applied Optics, 38:6874–6878, 1999.

[3] Jonathan Leach et al.

Fractals

in pixellated video feedback.

Contemporary Physics, 44(2):137–143, 2003.

[4] McDonald et al. Kaleidoscope laser. J. Opt. Soc. Am., 17(4):524–529,

2000.

[5] W. Randolph Franklin.

Point

inclusion in polygon test.

http://www.ecse.rpi.edu/Homepages/wrf/Research/Short Notes/pnpoly.html,
1970.

[6] Matteo Frigo and Steven G. Johnson. The design and implementation
of FFTW3. Proceedings of the IEEE, 93(2):216–231, 2005. special issue
on ”Program Generation,Optimization, and Platform Adaptation”.

[7] G.S. McDonald G.H.C. New, J.P. Woerdman. Excess noise in low fres-
nel number unstable resonators. Optics Communications, 164:285–295,
1999.

[8] Stanley I. Grossman. Elementary Linear Algebra. Wadsworth Publish-

ing Company, 1984.

[9] Siegman. Lasers. University Science Books, 1986.

[10] Orazio Svelto. Principles of Lasers. Plenum, 1989.

[11] Edward A. Sziklas and A. E. Siegman. Mode calculations in unsta-
ble resonators with ﬂowing saturable gain. 2: Fast fourier transform
method. Applied Optics, 14:1873–1889, 1975.

[12] Wikipedia. Hsv color space — wikipedia, the free encyclopedia.

http://en.wikipedia.org/w/index.php?title=HSV color space&oldid=50283017,
2006. [Online; accessed 29-April-2006].

21

A Cavity Simulator Codes

/∗ C a v i ty Sim

∗ MSci P h y s i c s P r o j e c t QOLS07 ,
∗ J a r v i s t F r o s t & Benjamin H a l l 2005 −2006
∗/

I m p e r i a l C o l l e g e

#i n c l u d e <complex . h>
#i n c l u d e <f f t w 3 . h>
#i n c l u d e <math . h>
#i n c l u d e <s t d i o . h>
#i n c l u d e < s t d l i b . h>
#i n c l u d e <time . h>

#i n c l u d e ” pnpoly . c ”

// p o i n t s

i n a p o l y g o n d e t e c t i o n code

//# d e f i n e TWO DIMENSIONAL

#d e f i n e N ( 1 0 2 4 ∗ 1 6 )
#d e f i n e G ( 0 . 2 )

we SHOULD u s s

eigenmode

t e s t

f o r Eigenmode

#d e f i n e MAX EIGENS 10

// guard band − e x p r e s s e d a s

f r a c t i o n o f g r i d

#d e f i n e TOLERANCE 0 . 0 0 0 1

// t o l e r a n c e o f p o i n t s

i n t e s t i n g f o r

#d e f i n e SAMPLEPOINTS 200

// number o f

random p o i n t s

to sampl e to

#d e f i n e SPACERS 10 // number o f non− s h i f t a p p l y i n g ’ s p a c e r s ’

i n

e i g e n v a l u e meth

#d e f i n e A 1 . 4 1 4 E−2
d o u b l e L = 1 . 0 ; / / 3 . 1 4 ;
d o u b l e FOCAL = −100000;
d o u b l e LAMBDA= 10 e −08; / / 1 . 0 E−7; / / 0 . 4 4 8 8 E−6; / / 0 . 1 1 2 2 5 E−6; / / 0 . 0 6 9 7 5 4

// was 0 . 0 0 1

// was 1mm

E−6; / / 0 . 0 6 7 3 4 9 E−6; / / 0 . 0 6 9 7 5 4E−6 //1 micron

i n t CROP=1; // cr o p o u tp u t p h o to s ?
f f t w p l a n f f t ,
d o u b l e M;

f f t r ;

#d e f i n e R 5 0 0 0 0 0 . 0

// r a d i u s c u r v a t u r e g a u s s i a n s p h e r i c a l

beam

#d e f i n e WAIST 1E−3

// w a i s t o f g . s . beam

#i f d e f TWO DIMENSIONAL
f f t w c o m p l e x ap [N ] [ N ] ;
f f t w c o m p l e x out [N ] [ N ] ;
f f t w c o m p l e x o l d a p [N ] [ N ] ;
i n t
#e n d i f

f i l t e r [N ] [ N ] ;

#i f n d e f TWO DIMENSIONAL
f f t w c o m p l e x ap [N ] [ 1 ] ;
f f t w c o m p l e x out [N ] [ 1 ] ;
f f t w c o m p l e x o l d a p [N ] [ 1 ] ;
i n t
#e n d i f

f i l t e r [N ] [ 1 ] ;

d o u b l e RS [N ] ;

f f t w c o m p l e x g a m m a s h i f t [ MAX EIGENS ] ;

22

f f t w c o m p l e x gamma old , gamma new ;

s t r u c t co o r d
{

i n t x , y ;

} s a m p l es [ SAMPLEPOINTS ] ;

l e n g t h ) ;

i n t

s t a r t ,

d o u b l e r e s c a l e d r a n g e ( i n t
d o u b l e h u r s t ( ) ;
v o i d i n p u t a p p i c t u r e ( v o i d ) ;
v o i d o u t p u t a p s l i c e ( ch a r ∗name ) ;
v o i d o u t p u t a p p i c t u r e ( ch a r ∗name ) ;
v o i d a p e r t u r e f i l t e r
v o i d p r o p o g a t e ( d o u b l e LENGTH) ;
v o i d n o r m a l i s e i n t e n s i t y i n c a v i t y ( v o i d ) ;
v o i d g e n e r a t e i n i t i a l
v o i d s c a l e f f t ( ) ; // c o r r e c t

i n t e n s i t y ( ) ;

( v o i d ) ;

f o r

s c a l e ca u s ed by FFT r o u t i n e s

v o i d
i n p u t a p p i c t u r e
{

( )

ch a r b u f f e r [ 2 0 0 ] ;
i n t
i ,
FILE ∗ f o ;

j , p ;

f o = f o p e n (” i n . raw ” , ” r ” ) ;

/∗

f s c a n f ( f o ,”% s \n” ,& b u f f e r ) ;

f s c a n f ( f o ,”% s \n” ,& b u f f e r ) ;
f s c a n f ( f o ,”% s \n” ,& b u f f e r ) ;
f s c a n f ( f o ,”% s \n” ,& b u f f e r ) ;

∗/
f o r

f o r
{

( i = 0 ;

i < N;

i ++)

( j = 0 ;

j < N;

j ++)

f s c a n f

( f o , ”%d\n ” , &p ) ;

// r ed

f s c a n f ( f o ,”%d\n” ,&p ) ; // g r e e n
f s c a n f ( f o ,”%d\n” ,&p ) ; // b l u e

ap [ i ] [ j ] = ( d o u b l e ) p ;

p r i n t f (”%d %d %d\n ” , i , j , p ) ;

//
//

//

}

}

f c l o s e ( f o ) ;

v o i d
o u t p u t a p s l i c e ( ch a r ∗name )
{

i , j =0;

i n t
FILE ∗ f o ;

#i f d e f TWO DIMENSIONAL

1D a r r a y

#e n d i f
f o = f o p e n ( name , ”w” ) ;
f p r i n t f
f o r

( i = N/ 2 ;

i < N;

i ++)

G∗ 0 . 5 / s q r t ( 2 ) ) ,

j=N/ 2 ; // t a k e s l i c e a c r o s s c e n t r e

i f

i n 2D, o t h e r w i s e j u s t

r e a d out

( f o , ”#i n d e x c r e a l cimag ca b s ca b s ∗ ca b s \n ” ) ;

f p r i n t f

( f o , ”% f %f %f %f %f %f %f \n ” ,

( d o u b l e ) ( i −N/ 2 ) / ( ( d o u b l e )N∗

( d o u b l e ) ( i −N/ 2 ) / ( ( d o u b l e )N∗G∗ 0 . 5 / s q r t ( 2 ) ) ∗ s q r t (M) ,
( d o u b l e ) ( i −N/ 2 ) / ( ( d o u b l e )N∗G∗ 0 . 5 / s q r t ( 2 ) ) ∗M,

23

( ap [ i ] [ j ] ) ,
c r e a l
cimag ( ap [ i ] [ j ] ) , ca b s
ca b s ( ap [ i ] [ j ] ∗ ap [ i ] [ j ] )

( ap [ i ] [ j ] ) ,

) ;

f c l o s e ( f o ) ;

}

v o i d
o u t p u t a p p i c t u r e ( ch a r ∗name )
{

d o u b l e s c r = 0 . 0 ,
i n t
i n t
FILE ∗ f o ;

i ,
s i z e , bottom , top ;

j , mag , magmax = 0 , Hi ;

f o = f o p e n ( name , ”w” ) ;

//

f p r i n t f ( s t d e r r , ” Output A p p er tu r e to : %s \n ” , name ) ;

s c i = 0 . 0 , phi ,

s , v , p , q ,

t ,

f ,

r , g , b ;

i f

(CROP==1)

{

s i z e =( i n t ) ( ( f l o a t )N∗G) ;
s i z e=N/ 2 ;
bottom=N/ 4 ;
top =3∗N/ 4 ;
bottom =1+( i n t ) ((1 −G) ∗ ( f l o a t )N/ 2 ) ;
top=N−( i n t ) ((1 −G) ∗ ( f l o a t )N/ 2 ) ;

s i z e=N; bottom =0; top=N;

f p r i n t f

( f o , ”P6\n%d %d\n%d\n ” ,

s i z e ,

s i z e , 2 5 4 ) ;

f o r

( i = 0 ;

i < N;

i ++)

// c a l c u l a t e

s c a l e

f a c t o r

( j = 0 ;

j < N;

j ++)

i f

( ca b s

( ap [ i ] [ j ] ) ∗ ca b s

( ap [ i ] [ j ] ) > s c r )

( ap [ i ] [ j ] ) ∗ ca b s

( ap [ i ] [ j ] ) ;

s c r = ca b s
i f

( cimag ( ap [ i ] [ j ] )> s c i )
s c i=cimag ( ap [ i ] [ j ] ) ; ∗ /

f o r

( i = bottom ;
// a p p l y s c a l e

i < top ;
f a c t o r

i ++)

to n o r m a l i s e amount o f

l i g h t

i n c a v i $

( j = bottom ;

j < top ;

j ++)

p h i = M PI + a ta n 2 ( cimag ( ap [ i ] [ j ] ) , c r e a l

( ap [ i ] [ j ] ) ) ;

p h i =2∗M PI ∗ ( ca b s ( ap [ i ] [ j ] ) ∗ ca b s ( ap [ i ] [ j ] ) ) / s c r ;

s = 1 . 0 ;

v = ( ca b s
v = 1 . 0 ;

( ap [ i ] [ j ] ) ∗ ca b s

( ap [ i ] [ j ] ) ) / s c r ;

p r i n t f (”HSV: %f %f %f \n ” , phi , s , v ) ;

//HSV−>RGB f o r m u l a from h ttp : / / en . w i k i p e d i a . o r g / w i k i /

H S V c o l o r s p a c e

Hi = ( i n t )

( f l o o r

( p h i / ( M PI / 3 . 0 ) ) ) % 6 ;

24

}
e l s e
{

}

f o r
{

}

{

f o r
{

//

//
//

/∗

//

//

//

f = p h i / ( M PI / 3 . 0 ) − f l o o r
p = v ∗ ( 1 . 0 − s ) ;
q = v ∗ ( 1 . 0 − f ∗ s ) ;
t = v ∗ ( 1 . 0 − ( 1 . 0 − f ) ∗ s ) ;

i f

( Hi == 0 )

( p h i / ( M PI / 3 . 0 ) ) ;

i f

( Hi == 1 )

i f

( Hi == 2 )

i f

( Hi == 3 )

{

}

{

}

{

}

{

}

{

}

{

}

r = v ;
g = t ;
b = p ;

r = q ;
g = v ;
b = p ;

r = p ;
g = v ;
b = t ;

r = p ;
g = q ;
b = v ;

r = t ;
g = p ;
b = v ;

r = v ;
g = p ;
b = q ;

. . .

i f

( Hi == 4 )

i f

( Hi == 5 )

//

p r i n t f (”% f \n ” , f ) ;

i f

( f i l t e r [ i ] [ j ]

!= 0 )

// i f we ’ r e d i s p l a i n g th e mask

r = g = b = v ;

//make i t g r e y s c a l e !

f p r i n t f

( f o , ”%c%c%c ” ,

( 2 5 4 . 0 ∗ r ) ,

( i n t )

( 2 5 4 . 0 ∗ g ) ,

( i n t )

( i n t )
( 2 5 4 . 0 ∗ b ) ) ;

//

f p r i n t f ( f o ,”%d %d %d ” ,65535 −mag,65535 −mag,65535 −mag ) ;

}

}

f c l o s e ( f o ) ;

}

v o i d
m a k e f i l t e r
{

( i n t n s i d e s )

i ,

i n t
f l o a t x [ 1 0 0 ] , y [ 1 0 0 ] ;

j , n ;

25

d o u b l e grad , x i n i t ;
// f i r s t draw a c i r c l e

/∗

( i =0; i <N; i ++) f o r

( j =0; j <N; j ++)

( ( f l o a t ) ( ( i −N/ 2 ) ∗ ( i −N/ 2 ) +(j −N/ 2 ) ∗ ( j −N/ 2 ) ) > (G∗G∗ ( f l o a t )N

/ 2 . 0 ∗ ( f l o a t )N/ 2 . 0 ) )
f i l t e r [ i ] [ j ] = 1 ; // masked

f i l t e r [ i ] [ j ] = 0 ; // not masked ∗/

// then draw p o l y g o n w i t h i n c i r c l e by ch o p p i n g o f f e d g e s

#i f d e f TWO DIMENSIONAL

( n = 0 ; n < n s i d e s ; n++)

x [ n ] =

N / 2 −
G ∗ (N / 2 ) ∗ c o s

M PI / ( d o u b l e ) n s i d e s ) ) ;

y [ n ] =

( ( M PI / ( d o u b l e ) n s i d e s )+ ( d o u b l e ) n ∗ ( 2 . 0 ∗

N / 2 +
G ∗ (N / 2 ) ∗ s i n ( ( M PI / ( d o u b l e ) n s i d e s ) +( d o u b l e ) n ∗ ( 2 . 0 ∗

M PI / ( d o u b l e ) n s i d e s ) ) ;

f o r
i f

e l s e

f o r
{

}

i f

( pnpoly ( n s i d e s , &x [ 0 ] , &y [ 0 ] ,

( f l o a t )

i ,

( f l o a t )

j ) )

i f

( i <N/2−(G∗ (N/ 2 ) / s q r t ( 2 ) )
f i l t e r [ i ] [ 0 ] = 1 ;

e l s e

f i l t e r [ i ] [ 0 ] = 0 ;

| |

i >N/2+(G∗ (N/ 2 ) / s q r t ( 2 ) ) )

f o r

( i = 0 ;

i < N;

i ++)

f o r

( j = 0 ;

j < N;

j ++)

f i l t e r [ i ] [ j ] = 0 ;

e l s e

f i l t e r [ i ] [ j ] = 1 ;

#e n d i f
#i f n d e f TWO DIMENSIONAL

( i = 0 ;

i < N;

i ++)

f o r
{

}

#e n d i f
}

#e n d i f

}

v o i d
a p e r t u r e f i l t e r
{

( )

i n t
f o r

i ,
j =0;
( i = 0 ;

i < N;

i ++)

#i f d e f TWO DIMENSIONAL
j < N;

( j = 0 ;

f o r

j ++)

i f

( f i l t e r [ i ] [ j ]

!= 0 )

// do t h i s with unary l o g i c

ap [ i ] [ j ] = 0 . 0 + 0 . 0 I ;

v o i d
p r o p o g a t e ( d o u b l e LENGTH)
{

i ,
i n t
d o u b l e

j=N/ 2 ; // s e t
s h i f t ;

f f t w e x e c u t e ( f f t ) ;

j a t c e n t r e o f c a v i t y

26

to f l i p th e q u a d r a n ts −

th e high−s p e c t r a l

f r e q

f o r

( i = 0 ;

i < N;

i ++)

// p l a n e wave p r o p o g a t i o n

#i f d e f TWO DIMENSIONAL
j < N;

( j = 0 ;

f o r

j ++)
//we need to u s e th e modulus o p e r a t o r
// th e FFT a l g o ch a n g es

l o c a t i o n o f

out [ i ] [ j ] ∗= cexp (

I ∗ M PI∗

( 1 . 0 / ( d o u b l e )A) ∗ ( 1 . 0 / ( d o u b l e )A) ∗

( d o u b l e )

( ( ( i + N / 2 ) % N − N / 2 ) ∗

( ( i + N / 2 ) % N − N / 2 ) +

( ( j + N / 2 ) % N − N / 2 ) ∗

( ( j + N / 2 ) % N − N / 2 ) )

#e n d i f

#i f n d e f TWO DIMENSIONAL

∗ ( LENGTH ∗ ( d o u b l e )LAMBDA) ) ;

out [ i ] [ 0 ] ∗= cexp (

I ∗ M PI∗

( 1 . 0 / ( d o u b l e )A) ∗ ( 1 . 0 / ( d o u b l e )A) ∗

( d o u b l e )

( ( ( i + N / 2 ) % N − N / 2 ) ∗

( ( i + N / 2 ) % N − N / 2 ) )

∗ ( LENGTH ∗ ( d o u b l e )LAMBDA) ) ;

#e n d i f
/∗

∗/

{

f o r

( i =0; i <N; i ++) // Apply Hanning Window to s p e c t r a l

form

f o r

( j =0; j <N; j++

out [ i ] [ j ]∗= 0 . 5 4 − 0 . 4 6 ∗

c o s (2 ∗ M PI∗ i / (N−1) ) ∗ c o s (2 ∗ M PI∗ j / (N−1) ) ;

f f t w e x e c u t e ( f f t r ) ;
s c a l e f f t ( ) ; // c o r r e c t s

f o r

s c a l e i n FFT a l g o r i t h m

}
v o i d l e n s ( d o u b l e f ) // a p p l y s p h e r i c a l

l e n s c u r v a t u r e to w a v ef r o u n t

// i . e . phase r e t a r d a t i o n dependent on d i s t a n c e from a x i s

i n t

i , j =0;

( i = 0 ;

f o r
#i f d e f TWO DIMENSIONAL

i < N;

i ++)

f o r

( j = 0 ;

j < N;

j ++)

ap [ i ] [ j ] ∗=

cexp ( I

#e n d i f
#i f n d e f TWO DIMENSIONAL

ap [ i ] [ 0 ] ∗=

cexp ( I

∗M PI
/ ( ( d o u b l e ) f ∗ ( d o u b l e )LAMBDA)
∗ ( ( ( d o u b l e )A/ ( d o u b l e )N) ∗ ( ( d o u b l e )A/ ( d o u b l e )N) ) ∗

( d o u b l e )

( ( i − N / 2 ) ∗ ( i − N / 2 ) +

( j − N / 2 ) ∗ ( j − N / 2 ) ) ) ;

∗M PI
/ ( ( d o u b l e ) f ∗ ( d o u b l e )LAMBDA)
∗ ( ( ( d o u b l e )A/ ( d o u b l e )N) ∗ ( ( d o u b l e )A/ ( d o u b l e )N) ) ∗

( d o u b l e )

( ( i − N / 2 ) ∗ ( i − N / 2 )

) ) ;

#e n d i f
}

v o i d
n o r m a l i s e i n t e n s i t y i n c a v i t y ( )
{

d o u b l e s c = 0 . 0 ;

27

i n t

i ,

j =0;

f o r

( i = 0 ;

i < N;

i ++)

// c a l c u l a t e

s c a l e

f a c t o r

#i f d e f TWO DIMENSIONAL
j < N;

( j = 0 ;

f o r

j ++)

#e n d i f

i f

( f i l t e r [ i ] [ j ]==0) // i f w i t h i n a p e r t u r e

s c += ca b s

( ap [ i ] [ j ] ) ∗ ca b s ( ap [ i ] [ j ] ) ;

s c =( d o u b l e ) s c ; // d i s c a r d i m a g i n e r y p a r t

#i f d e f TWO DIMENSIONAL

s c=s c / ( ( d o u b l e )N∗ ( d o u b l e )N∗G∗G) ; // a v e r a g e abs . v a l u e o f p i x e l

i n

s c=s q r t ( s c ) ; // t a k e s q r t

to g e t

//

f p r i n t f ( s t d e r r , ” N o r m a l i s e i n t e n s i t y :

s c %f \n ” , s c ) ;

// a p p l y s c a l e

f a c t o r

to n o r m a l i s e

c a v i t y

#e n d i f
#i f n d e f TWO DIMENSIONAL
s c=s c / ( ( d o u b l e )N∗G) ;

#e n d i f

f o r

i < N;

( i = 0 ;
amount o f
#i f d e f TWO DIMENSIONAL
j < N;

( j = 0 ;

l i g h t

f o r

i ++)

j ++)

i n c a v i t y

ap [ i ] [ j ]= ap [ i ] [ j ] / s c ;

#e n d i f

}

v o i d
g e n e r a t e i n i t i a l
{

i n t

i ,

j =0;

i n t e n s i t y ( )

f o r

( i = 0 ;

i < N;

i ++)

#i f d e f TWO DIMENSIONAL
j < N;

( j = 0 ;

f o r

j ++)

ap [ i ] [ j ]=( i −N/ 2 ) +(( j −N/ 2 ) ∗ I ) ;

i f

( i >0.25∗N
&& i <0.75∗N
&& j >0.25∗N
&& j <0.75∗N )

ap [ i ] [ j ] = 1 . 0 + 0 . 0 I ;

e l s e

ap [ i ] [ j ] = 0 . 0 + 0 . 0 I ;

ap [ i ] [ j ] = cexp (

#e n d i f

{

//

/∗

∗/

//
//

//

) (N) )

−I ∗2∗ M PI/LAMBDA∗
( ( d o u b l e ) ( ( i −N/ 2 ) ∗ ( i −N/ 2 ) +( j −N/ 2 ) ∗ ( j −N/ 2 ) ) / ( d o u b l e

/R

−
(A∗A) ∗ ( ( d o u b l e )

( ( i − N / 2 ) ∗ ( i − N / 2 ) +
( j − N / 2 ) ∗ ( j − N / 2 ) )
(N ∗ N) ) /

/ ( d o u b l e )

(WAIST∗WAIST) ) ;

ap [ i ] [ j ] = 1 . 0 + 0 . 0 I ;

//DIRTY !

: )

//

f p r i n t f ( s t d e r r , ” i : %d j : %d\ t%f + %f

i \n ” , i , j , c r e a l ( ap [ i

28

}

}

{

}

f o r

s c a l e ca u s ed by FFT r o u t i n e s

f o r

( j = 0 ;
ap [ i ] [ j ]/=( d o u b l e )N∗ ( d o u b l e )N; // c o r r e c t

j < N;

j ++)

f o r

s c a l i n g o f FFT

ap [ i ] [ 0 ] / = ( d o u b l e )N; // c o r r e c t

f o r

s c a l i n g o f 1D FFT a l g o

] [ j ] ) , cimag ( ap [ i ] [ j ] ) ) ;

}

v o i d s c a l e f f t ( ) // c o r r e c t
{

i n t

i , j ;

f o r

i < N;
#i f d e f TWO DIMENSIONAL

( i = 0 ;

i ++)

a l g o

#e n d i f
#i f n d e f TWO DIMENSIONAL

#e n d i f
}

v o i d
o u t p u t f i l t e r
{

i n t
f o r

i ,
j ;
( i = 0 ;

( )

i < N;

i ++)

f o r

( j = 0 ;

j < N;

j ++)

ap [ i ] [ j ] = 1 . 0 ;
( ) ;

a p e r t u r e f i l t e r

f f t w c o m p l e x ca l cu l a te g a m m a ( )
// C a l c u l a t e Gamma s h i f t

p i x e l s once s t a b i l i s e d on eigenmode

f a c t o r by comparing a v e r a g e o f

s u c c e s i v e

i n t

i , j =0 , a p p o i n t s = 0 ;

f f t w c o m p l e x gamma new = 0 . 0 ;
i < N;

( i = 0 ;
#i f d e f TWO DIMENSIONAL
j < N;

( j = 0 ;

f o r

f o r

j ++)

i ++)

#e n d i f

i f

( f i l t e r [ i ] [ j ] ==0 && ca b s ( ap [ i ] [ j ] ) >0.05)

a p p o i n t s ++;
gamma new += ap [ i ] [ j ] / o l d a p [ i ] [ j ] ;

{

}

gamma new /= ( d o u b l e ) a p p o i n t s ;

//

f p r i n t f ( s t d e r r ,”%d ” , a p p o i n t s ) ;

r e t u r n ( gamma new ) ;

v o i d a p p l y g a m m a s h i f t ( i n t
{

s h i f t )

i n t

i , j =0;

f o r

( i = 0 ;

i < N;

i ++)

#i f d e f TWO DIMENSIONAL
j < N;

( j = 0 ;

f o r

j ++)

#e n d i f

ap [ i ] [ j ] −= o l d a p [ i ] [ j ] ∗ g a m m a s h i f t [ s h i f t ] ;

// r o t a t e between g a m m a s h i f t

s h i f t s on

each s u c c e s s i v e p a s s

// So − j u s t what a r e we meant to do h e r e ? Apply

s u b t r a c t i v e

s h i f t

to p r e v i o u s

frame ?

29

f p r i n t f ( s t d e r r , ” Apply Gam : %f + %f

I \n ” , c r e a l ( g a m m a s h i f t

[1+ p a s s e s%ei g en m o d e co u n t ] )

, cimag ( g a m m a s h i f t [1+ p a s s e s%ei g en m o d e co u n t ] ) ) ;

d o u b l e h u r s t ( ch a r ∗name )

// D er i v ed from e q u a t i o n s a t
// h ttp : / /www. b e a r c a v e . com/ m i s l / m i s l t e c h / w a v e l e t s / h u r s t / i n d e x . html

FILE ∗ f o ;

i =0 ,n ;

i n t
i n t b i t s =0 , s i z e =512;

d o u b l e data [ 2 0 ] [ 2 ] ;

f o = f o p e n ( name , ”w” ) ;

b i t s=s i z e ;

w h i l e ( b i t s >=8)

d o u b l e avg ;
d o u b l e e x t e n t = 0 . 4 ; // f r a c t i o n o f guard band we ’ l l be u s i n g
s i z e =( i n t ) ( e x t e n t ∗G∗N) / 2 . 0 ;
p r i n t f (”%d\n ” , s i z e ) ;

{

}

avg = 0 . 0 ;
f o r

( n=0;n<s i z e ; n+=b i t s )

avg+=r e s c a l e d r a n g e ( n+N/ 2 , b i t s ) ;

avg /=( d o u b l e ) ( s i z e / b i t s ) ; // was

s i z e / b i t s

f p r i n t f ( f o ,”% f %f %f %f \n ” , 1 . 0 / ( d o u b l e ) b i t s , avg , l o g ( ( d o u b l e )

b i t s ) / l o g ( 1 0 . 0 ) , l o g ( avg ) / l o g ( 1 0 . 0 ) ) ;

data [ i ] [ 0 ] = l o g ( ( d o u b l e ) b i t s ) / l o g ( 1 0 . 0 ) ; data [ i ] [ 1 ] = l o g ( avg ) /

l o g ( 1 0 . 0 ) ;

i ++;
b i t s /=2;

f p r i n t f ( f o ,”#D: Approx : %f \n ” , ( data [ 0 ] [ 1 ] − data [ i − 1 ] [ 1 ] ) / ( data

[ 0 ] [ 0 ] − data [ i − 1 ] [ 0 ] )

) ;

f c l o s e ( f o ) ;

r e t u r n ( 0 . 0 ) ; //FIXME

d o u b l e r e s c a l e d r a n g e ( i n t

s t a r t ,

i n t

l e n g t h )

// D er v i ed from e q u a t i o n s a t
// h ttp : / /www. b e a r c a v e . com/ m i s l / m i s l t e c h / w a v e l e t s / h u r s t / i n d e x . html

//

//
}

{

}

{

i ;

i n t
d o u b l e avg = 0 . 0 , min = 0 . 0 ,max= 0 . 0 , sd = 0 . 0 ;

f o r

( i=s t a r t ; i <s t a r t+l e n g t h ; i ++)

avg+=(d o u b l e ) ca b s ( ap [ i ] [ 0 ] ) ;

avg /=( d o u b l e ) l e n g t h ; // c a l c u l a t e avg . v a l u e

RS [ 0 ] = 0 . 0 ;

30

( i =1; i<=l e n g t h ; i ++)

f o r
{
RS [ i ]=RS [ i −1]+( d o u b l e ) ca b s ( ap [ i+s t a r t ] [ 0 ] ) −avg ;
i f
i f
}
f o r

(RS [ i ]<min ) min=RS [ i ] ;
(RS [ i ]>max ) max=RS [ i ] ;

( i=s t a r t ; i <s t a r t+l e n g t h ; i ++)

sd +=(( d o u b l e ) ca b s ( ap [ i ] [ 0 ] ) −avg ) ∗ ( ( d o u b l e ) ca b s ( ap [ i ] [ 0 ] ) −avg ) ;

sd /=( d o u b l e ) l e n g t h ; //now c o n t a i n s v a r i a n c e
sd=s q r t ( sd ) ; //now S .D.

r e t u r n ( ( max−min ) / sd ) ;

}

main ( )
{

i n t

j =0 , k ,

i ,
a p p o i n t s , s h i f t ;
f r a m eco u n t =0;
ch a r name [ 1 0 0 ] , tmp [ 1 0 0 ] ;
d o u b l e tmpr ,

tmpi ,

sc ,

i n t

l , p a s s e s , n , e i g e n m o d e f l a g , ei g en m o d e co u n t ,

d o u b l e gimag , g r e a l ;
d o u b l e g1 , g2 , FOCAL CONVERSION ; // g−f a c t o r s

f o r

l a s e r c a v i t y

t o t a l e r r o r , Neq , c o n j u g a t e p l a n e ;

#i f d e f TWO DIMENSIONAL

f f t = f f t w p l a n d f t 2 d (N, N,

f f t r = f f t w p l a n d f t 2 d (N, N,

#e n d i f

#i f n d e f TWO DIMENSIONAL

f f t = f f t w p l a n d f t 2 d (N, 1 ,

f f t r = f f t w p l a n d f t 2 d (N, 1 ,

#e n d i f

s r a n d ( time (NULL) ) ;

&ap [ 0 ] [ 0 ] , &out [ 0 ] [ 0 ] , FFTW FORWARD,

FFTW ESTIMATE) ;

&out [ 0 ] [ 0 ] ,
&ap [ 0 ] [ 0 ] , FFTW BACKWARD, FFTW ESTIMATE) ;

&ap [ 0 ] [ 0 ] , &out [ 0 ] [ 0 ] , FFTW FORWARD,

FFTW ESTIMATE) ;

&out [ 0 ] [ 0 ] ,
&ap [ 0 ] [ 0 ] , FFTW BACKWARD, FFTW ESTIMATE) ;

f p r i n t f

( s t d e r r , ” P l a n s c r e a t e d . . . N:%d\n ” ,N) ;

// f o r
f o r

(M= 1 . 5 ;M< 1 . 6 ;M+=0.6)

( n = 5 ; n < 6 ; n++) //n−s i d e d p o l y g o n f o r a p e r t u r e
(FOCAL = − 2 . 0 ; FOCAL > − 2 0 . 0 ; FOCAL −= 1 . 0 )
f o r
{

//

//

//
//
//

//
//

g1= − 1 . 0 5 2 6 ; / / − 1 . 0 1 ; / / − 1 . 0 5 5 ;
g1 = −1.01;
g1 = −1.002;
M= 1 . 9 ;
g1=(M+ 1 . 0 ) / ( 2 . 0 ∗M) ;
g2=g1 ;
p r i n t f (” g1=%f g2=%f \n ” , g1 , g2 ) ;
FOCAL=(−M∗L) / ( (M−1) ∗ (M−1) ) ;
FOCAL= 0 . 2 2 5 ;

31

FOCAL CONVERSION=−g2 ∗L / ( g2 −1) ;

FOCAL=1/(2−2∗g1 ) ;

c e n t r e o f c a v i t y

o f c a v i t y

from p r e v i o u s Neq

c o n j u g a t e p l a n e =(L/ 2 ) ∗ s q r t ( ( g1 +1) / ( g1 −1) ) ; // d i s t a n c e x from

M=(−g1+s q r t ( g1 ∗ g1 − 1 ) ) /(−g1−s q r t ( g1 ∗ g1 −1) ) ; // M a g n i f i c a t i o n

Neq = 1 2 . 0 ;
LAMBDA=((M∗M) −1) / (2 ∗M) ∗ (A∗G∗A∗G/ 8 . 0 ) / (L∗Neq ) ; // c h o o s e lambda

f p r i n t f ( s t d e r r , ” Lamda : %e Neq : %f \n ” ,LAMBDA, Neq ) ;
Neq =((M∗M) −1) / (2 ∗M) ∗ (A∗G∗A∗G/ 8 . 0 ) / ( L∗LAMBDA) ; // c a l c u l a t e

Neq from A, Lambda , L & M

f p r i n t f ( s t d e r r , ” C o n g j u g a te p l a n e s : u:% f v:% f M: %f x : %f \n ” ,L
/2− c o n j u g a t e p l a n e , L/2+ c o n j u g a t e p l a n e ,M, c o n j u g a t e p l a n e ) ;

//EQUIVALENT LENSGUIDE CONVERSIONS
FOCAL=−(g2 ∗L ) / ( 2 ∗ ( g1 ∗ g2 −1) ) ; // f o c a l

l e n g t h o f e q u i v

l e n s g u i d e − Eqn 1 6 , GHCN n o t e s

L=2∗g1 ∗L ; // e q u i v a l e n n t

f r e e s c a l e l e n g t h − Eqn 1 5 , GHCN n o t e s

f p r i n t f ( s t d e r r , ”M: %f L : %f F o ca l : %f F o c a l C o n v e r s i o n %f N:

%f Neq : %f \n ” ,

M, L ,FOCAL, FOCAL CONVERSION,
( 0 . 5 ∗A∗G∗ 0 . 5 ∗A∗G/ 2 . 0 ) / ( L∗LAMBDA) ,
//((1 −L/FOCAL) −1) / 2 . 0

∗ ( 0 . 5 ∗ A∗G∗ 0 . 5 ∗A∗G/ 2 . 0 ) / (L∗

//

( (M−1) / 2 . 0 ∗ (A∗G∗A∗G/ 8 . 0 ) / ( L∗LAMBDA) ) ) ;

LAMBDA) ) ;

Neq ) ;

//

f o r

( i =0; i <N; i ++) f o r

( j =0; j <N; j ++)

s h i f t [ i ] [ j ] = 0 . 0 + 0 . 0 I ;

//
m a k e f i l t e r
f p r i n t f

;

( n ) ;

( s t d e r r , ” Npolygon : %d M: %f F o ca l : %f \n ” , n , M,FOCAL)

(L = 0 . 0 0 1 ;L<=0.024; L+=0.001) //10 240 10

f o r
{

f p r i n t f ( s t d e r r , ” Going f o r Length %f \n ” ,L ) ;

i n p u t a p p i c t u r e ( ) ; // Lena

gamma old = gamma new = 0 . 0 + 0 . 0 I ;

f o r

( i = 0 ;

i < N;

i ++)

#i f d e f TWO DIMENSIONAL
( j = 0 ;

f o r

j < N;

j ++)

#e n d i f

o l d a p [ i ] [ j ] = 0 . 0 + 0 . 0 I ;

f o r

( g r e a l = −1.0; g r e a l < 1 . 0 ; g r e a l +=0.1)

( gimag = −1.0; gimag < 1 . 0 ; gimag +=0.1)

f o r
{

ei g en m o d e co u n t = 0 ;

g a m m a s h i f t [ 0 ] = g r e a l+gimag ∗ I ;

g e n e r a t e i n i t i a l

i n t e n s i t y ( ) ;

32

//

//

//
//
//

//
//

//
//
//

//

//
//
//
//

//

//
//
//

//
//

//
//

//

/∗

∗/

s p r i n t f ( name , ” % . 1 0 d . pnm ” , 0 ) ;
o u t p u t a p p i c t u r e ( name ) ;

s p r i n t f ( name , ” % . 1 0 d . l o g ” , 0 ) ;
o u t p u t a p s l i c e ( name ) ;

a p e r t u r e f i l t e r

( ) ;

l e n s (−FOCAL CONVERSION) ;

( p a s s e s = 0 ; p a s s e s < 1 0 0 0 0 ; p a s s e s ++)

f o r
{

f p r i n t f ( s t d e r r , ” N s i d e s : %d P a s s e s %d\n ” , n , p a s s e s ) ;

s p r i n t f ( name , ” % . 1 0 d . pnm” , f r a m eco u n t++) ;
o u t p u t a p p i c t u r e ( name ) ;

//EQUIV LENSGUIDE
l e n s (FOCAL) ;
p r o p o g a t e (L ) ;

l e n s (FOCAL) ;
p r o p o g a t e (L/2− c o n j u g a t e p l a n e ) ;
a p e r t u r e f i l t e r ( ) ;
p r o p o g a t e (L/2+ c o n j u g a t e p l a n e ) ;
l e n s (FOCAL) ;

p r o p o g a t e (L/2+ c o n j u g a t e p l a n e ) ;
a p e r t u r e f i l t e r ( ) ;
p r o p o g a t e (L/2− c o n j u g a t e p l a n e ) ;

// p r o p o g a t e (L) ;

//Gamma s h i f t a p p l i c a t i o n
// S t a r t o f SHIFT s e l e c t i o n
/∗ th e f o l l o w i n g code a p p l i e s

th e

s h i f t s

i n a s t r a i g h t

∗ with a gap o f SPACERS between each r o t a t e d a p p l i c a t i o n

l o o k s

l i k e abc . . . . . . abc . . . . . abc . . . .

e t c .

s h i f t =( p a s s e s +(SPACERS−1) )%(SPACERS+ei g en m o d e co u n t ) −

s h i f t=ei g en m o d e co u n t −s h i f t −1;

f p r i n t f ( s t d e r r , ” %d ” , s h i f t ) ;
/∗ th e f o l l o w i n g code a p p l i e s

th e

s h i f t s

i n r o t a t i o n ,

∗ a gap o f SPACERS between each s i n g l e a p p l i c a t i o n o f a

l i k e a . . . . . . b . . . . . . c . . . . . . a . . . . . . b . . . . . . c

( p a s s e s%SPACERS==0 && ei g en m o d e co u n t >0)

s h i f t =( p a s s e s /SPACERS)%ei g en m o d e co u n t ;

//End o f SHIFT s e l e c t i o n

( s h i f t <0) { f p r i n t f ( s t d e r r , ” . ” ) ;

s p r i n t f ( tmp , ”X” ) ; }

s e r i e s

.

∗ So i t
∗/

SPACERS;

i f

( s h i f t >=0)

s p a ced by

s h i f t .

∗ So i t
. . . .

l o o k s
e t c .

∗/
i f

e l s e

i f
e l s e

s h i f t =−1;

33

{

}

f p r i n t f ( s t d e r r ,”% c ” , ’ a ’+ s h i f t ) ;

f o r

( i =1; i<=s h i f t +1; i ++)

tmp [ i ] = ’A’+ i −1;

tmp [ s h i f t +2]=0;

a p p l y g a m m a s h i f t ( s h i f t ) ;

gamma new = ca l cu l a te g a m m a ( ) ;

f r a m eco u n t++;

framecount , tmp , ei g en m o d e co u n t , c r e a l ( gamma new ) , cimag ( gamma new ) ) ;

s p r i n t f ( name , ” % . 1 0 d %s Mode :%d G:% f+%f I . pnm” ,

o u t p u t a p p i c t u r e ( name ) ;

n o r m a l i s e i n t e n s i t y i n c a v i t y ( ) ;

s p r i n t f ( name , ” % . 5 d . pnm” , f r a m eco u n t ) ;

//

o u t p u t a p p i c t u r e ( name ) ;

o u t p u t a p s l i c e ( name ) ;

e x i t ( −1) ;

p r i n t f (” G new %f + %f I ca b s : %f o l d : new %f \n ” ,
c r e a l ( gamma new ) , cimag ( gamma new ) ,

ca b s ( gamma new ) ,

ca b s ( gamma new−gamma old )

) ;

i f

( p a s s e s >15 && ca b s
TOLERANCE)
v a r y i n g Gamma s h i f t
{

// s e e

( gamma new − gamma old ) < ( d o u b l e )

i f

s t a b a i l i s e d to eigenmode by non−

//

f p r i n t f ( s t d e r r , ” Convergence to Eigenmode , with %f T o l e r a n c e

f p r i n t f

( s t d e r r , ”c@%d\n ” , p a s s e s ) ;

. \ n ” ,TOLERANCE) ;

g a m m a s h i f t [ ei g en m o d e co u n t ] = gamma new ;

// s a v e

gamma i n t o s h i f t

t a b l e

p r i n t f

(” Avg Gamma[%d ] : %f + %f I \ tAbs :% f \n ” ,

ei g en m o d e co u n t ,

( g a m m a s h i f t [ ei g en m o d e co u n t ] ) ,
c r e a l
cimag ( g a m m a s h i f t [ ei g en m o d e co u n t ] ) ,
ca b s ( g a m m a s h i f t [ ei g en m o d e co u n t ] ) ) ;

s p r i n t f ( name,”% dr . l o g ” , ei g en m o d e co u n t ) ;

o u t p u t a p s l i c e ( name ) ;

s p r i n t f ( name , ” h%d . l o g ” , ei g en m o d e co u n t ) ;
h u r s t ( name ) ;

// remove th e f o l l o w i n g c l u d g e

l e n s (FOCAL) ;
p r o p o g a t e (L ) ;
l e n s (FOCAL CONVERSION) ;
p r o p o g a t e ( −(0.5 − c o n j u g a t e p l a n e ) ) ;

l e n s (FOCAL CONVERSION) ; // back to f u l l
l e n s (1/(2 −2∗ g1 ) ) ; //FOCUS a s a c t u a l l y m i r r o r
p r o p o g a t e (0 . 5 + c o n j u g a t e p l a n e ) ; // p r o p o g a t e f o r w a r d s

c a v i t y

34

//

//
//
//

//
//

/∗

∗/

/∗

∗/
//

n o r m a l i s e i n t e n s i t y i n c a v i t y ( ) ;

s p r i n t f ( name,”% d u l r . l o g ” , ei g en m o d e co u n t ) ;
o u t p u t a p s l i c e ( name ) ;

s p r i n t f ( name , ” hc%d . l o g ” , ei g en m o d e co u n t ) ;
h u r s t ( name ) ;

#i f d e f TWO DIMENSIONAL // i f making a 2D eigenmode , o u tp u t

th e p r e t t y

eigenmode !

#e n d i f

s p r i n t f ( name,”% d u l r . pnm” , ei g en m o d e co u n t ) ;
o u t p u t a p p i c t u r e ( name ) ;

a p e r t u r e f i l t e r ( ) ;
p r o p o g a t e (2 ∗ c o n j u g a t e p l a n e ) ;
s p r i n t f ( name,”% d v l r . l o g ” , ei g en m o d e co u n t ) ;
o u t p u t a p s l i c e ( name ) ;

p r o p o g a t e (0.5 − c o n j u g a t e p l a n e ) ;
l e n s (1/(2 −2∗ g1 ) ) ; //FOCUS a s a c t u a l l y m i r r o r
p r o p o g a t e (0.5 − c o n j u g a t e p l a n e ) ;
s p r i n t f ( name,”% d v r l . l o g ” , ei g en m o d e co u n t ) ;
o u t p u t a p s l i c e ( name ) ;

p r o p o g a t e (2 ∗ c o n j u g a t e p l a n e ) ;
s p r i n t f ( name,”% d u r l . l o g ” , ei g en m o d e co u n t ) ;
o u t p u t a p s l i c e ( name ) ;
#i f d e f TWO DIMENSIONAL // i f making a 2D eigenmode , o u tp u t

th e p r e t t y

eigenmode !

#e n d i f

s p r i n t f ( name,”% d u r l . pnm” ,
ei g en m o d e co u n t ) ;
o u t p u t a p p i c t u r e ( name ) ;

ei g en m o d e co u n t ++;

// keep co u n t o f a l r e a d y

p a s s e s = 0 ;

// r e s e t p a s s e s

s o we have

f u l l

r a n g e

d i s c o v e r e d ei g en m o d es

to s e t t l e to n ex t mode

gamma old=gamma new =0.0+0.0 I ; // r e s e t gamma f a c t o r s

}

a p e r t u r e f i l t e r
n o r m a l i s e i n t e n s i t y i n c a v i t y ( ) ;

( ) ;

( i = 0 ;
#i f d e f TWO DIMENSIONAL

f o r

i < N;

i ++)

f o r

( j = 0 ;

j < N;

j ++)

#e n d i f

//

memcpy( o l d a p , ap , s i z e o f ( f f t w c o m p l e x ) ∗N∗N) ;

o l d a p [ i ] [ j ] = ap [ i ] [ j ] ;

gamma old = gamma new ;

i f

( ei g en m o d e co u n t >= MAX EIGENS)

// once we ’ ve g a t h e r e d

t h i s many modes

b r ea k ;

// b r ea k out

th e f o r −l o o p !

}

f p r i n t f

( s t d e r r , ” R es et \n ” ) ;

//

}

35

s p r i n t f ( name , ” n p o l y%d Foc%f p a s s e s %.5d . pnm” , n ,FOCAL, p a s s e s ) ;
o u t p u t a p p i c t u r e ( name ) ;

//
//

//

}

o u t p u t a p s l i c e ( ( i n t ) (L∗ 1 0 0 0 ) ) ;

}

f f t w d e s t r o y p l a n ( f f t ) ;
f f t w d e s t r o y p l a n ( f f t r ) ;

36

#d e f i n e X OFF 0 // o f f s e t o f n ew cen ter
#d e f i n e Y OFF 0

i n p i x e l s

#d e f i n e TWIST 3 . 1 4 / 6 // r a d i a n s

t w i s t between zoom ’ s

#d e f i n e PIXW 0 . 6 5 / / 0 . 6 5 // width o f

s e n s o r p i x e l

i n d i s p l a y p i x e l s

B Video Fractal Codes

/∗ J a r v i s t F r o s t 2004 −2006

∗ Program to c r e a t e
∗/

’ v i d eo −f r a c t a l s ’

//# i n c l u d e < f i l e . h>
#i n c l u d e <s t d i o . h>
#i n c l u d e <math . h>
#i n c l u d e < l i m i t s . h>

#d e f i n e MAG ( 1 . 4 )
#d e f i n e X RES 500
#d e f i n e Y RES 500

#d e f i n e BACKGROUND 140

i n t c u r p i c [ X RES ] [ Y RES ] ;
i n t newpic [ X RES ] [ Y RES ] ;
v o i d o u t p u t p i c ( ch a r ∗ f i l e n a m e ) ;
v o i d i n p u t p i c ( ch a r ∗ f i l e n a m e ) ;

main ( )
{

i n t x , y , l o o p s ;
ch a r

f i l e n a m e [ 2 0 ] ;

// f i l l d i s p l a y with w h i te n o i s e
s r a n d ( 1 2 3 ) ;
f o r

( x =0; x<X RES ; x++)

f o r

( y =0;y<Y RES ; y++)
c u r p i c [ x ] [ y]= rand ( ) ;

i n p u t p i c (” b e g i n . pgm ” ) ;

o u t p u t p i c (” f i r s t . pgm ” ) ;

//
//
//

zoom ( ) ;
swap ( ) ;
o u t p u t p i c (” t e s t 2 . pgm ” ) ;

f o r ( l o o p s =0; l o o p s <150; l o o p s ++)

p r i n t f (”%d\n ” , l o o p s ) ;
s p r i n t f ( f i l e n a m e , ” p i c %.3d . pgm ” , l o o p s ) ;
i f

( l o o p s %10==0)
o u t p u t p i c ( f i l e n a m e ) ;

{

}

zoom ( ) ;

swap ( ) ;

o u t p u t p i c (” l a s t . pgm ” ) ;

}

37

swap ( )
{

i n t x , y , max=0;
d o u b l e l i g h t ;

f o r

( x =0; x<X RES ; x++)
f o r ( y =0;y<Y RES ; y++)

{
c u r p i c [ x ] [ y]= newpic [ x ] [ y ] ;
i f

( c u r p i c [ x ] [ y]>max )
max=c u r p i c [ x ] [ y ] ;

f o r

( x =0; x<X RES ; x++)
f o r ( y =0;y<Y RES ; y++)

c u r p i c [ x ] [ y ]∗=INT MAX/max ;

}

zoom ( )
{

i n t x , y ;

d o u b l e nx , ny , np , dx , dy , r , th eta , p h i ;

f o r

( x =0; x<X RES ; x++)
f o r ( y =0;y<Y RES ; y++)

dx =(0.5+( d o u b l e ) ( x−(X RES/ 2 ) ) ) /MAG;
dy =(0.5+( d o u b l e ) ( y−(Y RES/ 2 ) ) ) /MAG;

r=s q r t ( dx ∗dx+dy∗ dy ) ;
t h e t a=a ta n 2 ( dy , dx ) ;
p h i=t h e t a+TWIST ;

ny=r ∗ s i n ( p h i ) ;
nx=r ∗ c o s ( p h i ) ;

nx=nx+( d o u b l e ) (X RES/2+X OFF) ;
ny=ny+( d o u b l e ) (Y RES/2+Y OFF) ;

}

{

}

//

p r i n t f (” x : %d nx : %f y : %d ny : %f \n ” , x , nx , y , ny ) ;

np =0;
np+=vo ( ( i n t ) nx +1 ,( i n t ) ny+1) ∗ ( nx−( d o u b l e ) ( ( i n t ) nx ) ) ∗ ( ny−(

d o u b l e ) ( ( i n t ) ny ) ) ; // top−r i g h t p i x e l

np+=vo ( ( i n t ) nx , ( i n t ) ny+1) ∗ (PIXW−(nx−( d o u b l e ) ( ( i n t ) nx ) ) ) ∗ ( ny

−( d o u b l e ) ( ( i n t ) ny ) ) ; // top− l e f t p i x e l

np+=vo ( ( i n t ) nx +1 ,( i n t ) ny ) ∗ ( nx−( d o u b l e ) ( ( i n t ) nx ) ) ∗ (PIXW−(ny

−( d o u b l e ) ( ( i n t ) ny ) ) ) ; // bot−r i g h t p i x e l

np+=vo ( ( i n t ) nx , ( i n t ) ny ) ∗ (PIXW−( d o u b l e ) ( nx−( d o u b l e ) ( ( i n t ) nx )

) ) ∗ (PIXW−(ny−( d o u b l e ) ( ( i n t ) ny ) ) ) ; // bot− l e f t p i x e l

np ∗ = 1 . 0 / (PIXW∗PIXW) ; // co m p en s a tes

f o r

s i z e o f p i x e l

o t h e r w i s e

’ l o s i n g ’

l i g h t

from th e f e e d b a c k

newpic [ x ] [ y ]=( i n t ) np ;
p r i n t f (” np : %f \n ” , np ) ;

//

}

38

f p r i n t f ( f , ” P5 %d %d 255\ n ” ,X RES , Y RES) ; / / . pgm f i l e t y p e − b i n a r y

f p r i n t f ( f ,”% c ” , c u r p i c [ x ] [ y ] / ( INT MAX/ 2 5 5 ) ) ;

i n t vo ( i n t x ,

i n t y ) // v a l u e o f a p a r t i c u l a r p i x e l ; with bounds

c h e c k i n g

i f
i f

( x < 0 | | x>X RES )
( y < 0 | | y>Y RES )

r e t u r n (BACKGROUND) ;
r e t u r n (BACKGROUND) ;

r e t u r n ( c u r p i c [ x ] [ y ] ) ;

{

}

}

v o i d o u t p u t p i c ( ch a r ∗ f i l e n a m e )
{

i n t x , y ;
FILE ∗ f ;
f=f o p e n ( f i l e n a m e , ”w” ) ;

form

f o r

( x =0; x<X RES ; x++)

f o r

( y =0; y<Y RES ; y++)

f c l o s e ( f ) ;

v o i d i n p u t p i c ( ch a r ∗ f i l e n a m e )
{

i n t x , y ;

i n t tmp ;

FILE ∗ f ;
f=f o p e n ( f i l e n a m e , ” r ” ) ;

f s c a n f ( f , ” P2 500 500\ n ” ) ; / / . pgm f i l e t y p e

f o r

( x =0; x<X RES ; x++)

f o r

( y =0;y<Y RES ; y++)

f s c a n f ( f ,”%d” ,&tmp ) ;

//
// p r i n t f (” tmp : %d\n ” , tmp ) ;

p r i n t f (”%d\n ” , c u r p i c [ x ] [ y ] ) ;

c u r p i c [ x ] [ y]=tmp ∗ (INT MAX/ 2 5 5 ) ;

{

}

f c l o s e ( f ) ;

}

39

