6
0
0
2
 
v
o
N
 
2
 
 
]
s
c
i
t
p
o
.
s
c
i
s
y
h
p
[
 
 
1
v
1
2
0
1
1
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

HoloTrap: Interactive hologram design for
multiple dynamic optical trapping

E. Pleguezuelos A. Carnicer J. Andilla E. Mart´ın-Badosa
M. Montes-Usategui 1

Universitat de Barcelona
Departament de Fisica Aplicada i Optica
Marti i Franques 1, 08028 Barcelona

Abstract

This work presents an application that generates just-in-time holograms to be
displayed in a holographic optical tweezers setup, a technique which allows the ma-
nipulation of particles in the range from micrometers to nanometers. The software is
written in Java, and implements the random binary masks method to generate the
holograms. It allows customization of the parameters adapted to the experimental
setup and the used hologram display, taking into account the speciﬁc characteristics
of the device, such as the modulation or the presence of aberrations. The perfor-
mance of the software is evaluated, achieving 12 fps at full display resolution when
run on a Pentium IV HT, 3.2 GHz computer, which allows real time interaction
with the sample. Experimental results of the manipulation of microspheres using
this program are provided.

Key words: Optical tweezers, Interactive manipulation
PACS: 87.80.Cc, 87.80.y

1 Introduction

In this paper we describe an application to generate multiple dynamic holo-
graphic optical tweezers interactively. This program allows a user to calculate
holograms to be displayed in an optical tweezers setup, resulting in trap pat-
terns reconﬁgurable in real time. Moreover, the application leaves experimental

Email address: encarni.pleguezuelos@ub.edu (E. Pleguezuelos).

1 This work has been funded by the Spanish Ministry of Education and Science,
under grants FIS2004-03450 and NAN2004-09348-C04-03

Preprint submitted to Elsevier Science

28 November 2012

setup factors as parameters to make the program completely customizable. In
addition to this, considers the possibility of inclusion of aberration correction
of the wavefront.

Optical tweezers are generated by strongly focusing a laser beam, thus creat-
ing an optical gradient trap for dielectric particles from micrometric samples
to nanometric scale [1] due to the transfer of light momentum to the trapped
particle. This technique has many applications in the manipulation of biologi-
cal samples [2] because of its harmlessness and the possibility of measurement
of the forces involved in molecular and biological processes, which are in the
same range than the forces applied by optical tweezers (about pN).

Holography allows the design of the light wavefront by spatially modifying the
amplitude and phase of the beam [3]. Knowing how light propagates in the
setup, the relationship between the plane where the hologram is introduced
and elsewhere is determined. In this way, one can calculate the hologram that
reconstructs a desired light distribution in another plane. The use of digital
holography in optical tweezers represents a lot of ﬂexibility in the design of
trap patterns. This technique has resulted in the introduction of large arrays
of optical traps and three-dimensional control [4], [5]. Moreover, the shape of
the beam can be modiﬁed to generate non Gaussian beams such as vortex,
which transfer angular momentum to the trapped particle [6] or non-diﬀracting
beams [7].

The kind of devices used to display digital holograms is Spatial Light Mod-
ulators (SLMs), which allow the modiﬁcation of its complex transmittance/
reﬂectance dynamically by computer control. The relationship between the
sample plane and the hologram plane is an inverse Fourier transform, so the
hologram is in general complex valued. These devices are unable to modulate
the whole complex plane, and in general one is constrained to certain val-
ues due to the SLM modulation constraints that we should have to be taken
into account while the hologram generation process. Algorithms have to be
designed to ﬁnd an optimal solution constraining the hologram values to the
discrete complex values available because of the modulator. These algorithms
are based in iterative methods [8], [9] or in extensive search procedures [10].
These two approaches are time-consuming and do not allow real-time inter-
action with the sample given that they cannot be calculated and displayed
just-in-time. We have recently proposed a method to calculate holograms for
the generation of optical tweezers based on the random mask encoding method
for multiplexing phase-only ﬁlters [11]. This method is, to our knowledge, the
fastest with control of the trap in 3D, because it is not iterative and the number
of operations implied is lower than the required using other direct methods,
such as the gratings and lenses one [12]. Other advantage of this algorithm is
that it does not produces ghosts traps or replicas reported in other methods
[13].

2

Other methods such as the generalized phase contrast approach [14] or time
sharing of the laser beam allow real-time interaction with the sample because
they do not require of hologram codiﬁcation, but are constrained to 2 dimen-
sional trap patterns and do not permit the generation of non Gaussian beams.
Some authors use the phase and gratings method to calculate the desired trap
pattern. The method could be the bottleneck in the response performance
of the programs, because it includes computation of trigonometric functions,
as explained in section 3. For example, another application implements this
method achieving 3-5 fps [15]. Alternatively it has been proposed to use GPU
programming procedures to improve video-rate [16]. This kind of programming
is rather uncommon, but it may provide a solution to implement an iterative
algorithm in real time. Other applications, such as BioRyx R(cid:13) [17], are intended
to be used with their commercial setup and do not allow customization, as
the software we present.

We present the software developed to interact with the trapped particles in real
time. This application calculates and displays the holograms that generate the
trap pattern as a reaction of the user commands. First we will make an outline
of the experimental setup (section 2) emphasizing the aspects that have to be
taken into account in the software design and the algorithm that is imple-
mented in the application (section 3). This application, written in JavaT M 2
Platform Standard Edition 5.0, will be detailed in section 4. The sample plane
can be visualized in another monitor, using the camera software. We will show
how we incorporated our camera image into the application, although as the
camera is controlled with its own drivers and we cannot distribute this sec-
ond version. Nevertheless, the distributed version is fully operative. We will
explain how to control your own camera in section 4.3. The performance of
the software and an example of the program’s use will be shown in section 5.

2 Holographic optical tweezers

A highly focused laser beam is needed to exert gradient force on the sample.
Typically an inverted microscope is modiﬁed to use its objective to focus the
beam and its illumination system to visualize the sample. An scheme of our
experimental setup is shown in ﬁgure 1. The beam is expanded and collimated
before being reﬂected by the SLM, which modulates the wavefront. The beam
size is reduced with the telescope (lens L1 and L2 in ﬁgure 1), to adapt it
to the objective to take advantage of all its aperture, which is important to
achieve stable trapping [1]. The beam is focalized onto the sample plane by
the microscope objective.

The sample is placed in the focal plane of the objective, so the relationship
between the device and the sample is an inverse Fourier transform except for

3

multiplicative phase terms that do not aﬀect our discussion [18]:

H(u, v) =

g(x, y)e

−i 2π

λf (xu+yv)dxdy,

∞

x
−∞

(1)

where H(u, v) is the hologram, g(x, y) the trap pattern, λ the wavelength of the
light and f the focal of the objective. The telescope, wavelength and objective
determine the scale factor between our sample plane and the hologram, and
will be left as a parameter in the application as we explain in section 4.

The introduction of the SLM allows us to design the shape of the beam by
spatially modifying the amplitude and phase values of the light distribution
in the plane where the modulator is placed. There are diﬀerent kinds of SLM.
We use a liquid crystal display (LCD), in which each gray level sent to each
pixel of the modulator is traduced to a diﬀerent change in amplitude and
phase of the incident beam at that point, achieving spatial control of the light
distribution. The modulation depends on the polarization of the input and
output light. That is why the SLM is placed between polarizers in the setup.
It it is necessary to know the modulation response for each gray level to design
the hologram. This can be achieved characterizing the device modulation with
concrete polarization conditions [19]. The most used conﬁguration is the phase
only modulation, because there is minimum amplitude variations that can
aﬀect the light eﬃciency, because any change in the amplitude of the beam
implies intensity losses.

As we have explained in the introduction, LCDs are unable to modulate the
whole complex plane [20], and the number of complex values achieved is con-
strained to the set of the display gray levels. The experimental characterization
of the LCD we use, a HoloEye LCR-2500, can be seen in ﬁgure 2. It shows
the complex value that introduces each gray level. It is almost a phase mod-
ulation from 0 to 2π, although there is a slight amplitude modulation. The
hologram values have to be adapted to the modulation. To do this, the min-
imum Euclidean distance between the phase in each pixel and the available
phase values is computed, so the nearest phase modulation value is used to
display the theoretical hologram value.

To summarize, our synthesized hologram ﬁnally will be a gray-level image
that once displayed will result in a modiﬁcation of the light distribution that
generates the trap pattern.

4

3 Fast method of hologram calculation

To generate holograms in real time it is necessary to use direct methods of
calculation, that consists in the generation of the hologram from analytic
solutions, that is, to determine analytically the inverse Fourier transform of
the trap pattern taking into account that one is limited in general to phase
functions due to your modulation constraints. To design a trap landscape we
need to deﬁne the position of each trap and the plane where the trap focuses.

A trap centered at (a, b) can be described as a delta function, g(x, y) = δ(x −
a, y−b). The hologram that generates this distribution is its Fourier transform,
that is:

HD(u, v) = F −1(g(x, y)) = exp (i

(u · a + v · b)).

2π
λf

If the trap is focused at a depth z, the required function is a quadratic phase
such as:

HZ(u, v) = exp (i

(u2 + v2)),

2π
λz

whose Fourier transform is another quadratic phase function.

To generate a vortex, which can transfer angular momentum to the trapped
particle [21], the next phase function is needed:

HV (u, v) = exp (i · l tan− 1(

)),

v
u

this function modiﬁes the wavefront Gaussian shape to convert it to a Laguerre-
Gaussian mode, which carries angular momentum. The quantity l is called the
topological charge.

In these examples the solution is a pure phase function, so the codiﬁcation
of this function with a phase-only modulation is straightforward. One just
has to choose the nearest phase given by the device. However, if several traps
are required, the hologram is a sum of as many phases as traps displayed, as
shown in equation 5, resulting in a complex function that cannot be directly
displayed with a phase only modulation.

H(u, v) =

(HDk + HLk + HV k) 6= exp (iφ(u, v)).

(5)

N

X
k=0

(2)

(3)

(4)

5

The method for the codiﬁcation of the hologram cannot be time-consuming if
its implementation in real time is needed, even if the resulting hologram is not
as optimized as the obtained with an iterative algorithm or with an intensive
search method. Our approach, more detailed in [11], uses as many diﬀerent
domains Ik of the modulator as traps are wanted to be displayed. To make it
clear, it will correspond to assign a set of pixels of the modulator to show each
phase function (which will generate a single trap). The hologram (equation 6)
consists in the multiplication of the phase functions, Hk(u, v), (as in equations
2 and 3) by spatially disjoint binary masks, mk(u, v).

H(u, v) =

mk(u, v) · Hk(u, v),

(6)

N

X
k=0

where

mk(u, v) =

1 if (u, v) ∈ Ik

0 elsewhere.






The domains mk(u, v) do not overlap, and the sum of all of them results in
the whole modulator. For example, we can generate the domains by picking
randomly which pixels of the device will belong to each trap. This will avoid
the convolution of the shape of the trap with a geometric function, deforming
the light gradient proﬁle [11]. As it can be seen, the solution is as fast as
generate the Ik domains each time a trap is added or deleted, and compute
the Hk(u, v) functions to display the hologram. Figure 3 shows an example
of a hologram in which half of the pixels display a linear phase function and
the other half a quadratic phase. The resulting light distribution is two traps,
one in the Fourier plane, translated from the center and another at a diﬀerent
depth.

It is to our knowledge the fastest method to generate simple trap patterns.
That is why we have implemented it in our real time software, described in
the next section. For example, the most used fast method for the generation
of optical tweezers, the gratings and lenses methods consists in generating
the hologram from equation 5 and discard the amplitude information, being
the resulting hologram the phase of the analytic solution. This method is
slower because the calculation time increases with the number of traps and
trigonometric functions have to be computed [12]. Due to the discard of the
amplitude function information with the lenses and gratings method, the re-
sulting plane is distorted and the intensity distribution among the traps can
be diﬀerent from the expected one. It can result in a problem if the calibra-
tion of the forces [2] has to be achieved. Another advantage the random binary

6

masks method presents is that the generated trap pattern does not present
ghost traps, or replicas, as in other algorithms such as the gratings and lenses
method. While the other methods tends to concentrate the energy not located
in the traps in bright spots, resulting in false traps, the random binary masks
method distributes the remaining energy in noise, due to the convolution with
each random mask. Its main drawback is that the eﬃciency in the traps is
lower than the achieved when using other methods.

4 Description of the program

The software we present has to calculate and display holograms to generate
optical tweezers allowing real time interaction with the sample taking into ac-
count the experimental issues commented in the previous section. Each change
in the number or position of the trap implies the recalculation of the hologram.
The program response has to be quickly enough to provide close to video-rate
feedback from the sample.

The reason for using Java is that the developing cost is low when compared
with laboratory-equipment oriented languages. The use of this kind of packages
allows us a very fast and reliable control of the instruments, but licensing cost
may be expensive and do not allow ﬂexibility when implementing code not
related to the hardware to control. Moreover, Java allows an easy generation
of the Graphical User Interface (GUI) and easy integration of a C++ generated
dll, which is the most generalized Standard Development Kit (SDK) language
provided by hardware manufacturers. Another advantage that allows the use
of Java is a simple implementation of remote control of the experiment through
the internet if the computer which controls the camera acted as a web server,
by transforming the generated program into a servlet and using the Remote
Method Invocation (RMI) classes.

4.1 Graphical User Interface

A screen capture of the GUI can be found in ﬁgure 4. This program allows
the user controlling several variables:

• The hologram size in pixels. If the size is set to 1024×768, which is our
full resolution size, the hologram is calculated with half its size pixels and
zoomed to ﬁll the modulator.

• The scale factor between the SLM plane and the visualization plane. The
scale can be modiﬁed by changing the Row and Column factors, deﬁned as:

7

Row Factor =

Column Factor =

nrow
λf
ncol
λf

f2
f1
f2
f1

pyβ

pxβ,

(7)

being nrow and ncol the number of rows and columns of the hologram
respectively, f1 and f2 the focal length of the lenses L1 and L2, and px and
py the pixel size of the modulators in both directions. This factor takes into
account the telescope magniﬁcation and the scale of the Fourier transform
(λf). β is scale factor between the ﬁeld of view in µm and the pixels of the
CCD.

• The Init button asks for a precalculated phase map of the modulation and
a phase aberration correction. In our case, the aberration is a distortion
of the wavefront due to the curvature of the modulator surface (see sec-
tion 4.2). There is an example of a phase only function map and a null
aberration correction attached in the .jar ﬁle to check the required format.
To run the application using these two ideal condition ﬁles, after pressing
the Init button, one just have to press OK button on the dialog box ”Use
the default aberration and modulation ﬁles”. In each hologram generation,
the correction is added to the hologram and then the nearest gray value is
assigned using the precalculated map.

• A selector allows to choosing the manipulated trap if there is more than one
trap generated. The selected trap is represented as a red circle, while the
unselected traps are in green.

• A slider allows modifying the trap depth. It is thought to modify the depth
from -5µm to 5µm. The Depth Factor text ﬁeld allows to modify the avail-
able depth range.

• By modifying the integer in the lvortex text ﬁeld (see ﬁgure 4) an optical
vortex carrying angular momentum is generated by adding a vortex phase
function (equation 4 with the speciﬁed topological charge.

• The Delete trap button deletes the selected trap. This means a reconﬁgu-

ration of the random binary masks.

• The hologram is calculating by the method selected in the Radio Button.
By default, the used method is the random binary masks method but one
could also use the lenses and gratings one.

The main diﬀerence between our software and other in the literature is in the
parameter options. Our application allows customizing its options by taking
into account the user optical setup: arbitrary scale factors, introduction of
the experimental operating curve adaptation and aberration corrections. In
addition to this, we use the most eﬃcient algorithm in terms of calculation
time.

8

4.2 Calculation and displaying of a hologram

The computational process of generating a hologram with the application
using the random binary mask method is detailed in this section. A ﬂowchart
of this process can be seen in ﬁgure 5. First, the application is initiated and the
user enters the parameters (such as hologram size or scale factors). The central
black panel in the application (the image camera if introduced) controls the
event handling of the user interaction. By clicking onto the panel the mouse
coordinates are used to calculate a phase grating corresponding to a trap
translated from the center (in this ﬁrst step the random mask generated is the
whole modulator, because there is a single trap), and a window is generated
displaying this hologram. Each time another trap is added, by clicking onto
the panel, the random binary masks have to be calculated and then each set
of pixels show the corresponding phase function. If the mouse is dragged or
the depth slider is moved the coordinates of the selected trap have changed.
A change in the coordinates of a single trap means that only the pixels of the
mask corresponding to it have to be recalculated. This fact makes the random
binary masks the fastest method to our knowledge.

To generate traps in real time the algorithm has to be fast but there are other
considerations that aﬀect the performance of the hologram. We have opti-
mized the process of adaptation of the hologram to the modulation values by
generating a map of the correspondence between all the possible phase val-
ues between 0 and 2π and the nearest phase given for a gray level, which in
general is not a linear relationship. A misleading assignment can cause distor-
tion in the reconstructed trap pattern. This mapping results in an assignment
computationally as fast as a linear correspondence.

Another experimental issue that aﬀects the time calculation is the possible
existence of aberrations in the optical system, which have to be corrected
to generate the trap pattern. In our case, the calibration of the modulator
exposed that the modulator reﬂected light shape is distorted due to the lack
of ﬂatness of the device. We can correct this aberration by adding a ﬁxed
phase to each of the generated holograms.

In order to ensure the immediate response of the trap pattern two main fac-
tors have to be taken into account. First, the speed in the hologram generation
has to be optimized, including the algorithm calculation, the addition of the
aberration correction and the adaptation to the modulation. And second, the
fastness of the access to the graphic hardware has to be ensured. Our approach
is to take advantage of the VolatileImage class in the Java SDK. The hologram
is stored in a hardware-accelerated oﬀ-screen image, so rendering operations
can be accelerated through the graphics capabilities of the operative system.
Thus, rendering operations (such as displaying the image) are performed with-

9

out using the CPU. This class parallelizes both processes allowing the CPU to
focus on the calculation. It has to be noted that only classes within the SDK
have been used, with exception of the camera interaction code.

4.3 Camera control

The image of the sample can be displayed in another monitor or in a TV
screen to control the manipulation. However, our program can be improved if
the camera image is incorporated to the interactive interface, although it can
be used with the image separated from it. In this section we explain how we in-
corporated our camera, and guides a programmer to incorporate their group’s
one. The used camera is a QICam Fast 1934 from QImaging. This camera is
not compliant with the IIDC Digital Camera Speciﬁcation (DCAM), so the
property SDK provided by the manufacturer had to be used. This constraint
represents a drawback to distribute the whole program, and so a non-camera
software has been attached. For example, if a camera DCAM compliant was
used, the Java API for FireWire jlibdc1394 [22] could be incorporated to the
program instead of the camera SDK making it standard for all DCAM com-
pliant cameras. The use of this Java library also would make the software
improved multiplatform.

The libraries in our case are intended for a C++ compiler, so the Java Native
Interface (JNI) class [23] is needed to embed the camera library into the Java
structure. The JNI is a common trick to gain compatibility with native meth-
ods across a Java virtual machine. As we mentioned before, this SDK makes
the program dependent on the speciﬁc camera we use. We want to include the
camera dll library in the application. We need the following native functions:

public native int initCamera(); (Detects the camera)
public native int initGrab(); (Initiates the recording)
public native int doGrab(byte[] pix); (Saves the image into a pixel array)
public native int StopGrab(); (Stops recording)

Each native Java method has its correspondent function in C++. The process
to communicate both languages is the following:

- To declare the native methods in the Java application, in our case the meth-

ods already shown.

- To load the library containing the native code implementation, by calling the
function System.load(”JNIQCam.dll”), being ’JNIQCam.dll’ our generated
library name. The Java application has to be compiled at this point without
being executed.

- To generate the header (.h) ﬁle, which contains the interface assigning the
Java methods to the C native functions. As an example, the functions are

10

deﬁned in this header as:

JNIEXPORT jint JNICALL Java initCamera(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java initGrab(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java doGrab(JNIEnv *, jobject, jbyteAr-
ray);
JNIEXPORT jint JNICALL Java StopGrab(JNIEnv *, jobject);
This ﬁle is the communication channel between both languages.

- To implement the functions in C/C++. The library (JNIQCam.dll) has to
contain the C source calling to the camera library. As an example, the C++
method that disconnects the camera:

JNIEXPORT jint JNICALL Java tr StopGrab(JNIEnv *, jobject){
delete [] pixels;
if(hCamera != NULL)
{
QCam CloseCamera( hCamera );
}
QCam ReleaseDriver();
return 0;
}
In this example we free the image memory through the delete order. The
calling to CloseCamera(hCamera) frees the hCamera object, being hCam-
era the object initialized in the method initCamera, containing the camera
properties and preventing other applications to access to the camera. Next,
the driver of the camera is released through the line ReleaseDriver().

- To execute the program.

The C++ ﬁles are included in the .jar source ﬁle as an example of the incor-
poration of the camera procedure. If the user had the same camera, a .dll ﬁle
should be generated from the ﬁle JNIQCam.cpp to be called from the pro-
gram, and the commented lines in the .java source, marked as ”//Comment
if there is no QICam available”, should be uncommented.

5 Performance of the software

In ﬁgure 4 we show an screen capture of the program, next to a generated
hologram. The computer in which the speed of the software is tested is a
Pentium IV HT, 3.2 Ghz.

The speed of the software when generating holograms in response to a mouse
drag is presented in table 1. The measurement is expressed in frames per
second (fps) with an error of ±2 fps taking into account diﬀerent factors, such
as the size of the hologram, the inclusion of the aberration phase correction
or the adaptation of the experimental phase available values.

11

Table 1
Performance of the hologram generation in fps (frames per second)

Experimental conditions

Hologram size

1024x768

512x512

Calculation of holograms adding the aberration and

adapting to the modulator function

12 fps

16 fps

Without adding the aberration phase function but

taking into account the modulation

16 fps

20 fps

Without taking into account the aberration nor

adapting to the modulation

16 fps

20 fps

The speed achieved using the adaptation mapping that we have created from
the experimental phase modulation values is equivalent to that achieved con-
sidering a linear relationship between the phase values and the gray levels sent
to the LCD. In contrast, the inclusion of the aberration correction does aﬀect
the performance by slowing down the hologram calculation speed. Although it
is not shown in this table, the time required for generating the hologram does
not increase if the number of traps raises, because the number of operations
does not depend on how many traps compose the pattern, only the number of
pixels in which the phases has to be computed, decreasing as the number of
traps grows up. A very recent work [15] reported 3 to 5 frames per second with
the gratings and lenses algorithm, considering neither the operative curve nor
the aberrations we found in our case without specifying the number of traps
generated.

5.1 Example of use

Figure 6 shows screen shots of the experimental manipulation of polystyrene
beads of 5µm of diameter. A ﬁrst microsphere is captured and dragged near
another, which is trapped and dragged too. The experimental setup includes a
Nikon TE2000 microscope with a Plan Fluor 100X Nikon objective of oil im-
mersion with numeric aperture 1.3, a HoloEye LCR-2500 SLM and a 125mW

12

frequency-doubled Nd:YVO4 laser of Viasho Technologies with λ = 532nm.
This video and others showing interactive manipulation of particles can be
found at our group’s web page [24].

6 Concluding remarks

We have presented a software to calculate and display holograms in real time
to generate multiple dynamic optical tweezers. The application allows the user
to generate, delete or modify traps interactively. The random binary masks
method has been implemented, because this method is the fastest to generate
multiple trap patterns. This software takes into account diﬀerent parameters
given by the setup and modulator used, and so it is not limited to a single con-
ﬁguration. The diﬀerent options have been detailed, including the adaptation
to the modulation and the correction of possible aberrations. The scale factor
and the hologram size can be also modiﬁed. Some strategies to accelerate the
calculation and displaying time of the hologram have been explained. A second
version of the program takes advantage of the property libraries of the camera
used in order to embed the image provided by the camera and the program.
We explain how to the camera image can be incorporated to improve the soft-
ware. The performance of the software is comparable to other applications
using hardware-oriented programming languages. We have shown an example
of manipulation of microspheres using this program. As future work we would
like to control a IICAM compliant FireWire camera with the software to make
it fully compatible.

References

[1] A. Ashkin, Optical trapping and manipulation of neutral particles using lasers,

Proc. Natl. Acad. Sci. USA, 94 (1997) 4853-4860.

[2] K. C. Neuman and S. M. Block, Optical trapping, Rev. Sci. Instrum., 75, (2004)

2787-2809.

[3] R. Tudela, I. Labastida, E. Mart´ın-Badosa, S. Vallmitjana, I. Juvells, and A.
Carnicer. A simple method for displaying Fresnel holograms on liquid crystal
panels, Opt. Commun., 214 (2002) 107-114.

[4] G. Sinclair, P. Jordan, J. Courtial, M. Padgett, J. Cooper, and Z. Laczik,
Assembly of 3-dimensional structures using programmable holographic optical
tweezers, Opt. Express, 12 (2004) 5475-5480.

[5] Y. Roichman and D. Grier, Holographic assembly of quasicrystalline photonic

heterostructures, Opt. Express, 13 (2005) 5434-5439.

13

[6] P. Prentice, M. MacDonald, T. Frank, A. Cuschier, G. Spalding, W. Sibbett, P.
Campbell, and K. Dholakia. Manipulation and ﬁltration of low index particles
with holographic Laguerre-Gaussian optical trap arrays. Opt. Express, 12 (2004)
593-600.

[7] S. H. Tao, X.-C. Yuan and B. S. Ahluwalia. The generation of an array of
nondiﬀracting beams by a single composite computer generated hologram. J.
Opt. A.: Pure Appl.Opt. 7 (2005) 40-46.

[8] R. W. Gerchberg and W. O. Saxton, A practical algorithm for the determination
of the phase from image and diﬀraction plane pictures, Optik, 35 (1972) 237246.

[9] V. Soifer, V. Kotlyar, and L. Doskolovich, Iterative Methods for Diﬀractive

Optical Elements Computation (Taylor & Francis Ltd, London, 1997).

[10] M. A. Seldowitz, J. P. Allebach, and D. W. Sweeney, Synthesis of digital

holograms by direct binary search, App. Opt., 26 (1987) 2788-2798.

[11] M. Montes-Usategui, E. Pleguezuelos, J. Andilla, and E. Mart´ın-Badosa, Fast
generation of holographic optical tweezers by random mask encoding of Fourier
components. Opt. Express, 14 (2006) 2101-2107.

[12] J. Liesener, M. Reicherter, T. Haist and H. J. Tiziani, Multi-functional optical
tweezers using computer-generated hologram, Opt. Comm., 185 (2000) 77-82.

[13] M. Polin, K. Ladavac, S.-H. Lee, Y. Roichman and D. Grier, Optimized

holographic optical traps, Opt. Express, 19 (2005) 5831-5845.

[14] P. Rodrigo, V. Daria, and J. Glckstad. Real-time interactive optical
micromanipulation of a mixture of high-and low-index particles. Opt. Express,
12 (2004) 1417-1425.

[15] J. Leach, K. Wulﬀ, G. Sinclair, P. Jordan, J. Courtial, L. Thomson, G. Gibson,
K. Karunwi, J. Cooper, ZJ. Laczik, M. Padgett. Interactive approach to optical
tweezers control. Appl. Opt., 10 (2006) 897-903.

[16] M. Reicherter, S. Zwick, T. Haist, C. Kohler, H. Tiziani and W. Osten. Fast
digital hologram generation and adaptative force measurement in liquid-crystal-
display-based holographic tweezers. Appl. Opt., 45 (2006) 888-896.

[17] BioRyx R(cid:13) 200 http://www.arryx.com/bioryxsoftware.html

[18] J. W. Goodman, Introduction to Fourier Optics (McGraw-Hill, 1996).

[19] E. Mart´ın-Badosa, A. Carnicer, I. Juvells, and S. Vallmitjana, Complex
modulation characterization of liquid crystal devices by interferometric data
correlation, Meas. Sci. Technol., 8 (1997) 764-772.

[20] R. Tudela, E. Mart´ın-Badosa, I. Labastida, S. Vallmitjana, I. Juvells, and A.
Carnicer. Full complex Fresnel holograms displayed on liquid crystal devices, J.
Opt. A: Pure Appl. Opt., 5 (2003) S189-S194.

[21] J. E. Curtis, B. A. Koss and D. G. Grier, Dynamic holographic optical tweezers,

Optic Communications, 207 (2002) 169-175.

14

[22] Java API for FireWire, http://jlibdc1394.sourceforge.net/

[23] Java Native Interface,

http://java.sun.com/j2se/1.4.2/docs/guide/jni/index.html

[24] The UB Physical Optics Research Group, http://www.ub.edu/optics/

Fig. 1. Holographic optical tweezers setup

 Gray levels

-1,0

-0,8

-0,6

-0,4

-0,2

0,0

0,2

0,4

0,6

0,8

1,0

Real

Fig. 2. Experimental complex modulation values of the SLM depending on the gray
levels

Fig. 3. Hologram calculated with the random binary masks method

1,0

y
r
a
n
g
a
m

i

I

0,5

0,0

-0,5

-1,0

15

Fig. 4. User interface of the hologram

Fig. 5. Flowchart of the program

16

(a)

(b)

(c)

17

Fig. 6. Screen shots showing the experimental manipulation of polystyrene beads,
5µm diameter.

