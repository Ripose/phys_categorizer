2
0
0
2
 
r
a

M
 
2
1
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
3
3
0
3
0
2
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

CERN-TH/2002-059

Foam: A General Purpose Cellular
Monte Carlo Event Generator†

S. Jadach†

Institute of Nuclear Physics, ul. Kawiory 26a, Krak´ow, Poland
and
CERN Theory Division, CH-1211 Geneva 23, Switzerland

Abstract

A general purpose, self-adapting, Monte Carlo (MC) event generator (simula-
tor) is described. The high eﬃciency of the MC, that is small maximum weight
or variance of the MC weight is achieved by means of dividing the integration do-
main into small cells. The cells can be n-dimensional simplices, hyperrectangles or
Cartesian product of them. The grid of cells, called “foam”, is produced in the
process of the binary split of the cells. The choice of the next cell to be divided and
the position/direction of the division hyper-plane is driven by the algorithm which
optimizes the ratio of the maximum weight to the average weight or (optionally) the
total variance. The algorithm is able to deal, in principle, with an arbitrary pattern
of the singularities in the distribution. As any MC generator, it can also be used
for the MC integration. With the typical personal computer CPU, the program is
able to perform adaptive integration/simulation at relatively small number of di-
mensions (
16). With the continuing progress in the CPU power, this limit will get
inevitably shifted to ever higher dimensions. Foam is aimed (and already tested) as
a component in the MC event generators for the high energy physics experiments.
A few simple examples of the related applications are presented. Foam is written in
fully object-oriented style, in the C++ language. Two other versions with a slightly
limited functionality, are available in the Fortran77 language. The source codes are
available from http://jadach.home.cern.ch/jadach/.

≤

Submitted to Comput. Phys. Commun.

†

”Work supported in part by the European Community’s Human Potential Programme under con-
tract HPRN-CT-2000-00149 Physics at Colliders”, by Polish Government grant KBN 5P03B09320,
and by NATO grant PST.CLG.977751.

CERN-TH/2002-059
March 2002

Contents

1 Introduction

4

2 The Foam algorithm

7
7
2.1 Cellular exploration of the distribution . . . . . . . . . . . . . . . . . . . .
8
2.2 Variance reduction versus maximum weight reduction . . . . . . . . . . . .
2.3 Hyperrectangles or simplices? . . . . . . . . . . . . . . . . . . . . . . . . .
8
2.4 Build up of the foam and data organization . . . . . . . . . . . . . . . . . 10
2.5 Monte Carlo generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
2.6 Economic use of the computer memory . . . . . . . . . . . . . . . . . . . . 12
2.7 CPU time saving solution . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
Inhibited variables – ﬂat dependence . . . . . . . . . . . . . . . . . . . . . 14
2.8
2.9 Predeﬁned split points – provision for very narrow peaks . . . . . . . . . . 14
2.10 Mapping of variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.11 Provisions for the multibranching . . . . . . . . . . . . . . . . . . . . . . . 16
2.11.1 Single discrete variable . . . . . . . . . . . . . . . . . . . . . . . . . 16
2.11.2 Discrete and continuous variables . . . . . . . . . . . . . . . . . . . 16
2.11.3 Multi-layer method . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
2.11.4 Multibranching and mapping . . . . . . . . . . . . . . . . . . . . . 19

3 Cell split algorithm and geometry

21
3.1 Rules governing binary split of a cell
. . . . . . . . . . . . . . . . . . . . . 22
. . . . . . . . . . . . . . . . . . . . . . . 23
3.2 Geometry of binary split of a cell
3.3 Projecting points into an edge . . . . . . . . . . . . . . . . . . . . . . . . . 24
3.4 Determination of an optimal division edge and of λdiv . . . . . . . . . . . . 25
3.4.1 Optimization of the maximum weight – choosing λdiv
. . . . . . . . 26
3.4.2 Optimization of the variance – choosing λdiv
. . . . . . . . . . . . . 28
3.4.3 Concluding remarks on the cell division algorithm . . . . . . . . . . 30
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31

3.5 Limitations

4 The Foam code

32
4.1 Description of C++ classes . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
TFOAM class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
4.2
4.2.1 Procedures for Foam initialization and foam build-up . . . . . . . . 36
4.2.2 Procedures for MC generation . . . . . . . . . . . . . . . . . . . . . 37
4.2.3 Procedures for ﬁnalization and debug . . . . . . . . . . . . . . . . . 37
4.3 TFCELL class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
4.4 Persistency with help of ROOT . . . . . . . . . . . . . . . . . . . . . . . . 39
4.5 Fortran77 version and its limitations
. . . . . . . . . . . . . . . . . . . . . 40
4.6 Future development . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40

1

5 Usage of the Foam

41
5.1 Foam distribution directory of the C++ version . . . . . . . . . . . . . . . 41
5.2 Simple example of an application . . . . . . . . . . . . . . . . . . . . . . . 42
5.3 Conﬁguring the Foam . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
. . . . . . . . . . . . . . . . . . 43
Inhibiting cell division in certain directions . . . . . . . . . . . . . . 44
Setting predeﬁned cell division geometry . . . . . . . . . . . . . . . 44
5.4 Persistency . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
5.5 Fortran77 versions

5.3.1 Principal conﬁguration parameters
5.3.2
5.3.3

6 Numerical studies and example applications

45
6.1 Dependence of the Foam eﬃciency on the conﬁguration parameters . . . . . 47
6.2 Comparison with Foam 1.x and classic VEGAS . . . . . . . . . . . . . . . . . 49
6.3 Example of sharply peaked distribution . . . . . . . . . . . . . . . . . . . . 49
6.4 Decay of τ lepton into 3 pions . . . . . . . . . . . . . . . . . . . . . . . . . 50
6.5 Beamstrahlung spectrum . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53

7 Conclusions

8 Acknowledgements

A Variance optimization

B Output of the demonstration program in C++

54

54

55

57

2

PROGRAM SUMMARY

Title of the program: Foam, version 2.05.
Computer: any computer with the C++ or Fortran 77 compilers and the UNIX operating
system
Operating system: UNIX, program was tested under Linux 6.x.
Programming languages used: ANSI C++ and FORTRAN 77 with popular extensions
such as long names, etc.
High-speed storage required: < 50 MB
No. of lines in combined program and test deck: 4235 lines of C++ code and 9826 lines
of F77 code.
Keywords: Monte Carlo (MC) simulation and generation, particle physics, phase space.
Nature of the physical problem: Monte Carlo simulation or generation of unweighted
(weight equal one) events is a standard problem in many areas of research. It is highly
desirable to have in the program library a general-purpose numerical tool (program) with
a MC generation algorithm featuring built-in capability of adjusting automatically the
generation procedure to an arbitrary pattern of singularities in the probability distribu-
tion.
Method of solution: In the algorithm a grid (foam) of cells is built in the process of the
binary split of the cells. The resulting foam is adapted automatically to the shape of the
integrand in such a way that the resulting ratio of average weight to maximum weight
or variance to average weight is arbitrarily good. The above algorithm a substantial
improvement of the previous version in Ref. [1]. The division of the cell is improved and,
in addition to simplical cells, a hyperrectangular cell shape is also available.
Restrictions on the complexity of the problem: The program is memory-hungry and
16. (In Foam 1.x of Ref. [1]
therefore presently limited to relatively small dimensions
the dimension was limited to n
Typical running time: The CPU time necessary to build up a foam of cells depends
strongly on the number of dimensions and the requested size of the grid. On the PC with
the 550MHz Intel chip it takes about 30 seconds to build a hyperrectangular grid of 10000
cells for a simple 3-dimensional distribution.
[1] S. Jadach, Comput. Phys. Commun. 130, 244 (2000).

6.)

≤

≤

3

1 Introduction

This work describe a new version of an algorithm for producing random points according
to an arbitrary, user deﬁned, distribution in the n-dimensional space – much improved
with respect to the original version of Ref. [1]. A new implementation is realized in the
C++ programming language in a fully object-oriented manner1. Since the changes both
in the algorithm and in the implementation with respect to Ref. [1] are quite essential,
a complete description of the method and the new code is provided, instead of only an
update with respect to Ref. [1].

For the problem of function minimization, integration (quadrature) there are plenty
of general purpose programs which can be applied to an arbitrary user-deﬁned function.
“general-purpose” means that all these tools work, in principle, for a very wide range
of user-functions. For multi-dimensional Monte Carlo simulation problem, that is for
the problem of generating randomly points according to a given n-dimensional distribu-
tion, there is precious little examples of the General Purpose Monte Carlo Simulators
(GPMCS), that is programs which work (in principle) for arbitrary distribution [3–6], In
this work we are concerned mainly with the MC applications of the high energy physics
An example of the work on GPMCS applied in other ﬁelds see an interesting works2 of
Refs. [7–9].

GPMCS is essentially a random number generator which generates points in multi-
dimensional space with non-uniform user-deﬁne probability distribution. Two essential
reasons for scarcity of GPMCS’s are the lack of novel ideas about an eﬃcient algorithm
and the need of much CPU power and memory – only recently available or aﬀordable.

Inevitably the GPMCS works in two stages: exploration and generation3. During
an exploration phase the GPMCS is “digesting” the entire shape of the n-dimensional
distribution ρ(~x) to be generated, memorizing its shape as eﬃciently as possible, using all
available CPU processing power and memory4. In Foam, the exploration phase is the phase
of the build-up of the system of cells covering entirely the integration space, which will be
called “foam”, produced in the process of the binary split of the cells. In the generation
phase, GPMCS provides a method of the MC generation of the points ~x exactly according
to ρ(~x). The vector x = ~x = (x1, x2, ...xn) will also be called in the following a Monte
Carlo event. In Foam, the MC generation is very simple: a cell is chosen randomly, and
next, a point is generated within the cell with uniform distribution, see below for more
details. The value of the integrand is already estimated in the exploration; it can be
calculated with an arbitrary precision in the generation phase.

1 The early C++ version of the Foam was coded by M. Ciesla and M. Slusarczyk [2].

It was a
translation of a version 1.x from Fortran77 to C++. The analogous translation to JAVA language was
also done.

2In these works there is far more emphasis on the parallel computing aspects of the integration (not

simulation) than on the cell geometry, as compared with our work.

3Exploration and generation could be done simultaneously, at the expense of complications in the

algorithm and the code.

4The procedure of memorizing multidimensional distribution ρ(~x)

0 is a kind of interpolation, in

which the grid of cells is denser in places where the distribution peaks and/or varies strongly.

≥

4

During the exploration Foam constructs a distribution ρ′(x), which is uniform within
each cell, and is used for the MC generation. Events are weighted with the weight
w = ρ/ρ′. The quality of the distribution of this weight, measured in terms of the
weight distribution parameters like small variance, good ratio of maximum to average, is
determined by the quality of the exploration. The basic principle of the Foam algorithm is
that the parameters of the anticipated “target weight distribution” in the MC generation
phase are used as a driving force guiding the cell build-up (exploration). In the case of
a successful exploration, weighted MC events can be turned eﬃciently into unweighted
ones with the usual rejection method, that is with a small rejection rate.

Since the exploration phase may be CPU-time consuming, it is a natural to expect
that GPMCS has a built-in mechanism of persistency, that is, there is a mechanism of
writing into a mass-storage (computer disk) the whole information on the memorized
shape of the distribution obtained from the exploration phase, such that the generation
of the MC events can be (re)started at any later time, without any need of repeating the
time consuming exploration. One small step further is to require that the generation of
events with GPMCS can be stopped at any time, the entire status of the GPMCS can be
written on the disk, and the generation of the next event can be resumed at any later time
upon reading the stored information; the next generated event will be such as if there was
no any break in the generation process. In fact, this is what we shall really mean in the
following as a persistency mechanism for GPMCS, and what is actually implemented in
the Foam. In Foam the persistency is realized using ROOT5 package [10].

The GPMCS programs will be always limited to “small dimensions”. With presently
available computers “small” means in practice n
16 for a “mildly”
singular distributions. This is already quite satisfactory, especially if we remember that
this limit will pushed higher, as the available hardware gets more powerful, without any
need of modifying the existing code6. – twelve years from now, with 100GHz processor
and 1TByte disk portable computers the same version of Foam will work for even higher
dimensions.

10, up to n

≤

≤

Foam has been developed having in mind that it will be used as a part of a bigger
MC program; typically, to generate a subset of variables in which a model distribution
is the most singular (has strong peaks). This is why we are not so much concerned by
the fact the the cellular Foam algorithm is ineﬃcient for, say, 150 variables. The user is
16 “wild variables” [4] and apply Foam to them. For the remaining
supposed to select n
“mild variables” Foam may merely serve a role of a uniform random number generator,
if the user of Foam wants to exploit that option. On the other hand, for smaller MC
problems, Foam may play a role of a “standalone MC generator” or “standalone MC
integrator”. Also, from the following description of the various modes of the use of Foam
it will be clear that the subprogram providing the model distribution to Foam can have
a quite complicated structure. Nevertheless, this user-provided part of the program will

≤

5 The use of ROOT is optional in Foam. However, version of Foam without ROOT does not feature

any kind of persistency.

6The present implementation of Foam is fully based on the dynamic allocation of the memory and the

space dimension is a user deﬁned parameter.

5

be smaller as compared to a solution without Foam, because Foam provides for essential
functionalities concerning weight optimisation. This remark is especially true for the case
of implementation of the multibranching with help of Foam.

Let us also note that the two-dimensional cellular MC sampler VESKO2 with the
primitive binary split was already included in the program LESKO-F of Ref. [11] long
time ago.

integrand distribution, ρ(~x) =

It is worth to mention that Foam is not based on the “principle of factorizability” of the
n
1 ρi(xi), on which VEGAS-family programs are built [3–5].
The outline of the paper is the following: In Section 2 we describe the cellular Foam
algorithm, delegating the description of the cell division procedure to Section 3. Section 4
is devoted to description of the Foam code in C++. Usage of the Foam is described in
Section 5 and examples of the numerical results (MC eﬃciency) are given in Section 6.
Conclusions and Appendix on the variance minimization ﬁnalize the paper.

Q

Buil−up of the foam of cells

Split root cell if necessary

Choose next cell for the split

MC exploration of the cell

Generate series of MC events inside cell
Choose best direction (division edge)

Find out best division ratio (division plane)

Generate MC event

Choose randomly a cell

Choose randomly a point inside cell

Figure 1: Two stages in the cellular algorithm of the Foam.

6

2 The Foam algorithm

As already mentioned, the execution of the Foam algorithm is clearly separated into the
ﬁrst stage of the “distribution exploration” consisting of the “build-up of the foam of
the cell”, which in a sense memorizes the n-dimensional shape of the distribution, and
the second stage of the actual “MC generation”, see Fig. 1. The most essential part of
the present Foam algorithm is the procedure of the binary split of the cell, in which it
is decided which cell is picked up for the next split and the necessary parameters of the
geometry of the cell split are determined. This part of the Foam algorithm description
is delegated to the next Section. In the present section we describe other, more general,
aspects of the Foam algorithm.

2.1 Cellular exploration of the distribution

The most obvious method to minimize the variance or maximum weight of the target
weight distribution in generation, proposed already some 40 years ago, is to split the
integration domain into many cells, such that the distribution ρ(~x) is approximated by
ρ′(~x), which is constant within each cell7. This is a cellular class of the general-purpose
MC algorithms8.

The immediate questions are: what kind or shapes of the cells to use and how to cover
the integration domain with cells? The reader may ﬁnd in Ref. [6] an example of rather
general discussion of these questions. In the Foam program the user may opt for one of
the three geometries of the cells: (1) simplices, (2) hyperrectangles and (3) Cartesian
products of simplices and hyperrectangles. For these particular types of cells there exist
an eﬃcient method of parametrizing them in the computer memory and handling their
geometry.

The system of many cells can be created and reorganized all at once, like in VEGAS-type
programs [3–5], or in a more evolutionary way, like the cell split process of this work. In
the Foam algorithm we rely on the binary split of cells. Starting from the entire integration
domain (unit hyperrectangle or simplex) cells are split into two daughter cells, step by
step, until the user-deﬁned memory limit is reached. A choice of a next cell to be split
and the geometry of the split in the exploration phase is driven by the “target weight
distribution” of the generation process, see Section 3. The important advantage of any
cell split algorithm is that it assures automatically the full coverage of the integration
domain – simply because the primary root cell is identical with the entire integration
domain and the two daughter cells always cover entirely the parent cell. The problem of
blind spots discussed in Ref. [6] is avoided by construction.

In the early version of the Foam of Ref. [1], there was a possibility in the algorithm that
“unsuccessful” branch in the tree of all cells can be erased and rebuild. This was called

7 For the MC simulation, our main aim, more sophisticated interpolation of ρ(~x) within a cell does

not seem to be worth an eﬀort – it would be interesting if our main aim was the integration of ρ(~x).

8The term “stratiﬁed sampling”, used in the literature, has in my opinion a narrower meaning than

“cellular class”.

7

“collapse” and “rebuild”. In the present version this option was removed9, because the
experience with many testing functions has shown that the algorithm of the cell build-up
is rather “deterministic” and the “rebuild” procedure was usually leading to a new branch
of foam with about the same features, as the old one.

Let us ﬁnally remark, that the version of the cellular algorithm presented in this
paper is, in fact, a result of many experiments in the constructing diﬀerent variants of the
algorithm. The presented version is the best one out of several development versions. In
the code one may still see some “hooks” and unused features (class members or methods)
related to these alternative variants. We have left them just in case if some new idea of
improving the algorithm emerges, or for certain kinds of debugging/testing.

2.2 Variance reduction versus maximum weight reduction

In the construction of the Foam algorithm most eﬀort was invested into a minimization
of the ratio of the maximum weight to the average weight wmax/
. This parameter is
essential, if we want to transform variable-weight events into w = 1 events, at the latter
stage of the MC generation10.

w

h

i

i

h

w

p

w2

i − h

Minimizing the maximum weight wmax is not the same as minimizing the variance
2. Usually, minimizing wmax is more diﬃcult – but it is worth an
σ =
eﬀort because Foam is really meant to be a part of a bigger MC program, where it is
usually essential that the “inner part” of the program provides events with an excellent
weight distribution, or even w = 1 events. Nevertheless, minimizing the variance is also
implemented in Foam and available optionally. It can be useful if one is satisﬁed with the
variable-weight events, and/or if the main aim is evaluation of the integral and not the
MC simulation.

The diﬀerence between the above two options is well illustrated in Fig. 2, which shows
two examples of the evolution of the MC weight distribution due to gradual increase of
the number of cells. For the default conﬁguration, Foam is optimising the ratio wmax/
.
i
This case is shown in plots (a-c) in Fig. 2. Here, the weight distribution features sharper
and sharper drop of the weight distribution at w = 1, with the increasing number of cells.
Also, the average weight increases gradually and the weight distribution gets narrower.
The optional case of the optimization of σ/
is shown in plots (d-f) of Fig. 2. In this
h
case the variance is decreasing with the growing numbers of the cells. On the other hand,
the maximum weight is much higher than before. All weight distributions were obtained
for the same 2-dimensional testing function ρb(x), used also in Section 6.

w

w

i

h

2.3 Hyperrectangles or simplices?

In Ref. [1] simplical cells have been chosen instead of simpler hyperrectangles, mainly be-
cause of the author’s “prejudice” that simplices may adapt more eﬃciently to complicated

9A “ﬂush method” which erases the entire foam of cells from the computer memory and allows for its

reinitialization is, however, available.

10We provide optionaly in the Foam for the rejection leading to w = 1 events.

8

(a)

1:50 (cid:1) 10

5

(b)

(c)

8:00 (cid:1) 10

4

6:00 (cid:1) 10

4

4:00 (cid:1) 10

4

2:00 (cid:1) 10

4

4:00 (cid:1) 10

4

2:00 (cid:1) 10

4

1:00 (cid:1) 10

4

1:00 (cid:1) 10

5

0:50 (cid:1) 10

5

0:50 (cid:1) 10

5

0:00 (cid:1) 10

0:00 (cid:1) 10

0:00 (cid:1) 10

4

5

5

0:50

1:00

1:50

2:00

0:50

1:00

1:50

2:00

0:50

1:00

1:50

2:00

(d)

1:50 (cid:1) 10

5

(e)

(f)

4

1:00 (cid:1) 10

5

3:00 (cid:1) 10

2:50 (cid:1) 10

5

2:00 (cid:1) 10

5

1:50 (cid:1) 10

5

1:00 (cid:1) 10

5

0:50 (cid:1) 10

5

3:00 (cid:1) 10

5

2:00 (cid:1) 10

5

1:00 (cid:1) 10

5

0:00 (cid:1) 10

0:00 (cid:1) 10

0:00 (cid:1) 10

4

5

5

0:50

1:00

1:50

2:00

0:50

1:00

1:50

2:00

0:50

1:00

1:50

2:00

Figure 2: Weight distribution of the Foam for the default option with the maximum weight optimiza-
tion (a-c) compared to analogous distributions obtained for an option with the variance optimization
(d-f). Number of cells is 200, 2000 and 20000 for (a-c) and (d-f), correspondingly.

singularities in the distribution ρ(x) spanned along subspaces, not necessarily parallel to
axes of the global reference frame. Hyperrectangles tend to remember orientation of the
parent hyperrectangle, while simplices feature, in principle, a kind of “angular mobility”,
i.e. they may forget orientation of grand-grand-parents, and adapt to orientation of the
singularity in ρ(x). An experience with tens of testing functions has shown that in many
cases hyperrectangles provide the same or even better ﬁnal MC eﬃciency than simplices,
for the same number of cells. Moreover, simplices have certain additional disadvantages.
Presently, Foam with simplices is practically limited to rather low dimensions n
5, be-
cause in most cases the starting integration domain is a unit hyperrectangle, which has to
be divided into n! simplices, where n! becomes quickly a large number11. This limitation
is, of course, not valid, if the integration domain is actually a simplex of the high dimen-
sionality instead of hyperrectangle. (Foam can be conﬁgured to start cell evolution from a
simplex or Cartesian product of a simplex and a hyperrectangle.) Furthermore, geometry
manipulations in the simplical case require calculation of many determinants – this slows

≤

11 Mapping of the hyperrectangle into simplex is possible, but it usually introduces nasty singularities

in ρ(x) located at the vertices, edges and walls of the simplex.

9

∼

down the program execution at higher dimensions. In addition, in the present implemen-
n Bytes/Cell,
tation, the memory consumption in a simplical foam build-up is
while for hyperrectangles we have found a method which limits memory consumption to
80 Bytes/Cell independently of n, see Section 2.6. We can therefore reach easily
below
the level 106 hyperrectangular cells at any dimension (in practice n
16) and about
50000 simplical cells, for n
5. As we see, hyperrectangular foam seems to win on many
fronts. Nevertheless, we keep simplical foam as an option, because in certain application
one encounters distributions for which it turns out to be more eﬃcient to use simplices,
in spite of all their limitations, at least for a subset of the integration variables.

16

≤

×

≤

∼

2.4 Build up of the foam and data organization

≤

−

≤

xi ≤

xn ≤

x2 ≤

x1 ≤

1 (default) or a simplex 0

The foam of cell is built-up starting form the root cell, which is the entire integration
domain, through process of binary split of a parent cell into two daughter cell. The root
x3 ≤
cell is either a unit hypercube 0
1. Also a Cartesian product of these two shapes is optionally available. Any
· · · ≤
cell being a product of the cell split can be also a hyperrectangle, a simplex or Cartesian
product of the k-dimensional hyperrectangle and n-dimensional simplex, with the total
dimensionality k + n. If the starting root cell is a hypercube and cells are simplical (or
mixed type) then root cell is immediately divided into n! simplical (or mixed type) cells.
Each cell is explored immediately after its creation. In the exploration of the cell about
100
1000 MC events (user may reset this number) are generated inside the cell with
ﬂat (uniform) distribution and using MC weight equal ρ(x); certain averages and certain
integrals over the cell are estimated. Also, the best geometry of the binary split of the
cell is established and recorded for the future use. In this way, every created cell is ready
for an immediate split. The determination of the best split is described in a ﬁne detail in
ρ(x)dxn is calculated
Section 3. In the exploration the estimate of the integral RI =
ρloss(x)dxn, see
for each cell ωI. Far more important is another functional Rloss|I =
Section 3 for its deﬁnition, which determines the evolution of the foam and the split of the
cell. Next cell to be divided into two is a cell chosen randomly, according to probability
proportional to Rloss|I or, optionally, a cell with the biggest Rloss|I.
The process of the division of the cells continues until the user deﬁned maximum
number Nc of the cells is reached. Nc includes also all cells which has been split, that
is all parent and grand-grand-parent cells, which we shall call inactive cells contrary to
normal ones called active. Usually, when we refer to a cells, we mean both active and
inactive ones. Keeping inactive cells in the record may look like a waste of the memory,
but due to the binary character of the cell split, the loss is only a mere factor of two
and it is proﬁtable to keep all inactive cells (including the root cell) for many reasons,
in particular, as we shall see in Section 2.6, keeping all cells in the record will help us to
encode cells in memory in an economic way, such that at higher dimensions we ﬁnally gain
in terms of total consumption of a memory. Furthermore, for certain quantities which
are the integrals over the cell like RI we do the following:
just after the split, when a
new more precise value of RI is known for the daughter cells – the value of the RI of the

ωI

ωI

R

R

10

parent cell is updated with the sum of the contributions from two daughter cells. This
correcting procedure is repeated for all grand-parent cell up to the root cell. In this way,
the root cell (and any other inactive cell) always keeps track of the actual value of the
total RI during the whole foam build-up process. This can be done for any other integral
quantity as well, and can be exploited for various purposes.

Since maximum number of the cells Nc is deﬁned in the beginning of the foam build-up,
all the cell objects and/or other related objects (vertices) are allocated in the computer
memory at once, in the very beginning of the cell build-up. On the other hand, the
cell objects are organized as multiply linked list, with pointers pointing to parents and
daughters. In addition, an array of pointers to all active cells is created at the end of the
foam build-up.

Let us now explain brieﬂy how the geometry of an individual cell is parametrized and
stored in the memory. It is relatively easy to parametrize n-dimensional hyperrectangle
or simplex in a way which does not require much computer memory. An n-dimensional
simplex is fully determined by its n+ 1 vertices. Since most of vertices are common to two
or more adjacent simplices, the most eﬃcient method is to build an array of all vertices
~VK, K = 1, 2, ..., NV , each of them being n-component vector and to deﬁne every simplex
as a list n + 1 vertex indices (integers or pointers) K1, K2, ..., Kn+1. For Nc simplical cells
resulting from the binary split of a single “root” simplex cell the number of vertices is
n + 1 + Nc, because each binary split adds one new vertex. (We include in Nc also cells
which has got split). The interior points of the simplex are parametrized as follows

~x =

λi(~VKi −

~VKp),

n

i6=p
X

i6=p
X

λi > 0,

λi < 1,

i = 1, 2, . . . , n,

(1)

using basis vectors relative to the p-th vertex. The above method would be ineﬃcient
for n-dimensional hyperrectangles, because memorizing all 2n vertices would require too
much memory at higher dimensions. Instead, we use another way of parametrization: each
hyperrectangle is deﬁned by the n-dimensional vector ~q deﬁning the origin of the cell and
another vector ~h = (h1, h2, ..., hn), where each component hi is the length of the hyper-
rectangle along the i-th direction. This is even clearer from the explicit parametrization
of the interior of the hyperrectangle:

xi = qi + λihi,

0 < λi < 1 i = 1, 2, . . . , k.

(2)

For cells with mixed topology, we apply eq. (2) for i = 1, 2, . . . , k and eq. (1) for
i = k + 1, k + 2, . . . , k + n.
In Section 2.6 we describe an optional method of storing
hyperrectangular cell, in which just two integer numbers are recorded instead of two vec-
tors ~q and h (two of 2-Byte integers instead of 2n of 8-Byte ﬂoating-point numbers). This
method is implemented for hyperrectangular part of the space only.

2.5 Monte Carlo generation

Once the build-up of the cells is ﬁnished, the Monte Carlo generation takes place. There
is no need for any reorganization of the cells. MC generation can be started immediately.

11

The only one thing done at the very end of the foam build-up is preparation of the list of
pointers to active cells and the array of the corresponding R′
I.

R

x∈CellI

I =

The MC point is generated in two steps. First, a cell is chosen with a probability
proportional to R′
ρ′(x) and next a MC point x is chosen with the uniform
probability inside the cell. The MC weight w = ρ′(x)/ρ(x) is associated with the event.
For a successful foam of the cells the MC weight is close to one and the user may turn
weighted events into w = 1 event by means of rejection method (with the acceptance rate
/wmax). Foam can do this for the user. However, the user can sometimes organize
∼ h
and bookkeeping of other parameters of the weight, in
better the calculation of the
a way which ﬁts the best his own aims. This is why the mode of variable weights MC
events is also available. The total integral, usually necessary for the proper normalization
of the MC sample is calculated using R = R′
. Foam provides both, the exact value of
w
h
the R′ and the MC estimate of the integral R.

w

w

i

i

h

i

2.6 Economic use of the computer memory

∼

∼

×

n) Bytes/cell. For n = 5 and 100k cells it is therefore

The actual implementation of the single cell object occupies about 80 Bytes (it could be
reduced to about 40 Bytes if necessary) of various integer and double precision attributes,
plus the dimension-dependent part. In the case of a simplical cell, each new cell adds
one n-component double-precision vector (vertex) and the total memory consumption is
therefore (80 + 8
15MB of the
memory, still an aﬀordable amount. For the hyperrectangle cells we have to count two
n) Bytes/cell. For the
n-component double-precision vectors per cell, that is (100 + 16
×
106 cells and n = 15 that would mean
340MB for the entire foam of cells and this could
be annoying. Fortunately, we have found a method of reducing substantially the memory
consumption for a hyperrectangular foam. As discussed in the Section 3 the geometry of
the division of the cell is fully determined in terms of two integers, one of them is the
index of an edge to which the division plane is perpendicular and another one deﬁnes the
position of a division plane. The position parameter is a rational number, and only the
integer numerator has to be remembered, while the denominator is common to all cells.
The above two integers deﬁne uniquely the position of the two daughter cells relative to
a parent cell. With this method the memory consumption is down to about 80 Bytes/cell
independently of n in the present implementation12. There is, however, a price to be
payed in terms of CPU time. For generation of the point inside cell, or even evaluation
of the weight, we need the “absolute” components of x, that is in the reference frame
of the root cell, not relative to vertices of the cell.
It is, therefore, necessary to use a
procedure (a method in the class of cells) which is able to construct the absolute position
of a given cell “in ﬂight”. This is done by means of tracing all grand-parents of a given
cell up to the root cell and translating position and size with respect to its parent into
absolute ones, relative to the root cell. It is implemented by means of exploiting the fact,
that cell objects are organized into a linked binary tree. The average number of the cells

12In fact, it can be reduced below 40 Bytes/cell, if really necessary.

12

20. This may cause

to be traced back from a given active cell up to the root cell for Nc = 106 cells is on the
average about ln2 Nc ∼
20% increase in the CPU time of the MC
∼
generation – an aﬀordable price, if we remember that the MC eﬃciency increases mainly
with the number of cells. In principle, this kind of the memory saving arrangement is also
possible for simplical cells, however, in this case the CPU time overhead would be bigger,
because of the necessity of the full linear transformation for each step, on the way from
a given cell up to the root cell. In the case of hyperrectangular cells the transformation
is much simpler (and faster); it is the translation and/or dilatation along a single spatial
direction at each step.

97

98

136

135

224

223

165

157

199 200

188
187

104

209

210

170

231

232

247

248

230

213

189

220

219

214

242

241

99

194
150

229

160

113

145146

171 172

121

179

235

236

94

139 140

127

117

144

143

205

206

78

70

203

204

109

197198

217

218

83

192
191

154
153

246

245

151

152

182

148

174

173

240

239

142

238

185186

130

196

195

216

234

233

115

243244

237

228
227

215

177

211212

161162

226

163 164

168

176

175

132

131
184
183

88
202
201
133

126

225

221 222

208
207

137

138

106

105

107

102

124

123

129

130

60

243244

141142

247248
7175 77
241242
197198
237238
119
231232
210
225226
99
219
207208
205206
203204
195196
187188
91
181
172
161
143144
123
111
109
199
167168

233234
104
221222
164

245246

173174

229230

118

159

227228

84

235236
132
223224
81
217218
127
215216
134
213214
87
211212
193
148
191192
114
183184185186
177178
115
165166
151
139
189190
179180
175176
125
169
155
153154
98
145
136
121

149150

239240
93

201202

107

137138

157

158

Figure 3: Inhibited cell division for ﬁrst variable, that is for x1 (right). Foam with 250 cells.

2.7 CPU time saving solution

Final MC eﬃciency is improved mainly by means of increasing the number of cells Nc.
Nsamp, where Nsamp is the number
n
The CPU time of the cell build-up is T
of MC events used in the exploration of each newly created cell. The important practical
question is: can one somehow reduce Nsamp without much loss of the ﬁnal MC eﬃciency,
in order to be able to increase Nc, within the same CPU time budget?

Nc ×

×

∼

A simple solution is the following: during the MC exploration of a new cell we con-
tinuously monitor an accumulated “number of eﬀective events with w = 1” deﬁned as
i , and terminate cell exploration when13 Nef f /nbin > 25, where nbin
Nef f = (
is the number of bins in each histogram, which is used to estimate the best division di-
rection/edge parameters. This method helps to cut total CPU time, because the increase

wi)2/

w2

P

P

13The actual limit of equivalent events per bin is the user deﬁned parameter, not necessarily equal 25.

13

of Nsamp is not wasted for cells, in which the distribution ρ(x) is already varying very
little. At the later stage of the foam evolution this happens quite often. In this method
the user may set Nsamp to a very high value and the program will distribute economically
the total CPU time (in terms of Nsamp) among all cells, giving more CPU time to these
cells which really need it, that is to cells with the stronger variation of ρ(x).

2.8

Inhibited variables – ﬂat dependence

In some cases the user may not want Foam to intervene into certain variables in the
distribution ρ(x), simply because there is little or no dependence on them in ρ(x). The
user may draw, of course, these variables directly from any uniform random number
generator. He may, however, ﬁnd it more convenient to get them from the Foam program.
This is easily implemented in Foam: any variable xi may be “inhibited” for the purpose
of cell splitting procedure. In the Foam code it is actually done in such a way that Foam is
excluding this variable (edge) from the procedure of determining the best binary division
of the cell. This provision makes practical sense mainly for the hyperrectangular part of
the variable subspace.

In Fig. 3 we show two 2-dimensional foam (250 cells) for the same testing distribution
ρ(x) (two Gaussian peaks on the diagonal). In one of them (right plot) we have inhibited
split in the ﬁrst variable, that is for x1.

2.9 Predeﬁned split points – provision for very narrow peaks

In the practical applications (see refs. [12, 13]) one may encounter in certain variables
extremely narrow spikes (narrow resonances). Foam exploration algorithm may ﬁnd it
diﬃcult to locate these spikes with the usual method of the MC sampling in the cells,
at the early stage of the Foam build-up. For very narrow spikes, or low number of the
requested cells, it may not ﬁnd them at all! The user usually knows in advance the
position of these spikes and the Foam should have a build in mechanism to exploit this
knowledge. The solution is very simple. (It applies for the hyperrectangular subspace of
the parameter space only.) The user of Foam has a possibility to provide Foam, for each
variable, with the list of a number of predeﬁned values the ﬁrst splitting positions of the
root cell. In the Foam algorithm, it is checked if the list of predeﬁned division points is
not empty. If it is the case, then instead adopting the division parameter from the usual
procedure described in Section 3, Foam takes the division parameter from the list, and
removes it from the list. In this way the ﬁrst few division points are taken from the “user
deﬁned menu”, if available, and the next ones are chosen with the usual methods. For
narrow spikes this method helps Foam to locate them and surround with as dense group
of cells as necessary.

In ﬁg. 4 we show an example with two Gaussian peaks in which we requested the Foam
program to use the three predeﬁned division points for the x1 variable. They are clearly
seen as three vertical division lines dividing the entire root cell. In this case peaks are
not so narrow and there is no real need for a predeﬁned division. The example is just

14

Figure 4: Predeﬁned division points at x1 = 0.30, 0.40, and 0.65, for 2000 cells.

illustrating the principle of the method.

2.10 Mapping of variables

If the structure of the singularities is known and/or Foam is unable get a reasonable
weight distribution for a reasonable number of cells, then it is worth to perform an ad-
ditional change of variables, such that the transformation Jacobian compensates for the
singularities, at least partly. In such a case the user subprogram provides Foam with the
distribution

ρ⋆(y) =

dρ
dy1 . . . dyn

= ρ(x1(y), x2(y), . . . ,n (y))

∂x(j)(y)
∂y

,

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

instead of the original ρ(x) = dnρ/dxn. For each vector y generated by Foam, the image
vector x is well known in the subprogram calculating ρ⋆(y). A mechanism for exporting
x to the outside world has to be usually provided, because Foam itself does not know
anything about x; it only knows y.

Note that in the limiting case of the of the “ideal mapping” we have

(3)

(4)

∂x(y)
∂y

R
ρ(x)

,

(cid:12)
(cid:12)
(cid:12)
(cid:12)

≡

(cid:12)
(cid:12)
(cid:12)
(cid:12)
15

consequently ρ⋆(y) = R and this case Foam would play merely a role of a provider of the
random numbers for y.

The user of Foam may also need to apply mapping in the case of a “weak” integrable
singularity in the distribution ρ like log(x) or √x. Foam can deal with them by brute
force, at the expense of a larger number of cells. However, a wiser approach is to apply
mapping, in order to remove such a singularities from the distribution.

In the next section we shall describe how to combine mapping method with the multi-
branching. Such a mixture is well known as the most powerful method of improving the
eﬃciency of the Monte Carlo method.

2.11 Provisions for the multibranching

In the following we elaborate on the various methods of implementing multibranching [14]
with help of Foam.

2.11.1 Single discrete variable

As a warm-up exercise let us consider the question: Is Foam capable to generate (and
sum-up) a discrete variable i = 1, 2, . . . , N according to the (unnormalised) distribution
r1, . . . , rN ? Of course it can. The simplest way is to deﬁne an auxiliary 1-dimensional
distribution

ρ(x) = ri,

for

,

i = 1, 2, . . . N.

(5)

i

1
−
N ≤

xi ≤

i
N

The user subprogram providing the above ρ(x) is trivial.
If plotted, this ρ(x) would
look like histogram with N equal-width bins. Foam will build up its own grid of cells
(intervals), and if we request enough number of cells (that is Nc > N), it will approximate
the above ρ(x) very well, with its own “histogram-like” distribution ρ′(x). However, the
Foam approximation will be never ideal, because Foam is not able to detect the exact
position of the discontinuities in ρ(x). (Nevertheless, this will be a workable solution with
a very good weight distribution.) The present Foam algorithm provides for an essential
improvement: one may predeﬁne the division points as xi = i/N, i = 1, . . . N, and set
In such a case Foam will deﬁne its cells matching
the number of cells to be Nc ≥
exactly the shape of ρ(x). It will generate points with w
1 and provide the exact sum
R = R′ =
ri, already at the end of the foam build-up. During the generation, Foam
will generate continuous variable x, which is easily translated into discrete index i.

N.

≡

P

2.11.2 Discrete and continuous variables

How the above extends to the case of the distribution ρ depending on one discrete variable
and the usual n continuous variables? For such a distribution ρ(y1, . . . , yn, i) we deﬁne

ρ(x1, x2, . . . , xn+1) = ρ(x1, . . . , xn, i),

for

,

i = 1, 2, . . . N,

(6)

i

1
−
N ≤

xn+1 ≤

i
N

16

in a completely analogy to Eq. (5). As previously, we provide for the variable xn+1 a list of
predeﬁned division points x(i)
n+1 = i/N, i = 1, 2, . . . N and, of course, we request for Nc >>
N. There is still one small problem: Foam may “by mistake” perform an unnecessary cell
division for variable xn+1, simply due to statistical errors in the “projection histogram”
described in Section 3.4.1. This problem is solved in Foam in an elegant way: in addition
to providing for xn+1 predeﬁned division points the user of Foam may declare xn+1 as
In this case Foam will still split
an “inhibited variable” in the sense of Section 2.8.
cells according to a list of predeﬁned division points for xn+1, but will not perform any
additional division in this variable! For the generated MC events the translation of the
continuous xn+1 to the discrete i is done as trivially as before. The above method is
the basic method of the implementation of the “multibranching” (or “multichannel”) MC
method using Foam. Let us call it “predeﬁned and inhibited division”, for short a PAID
method. We shall also describe below how to combine PAID method with mapping, etc.
In order to appreciate more fully the advantages of PAID, let us consider a more
straightforward implementation of the multibranching. In the object oriented environment
one may construct N instances of the Foam object, each of them for the n-dimensional
function ρ(x1, . . . , xn, i), initialize them (creating separate foam of cells) and generate
event (x, i) with the associated weight wi(x). Index i can be chosen according to proba-
bility pi = R′
i are provided by the i-th object of the Foam class (at the
i/
end of its initialization). The total weight of the event is w(x, i) = wi(x)/pi. Let is call
this scenario an “externally organized multibranching”, for short EOM.

j, where R′

j R′

P

Both methods have certain advantages and disadvantages. In PAID the user does not
need to organize the optimal/eﬃcient generation of the branching index i. The root cell
is divided into N equal size sub-root cells, which then evolve separately into independent
system of the cells, adapting individually to the singularities in the i-th component of ρ.
Foam adjusts relative importance of the sub-root cells and their descendants, and ﬁnds
the optimal number of the division cells in the N sub-foams within the requested total
memory limit.
In the EOM scheme these adjustments for the individual branches has
to be done by the user. On the other hand, in some rare cases, the user may want to
conﬁgure the Foam objects for each branch individually. In the EOM scheme it can be
done, for each Foam object separately. In the PAID scheme it cannot be done, because
all cells have the same properties, the cell split algorithm is the same, cell geometry is
common, etc. In most cases, the PAID method will be preferred, because it is easier to
organize.

In the following we shall concentrate on the PAID scheme. In this case, the normaliza-
tion integral is provided by the Foam at the end of the exploration phase, and it includes
the sum over discrete variable

(7)

N

R′ =

i=1 Z
X

i(x)dxn.
ρ′

17

We also have the usual relation between the average weight and the integral

R =

ρ(x)dxn = R′

w

.

i

h

N

i=1 Z
X

The above method extends trivially to the case of several discrete variables. As already
i(x)dxn in the
ρ′
stressed, the relative probabilities of the discrete components pi ∼
MC generation are automatically adjusted by the Foam algorithm, such that the maximum
weight or the total invariance is minimized. The arranging for that in the user program
in the EOM scheme would require an extra programming eﬀort, while in Foam this comes
for free.

i =

R′

R

2.11.3 Multi-layer method

There is an alternative PAID-type method of dealing with the problem of the discrete
variable, which generates points according to ρ(x1, . . . , xn, i),
It will
produce the same distribution but will diﬀer from PAID in the MC eﬃciency, in terms
of the maximum weight or variance. One may simply generate with help of Foam the
n-dimensional auxiliary distribution

i = 1, 2, . . . N.

¯ρ(x1, . . . , xn) =

ρ(x1, . . . , xn, j)

N

j=1
X
and next, for each generated x, chose randomly discrete variable i according to the prob-
ability

(8)

(9)

(10)

pi(x) = ρ(x, i)/

ρ(x, j).

n

j=1
X

Let us call it PAID∗, or a multi-layer method. This method is slightly less convenient
to implement, as is clearly seen for n = 0, where the user eﬀectively has to generate the
discrete variable i = 1, 2, . . . , N according to the above probability by himself, by means
of creating an inverse cumulative distribution, mapping random number into i, etc., while
in the standard PAID scenario this all job is done by the Foam program14. Furthermore, in
PAID method each component distributions ρ(x, j) may have a “cleaner” structure of the
singularities then the sum. Consequently, in the PAID method Foam will probably ﬁnd it
easier to learn the shape of each component distribution than of the sum in PAID∗. These
two kinds of equivalent multibranching algorithms like PAID and PAID∗ are described
and analysed in Ref. [14]. PAID∗ method is used in the KKMC generator of Ref. [13] to
generate index i numbering type of the ﬁnal state quark or lepton.

14The mapping xn+1

i is a simple arithmetic operation.

→

18

2.11.4 Multibranching and mapping

However, the most important reason setting up Foam according to PAID scenario, with
the separate foam build-up for each component distributions ρ(x, j), is that for each
component one may apply individually adjusted mapping of variables, which makes every
component distribution much less singular. The combination of the mapping and multi-
branching is one of the most powerful known methods of improving MC eﬃciency [14,15].
How it can be actually realized with help of Foam, depends on the properties of the dis-
tribution ρ(x) to be generated.
In the case when we have an explicit sum over many
components

N

ρ(x1, . . . , xn) =

ρ(x1, . . . , xn, j),

(11)

j=1
X
each of the components being positive, with distinctly diﬀerent and well known structure
of the singularities, we would recommend the use Foam in the PAID scheme. Knowing
the structure of singularities, we may be able to introduce mapping in each component
separately, which compensates for these singularities with the Jacobian factor. In such a
case Foam is provided with the following distribution:

ρ(y1, . . . , yn, j) = ρ(x(j)

1 (y), . . . , x(j)

n (y), j)

, j = 1, 2, . . . , N,

(12)

understanding that the translation of the discrete index j into a continuous variable yn+1,
is done in the usual way. The foam of cells is, of course, build-up in the y-variables,
diﬀerent for each j-th branch. The user is fully responsible for the proper mapping
x(j)(y), j = 1, 2, . . . , N, and the calculation the Jacobian factor in every component
(branch). In the user subprogram providing the ρ-distribution the variable yn+1 will be
translated ﬁrst into index j and then, depending on the value of j, a given type of a
mapping will be applied. For the outside part of the code the index j can be made
available, or it may be hidden (erased from the record), depending on the needs of a
speciﬁc application.

In some cases, however, we do not have at our disposal an unique split of the ρ(x) into
well deﬁned positive components like in eq. (12), but rather only a rough idea about the
leading singularities. That means, one is able to construct the distribution

∂x(j)(y)
∂y

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

ρ(x1, . . . , xn)

¯ρ(x1, . . . , xn) =

¯ρ(x1, . . . , xn, j),

(13)

∼

where ¯ρ(x, j) have the same type of the leading singularities as ρ(x), and we know the
normalization of singularities in ρ(x) up to a constant factor; that is for x in the neigh-
bourhood of the j-th singular point, a line or a (hyper)plane, only ¯ρ(x, j) really matters,
that is ρ(x)

Cj ¯ρ(x, j) where Cj is not known a priori15.

15This deﬁnition is not very precise, it roughly means that each component is approximately a product

≃

of the singular factors and cannot be reduced into sum of such.

N

j=1
X

19

In addition, let us assume, that we are able to compensate for the singularities in each
¯ρ(x, j) exactly by dedicated mapping speciﬁc to singularities in the j-th branch. In other
words, the mapping is ideal in each branch:

∂x(j)(y)
∂y

=

¯Rj
¯ρ(x, j)

.

(14)

(cid:12)
(cid:12)
(cid:12)
The above means also, that we know analytically the exact values of the integrals16:
(cid:12)
¯Rj =

¯ρ(x, j)dxn.

(cid:12)
(cid:12)
(cid:12)
(cid:12)

In such a case we may employ the algorithm of Foam successfully by means of deﬁning

R

the “branching ratio”

bj(y1, . . . , yn) = ¯ρ(y1, . . . , yn, j)/¯ρ(y1, . . . , yn),

bi(y) = 1,

(15)

constructing the distribution to be digested by Foam as

ρ(y1, . . . , yn, j) = bj(x)ρ(x(j)

1 (y), . . . , x(j)

n (y))

(16)

X

(cid:12)
(cid:12)
(cid:12)
(cid:12)

∂x(j)(y)
∂y

=

¯Rj ρ
l ¯ρ

,

x(y)
x(y), l
(cid:1)
(cid:0)
(cid:1)
(cid:0)

P

(cid:12)
(cid:12)
(cid:12)
(cid:12)

and proceeding as in the PAID scheme described previously.

≃

∼

−

The role of the function bj(x) is to isolate out from ρ(x) “a layer” including just one
known type of singularity. In order to see how this method works, let us consider the j-th
singularity being a δ(n)(x
a) shape (narrow Gaussian peak etc.) of the size ǫ. Then,
Cj ¯ρ(x, j), while further
in the neighbourhood of the singularity bj(x) = 1 and ρ(x)
ǫn, and is negligible. The Foam program will,
away from the singularity position ρ(x)
of course, include the Cj factor properly in the normalization, and build up the foam of
cell everywhere, close to a singularity and far away. It will do it, however, not in the x
y (speciﬁc to j-th branch) will
variables but in the y-variables. Now, the mapping x
(1), while the y-image of the remaining
expand the singularity neighbourhood to size of
(ǫ). This can be a source of the following
space will be shrinker down to a size of
(ǫ), in the places where the other
pitfall to be remembered: in the shrinked y-domain of
singularities i
(1),
(ǫn). Nevertheless, the Foam
such that their integral contribution will be negligible, of
algorithm may ﬁnd it diﬃcult to locate these structures, and this may lead to a small but
ﬁnite bias of the generated distributions and calculated integrals. One should keep this
in mind and perform special tests (MC runs with a maximum number of cells, and high
MC statistics) in order to check that this eﬀect is not present.

= j are placed, ρ(y, j) may get narrow spikes or dips of the height of

→

O

O

O

O

O

The above method is quite similar to that of Ref. [15]. One diﬀerence is that in method
of Ref. [15] there are several iteration with the aim at adjusting the relative normalization
of the components ¯ρ(x1, . . . , xn, j) to ρ(x). Our scheme could be eﬀectively regarded as a
method of Ref. [15] with just one iteration; that is the ﬁrst step being the foam build-up,
and the second step (1st iteration) being the MC simulation. One iteration is suﬃcient in
the limit of vanishing overlap of the components ¯ρ(x1, . . . , xn, j) in the entire ¯ρ(x). While

16In fact, we could normalize ¯ρ(x, j) to unity, ¯Rj = 1, if we wanted.

20

6
in the method of Ref. [15] a better adjustment is provided by the next iterations, in Foam
the cellular adaptive method provides an extra mileage. One cannot therefore say which
one is better in general – it depends on the distribution ρ(x).

In fact, in the PAID scheme with the mapping, extra iterations are also possible. It
can be done as follows: (a) read Rj from all N “leading cells” after the foam build-up,
(Rj/ ¯Rj)¯ρ(y1, . . . , yn, j) and (c) repeat the foam build-up17
(b) rescale ¯ρ(y1, . . . , yn, j)
for the new branching ratios bj(x) in eq. (16). The above procedure can be repeated.
Whether such an iteration is proﬁtable it depends on the particular distribution – we
expect that in most cases it is not necessary, due to adaptive capabilities of Foam.

→

Last not least, let us also consider the case of a sum of integrals with diﬀerent dimen-
sionality, or in other words, the distribution in which the number ni of the continuous
variables x1, ..., xni depends on a certain discrete “master variable” i = 1, ..., N (for ex-
ample ni = i)

R =

ρi(x1, ..., xni)

(17)

N

i=1 Z
X

Foam can deal with this case too. The simplest solution is to ﬁnd the maximum dimension
nmax and add extra dummy variables on which ρi does not depend, such that formally
all sub-distributions have the same dimension nmax. In this way one is back in a situa-
tion described earlier, and may apply the PAID method, with or without the additional
mapping. The slight drawback of this solution is that in the present implementation of
Foam we cannot inhibit the unnecessary cell divisions across the directions of the newly
introduced dummy variables – simply because they are not the same in all branches18.
Because of that, this kind of a problem can be in some cases dealt with more eﬃciently
using EOM scenario, with a separate Foam object for each branch.

For additional practical examples on how to realize multibranching with Foam, see

Section 6.

3 Cell split algorithm and geometry

As already indicated, our algorithm of the cell split covers two strategies: (A) minimization
of the maximum weight wmax and (B) minimization of the variance σ, where both wmax
and σ are calculated in the Monte Carlo generation, using the MC weight w = ρ/ρ′. The
distribution ρ′ is the result of the exploration (it is constant over each cell) and is frozen at
the end of exploration. During the subsequent MC event generation, events are generated
ρ′(x)dnx has to be known exactly before the start
according to ρ′(x). Its integral R′ =
ρ(x)dnx is obtained up to a statistical error at
of the MC generation. The integral R =
the end MC event generation from the usual relation to the average weight: R = R′
iρ′.
R
The average

R
iρ′ is over events generated according to ρ′.
...

17In the programming with Foam it is possible to erase all cells from memory and rebuild them.
18A more sophisticated procedure of inhibiting the division could be implemented in Foam, if there is

w

h

h

a strong demand for that.

21

There is another important ingredient in the algorithm of the cell split:

in addition
to the auxiliary distributions ρ′(x) we also deﬁne another distribution ρloss(x) related
to integrand ρ(x). The important role of the distribution ρloss(x) is to guide the build-
ρlossdnx is minimized in the process –
up of the foam of cells; the function Rloss =
its value is decreasing step by step, at each the cell split. Obviously, both ρloss(x) and
ρ′(x), are evolving step by step during the foam build-up. Once the division process is
ﬁnished, the distribution ρloss(x) is not used anymore; MC events are generated with
ρ′(x). Nevertheless, ρloss(x) is strongly related to the properties of the weight distribution
in the MC generation phase.

R

(A) In the case when our ultimate aim is to minimize wmax we deﬁne

(18)

(19)

ρ′(x)

max
y∈CellI

≡

ρ(y),

for x

CellI ,

Rloss =

dnx [ρ′(x)

ρ(x)] =

dnx ρloss(x).

Z

−

∈

Z

The distribution ρloss is the diﬀerence between the “ceiling distribution” ρ′ and the actual
distribution ρ from which it is derived. The rejection rate in ﬁnal MC run is just propor-
tional to the integral over the loss distribution ρloss(x) by construction, i.e. the rejection
rate= Rloss/R. (This justiﬁes the name “loss”.) The distribution ρloss(x) has also a clear
geometrical meaning, see below.

(B) In the case when we do not care so much about the maximum weight and the
rejection rate but rather we want to minimize the ratio of the variance to average of the
weight, σ/

, in the ﬁnal MC generation, then we are led to the following deﬁnition:

w

h

i

ρ′(x)

≡
ρloss(x)

ρ2

h

iI,
ρ2
h

for x
iI,
ρ

iI − h

p
≡

∈

CellI ,

for x

CellI.

∈

h

iI is over the I-th cell; see Appendix A for a detailed derivation of the
...
The average
above prescription. The ratio σ/
in the ﬁnal MC generation is a monotonous ascending
ρloss(x)dxn, see Appendix A. Consequently, minimization of Rloss
function of the Rloss =
is equivalent to minimization of σ/

w

w

i

h

.

p

R

h

i

3.1 Rules governing binary split of a cell

The basic rule governing the development of the foam of cells are the following:

(a) For the next cell to be split we chose a cell with the biggest19 Rloss.

(b) Position/direction of a plane dividing a parent cell into two daughter cells ω

ω′ + ω′′ is chosen to get the largest possible decrease ∆Rloss = Rω

→
loss.
19In the Foam code there is also an option of choosing randomly the next cell to be split, according to

loss −

loss −

Rω′′

Rω′

probability proportional to Rloss, instead of a cell with the largest Rloss.

22

How the split of a given cell into two daughter cells in step (b) is done in practice? The
method relies upon a small MC exercise within a cell, in which a few hundreds of events
are generated with a ﬂat distribution. They are weighted with ρ and projected onto k
(hyperrectangular case) or n(n + 1)/2 (simplical case) edges of the cells. In the mixed case
of cell being the Cartesian product of a k-dimensional hyperrectangle and n-dimensional
simplex, there are k + n(n + 1)/2 projections/edges. Resulting histograms are analysed
and the best “division edge” and “division hyperplane position” are found – this one for
which the estimate (forecast) of the ∆Rloss is the biggest. In the actual Foam algorithm,
each new born cell is immediately explored, its Rloss, R and R′ are calculated, and the
best candidate of the direction and position of the dividing plane are established and
memorized, as the attributes of the cell, see below for details. In this way, every newly
created cell is ready for an immediate binary division.

3.2 Geometry of binary split of a cell

P a r e n t

  s i m p l e x

(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
g
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)

u
a
d a u g h t e r   2

h t e

r   1

d

i

j

new vertex

(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)

Parent cell

daughter 1

division plane

(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)

daughter 2

Figure 5: Geometry of the split of the 3-dimensional cell being simplex or hyperrectangle.

In Fig. 5 we show a 3-dimensional cell being a simplex or a hyperrectangle and we

visualize the geometry of their split.

Let us describe ﬁrst the split of the n-dimensional simplical parent cell into two daugh-
ter cells. In the case of the simplical cell [1] we need to know which of n(n + 1)/2 edges
deﬁned by any pair of vertices of a given simplex is used in the split. Suppose that it is
an edge deﬁned by a pair of indices (i, j), i
= j, where i, j = 1, 2, ..., NV , of the vertices
(~VKi, ~VKj ), see Sect. 2.4 for the method of numbering of the vertices. A new vertex VNV +1
is put somewhere on the line (edge) in between the two vertices

VNV +1 = λ~VKi + (1

λdiv)~VKj , 0 < λdiv < 1,

−

(20)

where the division parameters λdiv is determined using an elaborate procedure described
NV + 1. With the new
later in this section, and the number of vertices is updated NV →

23

6
vertex two daughter simplices are formed with the following two lists of vertices (their
pointers):

(K1, K2, ..., Ki−1, (NV + 1), Ki+1, ..., Kj−1, Kj, Kj+1, ..., Kn, Kn+1),
(K1, K2, ..., Ki−1, Ki, Ki+1, ..., Kj−1, (NV + 1), Kj+1, ..., Kn, Kn+1).

(21)

For the k-dimensional hyperrectangular cell deﬁned with a pair of the vectors (~q,~h)
we decide ﬁrst about the direction of the division plane. Assuming that the division plane
is perpendicular to i-th direction the two daughter cells (a) and (b) are deﬁned with the
two pairs of the new vectors as follows:

~q(a) = (q1, q2, . . . , qk),
~q(b) = (q1, . . . , qi−1, qi + hiλdiv, hi+1, . . . , qk),

~h(a) = (h1, h2, . . . , hi−1, hiλdiv, hi+1, . . . , hk),

~h(b) = (h1, . . . , hi−1, hi(1

λdiv), hi+1, . . . , hk).

−

(22)

The 3-dimensional case of the simplical and hyperrectangular cell split made in this

way is illustrated in Fig. 5.

(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)

(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)

X

i

-1

j

X proj

4

(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(3,4)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)

(2,4)

(1,4)

1

3

2

(2,3)

(1,2)

Figure 6: Geometry of the split of the 3-dimensional simplex cell.

3.3 Projecting points into an edge

Before we describe the determination of the division edge and of the division parameter
λdiv let us still discuss certain geometric aspect of the Foam algorithm – that is how we
project a point ~x inside a cell onto one of the edges of the cell. In the case of a simplex
the edges are numbered by the pair of indices (i, j), i > j, which number edges spanned
by a pair of vertices20 (~VKi, ~VKj ), while in the case of the hyperrectangle the i-th edge
is spanned by the pair of vectors ~q and ~q+ = (q1, . . . , qi−1, qi + hi, . . . , qn). The point
(0, 1).
x inside a cell is projected into the edge and parametrized using parameter λ
20As explained in Sect. 2.4, numbering of vertices is done using pointers Ki to the elements of the array

∈

of vertices.

24

l
l
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)

X

(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)

-1

projX

(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
3
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)

(2)

2

1

(1)

(3)

Figure 7: Geometry of the split of the 3-dimensional hyperrectangular cell.

Parameter λ will be used to deﬁne an auxiliary projection dρ/dλ for each edge in the
following subsection. In particular we have to know how to evaluate λ in an eﬃcient way.
In the case of a simplex cell we have:

~xproj = λ~VKi + (1

λij)~VKj , 0 < λij < 1,

−

where

λij(~x) =

Deti|
+
|

|
Deti|

,

Detj|
Deti = Det(~r1, . . . , ~ri−1, ~ri+1, . . . , ~rn, ~rn+1),

|

Detj = Det(~r1, . . . , ~rj−1, ~rj+1, . . . , ~rn, ~rn+1),

~rj = ~VKj −

~x,

and Det(x1, x2, ..., xn) is determinant. The case of a hyperrectangular cell is much simpler:

λi = (xi −

qi)/hi.

Obviously, due to time consuming evaluation of the determinants at higher dimensions,
the above projection procedure will be much slower for simplices than for hyperrectangles.
In Fig. 6 we illustrate projection procedure into six edges for the 3-dimensional simplex

and in Fig. 7 the case of the three edges of the 3-dimensional hyperrectangular cell.

3.4 Determination of an optimal division edge and of λdiv

Our aim is to ﬁnd out which division plane, that is cutting through which edge, provides
the best gain of the total integral Rloss, summed over two daughters, as compared to
the parent cell. In order to do that, ﬁrst we analyse all possible division planes, for all
edges, and ﬁnd out the best one, in terms of the gain in Rloss. In other words, we go
through all edges (k edges for hyperrectangle and/or n(n + 1)/2 for simplex), for each
edge we ﬁnd out the best parameter λdiv and the corresponding best gain in Rloss. Then,

(23)

(24)

(25)

25

l
l
1.00

dρ
dλ
0.75

0.50

0.25

0.00

Parent ρ′

Parent ρ′

New

Parent Rloss

Parent Rloss

0.25

0.50

λ

0.75

0.25

0.50

λ

0.75

1.00

0.00

1.00

⋆

New ρ′

New Rloss

Figure 8: Projection histogram. The case of optimizing the maximum weight.

we compare between the gains in Rloss for all edges and deﬁne the optimal edge as the
one with the best gain in Rloss. The procedure of ﬁnding the best λdiv is essentially the
same for simplical and hyperrectangular cells – on the other hand, there is a diﬀerence in
the algorithm of ﬁnding the best λdiv between the cases of optimization of the maximum
weight and of the variance, see the following discussion.

3.4.1 Optimization of the maximum weight – choosing λdiv

∈

−

Let us consider ﬁrst the case of ﬁnding the best λdiv for Rloss corresponding to optimization
of the maximum weight. The 1-dimensional case is a good starting point. The cell in this
case is just an interval (q, q + h) and λ = (x
q)/h. In the left part of the Fig. 8 we
see a histogram with Nb bins, made of 1000 events generated inside a cell (interval) using
the weight w = ρ(x), that is the histogram represents approximately the distribution
dρ/dλ, λ
(0, 1). This distribution (histogram) peaks close to lower edge. The function
ρ′(x) = maxx∈Cell ρ(x) is constant over the cell and is depicted as an upper horizontal
line marked “Parent ρ′”. The contribution of this particular (parent) cell to Rloss =
ρ(x))dx is easily recognized as an area between the line marked
cell ρlossdx =
“Parent ρ′” and the histogram line. If we have stopped the exploration at this stage, with
R
this parent cell, then in the MC run points would be generated with the ﬂat “Parent ρ′”
and the weight would be w = ρ(x)/ρ. Turning weighted events into unweighted by means
accepting r < w events and rejecting r < w, where 0
1 is an uniform random
number, would correspond to generating points (λ, r) within rectangle below “Parent ρ′”
line, accepting all points which are below the histogram line and rejecting points above
the histogram line in the area marked “Parent Rloss”. This justiﬁes the subscript “loss”.
1 end-points λ = q + ih/Nb,

The best cell division is found by examining all Nb −

cell(ρ′(x)
R

−

≤

≤

r

1.00

dρ
dλ
0.75

0.50

0.25

26

i = 1, 2, ..., Nb −
1 of the bins in the histogram, as a possible candidate for the division
point (plane in two and more dimensions) between the two daughter cells, and choosing
the best one. In the right part of the Fig. 8 we have marked such a candidate division
point with a star. For a given division point, we determine for two daughter cells the
new “ceiling function” ρ′; in Fig. 8 it is line marked “New ρ′”. For each daughter cell we
evaluate Rloss. The summary Rloss for both daughter cells is easily recognized as an area
between the line marked “New ρ′” and the histogram. Of course, we get automatically
the new total Rloss smaller than for the original parent cell! This procedure is repeated
for all possible j = 1, 2, ..., Nb −
1 division points and each time we record the net gain in
Rloss,daughter2. For the actual best division point we
∆jRloss = Rloss,parent −
chose the division point with the largest gain ∆jRloss. In Fig. 8 the star marks the best
division point.

Rloss,daughter1 −

1
✉

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

0
(cid:0)
(cid:0)
✉

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

2

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

4

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

3
✉
✆(cid:0)
(cid:0)
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
✆
4
✆
✆
✆
✆
✉

2
✉

3

Figure 9: Two dimensional ρ(~x) (left) and the geometry of the ﬁrst three simplical cells (right).
Inside the area marked by dashed line ρ(~x) = 0.

Let us now consider the 2-dimensional distribution ρ(x) depicted in the left part of
Fig. 9, which is nonzero within the narrow strip along four edges of the rectangle.
In
the simplical mode Foam divides starting n-dimensional hyperrectangle into n! simplices
– in this case into 2 triangles. We concentrate on the division procedure of the lower
triangle, see the right part of Fig. 9. In the exploration of this triangular cell we use 1000
MC points and project them onto 3 edges. The corresponding 3 histograms are shown in
Fig. 10, where the middle histogram represents the projection onto the diagonal – this is
why it features two peaks distinct at the ends. In all three plots we have also drawn the
curve for ρ′(x) for the best hypothetical split. The most promising split in terms of the
gain in Rloss turn outs to be related to the middle plot and is marked in the right part of

27

1:000

1:000

1:000

dN

dN

dN

(cid:21)

(cid:21)

(cid:21)

0:750

0:750

0:750

0:500

0:500

0:500

0:250

0:250

0:250

0:000

0:000

0:000

0:250

0:500

0:750

1:000

0:250

0:500

0:750

1:000

0:250

0:500

0:750

1:000

(cid:21)

(cid:21)

(cid:21)

Figure 10: Distributions used in construction of λdiv in the case of optimizing the maximum weight.

≤

≤

i < j

Fig. 9. The reader may notice that the ρ′(x) in the middle plot of Fig. 10 is not of the
type discussed above, because it has two discontinuities instead of one. This is because in
Foam we have introduced certain reﬁnement of the algorithm of ﬁnding an optimal λdiv.
One may easily notice that the algorithm described above could not locate correctly the
drop in the distribution dρ/dλ of the middle plot, because there are two equally strong
peaks at the end of this distribution21.
In the improved version of the algorithm the
search of the optimal λdiv uses all pairs of the bin edges (λi, λj) = (q + ih/Nb, q + jh/Nb),
Nb. For every pair (i, j) a new ceiling function ρ′(x) is determined such that
0
it is unchanged outside the subinterval (λi, λj) and is “majorizing” the histogram bins
inside this subinterval. Once we ﬁnd out the best pair (i, j) in terms of Rloss, then we take
either λi or λj as a division point λdiv (at least one of them is not equal 0 or 1). In the case
of two or more peaks in dρ/dλ the resulting division point λdiv happens to be close to one
of the edges of the gap between the two peaks. This feature prevents the Foam algorithm
(at least partly) from placing a new division plane across a void in the multidimensional
distribution ρ(x). In other words such a void will “repel” the division planes from the
voids. In the case of the double peak structure of the middle plot of Fig. 10, the improved
algorithm will of course allocate big value of Rloss to a new cell (interval) which includes
the gap. In the next step of the foam build-up this cell (interval) will have big chance
to be split, and for this split the position of the split point will be located at the second
edge of the gap. This is exactly what we need for an eﬃcient foam evolution.

3.4.2 Optimization of the variance – choosing λdiv

Let us consider now the case of ﬁnding out the best λdiv for Rloss corresponding to opti-
mization of the variance. The strategy is again to choose λdiv minimizing Rloss. In Fig. 11
we illustrate our algorithm on the example of the three projections of the triangular cell.
The three projections correspond to a triangular cell in two dimensions. (We do not spec-
ify ρ(x), as it is irrelevant for the purpose of our explanation.) In the upper row of three
plots in Fig. 11 we show as a horizontal line the value of the distribution ρloss =
(it

ρ2

21 The algorithm would pick up λdiv in a random point between the two peaks.

h

i

p

28

0.1

0.2 0.3 0.4

0.5 0.6

0.7 0.8

0.9

1

0.1 0.2

0.3 0.4

0.5 0.6

0.7 0.8

0.9

1

0.1 0.2

0.3 0.4

0.5 0.6

0.7 0.8

0.9

1

5

4

3

2

1

0
0

2.5

1.5

2

1

0.5

0
0

6

5

4

3

2

1

0
0

2.5

1.5

2

1

0.5

0
0

3.5

2.5

4

3

2

1

1.5

0.5

0
0

2.5

1.5

2

1

0.5

0
0

0.1

0.2 0.3 0.4

0.5 0.6

0.7 0.8

0.9

1

0.1 0.2

0.3 0.4

0.5 0.6

0.7 0.8

0.9

1

0.1 0.2

0.3 0.4

0.5 0.6

0.7 0.8

0.9

1

Figure 11: Distributions used in construction of λdiv in case of optimizing the variance.

h

i

h

ρ2

ρ2

p

p

ρ
i

i − h

is the same for all 3 projections). The solid histogram is the distribution dρ/dλ and the
dashed histogram is the distribution dρloss/dλ calculated bin by bin using
, treating
every bin as a separate cell. The properly normalized diﬀerence of the above two distri-
butions
is plotted separately as the dashed histograms in the lower row of
the three plots in Fig. 11. The horizontal line for the total ρloss is shown once again there.
The histogram of dρloss/dλ gives us an idea where the biggest source of the variance is
located and our aim is to “trap” it properly with an intelligent choice of λdiv. We follow
a similar algorithm as in the case of the maximum weight minimization, namely we loop
over pairs of the bin edges (λi, λj) = (q + ih/Nb, q + jh/Nb), 0
Nb, and for every
pair we calculate Rloss inside the interval (λi, λj) and outside this interval. We ﬁnd out
Rloss,Outside. In
which (i, j) provides the biggest gain ∆ijRloss = Rloss,parent −
the lower row of the plots in Fig. 11 we show as a solid line the distribution of Rloss for
the best pair (i, j). Depending on the peak structure, at least one of the division point,
of the optimal pair (λi, λj) is diﬀerent from zero or one, and we take this one as λdiv.
In Fig. 11 the chosen λdiv are marked with the black triangles. The above procedure is
done for each edge and the best ∆ijRloss is used as a guide to deﬁne an edge for which
the next cell division will be executed. The information about the best edge and the best
division point λdiv is recorded in the cell object. As seen in Fig. 11, λdiv tends to fall
at the position where dρloss/dλ drops or increases sharply. Note that since the division
point is always at the edge of the bin, it is therefore a rational number, λdiv = j/Nb.
This has interesting consequences, since the number of the bins Nb is ﬁxed, it is therefore

≤
Rloss,Inside −

i < j

≤

29

enough to memorize this integer index j (2 Bytes) together with the integer index of the
division cell edge (also 2 Bytes) as an attributes of the cell, in order to deﬁne fully and
uniquely the geometry of the division of the cell! See Section 2.6 for more details how
this is exploited to save computer memory needed to encode the entire foam of cells.

3

u

4

3

4

4

3

(cid:8)
(cid:8)

?

(cid:8)
(cid:8)

(cid:0)
(cid:0)

u

b
b

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:0)
(cid:0)

b

b

b

b

(cid:8)
(cid:8)

b

b

(cid:8)
(cid:8)

(cid:0)
(cid:0)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:0)
(cid:0)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:0)
(cid:0)

(cid:8)
(cid:8)

(cid:0)
(cid:0)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

b

b

b

b

b

b

b

b

b

b

b

b

b

b

53

b

b

14

(cid:8)
(cid:8)

h
h

?

?

a
a

h
h

h
h

b
b

h
h

a
a

h
h

(cid:8)

(cid:8)

(cid:0)
(cid:0)

h
h

b

b

a
a

h
h

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:0)

(cid:0)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:0)

(cid:0)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:0)

(cid:0)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:0)

(cid:0)

6

(cid:0)
(cid:0)

(cid:8)
(cid:8)

(cid:8)

(cid:8)
(cid:8)

(cid:0)
(cid:0)

(cid:8)

E
E

A

(cid:0)

22

!

22

!

87

(cid:0)
(cid:0)

?

39

(cid:8)
(cid:8)

(cid:0)
(cid:0)

!
!

a
a

(cid:0)

(cid:17)
(cid:17)

!

(

(

a

a

u

10

`
`

214

b

b

b

b

b

b

29

(
(

(
(

b

u

(
(

b

(
(

b

(
(

b

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(
(

(
(

(
(

(
(

52

b

b

b

b

b

12

44

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

?

(cid:8)

(cid:8)

(cid:8)

13

(
(

(
(

37

(
(

(
(

(
(

(
(

(
(

`
`

?

`

`

`

`

`

`

P
P

`

`

P
P

`

`

P
P

69

`

`

`

`

31

P
P

68

(cid:8)

(cid:8)

A
A

`

`

`

u

`

P
P

`

`

P
P

!
!

`

`

(cid:8)

(cid:8)

(cid:8)

(cid:8)

A

A

57

!
!

!
!

!
!

56

`

P
P

`

`

`

`

20

P
P

17

(cid:8)

(cid:8)

`

`

`
P
`
P

(cid:8)

(cid:8)

(
(

(
(

!

?

(cid:8)

(
(

?

a
a

(
(

Q
Q

b

B
E
EB

b

28

(cid:8)

(cid:8)

b
b

(cid:8)

u
(cid:8)

(cid:8)

?

(cid:8)

B
B

E
E

B
B

E
E

B
B

B
B

58

A

A

50

E
E

(cid:0)

(cid:0)

!
!

a
a

A

(
(

(cid:0)

!

Q
Q

B
B

(
(

(cid:8)

(
(

!

A

E
E

!
!

(
(

(
(

(
(

(
(

(cid:8)

!

a
a

Q
Q

a
a

!
!

(
(

(
(

!
(
!
(

(
(

(cid:8)

!

(cid:8)

!

(cid:8)

!

!

(cid:8)

!

(cid:8)

!

(cid:8)

29

!

(cid:8)

!

(cid:8)

!

(cid:8)

!

6

(cid:8)

!

Q
Q

45

a
a

Q
Q

a
a

32

(cid:0)

A

B
B

a
a

A

E
E

19

(cid:0)

A

B
B

(cid:0)

59

a
a

A

u

Q
Q

E
E

B
B

Q
Q

25

A

A

Q
Q

A

E
E

A

Q
Q

?

(cid:0)

E(cid:0)

T
TE

B
B

(cid:0)
u

(cid:0)

E
E

T
T

A

E
E

(cid:0)

(cid:0)

A

E
E

Q
Q

T
T

(cid:0)

8
5

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:8)
(cid:8)

(cid:0)
(cid:0)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

10

(cid:0)
(cid:0)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

6

(cid:8)
(cid:8)

?

(cid:0)
(cid:0)

(cid:0)
(cid:0)

(cid:0)
(cid:0)

8
5

(cid:0)
(cid:0)

e
e

(cid:0)

(cid:0)

e
e

(cid:0)

(cid:0)

e
e

(cid:0)

(cid:0)

e
e

(cid:8)
(cid:8)

u
u
(cid:0)
(cid:0)

!
(cid:8)

Q
E
A
Q
A
E

(cid:0)
(cid:0)

e
e
a
a

u

E
A
Q
E
Q
A

(cid:0)

Q

?

?

h
h

?

?
?

?
?

T
T

32

(cid:0)
e
e(cid:0)

C
C

(cid:12)(cid:0)
(cid:0)

(cid:12)

eD
D
e

4

(cid:0)

(cid:0)

e
e

(cid:0)

(cid:0)

(cid:12)

(cid:12)

D

E
e
eE

u
u

C

E
e
eA
AE

(cid:0)

(cid:0)

e
e

22

(cid:0)

(cid:0)

(cid:12)

(cid:12)

(cid:0)

(cid:0)

e
e

C
C

(cid:0)

(cid:0)

(cid:12)

(cid:12)

T
T

D

u

T
T

204

(cid:0)

(cid:0)

(cid:0)

(cid:2)
(cid:2)

(cid:12)

(cid:12)

C

(cid:3)
(cid:3)

e

e

(cid:0)

B
B

11

(cid:0)

(cid:0)

e
e

(cid:0)

(cid:0)

(cid:0)

(cid:0)

e
e

e
e

(cid:0)

(cid:0)

e
e

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

7

u
(cid:0)

(cid:0)

h
h

h
h

h
h

h
h

h
h

(cid:0)

h
h

h
h

h
h

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

1

(cid:0)
u
(cid:0)

8

e
e

C
C

l
l

C
C

l
l

C

(cid:0)

(cid:12)

,

e
e

,
u

T
T

T
T

23

23

T
T

T
T

,

D

,

e
e

?

?

(cid:0)

(cid:0)

(cid:2)
(cid:2)

L
L

e

e

e
e

C
C

e
e

l
l

l
l

(cid:0)

(cid:19)
(cid:19)

105

T
T

(cid:1)
(cid:1)

T
T

e
e

e
e

e
e

(cid:0)

(cid:0)

(cid:0)

(cid:0)

l
l

C
C

C
C

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:12)

e
e

(cid:0)

(cid:12)

55

100

E

T
T

(cid:0)

(cid:0)

(cid:0)

(cid:12)

(cid:2)
(cid:2)

C

u
(cid:12)
(cid:12)

(cid:3)
(cid:3)

e

T
T

(cid:0)

(cid:12)

e
e

(cid:0)

(cid:12)

15

T
T

40

(cid:0)

64

(cid:12)

e
e

(cid:0)

(cid:12)

47

190

T
T

(cid:2)

(cid:2)

T
T

e
e

T
T

(cid:2)
(cid:2)

T
T

149

135

(cid:0)
(cid:0)

(cid:19)
(cid:19)

(cid:5)

e
e

l
l

C
C

(cid:0)

u
(cid:12)

C
C

 
 

(cid:0)

 
 

 
 

(cid:12)

,

,

(cid:1)
(cid:1)

e
e

 
 

C
C

(cid:0)

 
 

(cid:12)

C
C

(cid:0)

 
 

(cid:12)

(cid:1)
(cid:1)

l
l

l
l

 
 

(cid:19)
(cid:19)

27

(cid:0)

(cid:19)
(cid:19)

 
 

(cid:1)
(cid:1)

77

191

 
 

(cid:12)

 
 

 
 

e
e

 
 

 
 

(cid:1)
(cid:1)

65

C

 
 

(cid:17)
(cid:17)

(cid:1)
(cid:1)

(cid:0)
(cid:0)

(cid:2)
(cid:2)

129

e

e

L
L

C
C

14

(cid:0)

 
 

,

,

36

59

156

14

 
 

(cid:12)

,

,

%
%

T
T

60

 
 

 
 

l
l

 
 

l
l

 
 

(cid:12)

(cid:19)
(cid:19)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:12)

179

(cid:3)
u
(cid:3)

(cid:2)

(cid:2)

C

192

T
T

55

(cid:2)
e(cid:2)

e

C

u

L
L

L
L

158

D

70

(cid:20)
D(cid:20)

?

(cid:20)
(cid:20)

15

E

99

(cid:2)
(cid:2)

L
eL
e

u

L
L

D

D

C

D

C

128

(cid:2)
(cid:2)

e

e

L
L

(cid:2)
(cid:2)

L
L

e

e

(cid:2)
(cid:2)

(cid:12)

200

(cid:2)
(cid:2)

(cid:12)

(cid:12)

(cid:2)
(cid:2)

(cid:12)

(cid:12)

(cid:2)
(cid:2)

(cid:12)

(cid:5)(cid:19)
(cid:19)(cid:0)
(cid:0)

159

(cid:20)
(cid:20)

E

?

,
,

D

C

C

(cid:19)%
(cid:0)
(cid:1)(cid:19)
%(cid:0)

D(cid:1)

195

(cid:20)
(cid:20)

66

,

,

%
%

(cid:1)

(cid:1)

(cid:0)
(cid:0)

(cid:19)
(cid:19)

D

D

E

C

C

53

(cid:12)

(cid:2)
(cid:2)

(cid:12)

(cid:12)

(cid:2)
(cid:2)

(cid:12)

(cid:0)
(cid:0)

(cid:19)
(cid:19)

(cid:2)
(cid:2)

(cid:5)

(cid:20)
(cid:20)

,

,

?

D

39

?

cC
C
c
E

c
c

(cid:0)
(cid:0)

(cid:19)
(cid:19)

(cid:0)

(cid:0)

(cid:19)
(cid:19)

(cid:5)
(cid:2)
,
(cid:2)
(cid:20)
(cid:20)

?

26

D

%
%

(cid:1)

(cid:1)

,

(cid:10)
(cid:1)(cid:10)

D(cid:1)

(cid:12)

(cid:0)
(cid:0)

(cid:2)
(cid:2)

(cid:12)

,

(cid:0)

(cid:0)

,

(cid:19)
(cid:19)

%
%

D

(cid:1)

(cid:1)

54

100

(cid:10)
(cid:10)

D

%
%

(cid:2)
(cid:2)

(cid:1)
u

D

e

e

L
L

(cid:0)

(cid:0)

(cid:2)
(cid:2)

L
L

e

e

(cid:0)

?

C
C

C

C

46

C

203

C

l
l

(cid:0)

(cid:0)

98

B

E
E

(cid:0)

C

C

86

l
l

C

(cid:0)
u

B

E
E

C

(cid:0)
(cid:0)

(cid:0)

X
X

E
E
B

(cid:0)
(cid:0)

(cid:0)

?

C

C

H
H

X
X

(cid:0)

X
X

?

X
X

Ce
e

H
H

136

X
X

lX
X
Cl

(cid:0)

(cid:0)

 
 

?

71

?

 
 

104

174

e
e

b
b

C

248

Cb
b

u

H
H

u

h
hh
hh
h

(cid:0)
 
 

h
h

h
h

h
h

J
J

?

h

h

127

H
H

 
 

7

35

(cid:0)
(cid:0)

201

(cid:12)

,

,

(cid:1)

(cid:19)
(cid:19)

(cid:0)

102

(cid:0)

(cid:2)
(cid:2)(cid:12)

 
 

103

 
 

?

D

184

,

,

%
%

(cid:1)(cid:0)
(cid:0)

(cid:1)

 
 

(cid:12)
(cid:0)
u
(cid:0)

(cid:19)
(cid:19)

(cid:0)

(cid:0)

(cid:19)
(cid:19)

(cid:1)
(cid:1)

(cid:10)
(cid:10)

127

D

,

,

95

213

(cid:0)
(cid:0)

212

(cid:1)

(cid:1)

%
%

(cid:10)
(cid:10)

u
(cid:0)

(cid:0)

(cid:1)
(cid:1)

(cid:19)
(cid:19)

(cid:12)

(cid:19)
(cid:19)

81

(cid:0)

(cid:0)

(cid:12)
u

,

,

(cid:17)
(cid:17)

(cid:19)
(cid:19)

%
%

240

(cid:17)
(cid:17)

185

,
,

(cid:0)

(cid:0)

(cid:0)
(cid:0)

103

(cid:10)
(cid:10)

(cid:1)
(cid:1)

(cid:1)
(cid:1)

(cid:10)
(cid:10)

241

(cid:1)
(cid:1)

(cid:2)
(cid:2)

(cid:2)
(cid:2)

D

D

D

D

D

D

(cid:2)
(cid:2)

D

D

(cid:2)
(cid:2)

D

D

(cid:2)
(cid:2)

202

C

u

36

211

h
h

h

h

e
e

h
h

h
h

h
h

J
J

C

A
A

u

P
P

(cid:0)
u
(cid:0)

90

A
A(cid:0)

P
eP
e

(cid:0)

108

h
h

h

h

112

%
%

(cid:19)
(cid:19)

51

h
h

h

(cid:0)
(cid:0)

h
h

(cid:17)
(cid:17)

h

210

218

h

h
h

h

11

(cid:12)

h
h

h
h

h

u

h

h
h

h
h

h
h

157

(cid:12)

(cid:19)
(cid:19)

249

C

?

(cid:24)
(cid:24)

96

?

(cid:24)
(cid:24)

J
J

C

(cid:24)
(cid:24)

(cid:0)

225

(cid:24)
(cid:24)

115

74

224

113

33

(cid:0)

(cid:24)
(cid:24)

C

24

72

u

u

143

h
h

198

h
h

h

h

109

h
h

h

(cid:17)
(cid:19)
(cid:12)
,
(cid:19)
(cid:17)
,
h(cid:12)

h

h

P
P

57

34

h
h

h
h

102

h(cid:0)
u
(cid:0)

h

h

65

h

%
%
u

(cid:10)
(cid:10)

(cid:1)
(cid:1)

h
h

P
P

h
h

?

h

219

h

(cid:0)
h(cid:19)
(cid:0)
(cid:19)

21

h
h

u

h
P
h
P

h

123

h
h

120

h

h

h

235

48

h
h

?

h

h(cid:1)
(cid:1)
(cid:10)
(cid:10)

18

?

h
h

234

h

?

h
h

u

h

h

h(cid:1)
u
(cid:1)

X
X

206

117

 
 

?

h

h

196

(

(

C
J
CJ

(cid:0)

h
h

(cid:24)
(cid:0)
(cid:24)

?

X
X

?

138

X
X

?

h
h

h
h

b
b

h
h

106

(cid:24)

101

207

h
h

(cid:24)

(cid:24)

197

(cid:24)

(cid:24)
(cid:24)

(cid:24)

(cid:24)

?

(

u
(

 
 

(

(

(

(

 
 

(

(

(

(

(

(

(

(

(cid:16)
(cid:16)

228

 
 

(
u

(

(

(

 
 

X
X

h
h

(cid:24)
u

%
%

(cid:0)

(cid:0)

X
X

b
b

(cid:24)

(cid:24)

38

(

(

71

X
X

(cid:24)

(cid:24)

(

(

(

(

(

(

(cid:16)
(cid:16)

 
 

 
 

?

h

h

h

(

(

h

h

(
(

h

h

 
 

9

h

D
hD

(cid:2)
(cid:2)

h

h

h

h

?

h

h

h

h

h

h

h

h

h

h

T
T

e

e

L
L

T
T

e

e

L
L

T
T

e

e

L
L

T
T

e

e

L
L

T
T

e

e

L
L

T
T

e

e

L
L

e
e

T
T

e
e

T
T

e
e

T
T

e
e

T
T

e
e

T
T

e
e

T
T

e
e

T
T

h
h

e
e

h
h

h
h

h
h

h
h

h
h

h
h

h
h

43

(
(

(
(

(
(

(
(

(
(

(
(

(
(

(
(

(
(

h

h

h

h

?

h

h

h

h

h

h

h

h

h

h

h
h

e
e

h
h

h
h

h
h

h
h

h
h

2

1

h
h

h
h

(
(

e
he
h

(
(
(cid:0)
(cid:0)

(
(

(
(

(
(

(
(

(cid:0)

(cid:0)

(
(

(
(

(
(

(
(

31

X
X
b
b

(cid:24)
(
(cid:24)

(

(cid:16)
(cid:16)

227

226

h

h

h

h

e
e

T
T

h

h

h

h

h

h

h

h

h

h

h

h

(
(

(

(

(

(

(

(

(cid:16)
(cid:16)

 
 

 
 

(cid:0)

(cid:0)

(

(

(

(

(

(

(

(

?

229

(cid:16)
(cid:16)

 
 

 
 

%
%

h

h

h

h

e
e

L
L

T
T

h

h

h

h

h

h

h

h

h

h

h

h

h

h

2

1

49

116

h

h

2

h
he

T
eT

(cid:0)
(cid:0)
(
(

(cid:16)
 
(cid:16) 

%
%
u

h
L
he

eT
TL

?

?

?

?

?

?

h
h

e
e

67

e
e

C
C

61

C
C

l
C
Cl

(cid:0)

7

 
 

?

 
 

(cid:0)
 
 

h
h

(cid:0)

?

h

h

h
h

36

(cid:0)

u
(cid:0)

(cid:0)

h

h

h

h

h

h

h

h

h

h

66

h

h

h

h

h

h

11

C
C

?

(cid:19)
h(cid:19)
u

21

,
,
h(cid:12)
(cid:12)

h

34

h

h

h

h

h

h

h
h

h
h

h
h

h
h

h
h

h
h

h
h

9

h
h

h
h

h
h

h
h

h
h

h
h

h
h

(cid:0)

h
h

e
e

(cid:1)
(cid:1)

56

(cid:1)
(cid:1)

C
C

C
C

C
C

C
C

C
C

C
C

C
C

C
C

C
C

C
C

40

C
C

C
C

C
C

C
C

C
C

(cid:0)

(cid:0)

24

33

(cid:0)
u

C
C

(cid:0)
u

(cid:0)

(cid:0)

49

T
T

E
E

E
E

E
E

(cid:0)

(cid:12)

(cid:0)

(cid:12)

D

D

e

e

(cid:0)

(cid:12)

30

E
E

D

D

e

(cid:0)

(cid:12)

e

u

T
T

e

T
T

(cid:0)

(cid:12)

D

(cid:0)

(cid:12)

D

e

E
E

e

T
T

(cid:0)

(cid:0)

(cid:12)

(cid:12)

D

D

e

E
E

e

27
16

T
T

(cid:0)

(cid:12)

e
e

(cid:0)

54

(cid:12)

(cid:0)

(cid:12)

e
e

(cid:0)

(cid:12)

e
e

e
e

T
T

T
T

48

T
T

D

D

D

D

D

D

D

46

D

D

D

D

D

D

D

?

D

,
,

(cid:1)(cid:19)
(cid:19)

D(cid:1)

D

,

,

(cid:19)
(cid:19)

D

(cid:1)
(cid:1)

(cid:12)

(cid:12)

(cid:12)

(cid:12)

(cid:12)

(cid:12)

(cid:12)

26

(cid:19)
(cid:19)

(cid:1)
(cid:1)

,

,

(cid:19)
(cid:19)

(cid:1)
(cid:1)

35

,

,

(cid:1)
(cid:1)

(cid:19)
(cid:19)

,

,

63

62

(cid:19)
(cid:19)

(cid:12)

(cid:12)

(cid:12)

,

,

(cid:19)
(cid:19)

(cid:12)

(cid:12)

,
,

(cid:19)
(cid:19)

(cid:1)
(cid:1)

D

D

D

D

D

D

D

D

D

D

D

D

D

D

D

D

h

h

h

h

h

h(cid:1)
u
(cid:1)

18

h

h

h

h

h

h

(
(

(
(

(
(

(
(

(
(

?

h

h

(
(

h

h

h

D
hD

h(
(

h

9

(cid:8)
(cid:8)

?

(cid:8)
(cid:8)

(cid:0)
(cid:0)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:0)

(cid:0)

(cid:8)
(cid:8)

(cid:8)
(cid:8)

(cid:0)

(cid:0)

(cid:8)

(cid:8)

(cid:8)
(cid:8)

(cid:0)

(cid:0)

(cid:8)

(cid:8)

(cid:8)
(cid:8)

(cid:8)

(cid:8)

(cid:0)

(cid:0)

a
a

242

b

b

a
a

b

b

h
h

h
h

h
h

h
h

a
a

h
h

h
h

h
h

b

b

a
a

b

a
a

h
h

h
h

h
h

h
h

h
h

b

h
h

a
a

h
h

b

b

a

a

b

b

a
a

b

a
a

b

a
a

h
h

h
h

h
h

h
h

h
h

h
h

h
h

h
h

h
h

h
h

h
h

151

b

b

a
a

b

243

78

a
a

b

b

u

a
a

!
!

b

H

a
a

!
!

115

a
a

b

H

!
!

a
a

!
!

a
a

b

H

!
!

a
a

H

b

29

h
h

124

(cid:8)

(cid:8)

h
h

h
h

(cid:8)
u

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

(cid:8)

!
!

150

H

u

a
a

(
(

b

168

!
!

a
a

(
(

b

(
(

b

(
(

(
(

!
!

(
(

(
(

!
!

(
(

217

!
!

(
(

(
(

(
(

(
(

216

b

111

b

u

b

50

b

b

b

 
 

a
a

60

(cid:8)

(cid:8)

12

a
a

u
(cid:8)

(cid:8)

(cid:8)

?

(cid:8)

(cid:8)

(cid:8)

13

(
(

!
!

(
(

(
!
(
!

?

`

`

140

40

(
(

37

215

110

 

 

?

`

`

223

(
(

`

`

`

`

P
P

?

P

P

220

P

73

47

(
(

(
(

(
(

?

`

`

86

P

(
(

P

113

(
(

84

 

 

114

162

b

28

10

(cid:8)

(cid:8)

b

E
Be
e
EB

 

u
 

 
u

93

u

(
(

u

(
(

222

b
b

(cid:8)

(cid:8)

180

(cid:8)

58

(cid:8)

?

(cid:8)

?

B
B

e
e

E

E

154

h
h

(cid:8)

`

`

P

u

181

(cid:8)

e
Ae
A

82

(cid:17)
(cid:17)

`

31

P

h
h

?

?

`

h
h

%
%(cid:12)
(cid:12)

244

(cid:16)
(cid:16)

P

?

221

`

`

P

`

h
h

B
B

`

h
h

!

P

160

E

E

h
h

e
e

64

e
e

42

!

?

(cid:8)

133

(cid:12)

%
%

(cid:12)

!

(cid:8)
(cid:8)

!

!

(cid:8)
(cid:8)

!

!

%
%

(cid:8)
(cid:8)

(cid:12)
(cid:12)
(cid:17)
(cid:17)
!

52

(

(

!

89

(

(

!

?

(
u
(cid:8)
(cid:8)

(

!

(

(

!

(

?

(

(cid:8)
(cid:8)

(

(

(

80

245

(cid:17)
(cid:17)

%
%

(cid:12)
(cid:16)
(cid:16)
u
(cid:12)

(cid:17)
(cid:17)

166

!

!

P

P

`

`

(cid:8)
(cid:8)

l
l

126

(cid:0)
u

`

Z
Z

`

20

(cid:8)

246

Z
Z

17

(cid:8)

e
e

(cid:16)
(cid:16)

85

B
B

(cid:0)

(cid:17)
(cid:17)

`

h
h

(cid:16)
(cid:16)

(cid:17)
(cid:17)

`

P

123

h
e
h
e

(cid:8)

Z
Z

125

(cid:8)
(cid:8)

?

@
@

(cid:16)
(cid:16)

!
!

?

`

P

A

A

e
e

`

`

`

`

P

P

(cid:8)

?

155

(cid:17)
(cid:17)
u

(cid:17)
(cid:17)

172

(
(

`
P
P
`

(cid:8)

A

(cid:8)

l

u

@
@

A

e
e

(

(

l

83

e
e

(

(

?

a
a

!

?

(cid:8)

Z
Z

111

Z
Z

B
B

(

(

Q
Q

146

(cid:0)

L(cid:0)
L

69

173

!

(cid:8)
(cid:8)

(

(

(

(

!

a

a

(

(

Q

Q

l

!

(cid:8)

e
e

A

e
e

169

247

l

Z
Z

@
@

161

Z
Z

A

u

E

E

E

E

120

B
B

%
!
(
%
!
(

a

u

a

63

e
e

(cid:0)
u

(cid:0)

!

107

76

Q

Q

?

186

(cid:8)
(cid:8)

(cid:28)
(cid:28)

(cid:8)

98

!

(cid:8)

!

a
a

230

e
e

177

Z
Z

a

l
a
l

u

A

(cid:17)
u
(cid:17)

@
@

A

(cid:17)
(cid:17)

E

E

B
B

19

Q

Q

a

?

32

(cid:0)

a

96

(cid:28)
(cid:28)

(cid:8)
(cid:8)

(cid:8)

!

(cid:8)
u
(cid:8)

e
e

(cid:8)

!

187

a
a

a
a

Q

Q

a
@
Z
a
@
Z

A

l
l

?

176

A

147

?

L
EL

E

B
B

l
l

E(cid:0)

TL
T
LE

(cid:0)

a
a

e
e

(cid:0)

118

Q

Q

A

A

e
E
e

e
e

a

a

l

91

l

Z
Z

?

B
B

a

l

a

Z
Z

44

e
e

(cid:0)

(cid:0)

209

E

@
@

L
L

!

(cid:8)

!

(cid:8)

u
(cid:8)

a
a

(cid:28)
(cid:28)

(cid:8)

!

(cid:28)
(cid:28)

(cid:8)

!

(cid:8)

!

231

a
a

a
a

117

Q

Q

e
e

a
a

e
e

Q

Q

D
DA

E

L
L

238

25

A

(cid:0)

E

B
l
Bl

(cid:0)

a
a

e
e

239

L
L

L
L

T
T

45

E
E

?

e
e

A

E

D
D

Q

122

153

Q

(cid:0)

79

A

E

(cid:0)

L
L

u
(cid:0)

?

e
Q
e

D
D

Q

L
L

T
T

L
L

L
L

L
L

L
L

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

h
h

h

h

h

h
h

h
h

144

h
h

105

h
h

h
h

?

C

h

h

h

h
h

h
h

h

h

u

h
h

l
l

B

h

h

h
h

h
h

h
h

l
l

h

h

h

h

h

h

h

h

h
h

h
h

h
h

h
h

(cid:12)(cid:0)
(cid:0)

(cid:12)

CD
D
BC
eB
\

D
D

h

h

h

h

h

h

h

h

h

h

182

(cid:0)

e

h
h

h
h

h
h

A
A

43

h
h

(cid:12)

B
B

\

h
h
l
l

(cid:0)

(cid:12)

D
D

D

C

D

C

E
E

E
E

L
L

T
T

L
L

233

232

A
A

L
L

189

D
D

84

E
E

L
L

T
T

h

h

h

h

h

h

h

h

62

94

?

88

97

188

T
T

L
L

h

h

u
(cid:0)

e

L
L

h

h

h

h

u
(cid:12)

D
\D

u

B
B

A
A

h
h

u

(cid:0)(cid:0)

D

C

D

C

(cid:12)

30

E
E

B
C

(cid:2)(cid:0)
(cid:2)

a
a

A

E

E
E

164

a
a

119

61

8
5

D(cid:0)

AD
A

?

L
L

(cid:0)

(cid:0)

(cid:0)

(cid:12)

(cid:12)

e

B
B

D

C

D

C

130

A
A

E
E

e

u

L
L

T
T

L
L

(cid:0)

(cid:2)
(cid:2)

B
B

D

(cid:0)

170

C

e

193

E
E

(cid:12)

A
A

(cid:0)

(cid:12)

(cid:0)

D

C

e

165

e

L
L

T
T

L
L

B
B

27
16

L
L

T
T

L
L

(cid:0)

(cid:2)
(cid:2)

236

D

(cid:0)

(cid:0)

(cid:0)

(cid:12)

(cid:12)

(cid:12)

(cid:12)

(cid:0)

(cid:2)
(cid:2)

(cid:0)

(cid:0)

(cid:0)

118

C

134

(cid:3)
(cid:3)

e
e

?
?

L
L

T
T

L
L

L
L

L
L

D

C

B
B

178

D

41

B
B

D

C

D

C

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:2)
(cid:2)

(cid:12)

C

194

(cid:2)
D(cid:2)

68

T
T

(cid:3)
(cid:3)

e

e

(cid:12)

B
B

237

L
L

L
L

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:2)
(cid:2)

(cid:12)

(cid:12)

121

D

C

D

?

L
L

L
L

(cid:2)
u
(cid:2)

T
T

C

(cid:3)
(cid:3)

82

(cid:12)
E(cid:12)

D

92

D

u

C

e

e

67

e

u

L
L

L
L

(cid:8)

!

(cid:28)
(cid:28)

(cid:8)

!

6

(cid:8)

!

(cid:28)
!
(cid:8)
(cid:28)

75

h
h

h
h

h
h

C

E
E

B

C

E
E

E
E

E
E

E
E

C

B

C

B

C

B

C

205

E
E

B

C

E
E

B

C

E
E

C

B

C

B

C

B

C

B

C

E
E

E
E

E
E

E
E

B

C

E
E

C

B

E
E

B

E
E

C

9

215

214

157

156

199

198

151

231

97

117

182

183

210

211

89

178

179

153

152

232 233

248 249

142

143

164

165

186 187

115

195

194

94

185

244

245

7

171

86

228

229

105

200

201

10

11

170

110

122

138

139

189

43

91

175

188

225

174

159

181

161

224

137

230

158

239

140 141

124

206207

134

126

173

238

204 205

192193

40

4

46

220

221

100

146

226227

168

169

2

119

196

202

212

218

236

237

133

130

208 209

98

108

148

149

247

246

217

216

243

242

162 163

64

234 235

167

129

223

92

190

77

222

240

241

177

154

155

121

208

209

244

223

192

H
H

236

@
@

@
@

l

l

49

e
e

@
@(cid:0)

S
S

H
H

76

Z

L
L

(cid:0)

114

(cid:0)

?

L
L

(cid:0)

16

127

52

?

?

212

?

?

60

3

40

82

15

92

45

u

u

4

u

u

3

14

5

32

4

\
@@
@@
@
\@
@@

@ S
B
S
B@

(cid:5)
(cid:5)e

@
e@

\
\

L
L

(cid:0)
(cid:0)

?

?

h

h

h
h

h

h

h

h

h

h

h

h

Z

c

44

146

E (cid:1)
(cid:1)(cid:5)
(cid:5)
E

c

Z

26

h

h

h

h

h

h

h

h

c

210

150

35

h

33

h

h

h

h

h

h

u

h

h

h

h

h

h

78

(

(

66

198

102

(

(cid:24)

(cid:24)

(

 
 

(
(

(
(

(

214

82

(

(

(
(

(
(

(

(

(

(

(

(

(

((
(

(

(cid:16)

(cid:16)

(cid:0)

(cid:0)

(

(

(
(

(

(
(
u
(

(

(

 
 

(cid:24)

(cid:24)

156

(
(

(cid:16)

(cid:16)

56

113

(

(

(
(

192

228

(
(

(

(

(
(

u
(

(

(

(

20

42

126

(

97

?

114

63

220

(cid:16)
(cid:16)

(

(

23
7

(cid:5)
(cid:5)

(

(

81

34

(

(
(

(

(

(cid:16)
(cid:16)

(

50

 
 

70

112

99

110

(

(

(
(

(

(

(
(

(

(cid:24)

(cid:24)
(
(

(

(

(

(

(
(

(

(
(

(

(

(

 
 

189

(
(

h

h

(

246

247

218

(cid:16)
(cid:16)

 
 

(cid:24)

(cid:24)

(

(

(
(

(

(

(
(

229

(

222

223

(

215

(

(

?

(

(

121

?

h

h

(

(

h

h

u

(
(

(cid:16)
u
(cid:16)

 
(cid:17)
 
(cid:17)

157

135

u

(
(

(cid:0)

?

?

h

?

?

?
?

h

h

(

63

95

16

(cid:17)
(cid:17)

(cid:24)
u

(cid:24)

u
!
(
!

((

(

(

!
!

(
(
(
((

?

(

(

(

(
u

u

h

h

h

(cid:24)

(cid:24)

(

(

(

(

(

(

(

?

h

(
(
(
(cid:24)
(
(cid:24)

?

?

34

h

h

?

h

h

h

h

h

h

h

h

h

h

h

h

h

(

(

 
 

(cid:24)
(cid:24)

(

(

 
 

(
(

(
(

(

(

117

(
(

(

(

(cid:16)

(cid:16)

(

(

159

80

(

(
(

(

(

(
(

(
(

(

212

(

(

(cid:0)
(cid:5)
(cid:5)(cid:0)

(

(

126

(
(

 
 

(cid:24)
(cid:24)

(
(

(
(

(

(

(

(

(
(

(cid:16)

(
(

(
(

(
(

(
(

(cid:16)

(
(

(

(

?

(
(

(
(

(
(

(

(cid:16)

(

(

(

(

(

(

(

(cid:24)

(cid:24)

 
 

37

(
((
(

(
(
((
((

109

(
(

154

(

(

(
(

?

(
(

?

(
(

(
(

(cid:16)
u

(
(

(

(

(
(

(
(

(
(

(cid:16)
(cid:16)

110

75

167

166

171

175

64

82

232 233

170

211

210

134

135

224 225

176

144

248249

205

131

182

196

197

178 179

179

178

141

177

l
l

237

151

115

63

l
l

159

c

183

L
L

l
l

(cid:0)

L
L

l
l

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

Z

c

?

109

85

u

51

@
e
e
@

241

57

54

21

213

@

u

@

\

\

Z

u

@

@

@

@

@

@

Z

B
c
B

u

Z

159

158

?

@

@
@

@
@
e
e

97

90

?

46

62

@@
S@
@

@

66

@

@
@

@
@

S
S

(cid:5)

?

\

Z

(cid:5)

@

c

@

@
S

\

@

c

@

@
e
@
e
@
@

59

?

u

@

u

Z

@
@

e
e

103

@
@

\

c
c

164

@

l
l

(cid:5)@
@

S

u

126

@

Z

24

@
@

@
@

@

123

S
S
Z
@
@

(cid:5)
(cid:5)

@
@

@

S

@

\

@

@

@
@

@
@

u

e
e

@
@

@
@

@@
@

?

@
@

e
e

\@
@

u

c

Z

165

c

@
@

@

240

@
@

@

175

l
l

@

@

S
S

(cid:5)

e
e

@
@

\
\

(cid:5)

e
e

@
@

\
\

228

e
e

@
@

\
\

l
l

l
l

L
L

l
l

L
L

l
l

l
l

L
L

L
L

L
L

L
L

L
L

L
L

@
@

@

@

\

S

Z

@
@

@
@

@

e
e

@
@

e
e

@
@

@

Z

@
S@

@
@

@

c

@
@

l
l

154

c

@

\

34

@

@

@

@

@

Z

@
@

@
@

e
e

@

@
@

S
\
S

@

120
@
@

@
@

@

@

242

@

@

@

u

@

@
@

@
@

223

@

e
e

\

243

@
@

@

@

Z

c

@
@

@

@

@
@

@
@

@

?

22

@
@

@

Z

e
e

@
@

@

@
@

63

l
l

c

\
\

@

@

e
e

Z

c

@
@

l
l

\
\

l
l

14

l
l

@
@

l
l

e
e

@
@

@
@

@

\
\

e@
@

@

Z

c

e
e

@

?

b
b

e

u

@

@
@

72

c

l
l

?

@

@

@

@

@
@

@
@

111

@
@

l
l

u
u

Z

@

@
@

@

@

@

245

@
@

\

118

@
@

e
e

Z

c

@
@

@

124
120

@
@

@

l
l

l
l

e
e

e
e

b
b

@
@

e
e

\

181

@
@

@
@

@
@

@

e
e

@

u

Z

@
@

u

@
@

@

@

l
l

32

@
@

@

Z

@
@

c

\
\

@

@

@

@

@

@

@

@
@
@
@
@

117

@
@

@
@

Z

80

c

l
l

@
@

31
17

162

b
b

@

@
Z
@

u

58

c

e
e

u

e@
@

@

@
@

e
e

@

@
@

@
@

@

@
@

?

@

l
l

84

@
@

e
e

b
b

@

@
@

108

l

@

@

u

e
\e
e@
@@
@

127

@

@
@

Z

l
l

@

?
?

@

@
@

Z

c

@
@

?

229

@

@

@
@

@
@

b
b

e
e

@

@
@

@

@

@
@

@

l
l

c

l
l

\
\

L
L

e
e

L
L

@
@

Q
Q

@
@

@

@
@

Z

\
\

l
l

l
l

@

@

b
b

@

@
@

@

30

@

Q
Q

@
@

Z

c

@
@@
@@
\@
@@
e

@

@
@

@
@@
@
@@

l

c

e
e

@

?

Z

l
l

@b
b

u

@
@

@

@

@
@

@
@

@
@

\

@
@

@
@

247

@
@

@

@
@

@
@

@
@

@

@

206

118

@
@

246

155

@
@

@
@

@

150

Z

@

lQ
@l
Q

b
b

e
e

@
@

125

e

c

@

@
@

@
@

@

@
@

l

@
@

\
\

e
e

l
l

c

\
\

@

@

@

e
e

e

c

@

@

L
L

l

u

LS
@@
S@
L

@
@

68

@
@

@

106

Z

@
@

@
@

@

@
@

Z

@

248

@
@

@
@

@
@

@

@
@

@
@

\

@
@

@
@

@
@

@

?

@
@

@

@
@

@
@

234

Z

@
@

@

@
@

@

@
@

230

@

S
S

@
@

@
@

@

@

@
@

l

e
e

111

e

@

l

Z

235

c

e
e

@
@

\
\

@

@

@
@

217

@
@

127

@
@@
@

@
@

@
@

114

@

@
@

@
@

@
@

@

139

\

93

@
@

@
@

@
@

222

50

@

e@
@

u

@
@

@
@

@

l

c

@
@@

u

@
@

@

Z

@

S
@
S

u

@
@

231

@
@

@

l

@
@

Z

c

Z

c

L
L

e
e

\

@
@

@
@

@

@
@

@
@

Z

\
\

@
@

180

@
@

@
@

@
@

?

@
@

@
@

@

@

@
@

@
@

l
l

@

e
e

@

L
L

@

@

@
@

l

\

@
@

c

@
@

@
@

@

c

@

l

@

@
@

Z

T
e@
Te
@@

@

@
@

@
@

l
l

e
e

@

244

@
@

@
@

@

@

@
@

@
@

@
@

78

@
@

@

@
@

@
@

Z

e
e

\

@
@

@
@

@

@
@

l

@
@

Z

c

\
\

l
l

\

@

@
@

@
@

@

@
@

l

@
@

@
T
T

@

u

131

@

c

@
@

e
e

100

@

@
@

@
@

@
@

@

249

@
@

@
@

\

u

@

@
@

@
@

@
@

@

@

@
@

@
@

l

@
@

l

@
@

Z

Z

@
@
e
e

@

@

80

@
@

@
@

l
l

@

@
@

@
@

@

\

@

@

@

@
@

@
@

@
@

e
e

@

@

@
@

@
@

c

\
\

Z

@
@

e
e

\@
@

@
@

@

@
@

l
l

@
@

@
@

@

@
@

e
e

@

194

@
@

@
@

@
@

l

@
@

@

l

@
@

c

c

@

@
@

@
@

218

e
e

c

(cid:0)

70

u

H
H

134

\

?

L
L

(cid:0)

e
e

l
l

@

@

@

@

@
@

@
@

@

@
@

@
@

145

(cid:0)

@
@

151

219

c

25

@
@

@
@

@

@
@

@
@

@

@

@

@

\

e
e

@
@

e
e

@

@
@

@

@
@

@
@

l

@
@

l

@
@

@
@

@
@

@
@

\

@
@

@
@

@
@

@
@

@

@
@

@

@

@

@
@

e
e

@

e
e

@
@

@

@

@
@

l

l

@
@

@
@

Z

\
\

Z

@
@

c

Z

Z

@
@

\
\

c

c

Z

Z

l
l

@
@

c
c

@
@

@
@

@
@

@
@

e
e

S(cid:0)
S

@

@
@

\

@
@

@

@
@

@

@
@

@
@

@

@

@
@

@

@

@
@

@

l

@

l

@
@

e
e

@
@

152

\

@

147

153

@
@

@

e
e

@
@

@
@

@

@
@

146

\
\

@
@

@
@

L
L

(cid:0)

c

c

Z

Z

l
l

@
@

113

c
c

@
@

@
@

@
@

@
@

@
@

e
e

@

\

@
@

l

l

@
@

@
@

@
@

@
@

@
@

@
@

@

@

@
@

@

@
@

@
@

@

l
l

e
e

@

\

@

@

@
@

e
e

@

170

@
@

@

@

@
@

@

@
@

171

?

@
@

@
@

@
@
@
@

@
@

@
@

6

Z
Z
c
@
c
@

L
\
L
\

(cid:0)

(cid:0)
u

S
S

c
c

H
H

140

l
l

(cid:0)

(cid:0)

94

l
l

(cid:0)
u

(cid:0)

L
L

(cid:0)

(cid:0)

L
L

(cid:0)

H
H

H
H

H
H

H
H

@

@

@

@
@

@

\

@
@

@
@

@
@

@
@

@

@
@

l
l

@

\

@
@

@

@

@
@

@

e
e

@
@

@

@

@

@
@

e
e

@
@

(cid:0)

@
@

112

(cid:0)

c
c

@
@

@
@

@
@
@
@

@
@

l

l

@
@

u
(cid:0)

75

?

e
e

@
@

@
@

@
@

S
S

c
c

l
l

@

@
@

\

@
@

@
@

u

5

10

@

\

@
@

@

@

@
@

e(cid:0)

@e
@

@

@

@
@

@
@

@

@
@

@
@

@

@
@

@

@

e
e

@
@

e
e

@
@

195

@

@

(cid:0)

@
@
@
@
@
@
l
@
@
@
l
@

76

H
H

l
l

@
@

e
e

e
e

l
l

@
@

@
@

u

53
23

?

?

@

@
@

\

@
@

@
@

@

@
@

@

@

@
@

@
@
@

@

@

@
@

e
e

@
@

43

83

@
@

@

\

e
e

@
@

@
@
@
@
@
@

l
l

e
e

@
@

@

\

@

\

e
e

@
@

@
@

A

l

@@
@@
@@
e
@
@
e
@
@@
@
@@
@@

c
c

e
e

@
@

36

?

77

@
@

?

u

S
S

A

e

l

e

@

@

@

@

@
@

l
l

9

209

@
@

u

148

eA
A
@
e
@
@
@
@
@

l

u

88

28

13

?
?

@
@

u

103

79

S
S

c
c

c
c

@
@

S
S

H
H

@
@

u

c
c

H
H

@
73
@

u

cA
c

69

u

H
H

e
e

@

\

@

e
e

\

l
l

74

@
@
\
@
@
\

101

l

l

@
@
@@

A

e

@
@

S
S

e
e

?

u

e
e

149

26

e

@

?

?

@

@
@

@

@

@
@

196

u

@
@

c
c

S
S

H
H

e
e

7

A

S
S

c
c

l

l

l
@l
\
\e
e@

(cid:0)

(cid:0)

@
@

e

@

96

e
e

J
@
@
J

l
l

e

@
@

@
@

\
\

S
S

65

@
@

@
@

H
H

J
J(cid:0)

e
e

@

@
@

@

200

@

@
@

220

?

c
c

l

u

l

H
H

e
e

@
@

201

l
l

e

S
S

J

J

@
@

S
S

@
@

190

@
@

A

?

\
\

e

@
@

@
@

@
@

@

e
e

H
H

l
l

@

(cid:0)

(cid:0)

J

J

e
e

@
@

@

l

c
c

H
H

e
e

210

@
@S
SA

35

(cid:0)

J

J

J

@
@

e

@
@

191

173

@

\
\

e
e

@
@

A

@
@

l
l

c
c

@
@

@
@

e

l
l

@
@

@
eA
@e

39

@

@
@

l

221

38

S
S

H
H

J

@
@

@

@
@

l

(cid:0)

?

@

e
e

l

@
@

?

@
@

133

98

@
@

99

e
e

l
l

e

@

@
@

137

41

X
X

e
H
eH

(cid:0)

?

X
X

?

@(cid:0)
@

X
X

@
@

199

@

X
X

@

@
@

J

108

@
@

ce

e

u

@
@

le
l

u

@
@

@

(cid:0)

l

@
@

XJ
X

u

71

c

S
S

@
@

107

A

l
l

l
l

e

197

X
X

J

J

J

@A
@

u

c
c

l
l

A

e

l
l

124

89

@
@

\
\

e
e

@
@A

l

e
e

l

@
@

101

@

u

@
@

c
c

(cid:0)

@
@

P
P

J

?

J

J

A

@
@
@

161

@
@

e
le

u

@
@

@
@

\
\

e
e

@
@

107

c

@
@

e

@

@
@

12

@
@

@

P
P

l
l

A

A

c

@

@
@

l
l

e

l

@
@

S
S

115

c
c

(cid:0)

J

19

P
P

@

@

l

208

@
@

(cid:0)

(cid:0)

81

(cid:0)

(cid:0)
u

(cid:0)

H
H

(cid:0)

H
H

(cid:0)

H
H

(cid:0)

H
H

156

(cid:0)

H
H

(cid:0)

H
H

@
@
J

J

?

@

@
@

@
@

c

198

P@
@e
\A
P
e\

b
b

215

c

@

@
@

@
@

e

@
@

l
l

l
l

116

?

102

@
@

@A
@@
@
@@

e

l
l

@

l

b

b

@
@

l

@
@

@

187

A

u

@

27

@

@
@

56

@
c@

c

u

214

J

J

J

J

142

J

@
@

J

A

l

b

@
@

e

@

l

@
b@

u

l
l

@
@

l
l

193

l

@
@

@

@

@

@
@

@
@

?

e

@

l

@
@

b

@

@
@

c

110

233

c

@

@
@

S
S

@
@

@
@A

l

Q

@
@

@

J

J

A

l

c
c

Ql
l

u

@
@

e

@

J

l

b

44

@

c
c

@

@
@

@
@

S
S

A

b

@
@

@
@

177

@

@
@

@

@

c

e

c

@@
@@
@
@

b

l
l

l

@
@

@
@

@

l

J

J

@
@

l

A

@
@

37

@

@
@

@

c

c

@
@

@

b

l
l

@
@

e

@

l

l

@
@

A

@
@

@
@

@

204

e

b

@
@

J

@

@

104

?

225

@
@

@
@

l

c
c

@

20

J

l

b

115

@

@
@

?

@
@A

u

@
@

l

b
cl
bc
l@
@e
@@

@

@
@

l

@
@

@

S
S

@
@

@

J

@
eA
@e

@

@
@

?

l

c
c

@
@

@

e

@
@

211

J

J

@

@
@

@

@@
@
@
@
@

@

u

J

@
@

@
@

l

@

@

@
@

@

l

@
@

S
S

61

l

J

J

@
@

l

c
c

@
@

@

@
@

@

@
@

@
@
@

e

A

@

@

e

@

@
@

@
@

J

A

e
e

@
@

@

@

l

@
@

@
@

@

@
@

97

@

105

l

J

226

@
@

@
@

@
@

@
@

?

@

@

l

S
S

@
@

J

203

A

e
e

@
@

@

u

205

47

186

l

l

@
@

A

l

u

c
c@

u

@

e

237

@

@

@
@

@
@

@

176

@

@
@

@
@

@
@

@
@

@
@

@

121

@

l

@

@
@

e
@@
@
@

54

Z

E
E

(cid:1)
(cid:1)

(cid:5)
(cid:5)

?

122

108

25

78

76

27
10

238

Z

u

(cid:1)
u
(cid:1)

E
E

(cid:5)
(cid:5)

u

?

239

211

151

?

?

?
?

A

30

24

,
,

A

(cid:5)

(cid:1)
(cid:1)

(cid:5)
(cid:5)

A
A

u
(cid:5)

,
,(cid:1)
(cid:1)

?

162

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

102

201

68

163

?

(cid:5)

(cid:5)

84

E
D
E
D

u

127

(cid:5)

(cid:5)

103

E

u

50

200

E

D
D

u

(cid:5)

(cid:5)

E

E

E

249

98

(cid:5)

(cid:5)

31

E

u

?

(cid:5)

(cid:5)

248

36

u

66

(cid:5)

(cid:5)

190

233

47

119

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

92

u

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

77

21

?

89

60

28

u

(cid:5)

115

?

?

172

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

179

48

173

(cid:5)

(cid:5)

?

(cid:5)

(cid:5)

E
E

(cid:5)

(cid:5)

E
E

72

u

67

(cid:5)

(cid:5)

E
E

?

(cid:5)

(cid:5)

139

(cid:5)

(cid:5)

128

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

(cid:5)

46

(cid:0)

?

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

41

(cid:0)
(cid:0)

(cid:5)
(cid:5)

h

h

h

h

h

h

h

h

(cid:0)

(cid:5)
(cid:5)

h

h

8

h

h

(cid:0)

h

h

h
h

(cid:0)

?

(cid:5)
(cid:5)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

32

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

113

(cid:5)30(cid:5)
u

19
18

?

(cid:5)(cid:5)
(cid:5)
(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

72

(cid:5)

206

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

(cid:5)
(cid:5)

(cid:5)

(cid:5)

29

(cid:5)

?

(cid:5)
(cid:5)

L
\
\
L(cid:5)

51

106

136

(cid:5)
(cid:5)

125

(cid:5)

(cid:5)
u

L
L

\
\

107

80

180 181

246247

189

240

91

172

152

(cid:0)

H
H

(cid:0)

@
@

l

J

A

e
e

94

(cid:0)

H
H

(cid:0)

138

H
H

@
@

J

A

e
e

@
@

@
@

l

@

@
@

@

@
@

@
@

S
S

120

(cid:0)

206

207

H
H

A

(cid:0)

H
H

J

J

J

J

J

J

A

J

J

J

J

J

J

A

@

227

@

@
@

@

@
@

@
@

@

S
S

@
@

l

168

@
@

91

@

e

@

@
@

@

@
@

@
@

?

@

e

@
@

@

l

l

188

l
l

@

@
@

@
l@

u

@

@
@

@
@

@
@

@
@

@

@

@

e

@
@

@
@

@
@

@
@
@
@
@

@

@

@
@

@
@

@

l
l

@

@
@

@
@

@

@
@

e

@
@

@

@
@

l

l

@
@

@
@

e

224

@
@

@

@

@
@@

u

@

@
@

@
@

119

@
@

@

@

@
@

@
@

S
S

H
H

A

@
@

@
@

@

@

@

@

l

l

91

@
@

J

A

e
e

90

e

@

@
@

238

@

@

@
@

@
@

e

@
@

l
l

@
@

l

@
@

@

@
@

@

@

@
@

H
H

J

J

H
H

J

A

@
@

@
@

@@
@

u

122

55

166

@

@
@

@

@
@

@
@

l
l

@
@

@

123

@

169

e

@

@

l

u

u

@
@

?

@
@

J

A

e
e

@

@

@
@

l@
@S
S
l
@@

?

9

@
@

@
@

@
@

@

@

@
@

@

@

@
@

@
@

@
@

@

l
l

@

@

@
@

@

e

232

@
@

@

@
@

l

@
@

48

@
@

@

@

@
@

@

@
@

e

@

@
@

11

@
@

@
@

S
S

l

l

41

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

52

102

183

139

89

H
H

@

42

e
e

@

@
@

(cid:0)

28

(cid:0)

H
H

J

J

@
@

@

@
@

157

129

128

@
@

e

H
H

H
H

@
@

A

e
e

J

J

A

@
@

J

A

e
e

J

J

J

A

(cid:0)

h
h
h
h

(cid:0)

h

h

?

h
h

h

h

h

h

h

h

h

h

h

h

h

h

(cid:0)

h

h

h

h

h

h

h

h

h

h

h

h

h

h

h

h

(cid:0)

h

h

h

h

h

h

h

h

h

h

h

h

h

h

h

h

199

191

92

198

190

213

212

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

(cid:0)

@
@

@

e

@

@
@

@
@

@
@

@

236

l
l

@

@

l

189

@
@

@
@

@

@
@

@
@

@

e

l

86

@

@
@

@
@

@

@
@

@

@
@

@e
e

@
@

@
@

@

@
@

l

@
@@

u

@
@

l
l

@

184

@
@

@
@

@
@
@

@

@
@

@
@

@
@

l

@

@
@

87

116

@
@

@

e

185

@
@

@
@

@

@

@e
@

u

l

@
@

@
@

e
e

@

@
@

@
@

l

@
@

@

@
@

@

@

@

l

@

@
@

@

@
@

e

@

@
@

@

e
e

@

@
@

239

105

@
@

H
H

J

J

@
@

@

l

@
@

@

@
@

A

J

e
e

@
@

@
@

J

A

@
@

@

e

@
@

@
@

@

?

H
H

@@
@
l
l@
@@

(cid:0)

H
H

@
@

@
@

(cid:5)
(cid:5)

@
@

J

A

e
e

@
@

@
@

18

J

J

J

A

(cid:0)

X

u
(
(

?

X

(
(

h

h

h

h

h

216

X
X

h

h

h

h

?

h

91

h

u

X
X

X

X

?

P
P

h
h

h

h

X
X

u

h

h

H
H

185

l

@@
@
@
@@
@@

@

l

@

@

@
@

@

95

?

(cid:20)
(cid:20)(cid:0)

(cid:28)
(cid:28)

(cid:0)
(cid:0)

244

?

225

h

h

h
h

245

?

h

u

X

X

P
P

h

h
h

h
h

h

186

h

h

h

h

h

h

h

h

h
h

u

h

108

X

X

h

h

h
h

h
h

h

h

h
h

195

h
h

53

h

h

(cid:0)

153

58

"
"

h

h
h

177

h
h

h

h

u

h
h

P
P

X

X

P
P

X

X

h

h

h

h

h

h
h

h
h

169

h
h

h

h

h
h

35

(cid:4)
(cid:4)

h

h

h
h

h

h

h(cid:4)
h
(cid:4)

H
H

@
@

J

A

J
J

J

A

e
e

(cid:5)
(cid:5)

@
@

@
@

@
@

@
@

@
@

@
@

@

e

@

e
e

@

@
@

@
@

u

l

@

l

@

33

81

(cid:28)
(cid:28)

(cid:0)
(cid:0)

(cid:20)

(cid:0)

(cid:20)

P
X
X
P

"
"

H
H

@@
@
@

101

?

?

?

h

h

h

h

h

204

h
h
h

55

h

(cid:5)

?

?

h
h

h

h

h

h

h

h

h

h

h

243

h

u

h
h

h

h

h

h

?

231

69

?

226

94

u

(cid:5)

J

?
?

h

h
h

h

h

h

`
`

h

h

h

h

u

h

h
h

h

h

h

88

h

`
`

h

h

h

h

h

h

h
h

h

h

h

h

h
h

h

h

u

181

h

`
`

h
h

h

h

h

160

h

h

166

h

h

h

h
h

38

93

202

124

209

@
@

@J
@

`
h`

242

h

h

h

h

240

h
h

h

77

h

h

h
h

h

h

h

h
h

h

h

h

J

L
L

64

h
h

?

64

h
h
h

h

h

h

h

h

h
h

h

h

?

83

hh
h
h

P
P

h

h

h
h

u

123

175

h

h

h
h

183

75

h

h

h

h

133

207

?

h

h

h

h

u

h

h

h

h

h

h

h
h

hP

u

h

h

h

h

h

h

h
h

P

h

90

104

h

h

hh
h

u

h
h
h

170

P

P

148

h

P

h

(cid:5)

(cid:5)

?

?

J

L
L

13

125

79

100

40

95

h
hh

u

u

X

h

224

h

11

115

(cid:0)

111

u

87

u

194

217

u

h

62

143

u

u

u

h
h

96

235

86

236

?

h

h
h

h

h

h

h

h

h

h

205

h

h

75

57

237

164

u

u

h

208

Q
QL

L \
\

u

h

124

140

Q
Q

u

74

120

h

h
h
h
h
h
h
h
h
h

99

h

h

h

h

u

h

h

h
h
h
h

h

h

h

49

121

h

h

85

17

52

105

73

h

101

h

45

104

71
65

39

h

h

h

h

44

h

h

197

141

h
h
h

h
h
h

h

h

h

116

59
12

?

203

u

h

h

h

h

230

196

118

h

h
h

u

(cid:5)
(cid:5)

h

h

h

h

h

h

h

h

h

h

h

h

85

h

h

h

h

h

h

h

h

h

h

h

h

h

h

h

h

22

h

h

h

h

h

h

h

h

h

h

h

h

h
h

h

h

h
h

h
h

h

h

h
h

h
h

h

h
h

h
h

h

h

h
h

?

119

h

h
h

h

h
h

h

h

h
h

47

h

h
h

h

h
h

h
h

h

h

h
h

h

h
h
h

?

?

?

?

?

?

?

?

?

56

122

184

220221

1

8

67

16

64

29

2

1

43

(cid:28)
(cid:0)
(cid:0)
(cid:28)
(cid:20)

?

(cid:0)
u
(cid:0)

JJ
A
H
JA
H@
@J

e
e

u

@@
@@
@
@

@
@

e
e

@
@
@
@
@
@

@@
l@
@@
e
l

?

(cid:5)
(cid:0)
(cid:0)
(cid:5)

(cid:20)
u

87

h
h
h
h
h
h

117

h

h

P

61

P

P

?

u

145

S(cid:0)

6

15

2

h

P

h

P

P

P

h

h

u

hP
PP
P
h

(cid:5)
(cid:5)
(cid:0)

L
JL
S

u

204

215

214

234235

129

69

162

218 219

137

193

245

161

106

156

238 239

222

231

230

147

229

228

112

168

202 203

97

98

217

142

143

165

241

200

149

117

49

194 195

242243

125

154

226227

187

59

173

216

S
S

201

c
c

178

18

133

(cid:0)

@
@

135

(cid:0)

@
@

202

@
@

@

60

c
c

u

(cid:0)

@
@

J

c
c

(cid:0)

S
S

(cid:0)

24

Figure 12: Examples of the 2-dimensional foam. Number of cells from 10 to 2500.

3.4.3 Concluding remarks on the cell division algorithm

The algorithm of the split of the cell is the important and most sophisticated part of the
new Foam. Let us therefore add a couple ﬁnal remarks:

30

Figure 13: Example of ρ(x) for which the Foam algorithm of cell division fails.

•

•

The new, much improved procedure of the choice of the division plane is the most
signiﬁcant diﬀerence22 with respect to Foam 1.x of Ref. [1].

The choice of the edge based on the histograms for each edge makes sense if we use
histograms with at least 2-4 bins and at least 100 MC events per cell. This might
be a serious limitation for these ρ(x), which require a lot of CPU time per function
call.

Finally, in Fig. 12 we show examples of the evolution of the foam of the cell as the number
of the cells grows gradually. The case of the 2 dimensions is easily visualized and we do
it in Fig. 12 for triangular and rectangular cells. In the upper six plots ρ(x) feature a
circular ridge, in the two bottom plots is concentrated along antidiagonal x1 + x2 = 1,
and the last one corresponds to ρ(x) of Fig 9.

3.5 Limitations

We are aware that the present procedure of selecting next cell for the split and the
procedure of deﬁning division plane, although quite sophisticated, is not a perfect one
and has certain shortcomings. Some of them can be probably removed, but some of
them are inherent. In Fig. 13 we show a surprisingly simple example of a function for
which our method of ﬁnding a good division point λdiv fails. It fails simply because both
projections of ρ(x) onto two edges of the rectangle are just ﬂat and our procedure will
pick up some λdiv randomly within (0, 1), while the most economic division point is in

22 I would like to thank A. Para for discussion which ignited this new development.

31

the middle λdiv = 1/2. On the other hand, although Foam algorithm gets disoriented for
the ﬁrst division, it will recover and correct for the “falstart” in the next divisions rather
quickly. It will eliminate the two voids from its area of the interest.

Let us notice that the distribution of Fig. 13 violates maximally strongly the “principle
n
1 ρi(xi), the principle on which VEGAS family programs are
of factorizability” ρ(~x) =
built [3–5]. Contrary to VEGAS the problem with factorizability in Foam is not a general
one, but is limited to a single cell and usually goes away after the cell split. Nevertheless,
the algorithm of Foam analyzing projections on all edges in a single cell is relying on the
“principle of factorizability”.

Q

Class
TFOAM INTEGRAND Abstract class (interface) for the Foam integrand distribution ρ(x)
TFVECT

Short description

TFMATRIX
TFPARTITION
TFCELL

TFOAM
TPSEMAR
TFHST

TFMAXWT
TFDISTR

Class of vectors with dynamic allocation of the components. Used in
TFOAM and TFCELL
Square matrices, used for simplical geometry in the Foam
Auxiliary small class for looping over partitions and permutations
Class of objects presenting single cell used in TFOAM (Cartesian product
of the simplex and hyperrectangle)
Main class of Foam. The entire MC simulator
Marsaglia et.al. random number generator [16].
Simple class of one-dimensional histograms. Used only in the Foam ver-
sion without ROOT
Monitors MC weight, measures performance of the MC run
Collections of distributions ρ(x) for testing Foam

Table 1: Description of C++ classes of Foam.

4 The Foam code

Presently, the C++ version of the Foam code is more advanced than the Fortran77 version.
(We do not plan to develop F77 code any further.) In this section we shall describe mainly
the C++ code.

The code of the Foam version 1.x was originally written in Fortran77 with popular
language extensions, like long variable names etc. It was already written in an object-
In particular the main classes TFOAM and
oriented style, as much as it was possible.
TFCELL of the present C++ version were already present in certain form. The important
shortcoming of the F77 version is the lack of dynamic allocation of the memory. Otherwise,
it has most of the functionality of the C++ version, see latter this section for list of
limitations.

32

TFOAM member
Short description
ﬂoat m Versiong
Actual version of the Foam (like 2.34)
Release date of the Foam
char m Date[40]
char m Name[128] Name of a given instance of the TFOAM class
int m nDims
int m kDims
int m TotDimg
int m nCellss
int m vMax
int m LastVe
int m RNmax
int m OptDrives
int m OptEdges
int m OptPeeks
int m OptOrds
int m OptMCells
int m Chats
int m OptDebug
int m OptCu1st
int m OptRej
int m nBins
int m nSampls
int m EvPerBins Maximum number of eﬀective (w = 1) events per bin
int m nProj

Dimension of the simplical subspace
Dimension of the hyperrectangular subspace
Total dimension = m nDim+m kDim
Maximum number of cells
Maximum number of vertices (calculated)
Actual index of the last vertex
Maximum number of random numbers generated at once
Type of optimization =1,2 for variance or maximum weight reduction
Decides whether vertices are included in the cell MC exploration
Type of cell peek =0,1,2 for maximum, random, random2
Root cell is simplex for OptOrd=1, hyperrectangle for OptOrd=2
=1 economic memory for hyperrectangles is on; =0 oﬀ
=0,1,2 chat level in output; =1 for normal output
=1, additional histogram (dip-switch)
=1, numbering starts with hyperrectangle (dip-switch)
=0 for weighted events; =1 for unweighted events in MC generation
No. of bins in edge-histogram for cell MC exploration
No. of MC events, when dividing (exploring) cell

Number of projection edges (calculated)

Table 2: Data members of the TFOAM class. Associated setters and getters marked as super-
scripts s and g.

4.1 Description of C++ classes

In Table 1 we list all classes of the Foam package. The main class is TFOAM, which is
the MC simulator itself. It is served by the class TFCELL of the cell objects, and three
auxiliary classes TFVECT, TFMATRIX and TFPARTITION. The other classes are not related
directly to Foam algorithm – they are utilities used by Foam: random number generator
class TPSEMAR [16] and the histograming class TFHIST. The class TFDIST provides a
menu of the distributions for testing Foam. In the following we shall describe in a more
details the key classes TFOAM and TFCELL.

4.2

TFOAM class

TFOAM is the main class. Every new instance of this class (properly initialized) is another
independent Foam event generator. In Tables 2 and 3 we provide full list of data members
of the class TFOAM and their short description. As seen in these tables, we have added
preﬁx “m ” to all names of the data members, such that in the code they diﬀer visually

33

TFOAM member

int *m MaskDiv
int *m InhiDiv
int m OptPRD
TFVECT **m XdivPRD

int m NoAct
int m LastCe
TFCELL **m Cells
TFVECT **m VerX

double m MaxWtRej;
TFMAXWT *m MCMonit;
TFCELL **m CellsAct

double *m PrimAcu
TObjArray *m HistEdg
TObjArray *m HistDbg
TH1D *m HistWt;
TFHST **m HistEdg
TFHST *m HistWt;
double *m MCvectg
double m MCwtg
double *m Rvec

Short description

Provision for multi-branching

![m nProj] Dynamic mask for cell division
![m kDim] Flags inhibiting cell division, h-rectang. subspace
Option switch for predeﬁned division, for quick check
!Lists of division values encoded in one vector per direction

Geometry of cells
Number of active cells
Index of the last cell
[m nCells] Array of ALL cells
[m vMax] Array of pointers to vertex vectors
Monte Carlo generation
Maximum weight in rejection for getting w = 1 events
Monitor of the MC weight for measuring MC eﬃciency
!Array of pointers to active cells, constructed at the end of
foam build-up
!Array of cumulative
Histograms of w, one for each edge, with ROOT
Histograms for debug (m OptDebug=1), with ROOT
Histograms of MC weight, with ROOT
Array of pointers to histograms, without ROOT
Histograms of MC weight, without ROOT
[m TotDim] Generated MC vector for the outside user
MC weight
[m RNmax] Random number vector from r.n. generator, up
to m TotDim+1 maximum elements

i, for cell index generation

k
i=1 R′

P

Externals

TFOAM INTEGRAND *m Rhogs The distribution ρ to be generated/integrated
TPSEMAR *m PseRangs

Generator of the uniform pseudorandom numbers

long m nCallsg
long m nEﬀev
double m SumWt, m SumWt2
double m NevGen
double m WtMax, m WtMin
double m Primeg
double m MCresult
double m MCerror

Statistics and MC results
Number of function calls
Total no. of eﬀective w = 1 events in build-up
Sum of weight w and squares w2
No. of MC events
Maximum/Minimum weight (absolute)
Primary integral R′, (R = R
True integral R from the cell exploration MC
and its error

w
h

)
i

Working space for cell exploration

double *m Lambda
double *m Alpha

[m nDim] Internal parameters of the simplex:
[m kDim] Internal parameters of the h-rectang.: 0 < αi < 1

λi < 1

P

Table 3: Data members of the class TFOAM. Cont.

34

TFOAM method

Constructors and destructors

Short description

TFOAM()
TFOAM(const char*)
˜TFOAM()
TFOAM(const TFOAM&)
TFOAM& operator=(const TFOAM& )

Default constructor (for ROOT streamer)
User constructor
Explicit destructor
Copy Constructor NOT USED
Substitution NOT USED

Initialization, foam build-up

TFOAM INTEGRAND*)

void Initialize(TPSEMAR*,

Initialization, allocation of memory
and the foam build up
Initializes ﬁrst vertices of the root cell
Initializes ﬁrst n! cells in h-rect. root cell
Adds new cells to foam, until buﬀer is full
Divides cell into two daughters
MC exploration of cell main subprogram
Determines the best edge, wmax-reduction

void InitVertices(void)
void InitCells(void)
void Grow(void)
int Divide(TFCELL *)
void Explore(TFCELL *Cell)
void Carver(int&,double&,double&)
void Varedu(double[ ],int&,double&,double&) Determines the best edge, σ-reduction
long PeekMax(void)
TFCELL* PeekRan(void)
void MakeLambda(void)
void MakeAlpha(void)
int CellFill(int, TFCELL*,

Chooses one active cell, used in Grow
Chooses randomly one active cell, in Grow
Generates random point inside simplex
Generates rand. point inside h-rectangle

int*,TFVECT*,TFVECT*)

void MakeActiveList(void)

Fills next cell and return its index
Creates table of all active cells

Generation

void MakeEvent(void)
void GetMCvect(double *)
void GetMCwt(double &)
double MCgenerate(double *MCvect)
void GenerCell(TFCELL *&)
void GenerCel2(TFCELL *&)

void Finalize(double&, double&)
void GetIntegMC(double&, double&)
void GetIntNorm(double&, double&)
void GetWtParams(const double,
double&, double&, double&)

void LinkCells(void)

void CheckAll(const int)
void PrintCells(void)
void PrintVertices(void)
void LaTexPlot2dim(char*)
void RootPlot2dim(char*)

Makes (generates) single MC event
Provides generated random MC vector
Provides MC weight
All the above in single method
Chooses one cell with probability
Chooses one cell with probability

R′
j
R′
j

∼
∼

Prints summary of MC integration
Provides MC integral
Provides normalization

Finalization, reinitialization

Debug

Provides MC weight parameters
Restores pointers after restoring from disk

Checks correctness of the data structure
Prints all cells
Prints all vertices
Makes LaTeX ﬁle for drawing 2-dim. foam
Makes C++ code for drawing 2-dim. foam

Table 4: Methods of TFOAM class.

35

from the other variables (it is a recommended practice in the C++ coding).

Generally, one may notices that many data members, could be declared (and allocated)
as the local variables in the procedures, instead of being data members. For example, vec-
tor m MCvect transporting random numbers out from random number generator m PseMar
could be declared locally at every place where m PseMar is called. We opted for a more
“static” structure of the data, with more than necessary of the data members in the class,
at the expense of the human readability of the code, in order to: (a) facilitate the im-
plementation persistency with ROOT (b) gain in the execution speed (c) facilitate the
translation to other languages.

Most of the methods (procedures) of the class TFOAM are listed in the Table 4. We
omitted in this table “setters” and “getters”, which provide access to some data members,
and simple inline functions, like sqr for squaring double variable. Data members which
are served by the setters and getters are marked in Tables 2 and 3 by the superscripts
“s” or/and “g”.

Let us now characterize brieﬂy the role of most important methods of the class TFOAM

in the Foam algorithm.

Initialize

MakeActiveList

InitVertices

InitCells

Grow

PeekMax

PeekRand

Divide

CellFill

Explore

Figure 14: Calling sequence of the Foam procedures during the foam build-up (initialization).

4.2.1 Procedures for Foam initialization and foam build-up

The constructor TFOAM(const char*) is for creating an object of the class TFOAM. Its
parameter is the name given by the user to an object. The principal role of this constructor
is to initialize data members to its default values – no memory allocation is done at this
stage. After resetting all kind of steering parameters of the Foam to preferred values (using

36

setters) user is calling Initialize method, which builds up the foam of cells. The two
methods InitVertices and InitCells allocate arrays of vertices and cells (pointers) with
empty cells. The empty cells are allocated/ﬁlled using CellFill. Next comes procedure
Grow which loops over cells, picking up most promising cell for the split, either randomly
using PeekRand or deterministically using Peekmax. The chosen cell is split using Divide.
It is, however, the procedure Explore called by Divide (and by InitCells for the root
cell) which does the most important job in the foam build-up – it performs a small MC
run for each newly allocated daughter cell. It calculates how proﬁtable will be the future
split of the cell and deﬁnes the optimal cell division geometry with the help of Carver
or Varedu procedures, for maximum weight or variance optimization respectively. All
essential results of the exploration are written into the explored cell object. At the very
end of the foam build-up MakeActiveList is invoked to create list of pointers to all active
cells, for the purpose of quick access during the MC generation. The procedure Explore
uses two procedures MakeLambda and MakeAlpha, which generate randomly (uniformly)
coordinates of the MC points inside a given cell. The above sequence of the procedure
calls is depicted in Fig. 14.

4.2.2 Procedures for MC generation

The MC generation of a single MC event is done by invoking MakeEvent, which is choosing
randomly a cell with the help of procedure23 GenerCell2 and, next, the internal coor-
dinates of the point within the cell using MakeLambda and/or MakeAlpha. The absolute
coordinates of the MC event are calculated and stored in the data member double-precision
vector m MCvect. MC weight is calculated using an external procedure providing the den-
sity distribution ρ(x), which is represented by the pointer m Rho. A class to which the
object m Rho belongs must inherit from the abstract class TFOAM INTEGRAND. The MC
event (double-precision vector) and its weight is available through getters GetMCvect and
GetMCwt. Note that the variables of the hyperrectangular subspace come ﬁrst in the
m MCvect, before variables of the simplical subspace.

User may alternatively call MCgenerate which invokes MakeEvent and provides MC

event and its weight, all at the same time.

4.2.3 Procedures for ﬁnalization and debug

The use of the method Finalize is not mandatory.
It prints statistics and calculates
the estimate of the integral using the average weight from the MC run. The amount of
printed information depends on the values of m chat. For the normalization of the plots
ρ′(x)dx, which is provided by
and integrals user needs to know the exact value of R′ =
the method GetIntNorm or Finalize. The actual value of the integrand from the MC
series is provided by GetIntegMC. Note that for the convenience of the user GetIntNorm
provides R′ or MC estimate of R =
ρ(x)dx, depending on whether MC run was with
weighted events or w = 1 events.

R

23Method GenerCell1 exists, but is not used.

R

37

Another useful ﬁnalization frocedure

GetWtParams(const double eps, double &AveWt, double &WtMax, double &Sigma)

provides three parameters characterizing the MC weight distribution: the average weight
AveWt, the “inteligent” maximum weight WtMax= wε
max for a given value of eps= ε (see
Sect. 6 for its deﬁnition) and the variance sigma= σ. In particular, in case of unweighted
events, wε

max can be used as an input for the next MC run.

The Foam program is invoking procedure is CheckAll, which checks correctness of
the pointers in the doubly linked tree of cells (this can take time for large Nc). It can
sometimes be useful for the debugging purpose. Another two methods PrintVertices
and PrintCells can be used at any stage of the calculation in order to print the list of
all cells and vertices. In the case of the two-dimensions there is a possibility to view the
geometry of the cells with a 2-dimensional plot, which is either a LaTeX ﬁle produced by
LaTexPlot2dim, or a ROOT ﬁle produced by RootPlot2dim.

TCELL member

Short description

“Static” members, the same for all cells!

Dimension of hyperrectangular subspace
Dimension of simplical subspace

short int m kDim
short int m nDim
short int m OptMCell Option of economic memory for usage (hyperrectangular subspace)
short int m OptCu1st =1, Numbering of dims starts with hyperrectangles; =0 simplices
int m nVert
TFCELL **m Cell0
TFVECT **m Vert0

No. of vertices in the simplex = m nDim+1
! Pointer of the root cell
! Pointer of the vertex list

int m Serial
int m Status
int m Parent
int m Daught0
int m Daught1

Linked tree organization

Serial number (index in m Cell0)
Status (active or inactive)
Pointer to parent cell
Pointer to daughter 1
Pointer to daughter 2

The best split geometry from the MC exploration

double m Xdiv
int m Best

Factor λ of the cell split
The best edge candidate for the cell split

Integrals of all kinds

double m Volume
double m Integral
double m Drive
double m Primary

Cartesian Volume of this cell
Integral over cell (estimate from exploration)
Driver integral Rloss for cell build-up
Primary integral R′ for MC generation

Geometry of the cell

int *m Verts
TFVECT *m Posi
TFVECT *m Size

[m nVert] Pointer to array of vertices in simplical subspace
Pointer to position vector, hyperrectangular subspace
Pointer to size vector, hyperrectangular subspace

Table 5: Data members of the class TFCELL.

38

4.3 TFCELL class

TFCELL is the important class of objects representing single cell of the foam. Data members
of the class are listed in Table 5.

Most of the methods of the TFCELL class are setters and getters. The non-trivial
methods are GetHcub and GetHSize, which calculate the absolute position and size of
hyperrectangles in the algorithm of Section 2.6 and MakeVolume which calculates the
Cartesian volume of the cell.
In the simplical subspace volume is a determinant of a
square matrix of the class TFMATRIX.

4.4 Persistency with help of ROOT

C++ language does not provide any built-in mechanism for persistency of the classes.
For this purpose we use ROOT package [10], with help of its “automatic streamers”.
ROOT is a useful C++ library for histograming, organizing large database of identical
objects of the type used in high energy physics experiments. It also provides an eﬃcient
input/output, with compressing capabilities.

Providing full persistency of any type of C++ classes, preserving all structure of the
pointers is probably impossible to realize in general. ROOT can do it, even for pointers,
provided the code is organized in a special way. (No static variable, explicit integer indices
instead of pointers in some places). As a whole, this solution is not very elegant, but
relatively simple and works correctly. In Tables 2 and 3 we have in the beginning of the
description certain characteristic marks which are directives for persistency mechanism of
ROOT, see manual of ROOT [10] for more details.

One has to remember, when reading TFOAM class object from the disk, that the method
LinkCells() has to be invoked in order to reconstruct fully all pointers in the doubly
linked tree of cells. Moreover, any object of the class TFOAM restored form the disk ﬁle
will have its internal object for the random number generator and distribution function.
There is a method which provides access (pointer) to these objects, if necessary. The
relevant fragment of the code may look as follows:

TPSEMAR *RNGen= FoamX->GetPseRan();
TFDISTR *RHO

//get pointer of RN generator
= (TFDISTR*)FoamX->GetRho(); //get pointer of distribution

It might be useful if, for instance, we want to reinitialize the random number generator
used by the TFOAM class object, which has been read from the disk-ﬁle.

Foam can be used with or without ROOT. In the code all parts of the code dependent on
ROOT enclosed in the pair of preprocessor commands #ifdef ROOT DEF ...
#endif,
where ROOT DEF variable is deﬁned centrally in the header ﬁle ROOT DEF.h. Eliminating
ROOT requires removing this variable and modifying makeﬁle accordingly (the TFHST
class has to be linked). Version without ROOT does not feature persistency, and is
employing its own simple histograming class TFHST instead of the ROOT class TH1D.
ROOT helps also to create documentation of the Foam in the html format. We recommend
to use a version tied up with the ROOT.

39

4.5 Fortran77 version and its limitations

We also provide users with the Fortran77 versions of the Foam. They are two of them at
the development level 2.02 (May 2001) of the algorithm. First one, in which cells can be
simplical, hyperrectangular and the Cartesian product of the two. This version is limited
to dimension ﬁve for the simplical subspace and not very useful for large dimensions
(n
5) in the hyperrectangular space, because it does not feature the memory saving
algorithm of Section 2.6. Another version called MCell (standing for Mega-Cell) features
only hyperrectangular cells, on the other hand, it includes the memory saving algorithm
described in Section 2.6. We recommend the reader to use the version MCell.

≥

Both these version cannot have dynamic memory allocation; they have a maximum di-
mensions of the integration/simulation subspaces (simplical and hyperrectangular ) hard-
coded in the source code. Any change of these maximum dimensions requires recompila-
tion of the code.

Present versions in Fortran77 are substantially improved with respect the original
version of ref. [1]. For the option of minimizing the maximum weight they have exactly
the same algorithm (of the cell split) as the C++ version. They feature, however, an older
more primitive version of the algorithm of ﬁnding the best cell division for the variance
reduction.

The structure of the programs, naming of procedures and variables, conﬁguration
parameters and their meaning are very similar in F77 and C++ versions. Some diﬀerences
in the usage will be indicated in the next Sections.

4.6 Future development

In the following we indicate some of the possible future developments of the Foam package.
As already indicated we do not plan to develope Fortran77 version any further. On the
other hand, it would be interesting to upgrade the existing Foam version 1.x to in JAVA
to the level of the present version 2.x.

As for the C++ version, it would be a logical development to derive class of pseudo-
random number generators TPSEMAR from the common abstract class, and in this way to
deﬁne a universal interface for a library of the number generators. We intend to collect
library of a few random number generators with a universal interface (or ﬁnd one) for the
use in Foam and applications based on it.

Concerning version of Foam adapted to parallel processing, as in Refs. [5, 7–9], we do
not have plans in this direction in the immediate future. Here, we have of course in mind
the use of the true CPU parallelism in the foam of cells build-up. One has to remember
that in the high energy physics applications, which are our main objective, the foam of
cell build-up will be always a tiny fraction of the total CPU time. The main fraction will
be the subsequent MC simulation in which, as the vast experience with the PC-farms in
CERN and FNAL shows, one may organize the MC simulation with the low-level of the
parallelism, with many simulators started with diﬀerent random seeds, running in parallel
but not communicating – another specialized job is combining all results at the very end

40

of the run. However, the ﬁrst practical examples of the true parallelism in the massive MC
simulation for the purpose of the high energy physics experiments has already appeared
recently [17].

As already stressed, the main algorithm of Foam is already rather stable and the main
emphasis in its the future development will be on the eﬀort of making it more user friendly,
and better adapted to the use as a part of bigger MC projects. In particular its provisions
for multibranching will become more sophisticated, as more feedback comes from the real
life applications.

5 Usage of the Foam

5.1 Foam distribution directory of the C++ version

The Foam package is distributed together with the demonstration main programs and
some utilities in form of about 20 ﬁles in a single UNIX directory FOAM-export-v2.05.
Demonstration runs can be executed using standard make commands as follows:

make Demo-run
make DemoPers
make Demo-map
make DemoNR-run

The essential fragments of the output form make Demo-run are shown in Appendix B. The
compilation and linking procedure is encoded in the Makefile, which has to be checked
by the user if it conforms the local operating system.
In particular, if ROOT is used,
then certain paths and environmental variables in the Makefile have to be adjusted. The
use of the ROOT is decided by the presence of the variable ROOT DEF in ROOT DEF.h ﬁle.
Without ROOT user should execute make DemoNR-run.

The essential part of the Foam, that is class TFOAM, TFCELL and a few auxiliary classes
are located in the ﬁles TFOAM.cxx and TFOAM.h. This is the “core” of the Foam source.
The source code of the other utility classes TFHST, TFMAXWT, TPSEMAR and TFDISTR are in
separate ﬁles. The main programs are in ﬁles Demo.cxx and DemoPers.cxx. They should
serve as a useful templates for the user’s own application based on Foam.

There is also one Fortran77 source code circe2.f24, which contains certain testing
distribution linked to TFDISTR. The Makefile provides, therefore, also a useful example
of linking C++ and F77 codes.

There are also two output ﬁles output-Demo.linux and output-DemoNR.linux, which
the reader may use to check whether he is able to reproduce these benchmark output
results.

24We thank Thorsten Ohl for providing us a preliminary version of this code [18].

41

5.2 Simple example of an application

The very simple example of the use of the Foam may look as follows:

*FoamX

*** Initialization ***

= new TPSEMAR();
= new TFOAM("FoamX");

//
double MCwt;
TFDISTR *Density1 = new TFDISTR(FunType); // Create integrand function
TPSEMAR *PseRan
TFOAM
FoamX->SetkDim( 3);
FoamX->Initialize(PseRan,
//
TFHST *hst_Wt = new TFHST(0.0,1.25, 25);
double *MCvect =new double[3];
for(long loop=0; loop<1000000; loop++){

// Create random numb. generator
// Create Simulator
// Set dimension, h-rect.
// Initialize simulator

// Create weight histogram
// Monte Carlo event

*** MC Generation ***

Density1 );

MCwt = FoamX->MCgenerate(double *MCvect); // Generate MC event
hst_Wt->Fill(MCwt,1.0);

// Fill weight histogram

*** Finalization ***

}
//
double IntNorm, Errel;
FoamX->Finalize( IntNorm, Errel);
double MCresult, MCerror, AveWt, WtMax, Sigma;
FoamX->GetIntegMC( MCresult, MCerror);
double eps = 0.0005;
FoamX->GetWtParams(eps, AveWt, WtMax, Sigma); // get MC wt parameters
hst_Wt->Print();

// Print weight histogram

// get MC integral

// Print statistics, get normalization

The user has to provide the distribution function belonging to the class which has to

inherit from the following abstract class:

class TFOAM_INTEGRAND{ // Abstract class of distributios for Foam

public:

};

TFOAM_INTEGRAND() { };
virtual ~TFOAM_INTEGRAND() { };
virtual double Density(int ndim, double*) = 0;

In the above example the distribution *Density1 belongs to the class TFDISTR, which is
provided in the Foam distribution directory.

5.3 Conﬁguring the Foam

Foam has fourteen principal conﬁguration parameters plus parameters inhibiting and/or
predeﬁning division geometry in the cell split.

42

Param.
nDim
kDim
nCells
nSampl
nBin
OptRej
OptDrive

OptPeek

OptEdge

OptOrd

OptMCell

EvPerBin

Chat
MaxWtRej

Dimension of simplical sub-space
Dimension of hyperrectangular sub-space

Value Meaning
0∗
0∗
1000∗ Maximum number of Cells,
200∗
8∗
0∗
2∗
1
0∗
1
0∗
1
0∗
1
1∗
0
25∗
0
1∗
1.1∗

No. of MC events in the cell MC exploration
No. of bins in edge-histogram in cell exploration
OptRej=0, weighted; =1, w = 1 MC events
Maximum weight reduction,
or variance reduction
Next cell for split with maximum R′
or randomly with probability
Vertices are NOT included in the cell MC exploration,
or vertices are included in the cell MC exploration
Root cell is hyperrectangular in simplical subspace
or root cell is simplex in simplical subspace
Economic memory algorithm in hyperrectangular subspace is ON,
or economic memory algorithm in hyperrectangular subspace is OFF
Maximum no. of eﬀ w = 1 events/bin,
or counting of no. eﬀ events/bin is inactive
=0,1,2 is the “chat level” in the standard output
Maximum weight used to get w = 1 MC events

I (PeekMax),

I (PeekRan)

R′

∼

Table 6: Fourteen principal conﬁguration parameters and switches of the Foam program. The
default values are marked with the star superscript.

5.3.1 Principal conﬁguration parameters

All of the principal parameters listed in Table 6 are set to meaningful default values (see
Table), hence, the beginning user may stay ignorant about their role for some time, and
learn gradually later on how to exploit them in order to improve the eﬃciency of the
Foam. All these parameters are data members of the TFOAM class, see Table. 2. If the user
wants to redeﬁne all of them, then the relevant piece of code will look as follows:

nDim);
kDim);
nCells);
nSampl);
nBin);
OptRej);

FoamX->SetnDim(
FoamX->SetkDim(
FoamX->SetnCells(
FoamX->SetnSampl(
FoamX->SetnBin(
FoamX->SetOptRej(
FoamX->SetOptDrive( OptDrive);
FoamX->SetOptPeek(
FoamX->SetOptEdge(
FoamX->SetOptOrd(
FoamX->SetOptMCell( OptMCell);
FoamX->SetEvPerBin( EvPerBin);

OptPeek);
OptEdge);
OptOrd);

43

FoamX->SetMaxWtRej( MaxWtRej);
FoamX->SetChat(

Chat);

In practical applications one will redeﬁne a subset of them. The minimum requirement is
that the user sets nonzero value of nDim or kDim such that the total dimension nDim+kDim
is a non-zero positive number.

5.3.2 Inhibiting cell division in certain directions

If user of Foam decides to inhibit division in certain variable in the hyperrectangular
subspace, then it can be done with the method SetInhiDiv(int iDim, int InhiDiv)
of the class TFOAM, where iDim is the dimension index for which inhibition is done and
InhiDiv is the inhibition tag. This method should be used before invoking Initialize,
after setting nDim and/or kDim. The relevant code may look as follows:

FoamX->SetInhiDiv(0, 1); //Inhibit division of x_1
FoamX->SetInhiDiv(1, 1); //Inhibit division of x_2

The allowed values are InhiDiv=0,1 and the default value is InhiDiv=0. Note that
numbering of dimensions with iDim starts from zero and variables of the hyperrectangular
subspace always come ﬁrst, before the simplical ones.

5.3.3 Setting predeﬁned cell division geometry

We may predeﬁne divisions of the root cell in certain variable in the hyperrectangular sub-
space using method SetXdivPRD(int iDim, int len, double xDiv[]). The relevant
piece of the user code may look as follows:

double xDiv[3];
xDiv[0]=0.30; xDiv[1]=0.40; xDiv[2]=0.65;
FoamX->SetXdivPRD(0, 3, xDiv);

Again, this should be done before invoking Initialize, after setting nDim and/or kDim.

5.4 Persistency

Persistency of the Foam classes is arranged using “default streamers” of the ROOT [10]
package. Writing TFOAM class object into a disk ﬁle rmain.root can be done with the
single Write as follows:

TFile RootFile("rmain.root","RECREATE","histograms");
...
FoamX->Write("FoamX"); //Writing Foam on the disk, TESTING PERSISTENCY!
...
RootFile.Write();
RootFile.Close();

44

The instruction FoamX->Write("FoamX") can be put at any place of the code after the
instruction FoamX->Initialize(...), see example of the user code shown in Section 5.2.
Next, in another program TFOAM class object can be read from the disk ﬁle rmain.root

as follows:

TFile fileA("rmain.root");
fileA.cd();
fileA.ls();
fileA.Map();
fileA.ShowStreamerInfo();
fileA.GetListOfKeys()->Print();
TFOAM
FoamX->LinkCells();
FoamX->CheckAll(1);

// connect disk file

// optional printout
// optional printout
// optional printout
// optional printout

*FoamX = (TFOAM*)fileA.Get("FoamX"); // find object

// restore pointers of the binary tree of cells

// optional x-check of pointers

and at this point FoamX object is ready to generate MC events, as in the MC generation
part of the code shown in Section 5.2.

5.5 Fortran77 versions

The distribution directory FoamF77-2.02-export contains README ﬁle, two demonstration
main programs DemoFoam.f and DemoMCell.f to be compiled and run with the help of
commands

make DemoFoam
make DemoMCell

encoded in the Makefile. The outputs from the above runs can be compared with the
benchmark outputs output-DemoFoam-linux and output-DemoMCell-linux.

The basic Foam source ﬁles are: FoamA.f with header ﬁle FoamA.h and MCellA.f with

header ﬁle MCellA.h.

For the description of the input (conﬁguration) parameters see comments in FoamA.f
and MCellA.f respectively. The names of the conﬁguration variables are the same as in
C++ version, except nCells which is renamed to nBuff. Their values and the meaning
are the same.

Demonstration main programs DemoFoam.f and DemoMCell.f can serve as templates

for the user application programs.

The testing main program uses histograming package GLK of the KKMC program [13],

which user may replace with any other histograming package.

6 Numerical studies and example applications

In the following subsection we examine MC eﬃciency of the Foam in a series of numerical
exercises. In some of them we shall also show examples of the Foam application with the
distributions relevant for everyday practice in the high energy physics.

45

max/
w
i
h
0.99148
0.99147
0.99147
0.99147
0.99147
0.50538
0.50886
0.49922
0.50359
0.51091
0.72346
0.72677
0.72199
0.72200
0.72243
0.50363
0.50297
0.43076
0.44922
0.21029
0.20817
0.04199
0.03847
0.03279
0.15385
0.15313
0.14168
0.30910
0.30805
0.30905
0.03718
0.05247
0.05196
0.08490
0.09174
0.08853
0
0.00640
0.01285
0.01235

σ/
w
i
h
0.014585
0.014752
0.014752
0.014752
0.014752
0.54088
0.54033
0.55721
0.54674
0.54035
0.27758
0.27504
0.27710
0.27720
0.27786
0.51168
0.51001
0.63185
0.60669
1.19420
1.20067
2.12091
2.38588
2.61028
1.15211
1.19596
1.22627
0.71250
0.71462
0.71423
1.64608
1.73063
1.80538
1.30193
1.35307
1.38579
5.83954
3.85823
2.73991
2.92642

∆statist.R
1.031e-05
1.043e-05
1.043e-05
1.043e-05
1.043e-05
0.000382
0.000382
0.000394
0.000386
0.000382
0.000196
0.000194
0.000195
0.000196
0.000196
0.000361
0.000360
0.000446
0.000429
0.000844
0.000849
0.001499
0.001687
0.001845
0.000814
0.000845
0.000867
0.000503
0.000505
0.000505
0.001163
0.001223
0.001276
0.000920
0.000956
0.000979
0.004129
0.002728
0.001937
0.002069

R
0.99999782
0.99999962
0.99999962
0.99999962
0.99999962
0.99986832
1.00017104
0.99934710
1.00056316
0.99983999
0.99977045
0.99995080
1.00013270
1.00008994
0.99997875
1.00013082
0.99960319
1.00072564
1.00013171
1.00072248
1.00020405
0.99856206
0.99912901
0.99799089
1.00039754
0.99945766
0.99954178
0.99972833
1.00002674
0.99985093
0.99367339
1.00109792
1.00196909
1.00065580
0.99884358
1.00052122
0.97304842
0.98878698
0.98688299
0.99301117

nCells nSampl wε

nDim kDim
1
1
1
1
1
3
3
3
3
3
3
3
3
3
3
4
4
2
2
0
0
6
6
6
6
6
6
6
6
6
9
9
9
9
9
9
12
12
12
12

0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
2
2
4
4
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0

nCalls
203719
206192
206192
206192
206192
275421
435112
663493
834094
1015157
2312759
2675820
3054404
3333479
3575366
3825046
6559430
4493961
9374351
6642202
12337748
2311881
5542146
12844256
12737314
24134694
42827237
42808972
61803017
92531875
78325890
167710365
353943409
272162624
495260998
924011087
261911066
671460574
913072065
2117963809

1000
1000
1000
1000
1000
1000
1000
1000
1000
1000
10000
10000
10000
10000
10000
10000
10000
10000
10000
10000
10000
1000
1000
1000
10000
10000
10000
100000
100000
100000
100000
100000
100000
400000
400000
400000
100000
100000
400000
400000

333
1000
3333
10000
33333
333
1000
3333
10000
33333
333
1000
3333
10000
33333
1000
10000
1000
10000
1000
10000
3333
10000
33333
3333
10000
33333
1000
3333
10000
1000
3333
10000
1000
3333
10000
3333
10000
3333
10000

46

Table 7: Numerical results of Foam with the maximum weight reduction. Variable nCalls is
the total number of the function calls in the foam build-up.

nDim kDim
4
4
2
2
0
0

0
0
2
2
4
4

nCalls nCells nSampl wε

3855289
7760907
4589024
8696153
6157799
10547749

10000
10000
10000
10000
10000
10000

1000
10000
1000
10000
1000
10000

max/
w
i
h
0.27659
0.30313
0.23086
0.24696
0.08498
0.09881

σ/
w
i
h
0.31944
0.31483
0.38050
0.37153
0.92314
0.89859

∆statist.R
0.000225
0.000222
0.000269
0.000262
0.000652
0.000635

R
1.00025027
0.99978048
0.99967167
0.99959278
1.00006553
1.00024727

Table 8: Numerical results of Foam with the variance reduction.

Figure 15: Testing distribution ρcamel(x) of Ref. [3] in two dimensions.

6.1 Dependence of the Foam eﬃciency on the conﬁguration pa-

rameters

As a ﬁrst numerical exercise we examine the dependence of the Foam eﬃciency on the
most important (input) conﬁguration parameters, including the dimension of the space.
In Table 7 we collect results from many MC runs for various dimensions, number of
cells and number of MC events in single cell exploration, varying also the type of the
cells. We use always the same test distribution ρcamel(x) of Ref. [3] which features two
relatively narrow gaussian peaks placed on the diagonal. The 2-dimensional version of
this distribution is shown in Fig. 15. We have used the non-default values nBin=4 and
EvPerBin=50 and the default values for the other conﬁguration parameters. In this table
all tests were done for the default option of reduction of the maximum weight, OptDrive=2
(for results with OptDrive=1 see next table). The eﬃciency wε
is calculated using

w

max/

h

i

47

maximum weight wε
is calculated with help of a small auxiliary class TFMAXWT.

max deﬁned as in25 Ref. [1] for ε = 0.0005. The maximum weight wε

max

In Table 7 the eﬃciency of the MC run measured in terms of wmax/

The value of the integral R
the MC run in which the total number of the MC events was 2
integral R is well known, it is equal one, within 10−5.

.
i
∆statist.R, shown in last four columns, was obtained from
106. The value of the

and σ/

±

×

w

w

h

i

h

The following observations based on the results of Table 7 can be made:

•

•

•

Looking at the results for total dimension n = 4 we see that the hyperrectangular
cells clearly provide better MC eﬃciency than simlical ones. All other results are
for hyperrectangular cells.

All of results are consistent with the observation that the MC eﬃciency depends
critically on the number of cells. In particular, see results for n = 6, the increase of
nSamp (no. of MC events in cell exploration) beyond certain value does not improve
the eﬃciency at all.

In the case of the very ineﬃcient Foam, see n = 12 with σ/
6, the estimate of
the MC statistical error can be misleading. We see an indication, that one should
not trust runs with σ/

> 3.

i ∼

w

w

h

h

i

•

For this particular testing function the dimension n = 12 requires a minimum of
400k cells and the resulting eﬃciency of order of 1% is barely acceptable26.

In Table 8 we repeat the exercise of Table 7 for the option of the variance reduction
OptDrive=1 at four dimensions. As compared to Table 7 we see net improvement in the
variance and deterioration of the wε

max. This agrees with the expectations.

Functions at 2-dimens. Foam 1.01
ρa(x) (diagonal ridge)
0.93
ρb(x) (circular ridge)
0.82
ρc(x) (edge of square)
0.57
Functions at 3-dimens. Foam 1.01
ρa(x) (thin diagonal)
0.67
ρb(x) (thin sphere)
0.36
ρc(x) (surface of cube)
0.37

0.93
0.82
1.00

Simpl. H-Rect. VEGAS
0.03
0.86
0.82
0.16
0.53
1.00
Simpl. H-Rect. VEGAS
0.002
0.66
0.11
0.53
0.30
1.00

0.74
0.47
0.95

max for ε = 0.0005. Functions ρx(x) are the same as in Ref. [1].
Table 9: Eﬃciencies
Results from Foam are for 5000 cells (2500 active cells) and cell exploration is done for a
modest 200 MC events/cell.

w

i

h

/wε

25The ε-dependent maximum weight is deﬁned such that events with w > wε

max contribute ε-fraction
to the total integral. It is numerically more stable in the numerical evaluation than the one deﬁned as
the biggest weight in the MC run.

26However, we still get the correct value of the integral within 0.2%.

48

k n

Nc

Ns Nb

1
1
2
1
1
1
1
1
1

2
0
0
0
0
0
0
0
0

0
2
2
2
2
2
2
2
2

1K
1K
1K
5K
10K

1K
1K
1K
1K
1K
1K 10K
5K 10K
2K
1K
8K
1K

Nef f
bin
25
25
25
25
25
25
25
25
100

nCall

σ
hwi
900K 1168.8
169K 0.2272
215K 0.2962
656K 0.0639
1174K 0.0487
849K 0.1479
1457K 0.0606
621K 0.0606
1671K 0.1048

hwi
wε
max
0.0
0.6149
0.7754
0.8421
0.8877
0.5920
0.8354
0.8354
0.6652

4
4
4
4
4
4
4
8
8

R

∆R

±

5.40726
3.14121
3.14118
3.14159
3.14156
3.14118
3.14150
3.14195
3.14168

±
±
±
±
±
±
±
±
±

1.99871
0.00022
0.00029
0.00006
0.00005
0.00014
0.00006
0.00026
0.00010

∆R/R

0.36963
10−5
7.1
·
10−5
9.3
·
10−5
2.0
·
10−5
1.5
·
10−5
4.6
·
10−5
1.9
·
10−5
8.4
·
10−5
3.3
·

Table 10: Numerical results of Foam for 2-dimensional distribution of eq. (26) for µ = 10−6.
Variation of the conﬁguration parameters: k =kDim, n =nDim, Nc =nCells (no. of function
calls), Nb =nBin, Nef f
bin =EvPerBin. In ﬁrst column we mark the type of the weight optimiza-
tion OptDrive=1,2, for variance or maximum weight reduction. The value of the integral R
and its statistical error ∆R are from MC run of NM C = 107 events. wε
max is for ε = 0.0005.
nCalls is the total number of the function calls in the foam build-up.

6.2 Comparison with Foam 1.x and classic VEGAS

In Table 9 we update the comparison of the Foam and VEGAS of Ref. [1], adding results
for the new hyperrectangular option. The simplical results are now clearly improved with
respect to Ref. [1], because of the better cell division algorithm. Generally, hyperrectan-
gular cell mode provides as good eﬃciency as simplical one. However, one should keep in
mind that Foam with hyperrectangular cells is factor two or more faster in the execution.

6.3 Example of sharply peaked distribution

In Table 10 we examine the dependence of the MC eﬃciency/error on the various input
conﬁguration parameters of the Foam. All these numerical results are for the distribution

ρg(x) =

µx2
(x1 + x2 −
which, for µ = 10−6, has a very sharp ridge across the diagonal x1 + x2 = 1. This
distribution is taken from Ref. [19] and is related to the photon distribution at high
energy electron-positron colliders.

1)2 + µ2 ,

(26)

What can we learn from the results in Table 10? First of all, in ﬁrst line, we see a
spectacular failure of the Foam with rectangular cells27. The value of the integral is wrong
by factor two and statistical error is underestimated. This illustrates the problem of the
the lack of “angular mobility” of the rectangular cells indicated in Section 2.3. Rectangles
are unable to align with the singularity along the diagonal. This we illustrate in the left
plot of Fig. 16, for rectangular 1000 cells, where we see clearly “blind spots”. In the right

27Setting the no. of the MC events in a single rectangle exploration to 104 cures the problem partly.

49

Figure 16: Rectangular and triangular foam of 1000 cells for the distribution of eq. (26).

plot the triangular foam of cells is clearly aligning with the diagonal ridge. In the rows
2-3 of Table 10 we see the reasonable numerical results for the triangular foam. They
are for the maximum weight reduction and variance reduction options respectively; the
other conﬁguration parameters are rather close to the default ones. In rows 4-5 we are
playing with the increase of the cell number and in the rows 6-7 with the number of
the MC events used in the cell exploration. Finally in rows 8-9 we change binning of the
histograms used in the MC cell exploration. As we see, the most proﬁtable in terms of the
MC eﬃciency/precision is the increase of the number of the cells, however, adjusting other
parameters can also help. In all cases we show the number of the calls of the distribution
nCalls in the foam build-up. In the best result of the line 5 with 10000 triangular cells
we have obtained 5 digit precision for about 107 function calls28.

Summarizing, we see from the above exercise, that the user of the Foam has a possi-
bility to adjust several conﬁguration parameters, such that the MC eﬃciency for a given
distribution is improved quite signiﬁcantly.

6.4 Decay of τ lepton into 3 pions

In Table 11 we collect numerical results for an example of the Foam application to the
νπ−π+π−, according to
very practical problem of the MC simulation of the decay τ
the distribution (matrix element squared) taken from the MC program TAUOLA [20, 21].

→

The amplitude of the decay process contains two distinct parts due two Feynman
diagrams, see Fig. 17, which have peaks due to a1 resonance and ρ resonance. There
are two peaks due to ρ resonances partly overlapping in the integration space, such that

28In ref. [19] the same precision for the same function was attained for about 108 function calls.

50

MAPPING k n

Nc Ns Nb

(a1) OFF 8
(a2)
ON 9
(b1) OFF 8
(b2)
ON 9
(c0) OFF 0
(c1) OFF 8
(c2)
ON 9
(d1) OFF 8
ON 9
(d2)

0
0
0
0
8
0
0
0
0

1
1
20
20
1000
1000
1000
5000
5000

1K
1K
1K
1K
1K
1K
1K
1K
1K

Nef f
bin
25
25
25
25
25
25
25
25
25

nCall

σ
hwi
2.1555
518
1.1391
218
1.1847
5767
3548
0.7626
487K 1.6603
145K 0.5298
125K 0.7626
528K 0.4330
596K 0.4037

hwi
wε
max
0.038
0.115
0.130
0.206
0.085
0.359
0.394
0.438
0.467

4
4
4
4
4
4
4
4
4

∆R/R

SIZE

0.00481
0.00254
0.00264
0.00170
0.00371
0.00118
0.00104
0.00096
0.00090

15KB
15KB
15KB
15KB
54KB
53KB
53KB
209KB
209KB

Table 11: Numerical results from Foam simulation/integration for the decay process τ
→
νπ−π+π−, according to matrix element squared of the TAUOLA Monte Carlo [20,21] program.
All MC averages are for 200K events generated after Foam initialization with the conﬁguration
parameters given in the table. Notation and the meaning of the quantities are the same as
in previous tables. The size of the ROOT disk-ﬁle, in which the Foam object was written is
indicated in the last column.

-

1a

0r

-

0r

1a

-

+p

-

-

-

+p

Figure 17: Feynman diagrams for τ decay into 3 pions.

the actual shape of the diﬀerential distribution is rather complicated. We took for this
exercise subroutine DPHTRE of TAUOLA in which nine random numbers29 are replaced by
the nine variables of the Foam. The 4-particle phase space is 8-dimensional. The ninth
variable is due to two branches in the phase space parametrization of TAUOLA, and in
case of the Foam as well (the method is similar to that of Section 2.11). In cases of “no
mapping and no multibranching” we are back to eight dimensions. The variables x1 and
x2 of the Foam represent (up to a linear transformation) the two eﬀective masses of 3π
and 2π system. The next four variables xi, i = 3, 4, 5, 6 are polar variables cos θ and φ
of the pions in the rest frame of the 3π and 2π systems – this is a completely standard

29Including two random numbers of the subroutine SPHERA and two (Euler) angles corresponding to

the overall rotation of the entire event.

51

t
t
n
p
p
t
t
n
p
p
Figure 18: The distribution of τ
the other variables to some values.

→

ν3π decay as a function of x1 and x2 (without mapping), ﬁxing

phase space parametrization, see ref. [21], and also Ref. [22]. The variables x7 and x8
are reserved for the overall rotation, and the last one x9 is mapped into branch index,
see Section 2.11. Variables x7 and x8 are inhibited (no cell split in them), because the
distribution does not depend on them. Variable x9 (if present) has a predeﬁned division
value equal 0.5 and is inhibited for the division (see Section 2.11). In Fig. 18 we show the
decay distribution as a function of x1 and x2 (without mapping), ﬁxing the other variables
to some values. The distribution is clearly a non-trivial one.

In Table 11 we show MC eﬃciency of the Foam for gradually increasing number of the
hyper-rectangular cells, with the mapping compensating for the for Breit-Wigner peaks
of the a1 and ρ resonances (as in Ref. [21]) and without. One example with simplical cells
is also included.

The most striking result in Table 11 is the comparison of lines (a2) and (b1): the Foam
algorithm with only 20 cells is performing equally well as the doubly-branched mapping
compensating for the resonance peaks of the a1 and ρ. When going to higher number of
cells, the MC eﬃciency in the cases with and without mapping becomes almost the same.
This is expected, because Foam also does the mapping compensating for the resonances
on its own. From the row (c0) we see also that the simplical mode of the Foam is clearly
under-performing. We think that foam with 1000 cells, see row (c1) in Table 11, is an
economic solution for this problem30. (Mapping due to resonances is not really necessary
30The net proﬁt with respect to TAUOLA [20, 21] would be three times faster program, and more impor-

tantly, a signiﬁcantly simpler code.

52

in this case.)

Figure 19:
circe2 [18] with 500 cells.

Foam of rectangular cells for the electron-positron beamstrahlung spectrum of

6.5 Beamstrahlung spectrum

Fig. 19 shows foam of rectangular cells for the 2-dimensional beamstrahlung spectrum
D(z1, z2) of the electron-positron collider [23] at 500GeV, encoded in the program circe2
of Ref. [18, 24]. It should be stressed that this spectrum is not known analytically but
rather through a numerical ﬁt to results of the machine simulation or (in the future) from
an experiment. In order to avoid (integrable) inﬁnite singularities at zi = 1 in D(z1, z2)
zi)0.1,
i = 1, 2. For this exercise we used foam of
we use in Fig. 19 variables ti = (1
−
500 cells getting the MC eﬃciency σ/
max = 0.64, (for ε = 0.0005);
w
enough for practical application (can be easily improved by adding more cells).

= 0.41 and

/wε

w

i

h

i

h

Generating D(z1, z2) is not really so very much important and diﬃcult problem. A
more interesting problem is to generate the distribution D(z1, z2)σ(sz1z2), where σ(s) is
the cross section of some physics process, which may have a strong singularity of its own,
like resonance or threshold factor. Such a problem was already treated with help of Foam
program in KKMC [13] program and the study of Ref. [25].

53

7 Conclusions

The author hopes that this new adaptive tool for constructing eﬃcient MC programs will
ﬁnd its way to many applications in high energy physics and beyond. Thhe main points
on the new Foam algorithm and the program are the following:

•

•

•

•

•

•

•

Foam is a versatile adaptive general purpose Monte Carlo similator.

Foam algorithm is based on the cellular division of the integration domain.

Geometry of the “foam of cells” is rather simple, simplical or hyperrectangular cells
are constructed in the process of a binary split.

It works in principle for arbitrary distribution – no assumption of factorizability as
in VEGAS of Ref. [3].

Foam is reducing maximum weight of the weight distribution, it can therefore provide
unweighted events. The variance reduction, useful for the integration and generating
weighted events, is also available.

Memory-eﬃcient coding of cells allows to build up to
memory of a typical desktop computer.

∼

106 cells in the computer

The rules for picking up next cell for the division and the division geometry starts
to be relatively sophisticated (projection on edges etc.) This costs CPU time which
becomes the main barrier towards higher MC eﬃciency.

•

Foam can deal eﬃciently with strongly peaked distribution up to
with todays desktop computers.

∼

12 dimensions,

8 Acknowledgements

I would like to thank T. Ohl, A. Para, W. P laczek, E. Richter-W¸as, F. Tkachov and
Z. W¸as for the interesting discussion and R. Brun for help in getting persistency using
ROOT. Support and warm hospitality of the CERN Theory Division and DESY Zeuthen
is kindly acknowledged. The useful assistance of the Parasoft Company in debugging
C++ code (with the Insure++ tool) is also acknowledged.

54

A Variance optimization

Suppose we have already constructed the cells ω1, ω1, . . . , ωN and within each cell we
have deﬁned the function ρ′(x) constant over the cell, ρ′(x) = ρ′
I =
IVI is known, because the volume of the cell VI is known. The function
ωi
ρ(x) is not, in general, constant over the cell and the weight w = ρ(x)/ρ′(x) is used to
R
determine its integral in the usual way: R = R′

I. The integral R′

RI, where the average

ρ′(x)dxn = ρ′

w

w

iρ′ =

h

Ih

iρ′

I

P
I (x)a(x)dxn
ρ′

a
I =
iρ′

h

1
R′

I ZωI

is deﬁned for the I-th cell alone.

h

I →

The question is now the following: preserving the geometry of the cells, can we get
smaller variance, simply, by changing the probabilities of the generation of the cells?
I = λIρ′
Rescaling ρ′
ρ′′
I does not aﬀect the integral R, because the change of the
normalization of R′ and
w
iρ′ is cancelling. It is convenient to assume that the above
rescaling preserves R′ = R′′ and the total average weight
iρ′′, that is λI obey
w
h
I R′
IλI = const. With the above constraint in mind we now ask:
the constraint
2
for what values of λI the dispersion of the total weight σ2 =
ρ′′ is minimal31.
w
P
iρ′′ is independent of λI, we may look only for a minimum of
w
Since by construction
w2

i
iρ′′. With the standard methods we get a (local) minimum condition:
∂
∂λI

iρ′′ + ΛR′′

iρ′ =
w2

IλIdxn + Λ
ρ′

= 0 (27)

1
R′

I R′

iρ′′

I =

IλI

− h

w2

R′

P

=

w

h

h

h

h

h

2

∂
∂λI (

! )

ρ(x)
ρ′
IλI (cid:19)

n

o

I ZωI (cid:18)
X

 

I
X

where Λ is the Lagrange multiplier. The solution of the minimum condition

(28)

(29)

is simply λI ≃

const

w2

iρ′

I

×

h
q

, or more precisely

R′
I
R′ h

w2

iρ′

I

1
λ2
I −

ΛR′

I = 0

λI =

h
R′
q
J
R′

J

I

iρ′
w2

h

iρ′

J

.

w2

q

P

w2
The value of
also rather simple

h

w2

imin ≡ h

iρ′′ calculated at the minimum, that is for λI of eq. (29), is

w2

imin =

R′
I
R′ h

w2

iρ′

1
λ2
I

=

h

h
q
31 This problem was, of course, often considered in the past, see for instance Refs. [3, 15]. We outline

(cid:18)Dq

J
X

I
X

!

 

(cid:19)

E

ρ′

h

J

J

I

R′
J
R′

w2

iρ′

2

=

w2

iρ′

2

.

(30)

here the solution for the sake of completeness and convenience of the reader.

55

w2

Let us note that the functional
imin, which we intend to minimize in the process
of the evolution of the foam (cell split) is a simple sum of contributions from all cells.
Consequently, when working out details of the split of a given cell we may calculate the
gain in terms of the total dispersion independently of other cells, see also below. This
very convenient feature is exploited in the algorithm of the foam build-up.
Adopting (temporarily) the following normalization conventions: ρ′

I = 1, w = ρ(x)

p

h

and R′

I = VI, λI ≃

h
p

ρ2

iI, we get
ρ′′
I =

ρ2

iI,

R′′

I = VI

ρ2

iI,

h

. . .

h
p

where the average
the I-th cell.

h
p
iI is understood as deﬁned for points uniformly distributed within
In the Foam algorithm we do not go, of course, through a judicious adjustment of the
relative importance of the cells, which minimizes the variance as described above, but
instead, we simply declare that the distribution ρ′(x) is deﬁned by the optimum solution
of eq. (31). Once we have done it, for the MC weight w deﬁned with respect to such a
new ρ′(x), we ﬁnd out that
= 1. What
is then minimized in the process of the cell division is the ratio of the variance to the
average weight32

iI = 1 for each cell, and also for all cells,

w2

w2

i

h

h

(31)

σ2
w

2 =

R′
R

2

1.

−

(cid:18)
This quantity is not so convenient to optimize in the process of the cell split (foam
evolution) and we rather chose to minimize a closely related ‘linearized” quantity

(cid:19)

i

h

Rloss = R

σ2
w

i

h

 s

2 + 1

1

=

−

!

VI(

h
p

I
X

w2

iI − h

w

iI) =

ρloss(x)dxn = R′

R,

−

Z

(32)

(33)

which is a sum over all cells and is a monotonous ascending function of σ/
. In the
h
process of the cell division ωI →
ωIa ⊕
step by step, by playing
with the geometry of the cell split such that the gain in the total Rloss = R′
R due to a
given cell split is as big as possible. It is convenient that the contributions from the other
cells to Rloss are unchanged. In this way every cell split will lead to a smaller and smaller
σ/

in the ﬁnal MC run.

ωIb we decrease σ/

−

w

w

w

i

h

i

h

i

32 We exploit here the relation

= R/R′, and we should keep in mind that R is constant during the

variance minimization.

w
h

i

56

B Output of the demonstration program in C++

=

2.05

Release date: 2002.02.13

****************************************
******
******
TFOAM::Initialize
****************************************
FoamX

FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F
F
F
F
F
F
F
F
F
F
F
F
F
F
Dimension of the simplical sub-space
F
F
Dimension of the hyper-cubical sub-space
F
F
Requested number of Cells (half of them active)
No of MC events in exploration of a cell cell
F
F
No of bins in histograms, MC exploration of cell F
F
F
Maximum No effective_events/bin, MC exploration
F
F
Type of Driver
F
F
Decides whether vertices are included in the MC
F
F
Type of the cell Peek =0,1 for maximum, random
F
F
Root cell hyp-cub. or simplex, =0,1
F
F
MegaCell option, slim memory for hyp-cubes
F
F
Additional debug histogram, SetDirectory(1)
F
F
Numbering of dimensions starts with h-cubic
F
MC rejection on/off for OptRej=0,1
F
F
Maximum wt in rejection for wt=1 evts F
2
F
F
F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

Version =
nDim =
kDim =
nCells =
nSampl =
nBin =
EvPerBin =
OptDrive =
OptEdge =
OptPeek =
OptOrd =
OptMCell =
OptDebug =
OptCu1st =
OptRej =
MaxWtRej =

0 =
2 =
1000 =
500 =
8 =
25 =
2 =
0 =
0 =
0 =
1 =
1 =
1 =
0 =

=1,2 for Sigma,WtMax

=

*** TFOAM::Initialize FINISHED!!!

FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F
F
F
F
F
F
F
F
F
F
F
F
F
F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

Total number of function calls
Primary total integral
Driver total integral
Estimate of the true MC Integral

nCalls =
XPrime =
XDiver =
MCresult =

1.2748942
0.27441356
1.0004806

246799 =

=
=
=

***

57

AveWt =
WtMin =
WtMax =

NevGen =
LastVe =
nCalls =

248799 = Total number of function calls

2000 = Number of generated events in the MC generation
-1 = Number of vertices (only for simplical option)

****************************************
******
******
TFOAM::Finalize
****************************************

----------------------------------------
0.78836949
1.3022085e-06
1.0227719

FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
F
0.0052357675 = Result of the MC Integral F
IntMC =
F
F
F
MCerelat =
MC efficiency, acceptance rate F
F <w>/WtMax =
MC efficiency, variance/ave_wt F
F Sigma/<w> =
F
WtMax(esp= 0.0005)
WtMax =
F
F
F
variance of MC weight
Sigma =
F
F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

1.2748942
0.27441356
----------------------------------------

Average MC weight
Minimum MC weight (absolute)
Maximum MC weight (absolute)

0.0052092644
0.80037512
0.23296539
0.985
0.1836628

Primary total integral, R_prime
Driver total integral, R_loss

----------------------------------------

Relative error of the MC intgral

XPrime =
XDiver =

1.0050877 +-

=
=
=
=
=

=
=
=

=
=

58

References

[1] S. Jadach, Comput. Phys. Commun. 130 (2000) 244, physics/9910004.

[2] M. Ciesla and M. Slusarczyk, M.Sc thesis at the Institute of the Computer Science,

Jagiellonian University, Krak´ow, Poland, 2000.

[3] G.P. Lepage, J. Comput. Phys. 27 (1978) 192.

[4] S. Kawabata, Comp. Phys. Commun. 88 (1995) 309.

[5] T. Ohl, Comput. Phys. Commun. 120 (1999) 13, hep-ph/9806432.

[6] G.I. Manankova, A.F. Tatarchenko and F.V. Tkachov, Milxy way: How much better
than vegas can one integrate in many dimensions?, A Contribution to AINHEP-95,
Pisa, Italy, Apr 3-8, 1995 (extended version).

[7] E. de Doncker and A. Gupta, Parallel Computing 24 (1998) 1223.

[8] E. de Doncker, A. Gupta and R. Zanny, Journal of Computational and Applied

Mathematics 112 (1999).

[9] E. de Doncker, K. Kaugars and A. Gupta,

User manual of parint1.1,

http://www.cs.wmich.edu/

parint/.

∼

[10] R. Brun and F. Rademakers, Root - an object oriented data analysis framework,
Proceedings AIHENP’96 Workshop, Lausanne, Sep. 1996, Nucl. Inst., Meth. in Phys.
Res. A 389 (1997) 81-86, See also http://root.cern.ch/.

[11] S. Jadach and W. P laczek, Comput. Phys. Commun. 72 (1992) 221.

[12] M. Boonekamp, (2001), hep-ph/0111213.

[13] S. Jadach, B.F.L. Ward and Z. Was, Comput. Phys. Commun. 130 (2000) 260,

hep-ph/9912214.

[14] S. Jadach, (1999), physics/9906056.

[15] R. Kleiss and R. Pittau, Comput. Phys. Commun. 83 (1994) 141, hep-ph/9405257.

[16] G. Marsaglia, B. Narasimhan and A. Zaman, Comput. Phys. Commun. 60 (1990)

345.

[17] S. Jadach et al., Comput. Phys. Commun. 140 (2001) 475, hep-ph/0104049.

[18] T. Ohl, Circe version 2.0: Beam spectra for simulating linear collider and photon
collider physics, (to be published, code and parametrisations provided by the author
in advance), 2002, WUE-ITP-2002-006.

59

[19] E. de Doncker, R. Zanny and K. Kaugars, Integrand and performance analysis with

parint/parvis, http://www.cs.wmich.edu/

parint/, 2000.

∼

[20] S. Jadach et al., Comput. Phys. Commun. 76 (1993) 361.

[21] M. Jezabek et al., Comput. Phys. Commun. 70 (1992) 69.

[22] M. Skrzypek and Z. Was, Comput. Phys. Commun. 125 (2000) 8, hep-ph/9904385.

[23] ECFA/DESY LC Physics Working Group, J.A. Aguilar-Saavedra et al.,

(2001),

hep-ph/0106315.

[24] T. Ohl, Comput. Phys. Commun. 101 (1997) 269, hep-ph/9607454.

[25] G. Blair, Particle masses and widths via threshold scans at the linear collider,
APS/DPF/DPB Summer Study on the Future of Particle Physics (Snowmass 2001),
Snowmass, Colorado, 30 June - 21 July 2001.

60

