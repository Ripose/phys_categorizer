6
0
0
2
 
c
e
D
 
2
1
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
4
0
1
2
1
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

New version of PLNoise: a package for exact
numerical simulation of power-law noises

Edoardo Milotti ∗

Dipartimento di Fisica, Universit`a di Trieste and I.N.F.N. – Sezione di Trieste
Via Valerio, 2 – I-34127 Trieste, Italy

Abstract

In a recent paper I have introduced a package for the exact simulation of power-law
noises and other colored noises (E. Milotti, Comput. Phys. Commun. 175 (2006)
212): in particular the algorithm generates 1/f α noises with 0 < α ≤ 2. Here I
extend the algorithm to generate 1/f α noises with 2 < α ≤ 4 (black noises). The
method is exact in the sense that it produces a sampled process with a theoret-
ically guaranteed range-limited power-law spectrum for any arbitrary sequence of
sampling intervals, i.e., the sampling times may be unevenly spaced.

PACS: 02.50.Ey,05.40.Ca,02.70.Uu

Key words: 1/f α noise generation; colored noise generation; uneven sampling;
Gaussian noise; 1/f noise; black noise; fGn; fBm

NEW VERSION PROGRAM SUMMARY

Program Title: PLNoise
Catalogue identiﬁer:

Licensing provisions: none

Programming language: ANSI C.

Computer: Any computer with an ANSI C compiler: the package has been tested
with gcc version 3.2.3 on Red Hat Linux 3.2.3-52 and gcc version 4.0.0 and 4.0.1 on
Apple Mac OS X-10.4.

Operating system: All operating systems capable of running an ANSI C compiler.

∗ tel. +39 040 558 3388, fax +39 40 558 3350

Email address: milotti@ts.infn.it (Edoardo Milotti).

Preprint submitted to Elsevier

2 February 2008

RAM: the code of the test program is very compact (about 60 Kbytes), but the
program works with list management and allocates memory dynamically; in a typ-
ical run with average list length 2 · 104, the RAM taken by the list is 200 Kbytes.

Classiﬁcation: 4.13

External routines: The package needs external routines to generate uniform and
exponential deviates. The implementation described here uses the random number
generation library ranlib freely available from Netlib [1], but it has also been suc-
cessfully tested with the random number routines in Numerical Recipes [2]. Notice
that ranlib requires a pair of routines from the linear algebra package LINPACK,
and that the distribution of ranlib includes the C source of these routines, in case
LINPACK is not installed on the target machine.

Catalogue identiﬁer of previous version: ADXV v1 0

Journal reference of previous version: Comput. Phys. Commun. 175 (2006) 212

Does the new version supersede the previous version?: Yes

Nature of problem: Exact generation of diﬀerent types of colored noise.

Solution method: Random superposition of relaxation processes [3], possibly fol-
lowed by an integration step to produce noise with spectral index > 2.

Reasons for the new version: Extension to 1/f α noises with spectral index 2 <
α ≤ 4: the new version generates both noises with spectral with spectral index
0 < α ≤ 2 and with 2 < α ≤ 4.

Summary of revisions: although the overall structure remains the same, one routine
has been added and several changes have been made throughout the code to include
the new integration step.

Unusual features: The algorithm is theoretically guaranteed to be exact, and unlike
all other existing generators it can generate samples with uneven spacing.

Additional comments: The program requires an initialization step; for some pa-
rameter sets this may become rather heavy.

Running time: running time varies widely with diﬀerent input parameters, how-
ever in a test run like the one in section 3 in the long write-up, the generation
routine took on average about 75 µs for each sample.

References:

[1] B. W. Brown, J. Lovato, and K. Russell: ranlib, available from Netlib

(http://www.netlib.org/random/index.html, select the C version ranlib.c).

2

[2] W. H. Press, S. A. Teulkolsky, W. T. Vetterling, and B. P. Flannery, Numerical
Recipes in C: The Art of Scientiﬁc Computing, 2nd ed. pp. 274-290 (Cambridge
Univ. Press., Cambridge, 1992).

[3] E. Milotti, Phys. Rev. E 72, 056701 (2005).

3

LONG WRITE-UP

1 Introduction

I have recently developed a power-law noise generator which uses a superposi-
tion of uncorrelated simple relaxation processes with a uniform distribution of
relaxation rates to produce 1/f noise, and a power-law distribution of relax-
ation rates to obtain 1/f α noise [1,2]: the generator can be easily modiﬁed to
produce complex superpositions of diﬀerent power-law noises, like those ob-
served in precise clocks [3]. This generator also has a very unusual and unique
feature: the superposition mechanism takes into account the correlation be-
tween diﬀerent samples, and does it so exactly, so that its noise output can
be sampled at arbitrary sampling times. This is important whenever sampling
cannot be performed at evenly spaced times: uneven sampling is quite common
in astronomical observations [4], but also in other ﬁelds such as climatology
[5], it shows up whenever observations have unintentional gaps and missing
data [6], and sometimes bunched sampling may even be a technical need,
e.g. in hard-disk controllers [7]; moreover, uneven sampling has some special
properties, because it is not band limited in the same sense as ordinary, even
sampling [8]. The generator does not produce exactly Gaussian noise, but the
closeness to Gaussianity is tunable and the noise distribution can approach a
true Gaussian to any required degree by a proper parameter setting [1].

Most of the observed power-law (1/f α) noises have spectral indexes 0 < α ≤ 2,
with an apparent clustering around α = 1. However noises with higher spec-
tral indexes 2 < α ≤ 4 also show up in several unrelated systems [9,10] like the
water level of the Nile river, economics, orchid population size [11] and local
temperature ﬂuctuations and aﬀect precise timekeeping [3] and our ability to
predict environmental and animal population variables [12]. Noises with α > 2
also appear in the energy level ﬂuctuations of quantum systems [13,14]. These
noises correspond to generalizations of the standard one-dimensional random
walk, and for this reason the corresponding process is often called fractional
Brownian motion (fBm) (likewise Gaussian noises with 0 ≤ α ≤ 2 are also
called fractional Gaussian noises (fGn)). Because of their extreme peaking
behavior at low frequencies these noises are also called “black” [10], and they
display marked persistence properties [9] that may lead to the mistaken iden-
tiﬁcation of underlying trends in experimental data [15].

It is easy to see that there is no way to produce black noises from the superpo-
sition of simple relaxation processes, the spectral density of a train of random
pulses with simple exponential response with decay rate λ is proportional to
1/(ω2 + λ2) and its derivative in a log-log plot ranges from 0 to -2: thus no
simple superposition can have a spectrum that decays faster than 1/f 2 and

4

the algorithm described in [1,2] is unable to simulate this very interesting class
of power-law noises. This paper addresses the practical problem of including
black noises in the the noise generator introduced in [2], preserving all its good
features.

2 Generation of black noises

It may be argued that the superposition argument could still be used if one
takes pulses with non-exponential shapes, however in that case the theory
exposed in [1] must be revised and the analysis becomes considerably harder.
These diﬃculties can be circumvented when we note that the relationship
between the spectral density Sx(ω) of a random process x and the spectral
density Sy(ω) of its integral y is Sy(ω) = Sx(ω)/ω2 and therefore it is possible
to generate a black noise taking the integral of a power-law noise obtained from
simple superposition. Here, as in [1,2], I consider a noise signal x(t) which is
a linear superposition of many random pulses, i.e., pulses that are random in
time and are associated to a memoryless process with a Poisson distribution,
and such that their pulse response function is

exp(−λt) if t ≥ 0

0

if t < 0

h(t, λ) = 




x(t) =

Akh(t − tk, λk)

Xk

with a decay rate λ which is a positive deﬁnite random variate with probability
density gλ(λ) in the range (λmin, λmax) so that

where tk is the time at which the k-th pulse occurs, Ak is its amplitude and
λk is the decay rate of its pulse response function. In principle the amplitude
is also a random variate, but here I take a ﬁxed amplitude Ak = A. If n is the
pulse rate, it can be shown [1] that the average signal level is

hxi = nA

1
λ (cid:29)

,

(cid:28)

the variance is

h(∆x)2i =

nA2

2 (cid:28)

1
λ (cid:29)

,

5

(1)

(2)

(3)

(4)

and the spectral density is

S(ω) =

nA2
2π

λmax

Z
λmin

gλ(λ)
ω2 + λ2 dλ,

(5)

(6)

(7)

(8)

(9)

where the decay rate λ which is a positive deﬁnite random variate with prob-
ability density gλ(λ) in the range (λmin, λmax). I deﬁne the normalized zero-
mean process as follows

xN (t) =

x(t) − hxi

A

=

h(∆x)2i

q

k h(t − tk, λk) − hxi
h(∆x)2i

,

P

q

and the integral of xN (t) is

yN (t) =

xN (t′)dt′ =

t

Z
−∞

t

Z
−∞

x(t′) − hxi
h(∆x)2i

dt′

q

. Equation (7) is a trivial analytical answer which is still useless for inclusion
in the generator and it must be suitably rearranged: from equation (7) we
see that hyN (t)i = 0, and that yN (t) is a kind of continuous one-dimensional
random walk process

yN (t + ∆t) = yN (t) +

xN (t′)dt′

t+∆t

Z
t

= yN (t) +

t+∆t

1

h(∆x)2i

q





Z
t

x(t′)dt′ − hxi∆t



where yN (t) is the integrated process sampled at time t and yN (t + ∆t) is
sampled at time t + ∆t (notice that ∆t is not a short integration time, but
the arbitrary time interval between any two sampling times). From equation
(2) we note that the integral in equation (9) can be rearranged as follows

t+∆t

Z
t

t+∆t

Xk

Z
t

x(t′)dt′ = A

h(t′ − tk, λk)dt′

= A

Xtk<t

e−λk(t−tk)
λk

1 − e−λk∆t
h

i

+ A

Xtk∈(t,t+∆t)

1
λk h

1 − e−λk(t+∆t−tk )

(10)

i

6

where the summations in (10) run over pulses that occured before t and over
those that occurred within the (t, t + ∆t) time interval. Finally from equations
(9) and (10) we obtain a formula for the integrated process yN :

yN (t + ∆t) = yN (t) +

1

h(∆x)2i

q

A




Xtk<t

e−λk(t−tk )
λk

1 − e−λk∆t
h

i

+A

Xtk∈(t,t+∆t)

1
λk h


1 − e−λk(t+∆t−tk)

− hxi∆t


i



(11)

and this can be incorporated in the generator, because the summations can
be evaluated using the events of the underlying Poisson process stored in a
linked list as in [2]. Equation (11) is both a practical formula for the generation
of the integrated process yN and a generalization of the equivalent updating
formulas in [16] (those formulas hold only for the special case of the Ornstein-
Uhlenbeck process and its integral, i.e. for α = 2 and α = 4): the generation of
the integrated process can be achieved producing and maintaining a sequence
of Poisson distributed events as in [2] and using equation (11) instead of (2)
to evaluate the noise process. Figures 1 and ﬁgure 2 show a pair of xN , yN
processes obtained with the methods described above, where the integrated
process has a spectral index α = 3.5. Figure 3 shows the spectral density of
the integrated process, and the numerical result is in excellent agreement with
theory.

Finally notice that when the input process x(t) is Gaussian (and this can be
achieved with a proper choice of generator parameters as explained in [1]), the
diﬀerence yN (t + ∆t) − yN (t) is a Gaussian variate as well.

3 Changes in the library

The changes in the library [2] are transparent for the user, and are scattered
in several parts of the code. As in the ﬁrst version, the package contains two
header ﬁles and two code ﬁles (plus the ranlib ﬁles that are included for
convenience, and are redistributed according to the standard Netlib rules).
The ﬁrst header ﬁle (noise.h) contains the necessary include statements and
the structure deﬁnitions; the second header ﬁle (noise prototypes.h) contains
just the prototype deﬁnitions. In the present version of the generator, the
structure used to share information between the generation routines (deﬁned
in the header ﬁle noise.h) is

struct info
{

7

double nt; /* transition rate */
double tau; /* average transition time */

double fillUpTime; /* fill-up time estimate */
double fillUpLength; /* list length estimate */

double average; /* signal average and standard deviation */
double sd;

double meaninvlambda; /* mean value of decay time */

double lambdamin; /* min and max decay rates */
double lambdamax;
double beta; /* beta input by the user */
double beta0; /* actual value of beta used in the pulse distribution */
double lmin; /* aux. variables */
double lmax;
double dl;
double binv;

};

This header also contains the deﬁnition of Ndecay: #define NDECAY 20.; with
this deﬁnition the program is quite accurate (the average relative error after
discarding the old events is ≈ 2 · 10−9), however the generation process can
be made more accurate (and slower) with a larger value of NDECAY, or less
accurate and faster with a smaller value.

The ﬁrst code ﬁle (list routines.c) contains the code for the list routines:

• Append: this is a variant of the usual Push routine;
• Process List: this routine processes the list to get rid of the old elements

that can no longer inﬂuence the output signal;

• Print List: this routine prints the list;
• Response: this routine computes the noise signal for a spectral index between

0 and 2;

• IntegratedResponse: this routine computes the integrated noise signal and

is called when the user asks for a spectral index between 2 and 4;

• Get List Length: this routine returns the length of the list.

these are internal routines, they are not meant to be called by the user, and
are listed here for completeness; IntegratedResponse is new in this version.

The second code ﬁle (generator.c) contains the user-callable routines. These
routines have the same names and calling sequences as the ﬁrst version of the
generator [2], even though they have been modiﬁed in several places.

8

4 Changes in the test program

The user interface and the output ﬁle structure of the test program included in
the package is the same as in the previous version [2]. The important diﬀerence
is that now the allowed values of the spectral index α are in the range 0 ≤
α ≤ 4.

The output ﬁle begins with a header, which is a single line with the following
values (separated by tabs):

(1) dt = sampling interval;
(2) nsamp = number of samples;
(3) tmax = time of last sample;
(4) noise info.nt = transition rate;
(5) noise info.tau = average time between transitions;
(6) noise info.lambdamin = λmin;
(7) noise info.lambdamax = λmax;
(8) noise info.beta = β = α − 1;
(9) noise info.meaninvlambda = h1/λi;
(10) noise info.fillUpTime = ﬁll-up time estimate;
(11) noise info.fillUpLength = list length estimate;
(12) noise info.average = average output amplitude;
(13) noise info.sd = standard deviation of noise signal;

The rest of the ﬁle is a set of records, each with the following tab-separated
values:

(1) kk = record number;
(2) t = actual time;
(3) tt = time of last transition event;
(4) listLength = list length;
(5) signal = signal (for 0 ≤ α ≤ 2) or integrated response (for 2 < α ≤ 4);
(6) norm signal = normalized signal value;

If 0 ≤ α ≤ 2 signal is

signal =

exp (λk(t − tk))

Xtk<t

(12)

and norm signal = xN , while if 2 < α ≤ 4 signal is the output of the
IntegratedResponse routine

signal =

e−λk(t−tk)
λk

Xtk<t

1 − e−λk∆t
h

i

+

Xtk∈(t,t+∆t)

1
λk h

1 − e−λk(t+∆t−tk)

(13)

i

9

and norm signal = yN .

The code distribution also contains two Mathematica notebooks to analyze
and display the program output; the notebook display.nb is used for spectral
index 0 ≤ α ≤ 2, while display2.nb is used for spectral index 2 < α ≤ 4.

The test program is used to generate the example discussed in the next section.

5 Test run

In the example shown below the spectral index is α = 3.5 (i.e. the program gen-
erates 1/f 3.5 noise, and β = 2.5), λmin = 0.0001 and λmax = 1 (the power-law
region spans approximately 4 orders of magnitude), so that this corresponds
very closely to the example given in [2]. And indeed, the program returns a
signal which is the time integral of the sequence generated in the example
given in [2], and the underlying sequence is the same (the random number
generator is the same as that in [2], and uses the same seed for the random
number sequence).

*** PLNoise ***

1. terminal input of control variables

Enter sampling time interval (dt): 1
Enter number of samples: 4194304
--> Total sampling time: 4.1943e+06
Enter transition rate: 0.1
--> Average transition time: 10
Enter lambda_min: 0.0001
Enter lambda_max (0 = single relax. rate, lambdamax = lambdamin): 1
Enter alpha (spectral index in 1/f^alpha): 3.5

2. initialization

Initialization time: 0.050000 seconds

Noise parameters:

-- Spectral shape:

Min decay rate: 0.0001
Max decay rate: 1
Beta: 2.5 (spectral index is 1+beta = 3.5)

-- Poisson process:
Transition rate: 0.1

10

Average transition time: 10

-- Algorithmic variables:

Fill-up time: 200000
Fill-up length: 20000
Mean value of decay time (<1/lambda>): 100
Mean list length: 200
Signal average: 10
Signal variance: 5
Signal standard deviation: 2.23607
Signal skewness: 0.298142
Rule of thumb for Gaussianity: n<1/lambda> = 10 >= 10, noise is Gaussian

List length after initialization: 203

-- Internal parameters:

lmin: 0.01
lmax: 1
dl: 0.99
binv: 2

... initialized ...
... starting now ...

3. main generation loop

Generation time: 313.780000 seconds

4. statistics

Statistics of generated sequence:
Average: 10.0659
Variance: 4.91088
Standard deviation: 2.21605
Skewness: 0.318761

5. end

|--------------------------------------------------|
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

The program has been compiled and run with the same compiler and on the
same machine as the example in [2] (i.e., the compiler gcc 4.0.1 with opti-
mization ﬂag -O3 has been used, and the program has been run on an Apple
Powerbook G4 - 1.5 GHz with the Mac OS X 10.4.6 UNIX ﬂavor): a compar-
ison between the generation times shows that in this case the integration step

11

leads to a 75% increase of generation time with respect to the unintegrated
case.

References

[1] E. Milotti, Phys. Rev. E 72 (2005) 056701.

[2] E. Milotti, “PLNoise: a package for exact numerical simulation of power-law

noises”, Comp. Phys. Comm., in press.

[3] See, e.g., J. A. Barnes et al., IEEE Trans. on Instr. and Meas. IM-20 (1971)

105.

[4] H. M. Adorf, in ASP Conf. Ser. 77, Astronomical Data Analysis Software and
System IV, ed. R. A. Shaw, H. E. Payne, and J. J. Hayes, ASP, San Francisco,
1995, p. 460.

[5] D. Henslop and M. J. Dekkers, Physics of the Earth and Planetary Interiors

130 (2002) 103.

[6] P. S. Wilson, A. C. Tomsett, and R. Toumi, Phys. Rev. E68 (2003) 017103.

[7] S.C. Wu and M. Tomizuka, in Proceedings of the 2003 American Control

Conference, 2003, vol. 5, IEEE, Piscataway, p. 4347.

[8] F. J. Beutler, SIAM Rev. 8 (1966) 328,

[9] B. B. Mandelbrot, The Fractal Geometry of Nature, pp. 247-255, (W. H.

Freeman & Co., New York, 1983).

[10] M. Schroeder, Fractals, Chaos, Power Laws: minutes from an inﬁnite paradise,

pp. 121-133, (W. H. Freeman & Co., New York, 1991).

[11] M. P. Gillman and M. E. Dodd, Bot. J. Linn. Soc. 126 (1998) 65.

[12] K. M. Cuddington and P. Yodzis, Proc. R. Soc. Lond. B266 (1999) 969.

[13] A. Rela˜no, J. M. G. Gomez, R. A. Molina, J. Retamosa, and E. Faleiro, Phys.

Rev. Lett. 89 (2002) 244102.

[14] L. Salasnich, Phys. Rev. E 71 (2005) 047202.

[15] G. Rangarajan and M. Ding, Phys. Rev. E 61 (2000) 4991.

[16] D. T. Gillespie, Phys. Rev. E 54 (1996) 2084.

12

Fig. 1. Normalized process xN (t) with power-law spectrum 1/f 1.5 produced by the
generator described in [1,2]. This record contains 218 = 262144 samples, and the
generation parameters are n = 10, λmin = 0.0001, λmax = 1, β = 0.5 (see [1] for a
detailed explanation of these parameters). Time does not start from 0 because the
initial part of the noise record is used for initialization, and the relaxation rates λ
are given in arbitrary frequency units related to the arbitrary time units used in
the ﬁgure.

Fig. 2. Plot of the process yN (t) obtained from the time integration of the process
xN (t) shown in ﬁgure 1, as explained in the text. The apparent global linear trend
is characteristic of black noise, and any such trend disappears or is replaced by
another diﬀerent trend in longer records.

13

Fig. 3. Spectral density of the process yN (t) shown in ﬁgure 2. The linear trend must
be removed to avoid artifacts, either by detrending or by windowing: here I used
a Hanning window. The arrows mark the positions of the minimum and maximum
relaxation rates λmin and λmax, the thick line is the expected average spectrum,
corrected for the window incoherent gain, and the dashed line shows the expected
slope of a 1/f 3.5 spectral density. The slight upward bend at high frequency is due
to uncorrected aliasing.

14

