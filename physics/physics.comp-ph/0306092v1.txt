Computing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003

1

Simulation in ALICE

F. Carminati, A. Morsch
on behalf of the ALICE Ofﬂine Project
CERN, 1211 Geneva 23, Switzerland

3
0
0
2
 
n
u
J
 
2
1
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
2
9
0
6
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

ALICE, the experiment dedicated to the study of heavy ion collisions at the LHC, uses an object-oriented
framework for simulation, reconstruction and analysis (AliRoot) based on ROOT. Here, we describe the gen-
eral ALICE simulation strategy and those components of the framework related to simulation. Two main
requirements have driven the development of the simulation components. First, the possibility to run diﬀerent
transport codes with the same user code for geometry and detector response has led to the development of the
Virtual Monte Carlo concept. Second, simulation has to provide tools to eﬃciently study events ranging from
low-multiplicity pp collisions to Pb-Pb collisions with up to 80000 primary particles per event. This has led to
the development of a variety of collaborating generator classes and speciﬁc classes for event merging.

1. Introduction

ALICE, is the experiment dedicated to the study
of heavy ion collisions at the LHC. It is a multipur-
pose detector with excellent tracking and secondary
vertex capabilities, electron and muon detection and
a high resolution γ-spectrometer. Although smaller in
size as compared to the large LHC detectors ATLAS
and CMS, ALICE is of similar complexity.
Instead
of a complete description of the detector we mention
here exemplarily that close to the vertex six layers
of silicon trackers (pixel-, drift-, and strip-detectors)
are used mainly for secondary vertex reconstruction.
The main tracking device is a very large Time Projec-
tion Chamber (TPC) covering approximatively two
units of pseudo-rapidity. Moreover, ALICE uses al-
most all known particle identiﬁcation techniques in-
cluding Cerenkov and Transition Radiation detectors
whose detailed response simulation is a demanding
task.

Heavy ion collisions produce a very large number of
particles in the ﬁnal state. Current predictions range
from 1400-8000 charged particles in the central unit
of rapidity. This is a challenge for the reconstruction
and analysis algorithms. The development of these
algorithms requires a predictive and precise simula-
tion. Particles have to be transported in the detec-
tors and structural elements. The latter produce sec-
ondary particles which can increase signiﬁcantly the
detector occupancy and their correct prediction is im-
portant. For those particles passing through sensitive
detector areas a detailed detector response simulation
is necessary.

Transport and detector response simulation is only
one part of the simulation task. Of comparable com-
plexity and diversity is the primary event simulation.
It comprises both the heavy ion physics speciﬁc soft
physics and the hard probes like heavy ﬂavor and jet
production. In addition, ALICE has to simulate all
possible collision systems ranging from pp, p-A, inter-
mediate mass A–A, to Pb–Pb as well as collision ge-
ometries ranging from central to peripheral collisions.

TUMT004

Before we describe the diﬀerent components of the
simulation framework we outline in the following sec-
tion the ALICE simulation strategy as it has been
developed on the basis of the above mentioned chal-
lenges and requirements.

2. ALICE simulation strategy

In order to cope with the challenges described in
the introduction, the ALICE Oﬄine Project has de-
veloped a coherent simulation framework as an inte-
gral part of the AliRoot [1] object oriented (C++)
framework for simulation, reconstruction and analy-
sis based on ROOT [2]. It comprises primary event
(physics) simulation, particle transport, detailed de-
Its
tector response simulation and fast simulation.
main components are the Virtual MC, the detector
classes containing the user code, a set of collaborat-
ing classes for primary particle simulation, and base
classes for fast simulation.

Since the complex description of the detector ge-
ometries and of the detector responses has to be ac-
complished by a relatively small community of physi-
cists it is essential to provide a stable framework which
does not require rewriting of the user code in the
case that one of its underlying components changes.
The most important of these underlying components
is the transport MC. However, in traditional simu-
lation environments the user code for geometry de-
scription, and detector response simulation (hit gen-
eration) depends entirely on the transport MC. AL-
ICE uses currently Geant3 [3] in production, FLUKA
[4] and Geant4 [5] are both options for simulations in
the near future. Other alternatives might come up af-
ter LHC start-up. For this reason the ALICE Oﬄine
Project has developed the concept of the Virtual MC
which provides an insulation layer between the user
code and the underlying MC.

As already outlined in the introduction also primary
event generation is a complex task.
It requires the
generation of uncorrelated underlying events, corre-

2

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003

Figure 1: Component view of the AliRoot simulation framework.

lation between particles and a multitude of so called
hard probes as well as any possible mixture between
these components. Generators come as external gen-
erators packages like Pythia and HIJING as well as
simple user written generators based on parameteri-
sations or so called afterburners which introduce par-
ticle correlations in existing events. The simulation
framework provides a set of collaborating base classes
as building blocks for this variety of generators. These
will be described in section 5.

The size of events produced in heavy ion collisions
and the variety of physics signals and collision systems
which have to be studied require enormous amounts
of computing time and data storage. The framework
has to help to reduce the required resources as much
as possible. One such tool is known as merging or em-
bedding and will be described in the following section.
Another tool is fast simulation, which is needed
for high statistics studies of signals and backgrounds
for which the detector acceptances, reconstruction ef-
ﬁciencies, and resolutions have been already deter-
mined and parameterised using detailed simulations.
The framework provides a set of base classes provid-
ing a uniform interface and facilitating the realisation
of fast simulation applications.

Last not least it should be mentioned that the AL-
ICE simulation framework provides a rigorous ap-
proach concerning MC truth using the class AliStack
developed for this purpose. The history of each parti-
cle resulting into a detector hit and all primary parti-

cles are recorded. The user has the possibility to write
additional information if needed.

3. Simulation in the AliRoot framework

3.1. Components

Fig. 1 shows a component view of the AliRoot sim-
ulation framework. The central module, STEER, pro-
vides the interface classes for the detector description
and data structures. It also provides the run steering
and particle stack implementations required by the
Virtual MC. The run steering communicates with the
event generator module via the interface class AliGen-
erator, with the detector speciﬁc modules via AliDe-
tector, and with the transport MC via the Virtual
MC main interface class TVirtualMC. The user code
is structured according to the diﬀerent sub-detectors.
No dependencies between these detector modules are
allowed. The detector modules contain their speciﬁc
implementations of AliDetector and data structures
like AliHit and AliDigit.

Generator packages like HIJING and the TVir-
tualMC implementations TGeant3, TGeant4 and
TFluka appear as external modules. They are not
needed for compilation and linking. The choice for
their usage can be made by the user during runtime.

TUMT004

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003

3

3.2. Simulated data

The AliRoot simulation framework generates data
at diﬀerent stages of the simulation process. First,
there are the so-called hits that represent the pre-
cise information about a particle passing a detector
in most cases
obtained from the transport MC, i.e.
energy deposition and position. These hits are then
transformed into the signal produced by the detector,
summable digits that correspond to the raw data be-
fore addition of noise and threshold subtraction. The
introduction of summable digits was necessary in order
to realise the event merging strategy in which a under-
lying signal free event is combined with a signal event
before completing the digitization process producing
the digits which contain the information of raw data.
The importance of this procedure for the simulation
of heavy ion collisions lies in the fact that one under-
lying event can be used for several signal events thus
reducing computation time and data storage space.

4. The Virtual Monte Carlo

The VirtualMC interface has been developed by the
ALICE Oﬄine project in order to make the user code
for detector simulation independent from the underly-
ing transport MC. A detailed description can be found
in Ref. [6].

An illustration of the VirtualMC concept is shown
in Fig. 2. A development that is ongoing (see Ref.
[7]) is to separate the physics and transport part of
the VirtualMC from the geometry modeler. This has
the advantage that the geometry can be used indepen-
dently from transport for reconstruction and visuali-
sation. Moreover, the implementation of the geome-
try modeler can be optimised independently from the
transport MC.

Currently ALICE uses TGeant3, the Geant3 imple-
mentation of TVirtualMC in production. TGeant4 is
used for simulations related to Geant4 physics vali-
dations. The TFluka implementation is almost com-
pleted and an intensive testing phase will follow before
the ﬁrst release. Currently it uses FLUGG [8] for ge-
ometry navigation. This is expected to be be replaced
by the ROOT geometry modeler.

5. Event generators

5.1. Simulation of heavy ion collisions

The simulations of physical processes are confronted

with several problems:

• Existing generators give diﬀerent answers on pa-
rameters such as expected multiplicities, trans-
verse momentum dependence and rapidity de-
pendence at LHC energies.

TUMT004

• Most of the physics signals, like Hyperon de-
cays, high transverse momentum phenomena,
open charm and beauty, quarkonia etc., are not
properly reproduced by the existing generators.

• Simulation of small cross sections would demand
prohibitively long runs to simulate a number of
events that is commensurable with the expected
number of detected events in the experiment.

• The existing generators do not provide for
event topologies like momentum correlations,
azimuthal ﬂow etc.

To allow nevertheless eﬃcient simulations ALICE
has adopted a framework that allows for a number of
options:

• The simulation framework provides an interface
to external generators, like HIJING and DPM-
JET.

• A parameterised “signal free” underlying event
with multiplicity as a parameter is provided.

• Rare signals can be generated using the interface
to external generators like PYTHIA or simple
parameterisations of transverse momentum and
rapidity spectra deﬁned in function libraries.

• The framework provides a tool to assemble
events from diﬀerent signal generators (event
cocktails).

• The framework provides tools to combine under-
lying events and signal events on the primary
particle level (cocktail) and on the digit level
(merging).

• After-Burners are used to introduce particle cor-

relations in a controlled way.

The main parts of the implementation of this strat-

egy are described below.

5.2. Interfaces

To facilitate the usage of diﬀerent generators we
have developed an abstract generator interface called
AliGenerator, see Fig. 3. The objective is to provide
the user with an easy and coherent way to study a
variety of physics signals as well as full set of tools for
testing and background studies. This interface allows
the study of full events, event-by-event analysis, single
processes and a mixture of both, Cocktail Events.

During creation of a AliGenerator object it regis-
ters itself to the run steering object. The latter owns
and provides access to the particle stack of type Al-
iStack, so that the method AliGenerator::Generate()
can write particles to it. Alternatively a stack can be

4

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003

Figure 2: Illustration of the Virtual MC concept.

Figure 3: AliGenerator is the base class which has the
responsibility to generate the primary particles of an
event. Some realisations of this class do not generate the
particles themselves but delegate the task to an external
generator like PYTHIA through the TGenerator
interface.

directly connected to the AliGenerator object in order
to use particle production stand-alone for fast simula-
tion tasks or in order to create several events before a
combination of them is written to the main stack.

5.2.1. External generators

Several event generators are available via the ab-
stract ROOT class that implements the generic gen-
erator interface, TGenerator. Through implemen-
tations of this abstract base class we wrap FOR-
TRAN MonteCarlo codes like PYTYIA, HERWIG

TUMT004

and HIJING that are thus accessible from the Ali-
Root classes. In particular the interface to PYTHIA
used with PDFLIB includes the use of nuclear struc-
ture functions.

AliGenerator derived classes like AliGenPythia or
AliGenHijing combine the external particle produc-
tion by delegation to TGenerator with their main task
writing particles to the stack.
In addition simpli-
ﬁed conﬁguration of the external generators is pro-
vided. Predeﬁned simulation conﬁgurations like min-
imum bias or jet-production help the user to perform
easily simple simulation tasks.

An interesting byproduct of this design is that
in a ROOT session the external generators can be
used interactively. Run time conﬁguration, particle
production and analysis can be performed from the
command-line interface.

5.2.2. Parameterisations

In many cases, the expected transverse momentum
and rapidity distributions of particles are known. In
other cases the eﬀect of variations in these distribu-
tions must be investigated.
In both situations it is
appropriate to use generators that produce primary
particles and their decays sampling from parametrised
spectra. To meet the diﬀerent physics requirements in
a modular way, the parameterisations are stored in in-
dependent function libraries wrapped into classes that
can be plugged into the generator. This is schemati-
cally illustrated in Fig. 4 where four diﬀerent genera-

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003

5

of the slow nucleon generator with a generator that
can provide a collision geometry using AliGenCock-
tail. Communication between the two is via the class
AliCollisionGeometry.

5.2.4. Afterburner

The modularity of the event generator implemen-
tation allows at the same time easy integration with
the simulation steering class AliRun and with the ob-
jects that are responsible for changing the output of
event generators or for assembling new events making
use of the input of several events. These processors
are generally called Afterburners. They are especially
needed to introduce a controlled (parameterised) par-
ticle correlation into an otherwise uncorrelated parti-
cle sample. In AliRoot this task is further simpliﬁed
by the implementation of the stack class AliStack that
can be connected to both AliRun and AliGenerator.
Currently afterburners are used for two particle corre-
lation simulations and analysis and for the simulation
of azimuthal ﬂow.

6. Fast simulation

Detailed detector simulation is needed together
with reconstruction to evaluate the acceptance, eﬃ-
ciency and resolution for speciﬁc physics probes. Ow-
ing to the high particle multiplicity per event this
analysis can be based on a few thousand events. Many
types of physics analysis, such as D meson reconstruc-
tion from hadronic decay channels, and trigger stud-
ies have to make use of millions of events. Computing
resources are in general not available for such high
statistics simulations.

To reach the required sample size, fast simulation
methods based on meaningful parameterisations of the
results from detailed and consequently slow simula-
tions are applied. The systematic error introduced by
the parameterisations is in general small compared to
the reduction of the statistical error. This is particu-
larly true for the studies of the invariant mass contin-
uum below a resonance.

It is hard to ﬁnd a common denominator for fast
simulation methods since they are very speciﬁc to the
analysis task. As a minimum abstraction, we have de-
signed base classes that allow for a representation of
the detector or detector systems as a set of parameter-
isations of acceptance, eﬃciency and resolution. The
Muon Spectrometer fast simulation has been imple-
mented using these classes.

Another interesting development concerns the fast
simulation of the resolution and eﬃciency of tracking
in the central barrel. In this approach full tracking is
performed for the inner tracking system (ITS), which
is needed for detailed secondary vertex reconstruction
studies. After this, TPC resolution and eﬃciency are

Figure 4: AliGenParam is a realisation of AliGenerator
that generates particles using parameterised transverse
momentum and pseudo rapidity distributions. Instead of
coding a ﬁxed number of parameterisations directly into
the class implementations, user deﬁned parametrisation
libraries (AliGenLib) can be connected at run time
allowing for maximum ﬂexibility.

Figure 5: The AliCocktail generator is a realisation of
AliGenerator which does not generate particles itself but
delegates this task to a list of objects of type
AliGenerator that can be connected as entries
(AliGenCocktailEntry) at run time. In this way diﬀerent
physics channels can be combined in one event.

tor libraries can be loaded via the abstract generator
interface.

5.2.3. Event cocktails

It is customary in heavy ion event generation to su-
perimpose diﬀerent signals on an event to tune the re-
construction algorithms. In other cases the user needs
the possibility to assemble events by combining diﬀer-
ent particle types and parameterisations.

This is possible in AliRoot via the so-called cock-
tail generator (Fig. 5). This creates events from user-
deﬁned particle cocktails by choosing as “ingredients”
a list of generators. Through its recursive design Ali-
GenCocktail is at the same time a generator and a
container class for generators. The generation task is
performed by delegating to the registered generators.
Another important application of AliGenCocktail
has been found for the simulation of p-A collisions.
Generators like HIJING can simulate p-A collisions
but they do not simulate slow nucleons. The detection
of these slow nucleons is important for the determina-
tion of the centrality of the collisions (event geome-
try). Simple parameterisations exist for their produc-
tion we have designed base classes AliGenSlowNucle-
ons and AliSlowNucleonModel for this purpose. They
need, however, the event collision geometry as an in-
put. An easy solution was to combine the instance

TUMT004

6

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003

obtained from the track parameters at the inner radius
of the TPC, using a parameterisation.

7. Conclusions

The ALICE Oﬄine Project has developed a coher-
ent simulation framework for detector and physics per-
formance studies in the AliRoot Framework based on
ROOT. The main simulation components are the Vir-
tual MC Interface and event generator interfaces tai-
lored to the needs of the heavy ion community

The framework has proven its maturity and func-
tionality in the large MC production that has been
performed for the studies related to the ALICE
Physics Performance Report. The framework is still
confronted with new requirements from both physics
studies and new detector elements under study, most
recently the proposed electromagnetic calorimeter to-
gether with the ideas of studying jet physics with the
ALICE detector. The easiness with which such new
elements can be introduced are the consequence of our
modular approach.

References

[1] R. Brun, P. Buncic, F. Carminati, A. Morsch,
F. Rademakers, K. Safarik on behalf of the AL-
ICE collaboration, “The AliRoot framework, sta-
tus and perspectives”, in these proceedings.

[2] http://root.cern.ch
[3] R. Brun, F. Bruyant, M. Maire, A.C. McPherson,
P. Zanarini, GEANT3 User Guide, CERN Data
Handling Division DD/EE/84-1 (1985)

[4] A.Fass`o, A.Ferrari, P.R.Sala, ”Electron-photon
transport
in FLUKA: status”, Proceedings of
the MonteCarlo 2000 Conference, Lisbon, Octo-
ber 23-26 2000, A.Kling, F.Barao, M.Nakagawa,
L.Tavora, P.Vaz - eds., Springer-Verlag Berlin,
p.159-164 (2001).
A.Fass`o, A.Ferrari, J.Ranft, P.R.Sala, ”FLUKA:
Status and Prospective for Hadronic Applications”,
Proceedings of the MonteCarlo 2000 Conference,
Lisbon, October 23-26 2000, A.Kling, F.Barao,
M.Nakagawa, L.Tavora, P.Vaz - eds. , Springer-
Verlag Berlin, p.955-960 (2001).

[5] S. Agostinelli et al., ”Geant4 - A Simula-
tion Toolkit”, CERN-IT-20020003, KEK Preprint
2002-85, SLAC-PUB-9350, submitted to Nuclear
Instruments and Methods A.

[6] D. Adamova, V. Berejnoi, R. Brun, F. Carmi-
nati, A. Fass`o, E. Fut´o, I. Gonzalez, I. Hrivnacova,
A. Morsch on behalf of the ALICE Oﬄine Project,
“The Virtual MonteCarlo”, in these proceedings.
[7] R. Brun, A. Gheata, and M. Gheata on behalf of
the ALICE Oﬄine Project, “A geometrical mod-
eler for HEP”, in these proceedings.

[8] M. Campanella, A. Ferrari, P.R. Sala, and
S. Vanini, “Reusing Code from FLUKA and
GEANT4 geometry”, ATLAS Internal Note ATL-
SOFT 98-039 (1998)
M. Campanella, A. Ferrari, P.R. Sala and
S. Vanini, “First Calorimeter Simulation with the
FLUGG prototype”, ATLAS Internal Note ATL-
SOFT-99-004 (1999)

TUMT004

