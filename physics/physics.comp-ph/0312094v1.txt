3
0
0
2
 
c
e
D
 
5
1
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
4
9
0
2
1
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Constraint-deﬁned Manifolds:
a Legacy Code Approach
to Low-dimensional Computation

C. William Gear1,2 and Ioannis G. Kevrekidis1
1Department of Chemical Engineering; Princeton University,
2NEC Research Institute (retired);
Princeton, NJ 08544, USA

February 2, 2008

Abstract

If the dynamics of an evolutionary diﬀerential equation system possess a low-
dimensional, attracting, slow manifold, there are many advantages to using this
manifold to perform computations for long term dynamics, locating features such as
stationary points, limit cycles, or bifurcations. Approximating the slow manifold,
however, may be computationally as challenging as the original problem. If the
system is deﬁned by a legacy simulation code or a microscopic simulator, it may
be impossible to perform the manipulations needed to directly approximate the
slow manifold. In this paper we demonstrate that with the knowledge only of a
set of “slow” variables that can be used to parameterize the slow manifold, we can
conveniently compute, using a legacy simulator, on a nearby manifold. Forward
and reverse integration, as well as the location of ﬁxed points are illustrated for a
discretization of the Chafee-Infante PDE for parameter values for which an Inertial
Manifold is known to exist, and can be used to validate the computational results.

Keywords Diﬀerential equations, inertial manifolds, stiﬀ equations

1 Introduction

Certain dissipative evolutionary equations possess low-dimensional, attracting invariant
manifolds which govern their long term dynamics. Such a manifold is readily apparent
for a system given in the singularly perturbed form:

dy/dt = y′ = f (y, z),

f ∈ ℜn+m 7→ ℜn

1

dz/dt = z′ = g(y, z)/ǫ,

(1)
where f and g are such that, for small positive ǫ, z is rapidly attracted to the region
z′ = O(1) and ∂g/∂z is non-singular. Since z = z0(y) + O(ǫ) where z0(y) is the solution
of g(y, z0(y)) = 0, the slow manifold is given by the solution of

g ∈ ℜn+m 7→ ℜm

y′ = f (y, z0(y)) + O(ǫ)

(2)

so that we can “easily” compute an approximation to it. The one-dimensional slow
manifold is parameterized here by y (other parameterizations are also possible).

In more complicated cases, approximations to the slow manifold may not be so appar-
ent; yet within such manifolds the system dynamics can still be described by a lower-order
diﬀerential equation - the reduced system. Methods for approximating such manifolds
have been the subject of intense research in communities ranging from reactive ﬂow mod-
eling (e.g. [5, 6, 7]) to inertial manifolds for dissipative PDEs (e.g. [8, 9, 4]). If we are
able to somehow constrain the dynamics to a slow manifold, stable numerical integration
could be performed with larger stepsizes than would be possible in the original system.
Furthermore, many global properties of the original system are (approximately) inherited
by the reduced system; these include stationary points, limit cycles, and bifurcations and
may be computable more easily on the slow manifold. Unfortunately, approximating the
slow manifold may be as computationally challenging as the original problem.

In our work we seek an approximation to such a manifold that is (a) simple to obtain
on the ﬂy during numerical computations, and (b) only requires evaluations of time
derivatives of the state, such as would be available from a legacy code. Our starting
point is the assumption that, given a basis for the full set of variables in the problem, a
subset of this basis can be used to parameterize the slow manifold and our approximation
of it, as y did in our example above. In some applications, such as when the full system is
described by a microscopic simulation, the subset used to parameterize the slow manifold
might be called “macroscopic observables”; such observables could be the pressure ﬁeld
in kinetic theory based ﬂow simulation, or a concentration ﬁeld in the kinetic Monte
Carlo simulation of a chemical reaction.

We may start with a ﬁnite-dimensional system (an ODE) or an inﬁnite-dimensional
system (a PDE, for example).
In the latter case we will have to introduce a ﬁnite-
dimensional approximation before commencing computation (in eﬀect, the “method of
lines”). Suppose that the system is represented by (approximated by) the system

where u = {ui}, i = 1, · · · , N. For ease of presentation, let us assume that the equation
has already been transformed to a suitable basis so that U = {Ui = ui,
i = 1, · · · , n}
In some sense we are assuming that the remaining
parameterizes the slow manifold.
variables, V = {Vi = un+i,
i = 1, · · · , N − n = m}, are the “fast” ones that are quickly
“slaved” to U; we will return to this assumption. The split system is

(3)

(4)

(5)

We now view the solutions of the system as families of curves in the U − V state space,
as illustrated in Figure 1 - although such ﬁgures are potentially misleading because we

ut = L(u)

dU
dt

dV
dt

= L1(U, V )

= L2(U, V ).

2

have to remember that each axis represents a multi-dimensional space. The essential
feature of the ﬁgure is that one member of the family of solutions is a “slow” manifold
with no high-curvature region, while other members of the family of solutions approach
this slow manifold relatively rapidly.

Since the slow manifold, M, can be parameterized by the slow variables, U, points
on M, (U, VM (U)), must be uniquely determined by U - that is, the curve cannot “fold”
in the region of interest. If we had a scheme for approximating the value of V = VM (U)
for each U (as we did in the singularly perturbed example above) we could, for example,
apply a numerical integration method to just the U variables, computing the equivalent
values of VM (U) only as needed by the integration scheme. This is the main point of
our approach: one does not compute the entire manifold a priori, but only computes
it pointwise, “on demand” as required by the low-dimensional integration code (or by
algorithms performing other numerical tasks, such as ﬁxed point computation).

From the assumptions, we suspect that an approximation to the slow manifold can
be found by computing the value of V = VA(U) (as shown in Figure 2) for which the
time derivatives of the V components are zero. Here we will compute on this “steady
manifold”; for the appropriate basis choice this steady AIM is not too far from the
slow manifold. Better approximations, based on higher order expansions of singularly
perturbed equations, can also be used in a legacy code context, and will be the subject
of further work.

We are particularly interested in the case where we do not have “access” to the
diﬀerential equations directly because, for example, we have a legacy simulation code,
or the system is the unknown closure of a microscopic simulation model (kinetic Monte
Carlo, molecular dynamics). Then, the only computational possibility we have is to
integrate the full system for a short time in what we call an inner integration step. In
this case, we can deﬁne an AIM by requiring that the chord of the inner step has zero
change in the V components, that is, it is “horizontal.” This can be computed iteratively
by performing an inner integration over a small step of length h and then projecting the
solution back to the speciﬁed value of U (by simply resetting the values of U to their
values at the start of the step) and repeating. If h is small enough, this iteration will
converge if the solution family in the neighborhood of (U, VA(U)) is locally attracted to
the solution that passes through (U, VA(U)). This can be seen by noting that one step
of the process performs the mapping

Vm+1 = Vm + gL2(U, Vm) + O(h2)

(6)

so we have

Vm+1 − Vm = (I + h

)(Vm − Vm−1) + O(h2)

∂L1
∂V

which implies convergence for small enough h if the eigenvalues of ∂L1/∂V are in the
negative half plane. This property can form the basis of alternative algorithms to approx-
imate the “steady AIM:” matrix free ﬁxed point algorithms, like the Recursive Projection
Method or GMRES [10, 11] can be applied to accelerate the computation of the ﬁxed
point of eq. (6).

In the following sections we will illustrate the use of this technique on the Chafee-

Infante reaction-diﬀusion equation

∂u
∂t

= ν

∂2u
∂x2 + u − u3

3

(7)

Slow manifold

UA

U

V

VM(UA)

V

Figure 1: Family of Solutions and Slow Manifold Schematic

Approximate Inertial Manifold

VA(UA)

Inertial Manifold

UA

U

Figure 2: Approximate Inertial Manifold Deﬁnition

4

with ν = (2.5)−2 and u(0, t) = u(π, t) = 0. This is known to possess an inertial manifold
of dimension two (in eﬀect, the two-dimensional unstable manifold of the origin, and its
closure). Although we know the diﬀerential equations in this example, we are not going
to make explicit use of the knowledge in our computational method. We will only use it
as if we were given a legacy code for evaluating time derivatives.

We ﬁrst discretize the equations in space. Since we are not interested in the issue
of the best spatial discretization, we use simple ﬁnite diﬀerence methods over N equally
spaced points, so that the variables are ui(t) = u(xi, t), i = 1, · · · , N, where xi = πi/(N +
1). These variables are chosen for convenience in the calculation. The resulting ODEs
are the usual:

dui
dt

=

ν
∆X 2 (ui−1 − 2ui + ui+1) + ui − u3
i ,

i = 1, · · · , N

(8)

where u0 = uN +1 = 0. If we had a legacy code or a microscopic model, the variables
would be the ones that happened to come with the code or model. In this example, no
subset of the {ui} variables is suitable for deﬁning the AIM (since the slow manifold
varies rapidly as a function of each ui) so we will use an “observation basis” in which a
linear combination of the variables will parameterize the AIM. In this case, we can use
a basis formed by sin(mx), m = 1, · · · , N. (These are the unnormalized eigenvectors of
eq. (8) when u = 0.) The modiﬁed variables are

ai =

φijuj

N

X
j=1

(9)

where φi = {φi∗}, is the basis given by φij = sin(ixj). The ﬁrst two ai can parameterize
the slow manifold, and it is not necessary to calculate the rest.

We now present a technique for approximating d(a1, a2)/dt on the slow manifold
given (a1, a2). This approximation can then be used to implement time integration,
stability analysis, or other numerical procedures on the system constrained to the AIM.
The general method consists of

1. Start with a prescribed value of (a1, a2).

2. Compute the values of {ui} such that eq. (9) is satisﬁed and the local derivative
of the full ({ui} system) is “horizontal” in the other components of the basis (in
this example, a3, · · · , aN ). This can be done in a number of ways:

(a) Use eq. (8) and eq. (9) to compute dai/dt, 3 ≤ i =≤ N and then solve for the
values of aj that makes these zero using Newton iteration. This can be done
directly when the equations are available (it is done in the example illustrated
here), or can be done through matrix-free based contraction mappings if the
equations are not explicitly available.

(b) If we only have a legacy code or a microscopic simulator of the full system,
use iteration eq. (6) repeatedly to ﬁnd the values of aj, 3 ≤ j ≤ N such that
the chords of those aj are zero.

(c) Conceptually (since this is not practical for a legacy code) one could imple-
ment a Lagrange multiplier, evolving the dynamics while constraining the
projection of the solution on (a1, a2). This is reminiscent of techniques like

5

SHAKE used to “prepare” molecular dynamics simulations [12]. The ap-
proach described immediately above is a way of eﬀectively implementing what
amounts to such a Lagrange multiplier constrained integration to a legacy
simulator.

3. Compute the derivatives (or chord slope) of the full ({ui}) system from the given
values of a1, a2 and the now computed aj, 3 ≤ j ≤ N (actually they have probably
been computed in the previous step).

4. Compute the “(a1, a2)” components of the derivative by applying eq. (9) to the
{ui} derivatives. These are the approximations to the time derivatives of (a1, a2)
on the steady AIM.

In the next section we will use this technique to integrate eq.

(8) both forward
and backward in time on our two-dimensional steady AIM, and compare it with the
integration of the full system and in the subsequent section we will use it to compute the
steady states directly by performing a Newton iteration on the two-dimensional steady
AIM.

2 Integration on an AIM of the Reaction-Diﬀusion

Equation

In [1] we introduced projective integration which uses computation of the chord slope
obtained by integration of a legacy code or of a microscopic model in place of derivatives
for performing large projective integration steps on the slow components.
If we were
working with legacy codes or microscopic simulators, we would use that technique in our
“on manifold” integrations. However, we have chosen an example for which we know the
equations of the detailed system, so that we can compare the “true” integration of the
system with the approximation on the steady AIM we have deﬁned.

We integrated the full system eq. (8) using the automatic Runge-Kutta method with
the Dormand-Prince pair of formulae known as RK45 and available in MATLAB as
ode45. We also used the same method to integrate just (a1, a2) on the AIM, using the
technique described in the previous section to approximate the derivatives of (a1, a2). It
is possibly better to view this as the (approximate) integration of the projection on the
(a1, a2) “observables plane” of the true dynamics. The results for (a1, a2) are shown in
Figure 3. The integration was started from six diﬀerent points near the origin in the
(a1, a2) plane (which is an unstable steady state). All but one approach the stable steady
state at approximately (1.12,0) but the one that starts at (0,0.05) stays on the invariant
submanifold a1 = 0 and moves to the saddle point at about (0,0.7). Since the origin is
on the inertial manifold of eq. (8), the starting points are also very close to it so that
the RK45 integration of the full system gives a good approximation of the solutions on
the inertial manifold and provides a picture of the manifold itself. In Figure 3, the solid
line is the RK45 solution of the full system, while the dashed line is the integration on
our steady AIM.

The full system in eq. (8) is rapidly damped in its fastest components, and so it
would not be feasible to numerically integrate it in the reverse time direction. However,
the (a1, a2) diﬀerential system on the AIM does not have these fast components, so
it can be integrated “backwards.” The dotted arcs in Figure 3 are the results of a

6

reverse integration in the (a1, a2)-plane starting from a point on the RK45 solution of
the full system shortly before the stationary point is reached (one can’t start too close
to the stationary point because the trajectory chosen would be too sensitive to small
perturbations).

As we can see in Figure 3, the forward and reverse solutions on the AIM are fairly good
approximations to the components of the “true” solution on the IM. We do not expect
the other components, ai, i ≥ 3 to be good approximations. This is shown in Figure 4
which shows the values of a3 plotted against a1 for each of the trajectories. (The reverse
integration trajectories are almost indistinguishable from the forward trajectories for the
(a1, a2) integration.)

3 Steady State Computation on the AIM

The procedure described in Section 1 computes da/dt = p(a) where a = (a1, a2) is the
parameterization of the slow manifold. Using any standard techniques we can look for
zeros of p(a) to identify stationary states of the system. Since the dimension is low,
we can use Newton’s method, computing the approximate partial derivatives by ﬁnite
diﬀerencing. Many better methods exist, but our purpose here is simply to show that
the reduced system can be used directly in any conventional numerical process.

Table 1 shows the sequence of iterates for Newton’s method starting at three diﬀerent
point in the (a1, a2)-plane and iterating until changes were less than 10−5 in the L1 norm.
The eigenvalues of J = ∂p/∂a as the iteration proceeds are also shown. For comparison,
the two leading eigenvalues of the full system eq. (8) at steady state for each of the three
cases are (0.8403,0.3648), (0.2204,-0.7118), and (-1.4491,-1.5392) respectively. As can
be seen, the three stationary points, (0,0), (0,0.7056), and (1.1206,0) are source, saddle,
and stable (sink), respectively. Note that the stationary states on the steady AIM are
necessarily on the slow manifold since all of the derivatives are zero at these points.

4 Discussion

We have demonstrated that it is possible to perform low-dimensional (macroscopic) com-
putations on an AIM (more precisely, on observations of an AIM) based on choosing a
suitable parameterization of the low dimensional slow manifold. That parameterization
must be chosen so that the slow manifold does not “fold over it”. It must also be chosen
so that the induced AIM is reasonably close to the true slow manifold. In the example
we discussed, the ﬁrst two eigenvectors of the linearization of the problem at a particular
solution value (the origin) were chosen to parameterize the manifold, since at that solu-
tion value they are tangent to the true slow manifold. As long as the solution does not
stray too far from that region (compared to the non-linearities present) these directions
provide a reasonable parameterization to the slow manifold elsewhere. The steady AIM
for these two variables is illustrated in Figure 5 which plots a3 against a1 and a2 on the
AIM. This AIM is a reasonable approximation of the slow manifold, (which is shown is
Figure 1 of [13]). It is clear from this ﬁgure that choosing, say, a2 and a3 to characterize
the slow manifold would have been bad since a1(a2, a3) is multivalued for some a3. (See
the line a2 = 1, a3 = −0.1 that is indicated in the ﬁgure. It intersects the AIM twice
within the region plotted.) This is true even near the origin, where this AIM is a good
approximation to the inertial manifold.

7

Table 1: Sequence of Newton Iterates

a1
0.2000
-0.0838
0.0159
-0.0002
0.0000

a1
0.1000
-0.0405
0.0063
-0.0001
0.0000

a1
1.0000
1.1707
1.1255
1.1206
1.1206

Case 1

Case 2

Case 3

a2
0.2000
-0.1946
0.0551
-0.0009
0.0000

a2
0.7500
0.7271
0.7087
0.7057
0.7056

a2
0.1000
-0.0462
-0.0042
-0.0000
-0.0000

λ1
0.7171
0.7737
0.8351
0.8403
0.8403

λ1
0.1666
0.2069
0.2359
0.2405
0.2407

λ1
-0.8687
-2.0297
-1.6847
-1.6529
-1.6528

λ2
0.1971
0.2684
0.3571
0.3648
0.3648

λ2
-0.8904
-0.7902
-0.7293
-0.7203
-0.7200

λ2
-1.5201
-1.6832
-1.6599
-1.6529
-1.6526

8

The focus of this work was on the use of a legacy simulator to approximate the slow
manifold on the ﬂy, as dictated by the needs of numerical analysis tools employed for
computations on it. The local nature of the approximation should be contrasted to “oﬀ
line” algorithms that attempt to approximate the entire manifold ﬁrst (see the extensive
discussion in [14] as well as [15]). Here we pursued the simplest approximate manifold
one can ﬁnd by constraining a legacy code. An important issue that was only tangentially
mentioned here was the selection of good basis functions (or macroscopic observables in
the case of atomistic inner simulators) that parameterize the manifold; statistical data
analysis techniques have an important role to play in this. Better algorithms, resulting
from the implementation of higher order approximations to the slow manifold (requiring
a higher order derivative to vanish) in a legacy code context are currently being explored.
Acknowledgements This work was partially supported by an NSF/ITR grant and

by the AFOSR Dynamics and Control (Dr. B. King).

9

0.2

0.4

0.8

1

1.2

0.6
a
1

Figure 3: Trajectories in (a1, a2)-plane. Solid: Inertial manifold, dashed - AIM forward,
dotted - AIM reverse.

2

a

0.6

0.5

0.4

0.3

0.2

0.1

0

0

10

0.2

0.15

0.1

3

a

0.05

0

−0.05

−0.1

0

3
a

0.3

0.2

0.1

0

−0.1

−0.2

−0.3

−0.4
1

0.2

0.4

0.8

1

1.2

0.6
a
1

Figure 4: (a1, a3) trajectories. Solid: Inertial manifold, dashed - AIM forward, dotted -
AIM reverse.

0.5

1

0.5

0

a2

−0.5

−1

−1

−0.5

0

a41

Figure 5: a3 as a function of a1 and a2 on the AIM.

11

References

[1] Gear, C. W. and Kevrekidis, I. G. “Projective Methods for Stiﬀ Diﬀerential Equa-
tions: problems with gaps in their eigenvalue spectrum”; NEC Technical Report
NECI-TR 2001-029 SIAM J. Sci. Comp.. 24(4) pp.1091-1106 (2003).

[2] Gear, C. W. and Kevrekidis, I. G. “Computing in the Past with Forward Integra-
tion”, Physics Letters A in press (2003). Can be obtained as nlin.CD/0302055 at
arXiv.org

[3] Rico-Martinez, R., C. W. Gear and I.G.Kevrekidis “Coarse Projective kMC Inte-
gration: Forward/Reverse Initial and Boundary Value Problems”, J. Comp. Phys.,
in press (2003); can be found as nlin.CG/0307016 at arXiv.org.

[4] M. S. Jolly, I. G. Kevrekidis and E. S. Titi “Approximate Inertial Manifolds for
the Kuramoto-Sivashinsky Equation: Analysis and Computations”, Physica D, 44
pp.38-60 (1990).

[5] U. Maas and S. B. Pope “Simplifying chemical kinetics: Intrinsic Low-Dimensional
Manifolds in Composition Space” Combustion and Flame 88 (1992) pp.239-264.

[6] S. H. Lam and D. A. Goussis “The CSP method for simplifying chemical kinetics”

Int. J. Chem. Kin. 26 pp.461-486 (1994)

[7] A. N. Gorban and I. V. Karlin “Method of invariant manifolds for chemical kinetics”

arXiv:cond-mat/0207231

[8] P. Constantin, C. Foias, B. Nicolaenko and R. Temam Integral manifolds and inertial
manifolds for dissipative partial diﬀerential equations New York, Springer (1988)

[9] R. Temam Inﬁnite Dimensional Dynamical Systems in Mechanics and Physics New

York, Springer (1988)

[10] Shroﬀ, G.M. and Keller, H.B. “Stabilization of unstable procedures: A recursive

projection method”, SIAM J. Numer. Anal. 30, 1099-1120. (1993)

[11] C. T. Kelley, Iterative Methods for Linear and Nonlinear Equations, SIAM Publi-

cations, Philadelphia (1995)

[12] J. P.Ryckaert, G. Ciccotti and H. Berendsen “Numerical Integration of the Cartesian
equations of motion of a system with constraints: Molecular Dynamics of N-alkanes”
J. Comp. Phys. 23 pp.327-341 (1977)

[13] C. Foias, M. S. Jolly, I.G. Kevrekidis, G. R. Sell and E. S. Titi “On the computation

of inertial manifolds” Phys. Letters A 131 pp.433-436 (1988)

[14] A. N. Gorban, I. V. Karlin and Yu. Zinoviev “Constructive methods of invariang

manifolds for kinetic problems” IHES Report M/03/50, July 2003.

[15] D. A. Jones and E. S. Titi “Approximations of inertial manifolds for dissipative

nonlinear equations” J. Diﬀ. Equ. 127 pp.54-86 (1996)

12

