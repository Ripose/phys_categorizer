3
0
0
2
 
y
a
M
 
1
2
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
7
9
0
5
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

The 28th International Cosmic Ray Conference

1

Computational Techniques for Simulating Light Propaga-
tion in High-Energy Neutrino Telescopes

Predrag Mioˇcinovi´c1 and Peter Nießen2
(1) Department of Physics, University of California, Berkeley, CA 94720, USA
(2) Vr¨ye Universiteit Brussel, Dienst ELEM, B-1050 Brussel, Belgium

Abstract

To maximize the accuracy of background simulation and event reconstruc-
tion, high-energy neutrino telescopes require detailed knowledge of light propaga-
tion over a large volume of detection medium. If light scattering and absorption
lengths in the medium are of the same scale as the detector size, this problem
can only be handled numerically. Any inhomogeneity of optical properties in
the medium further complicates the problem, requiring large computational re-
sources. We present a treatment based on combining ray-tracing Monte Carlo and
neural network techniques which oﬀers a reasonable compromise between solution
accuracy, computer memory and CPU usage.

1.

Introduction

Any high-energy neutrino telescope has to reject an overwhelming back-
ground produced by cosmic-ray-generated atmospheric muons before any neutrino
signal can be extracted. The background data simulation needs to faithfully re-
produce all known classes of background events, while the event reconstruction
should be accurate enough to allow their separation from the expected signal. For
these tasks, correctly describing the photon transport in the detector is crucial.
An important requirement for a functional neutrino telescope is that its size
should be smaller than the volume at which photon transport through its detection
medium can be considered diﬀusive, but also large enough to have reasonable
signal collection area. In a medium where absorption dominates over scattering,
like deep ocean or lake sites, the light transport problem can be solved analytically
if scattering is neglected or treated as a correction. In the regime where scattering
and absorption distances are similar, as is the case for AMANDA [4], the problem
has to be tackled numerically. To satisfy the above requirement, the numerical
solutions have to be tabulated over large volumes.

In this report we describe numerical techniques that were used to produce
satisfactory results for use in AMANDA in terms of solution accuracy and ease of
implementation into computational structure. The same approach can be easily
adapted to any other detector facing similar problems.

pp. 1–4

c(cid:13)2003 by Universal Academy Press, Inc.

2

2. Photon table generation

The distribution of time dependent photon ﬂuxes around a light source is
generated by a photon transport Monte Carlo simulation which has been opti-
mized for numerical accuracy and speed of execution [3]. The photon transport
is done in a fashion analogous to the ray-tracing technique employed in computer
graphics design. The main diﬀerence is that instead of recording the “illumina-
tion” of the predeﬁned set of objects, the entire photon propagation volume is sub-
divided into cells which independently record time-dependent photon ﬂux. This
method allows a rapid collection of large photon statistics: ∼ 106 γ/CPU hour on
650 MHz Pentium III.

Since the detector medium is considered not to have boundaries, light scat-
tering is caused only by impurities contained within the ice, which also dominate
the absorption in the visible wavelength range. The depth-dependent concentra-
tion and composition of these impurities has been studied and a model for the
description of optical properties of ice in AMANDA as a function of depth has
been developed [5]. The inhomogeneity of optical properties of ice partially breaks
the translational and rotational symmetries of the problem and requires that each
light emission point be treated separately.

In AMANDA, the instrumentation is surrounded by columns of re-frozen
ice enriched in microscopic air-bubbles. This ice occupies only a very small frac-
tion of the detection volume, and will only aﬀect photon distribution near the
detection point. Thus it can be treated as a perturbation to the directional
sensitivity of the light detectors instead of being incorporated into the photon
transport simulation.

For the purpose of detector response simulation, photon distributions re-
sulting from all relevant source depths and orientations have to be simulated. In
the case of AMANDA, this covers ∼700 meters of depth and 4π of solid angle.

Fig. 1. Logarithm of the photon ﬂuence
F for points along the particle track z′
at distances ρ = 0, 3, 12, 27, 48, 75,
108, 147, 192 and 243 meters from the
track – top to bottom.

Fig. 2.

An example of how the net-
work interpolates the integrated and
inverted time-delay probability tables.
The axes units are rescaled for use
in NN.

3

Combining the sizes of tables describing the photon ﬂux around each of these
sources, the overall size of the photon table set becomes very large; ∼1 GB even
for a very coarse binning. Increasing the quality (for improved simulation accu-
racy) or the number (for larger detectors [1]) of tables quickly becomes prohibitive
if one should hope to use most readily-available computational resources.

Possible solutions would be to either segment detector simulation in such
a way that only a subset of all tables would be needed at any given time, or to
reduce the memory needed to describe the content of each table. To pursue the
second option, we have chosen to use neural networks to make a model-free ﬁt to
the tables and use the network output in the detector simulation.

3. Neural Network (NN) implementation

The photon ﬂux is stored in tables as photon ﬂuence Fij = f (rsrc,i, rj) at
a point rj due to a source at rsrc,i, and as a normalized time proﬁle of the ﬂux
Pijk = g(rsrc,i, rj, tk) where tk is time delay with respect to an unscattered photon
from the same source. We now represent the functions F and P by multi-layer
perceptron (MLP) neural networks [2] with as many input nodes as there are
coordinates, a single output node for the function value, and a number of hidden
nodes to be determined. The table coordinates and stored values are used to
create neural net training patterns.

The photon tables map 5 spatial coordinates to a ﬂuence which can extend
over 20 orders of magnitude in the case of AMANDA. This is beyond the dynamic
range of a neural net, so the logarithm of the ﬂuence is ﬁtted. All input coordi-
nates are rescaled on [0,1] range. In order to ﬁnd a suitable net architecture, we
consider ﬁrst a ﬂuence projection onto the dimension along which the function
shows the most features. Hidden nodes and layers are added/removed until we
ﬁnd a satisfactory agreement between the neural net output and the tabulated
value expressed in the linear ﬂuence units. After this, input nodes are added one
at a time for the additional, smoother dimensions. The hidden layer conﬁgura-
tion can be modiﬁed if necessary, but we usually ﬁnd that the additional links
from the new input nodes can handle the additional dimensions. We train the net
until the diﬀerence between the network output and the desired function values
stabilizes. Figure 1. shows the excellent network response to the ﬂuence training
for the light emitted by a short particle-track segment.

Fitting delay tables follows the same method as the ﬂuence tables, but with
one additional input coordinate. In the detector simulation, one wishes to ran-
domly sample P in order to generate timing response of the detector. To do this,
0P dt′),
t
one is interested in the integrated and time-inverted function of P , t = h(R
0 P dt′ is
t
which can be easily expressed in neural net formulation. If the function R
not one-to-one, we exclude the ﬂat part of the function from the ﬁt, and if due to
0 P dt′ = 0, t = 0)
t
binning eﬀects t 6= 0 for all values of R

0 P dt′, we add a pattern (R
t

4

to make the function on-to.

To avoid biasing the network to the order in which patterns are stored,
they are shuﬄed before network training. For network construction and training
we use the SNNS package [6]. In the case of ﬂuence tables, all patterns ﬁt into
a standard computer memory and can be used in a single training session.
In
the case of delay tables, only ∼10% of patterns ﬁt into memory, so a random
subsample is used. The network’s interpolation capability (Fig. 2.) ensures that
the patterns not used for training are nevertheless accurately reproduced within
2.6% (Fig. 3.). Large relative-error tails, seen in Fig. 3., occur only for very
short time-delays and produce no adverse eﬀect on application of net output.

4. Results

After training, the network can
be used in the standard detector re-
sponse simulator. To check the accu-
racy of the net, we compare events sim-
ulated using the direct table lookup to
events simulated using the neural net
It is found that sim-
representation.
ulated hit-amplitude and hit-time dis-
tributions are in good agreement (inset
Fig. 3.). The memory reduction fac-
tor achieved is ∼1000 for the ﬂuence
tables and ∼0.5×106 for the timing ta-
bles. We observe no CPU runtime in-
crease due to NN evaluation.

We would like to thank K.
Woschnagg, S. Hundertmark, L. Ger-
hardt, and M. Kowalski for help and
advice.

References

Fig. 3. The relative time-delay error
Inset:
of NN ﬁtted photon ﬂux.
Hit time distribution as simulated for
muons passing AMANDA, comparing
table lookup and NN approach.

1. Ahrens J. 2003, ArXiv: astro-ph/0305196
2. Haykin S. 1999, in “Neural Networks: A Comprehensive Foundation” (Prentice-

Hall, New Jersey)

3. Mioˇcinovi´c P. 2001, Ph.D. thesis, http://area51.berkeley.edu/manuscripts
4. Wagner W. et al., these proceedings
5. Woschnagg K. 1999, in Proc. 26th ICRC (IUPAP, Salt Lake City), Vol. 2, 200
6. Zell A. et al. 1995, SNNS User Manual, IPVR, Univ. of Stuttgart, Germany

