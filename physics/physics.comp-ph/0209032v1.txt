2
0
0
2
 
p
e
S
 
7
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
2
3
0
9
0
2
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Geometric Random Inner Products: A New Family of Tests for Random Number
Generators

Shu-Ju Tu∗ and Ephraim Fischbach†
Department of Physics, Purdue University, West Lafayette, Indiana 47907-1396
(Dated: July 26, 2013)

We present a new computational scheme, GRIP (Geometric Random Inner Products), for test-
ing the quality of random number generators. The GRIP formalism utilizes geometric probability
techniques to calculate the average scalar products of random vectors generated in geometric ob-
jects, such as circles and spheres. We show that these average scalar products deﬁne a family of
geometric constants which can be used to evaluate the quality of random number generators. We
explicitly apply the GRIP tests to several random number generators frequently used in Monte
Carlo simulations, and demonstrate a new statistical property for good random number generators.

PACS numbers: 02.50.Ng

I.

INTRODUCTION

Monte Carlo methods are among the most widely used
numerical algorithms in computational science and engi-
neering [1]. The key element in a Monte Carlo calculation
is the generation of random numbers. Although a truly
random number sequence produced by either a physical
process such as nuclear decay, an electronic device etc.,
or by a computer algorithm, may not actually exist, a
new and computationally easy-to-implement scheme to
investigate random number generators is always highly
desirable.

There have been many proposed schemes for the qual-
ity measure of random number generators [2, 3, 4, 5,
6, 7, 8, 9]. These computational tests are based either
on probability theory and statistical methods (for ex-
ample: the χ2 test, the Smirnov-Kolmogorov test, the
correlation test, the spectral test, and the DieHard bat-
tery of randomness tests), or on mathematical modeling
and simulation for physical systems (for example: ran-
dom walks and Ising model simulations). These methods
also open the door to studying the properties of ran-
dom number sequences such as randomness and com-
plexity [10]. Some important attempts at an operational
deﬁnition of randomness were previously developed by
Kolmogorov and Chaitin (algorithmic informational the-
ory) [11, 12, 13, 14] and by Pincus (approximate en-
tropy) [15].

In this paper, we study a new method to measure n-
dimensional randomness which we denote by GRIP (Ge-
ometric Random Inner Products). The GRIP family of
tests is based on the observation that the average scalar
products of random vectors produced in geometric ob-
jects (e.g., circles and spheres), deﬁne geometric con-
stants which can be used to evaluate the quality of ran-
dom number generators. After presenting the simplest
example of a GRIP test, we exhibit a computational

∗Electronic address: sjtu@physics.purdue.edu
†Electronic address: ephraim@physics.purdue.edu

method for implementing GRIP, which is then used to
analyze a number of random number generators. We
then discuss the GRIP formalism in detail and show how
a random number sequence, when converted to random
points in a space deﬁned by a geometric object, can pro-
duce a series of known geometric constants. Later we
introduce additional members and include them within
the GRIP family. We then present the computational
results for conﬁgurations of four, six, and eight random
points, along with a consideration of some key issues.
Finally, we conclude by discussing how the GRIP test
measures the quality of random number generators by
explicitly adding a new quantitative property to random
number sequences along with the three known qualitative
properties summarized in Ref. [10].

II. GENERAL DESCRIPTION OF THE GRIP
FORMALISM

The GRIP scheme is derived from the theory of ran-
dom distance distribution for spherical objects, and can
be generalized to other geometric objects with arbitrary
densities [16, 17]. First, three random points (~r1, ~r2, and
~r3) are independently produced from the sample space
deﬁned by a geometric object. We then evaluate the aver-
~r23 from two associated random
age inner product of ~r12 ·
~r2. For a geometric
~r1 and ~r23 = ~r3 −
vectors, ~r12 = ~r2 −
object such as an n-ball of uniform density with a radius
R, the analytical result is a geometric constant which
can be expressed in terms of the dimensionality n of the
space [16, 17]:

~r12 ·
h

~r23in =

−

n
n + 2

R2.

(1)

A simple derivation of Eq. (1) can be found in the Ap-
pendix.

The following procedures are the numerical implemen-
tation of our testing programs. A random number se-
quence produced from a random number generator is
used to generate a series of three random points ~r1, ~r2,

and ~r3 such that these random points are uniformly dis-
tributed in an n-dimensional spherical ball B of radius
R, where

B =

(x1, x2,

, xn) : x2

1 + x2

2 +

(cid:8)

· · ·

We then compute a series of values for ~r12 ·
is evaluated N times, then statistically we expect

· · ·

+ x2

R2

. (2)

n ≤
~r23. If ~r12 ·

(cid:9)

~r23

lim
N→∞

1
N

N

Xi=1

(~r12 ·

~r23)i =

n
n + 2

−

R2,

(3)

as predicted by Eq. (1).

III. RANDOM NUMBER GENERATORS

We now apply the GRIP test to the following random
number generators frequently used in Monte Carlo sim-
ulations.

1. RAN0 - a linear congruential generator [2, 3]:

xn = 16807

xn−1 mod 2147483647.

(4)

×

2. RAN3 - a lagged Fibonacci generator [2, 3]:

xn = (xn−55 −

xn−24) mod 231.

(5)

3. R31 - a generalized feedback shift register (GFSR)

generator [2, 8, 9]:

xn = xn−31 ⊕

xn−3,

(6)

where

is the bitwise exclusive OR operator.

⊕

4. durxor - a generator selected from IBM ESSL (En-
gineering and Scientiﬁc Subroutine Library) [18].

5. durand - a generator selected from IBM ESSL (En-
gineering and Scientiﬁc Subroutine Library) and
the sequence period of durand is shorter than
durxor [18].

6. ran gen - one of the subroutines in IMSL libraries

from Visual Numeric [19].

7. Random - a Fortran 90/95 standard intrinsic ran-

dom number generator [20].

8. Weyl - a Weyl sequence generator [21, 22]:

9. NWS - a nested Weyl sequence generator [21, 22]:

(8)
nα
{
10. SNWS - a shuﬄed nested Weyl sequence genera-

xn =

n
{

}}

.

tor [21, 22]:

sn = M

xn =

nα
{
snα

n
{
sn {

}}
,

}}

{

+

1
2

,

where M is a large positive integer.

2

(9)

(10)

The computational results obtained from Eq. (3) when
n = 3 and n = 9 are presented in Table I. Results
for random number generators based on other algorithms
such as the Data Encryption Standard (DES) [2, 3] can
be found in Ref. [23] along with the computed results
obtained from other geometric objects. We note that
both the ran gen and RAN0 generators perform better
overall, while the NWS and Weyl generators (which are
based on the Weyl sequence method) are ranked lowest
compared to the other generators. The reasons why this
is the case will be discussed later.

IV. GRIP ANALYSIS

In the following, we analyze the relationship between
GRIP and a random number sequence, and show how a
good random number sequence, when converted to ran-
dom points in a a space deﬁned by a geometric object,
can produce a series of known n-dimensional geometric
constants. A random number sequence generated from a
random number generator can be written as,

a1a2a3a4a5a6a7a8a9a10 · · · · · ·

.

(11)

When the sequence is converted to represent random
points in a 2-dimensional geometric object, the random
numbers in Eq. (11) can then be grouped in pairs as

(a1a2) (a3a4) (a5a6) a7a8a9a10 · · · · · ·

,

(12)

where Cartesian coordinates are used. The ﬁrst set of
random points

can thus be identiﬁed as

~r1, ~r2, ~r3}
{

xn =

nα
}

{

,

(7)

~r1 = (a1, a2) ,

~r2 = (a3, a4) ,

~r3 = (a5, a6) .

(13)

where
irrational number such as √2.

x
}

{

is the fractional part of x, and α is an

GRIP then uses ~r1, ~r2, and ~r3 to evaluate the average
scalar product which can be computed by rewriting,

TABLE I: Computed results for h~r12 · ~r23in. RNG denotes the speciﬁc random number generator deﬁned in the text, and
“Expected” is the exact result obtained from Eq. (1). The entries are ranked in terms of their errors, which are the absolute
values of the diﬀerences between the expected and computed results. For each entry in the table N = 108, and multiple seeds
were used where appropriate.

Rank
1
2
3
4
5
6
7
8
9
10

RNG
ran gen
RAN0
R31
durand
durxor
RAN3
Random
SNWS
NWS
Weyl
Expected

n = 3
−0.59999802
−0.60000722
−0.60005031
−0.59991945
−0.59991306
−0.59988610
−0.59987912
−0.59969277
−0.62988317
−1.80809907
−0.60000000

Error
0.00000198
0.00000722
0.00005031
0.00008055
0.00008694
0.00011390
0.00012088
0.00030723
0.02988317
1.20809907

RNG
RAN0
ran gen
Random
durand
durxor
R31
RAN3
SNWS
NWS
Weyl
Expected

n = 9
−0.81819136
−0.81821041
−0.81821550
−0.81821772
−0.81822185
−0.81824459
−0.81827541
−0.81795246
−0.82539808
−1.05604651
−0.81818181

3

Error
0.00000955
0.00002860
0.00003369
0.00003591
0.00004004
0.00006278
0.00009360
0.00022935
0.00721627
0.23786470

~r12 ·
h

~r23i

=

1
N

N

2

Xi=1

Xj=1

(a6i−4+j −

a6i−6+j) (a6i−2+j −

a6i−4+j) ,

(14)

where N is a large positive integer. When the geometric
object is a circle of radius R and uniform density, we
expect

0.5R2 as predicted by Eq. (1).

The analysis for 2-dimensional GRIP can be imme-
diately generalized to the n-dimensional case. When the

~r12 ·
h

~r23i ≈ −

sequence in Eq. (11) is used to generate random points in
a n-dimensional spherical object, we can regroup Eq. (11)
as follows:

(a1 · · ·

ak) (ak+1 · · ·

a2k) (a2k+1 · · ·

a3k) (

) (

) (

)

· · ·

· · ·

· · ·

· · · · · ·

.

(15)

The average scalar product of ~r12 ·
pressed as

~r23 can then be ex-

~r12 ·
h

~r23i

=

1
N

N

n

Xi=1

Xj=1

(a3in−2n+j −

a3in−3n+j ) (a3in−n+j −

a3in−2n+j ) .

(16)

When the geometric object is an n-ball with a radius
R = 1 and a uniform density, we expect from Eq. (1)
that the result of Eq. (16) should be a geometric constant,

n/(n + 2).

−

V. GRIP MEMBERS

For practical computational purposes, we may wish to
transform a random number sequence from a uniform
density distribution to one which is non-uniform. One of
the most important non-uniform density distributions is
the Gaussian (normal) distribution P (r) with mean zero

and standard deviation σ,

P (r) =

1

(2π)n/2σn e−(1/2)(r

2

/σ

2).

(17)

1/2

(cid:1)

· · ·

+ x2
n

x2
1 +
(cid:0)

∞
0 P (r) dr = 1, r =
R

, and n
Here
is the space dimensionality. One can use either the
Box-Muller transformation method to generate a random
number sequence with a Gaussian density distribution, or
use available subroutines from major computational sci-
entiﬁc libraries such as IBM ESSL and IMSL [18, 19]. By
applying the probability density function of the random
distance distribution as discussed in Ref. [17], one can
add a new GRIP member to investigate the quality of a
Gaussian random number generator, and this new GRIP
test can be expressed as:

nσ2.

−

~r12 ·
h

~r23in =
A very common situation arises when one has to produce
random points uniformly distributed on the surface of
an n-sphere of radius R. Some general computational
techniques for doing this are summarized in Refs. [2, 16].
We can then use

(18)

4

to examine the quality of such transformed random num-
ber generators as discussed in Ref. [23].

Another application of the GRIP formalism is in
stochastic geometry. We can design a test scheme for a
conﬁguration utilizing any number of random points [23],
and these tests can be included in the GRIP family.
Among the tests are:

1. Four uniform random points conﬁguration for an

n-ball of radius R

(~r12 ·
h

~r23) (~r34 ·

~r41)

in =

(~r12 ·

h

~r34) (~r23 ·
~r13 ·
h

~r41)

in =
~r24in = 0.

n (n + 1)

(n + 2)2 R4,
(n + 2)2 R4,

2n

(20)

(21)

(22)

~r12 ·
h

~r23in =

−

R2,

(19)

ball of radius R

2. 2m uniform random points conﬁguration for an n-

(~r12 ·
h

~r23)

· · · · · ·

(~r2m−1 2m ·

~r2m 1)

in = (
−

1)m n

nm−1 + 1
(n + 2)m R2m,
(cid:0)

(cid:1)

(23)

where 2m (m = 2, 3, 4 etc.)
number.

is a positive even

A derivation of Eq. (20) can be found in the Appendix.
We summarize the computational results for Eq. (23)
when m = 2, 3, 4 in in Tables II, III, and IV. A dis-
cussion of other results, such as Eqs. (18) and (19), can
be found in Ref. [23].

~r41)

(~r12 ·
h

~r23) (~r34 ·

We observe that all of the generators except NWS and
Weyl perform signiﬁcantly better in n = 3 than in n = 9
using the GRIP test based on
in. We
also note from Table II, and the n = 9 results (from R31
to RAN0), that these results are clearly biased to larger
numbers compared to the expected value. One interpre-
tation may be that
i9 is a more sen-
sitive and dedicated computational test for investigating
random number generators than other GRIP tests. We
also note that the results for n = 9 are overall worse than
n = 3, and that the results for
i9
reveal a more signiﬁcant bias than in any of the other
cases. These results suggest that the GRIP test either in
higher dimensions (large n), or using a conﬁguration of
four random points, can serve as a more computationally
sensitive test to detect non-random patterns hidden in

~r23) (~r34 ·

~r23) (~r34 ·

(~r12 ·
h

(~r12 ·

~r41)

~r41)

h

random number sequences. Finally we note that it is not
surprising that the NWS and Weyl generators are ranked
worst among all cases in our GRIP test. As reported pre-
viously in [22], these two show unacceptable non-random
behavior and strong correlations.

VI. CONCLUSIONS

We have presented a new computational paradigm for
evaluating the quality of random number generators. We
demonstrate how GRIP helps to understand complex-
ity and randomness by adding a new property, besides
three known properties (typical, chaotic, and the stabil-
ity of frequencies) [10], for random number sequences.
This quantitative feature shows how a random number
sequence, when converted to random points in a space
deﬁned by a geometric object, can produce a series of
known geometric constants. Ten random number gener-
ators were selected to run our GRIP tests, and they are
ranked based on the errors between the numerical and
analytical results. Finally we note that one implication
of our work is that computational scientists should test

TABLE II: Computed results for h(~r12 · ~r23) (~r34 · ~r41)in. RNG denotes the speciﬁc random number generator deﬁned in the
text, and “Expected” is the exact result obtained from Eq. (1). The entries are ranked in terms of their errors, which are
the absolute values of the diﬀerences between the expected and computed results. For each entry in the table N = 108, and
multiple seeds were used where appropriate.

Rank
1
2
3
4
5
6
7
8
9
10

Rank
1
2
3
4
5
6
7
8
9
10

RNG
RAN3
RAN0
durxor
durand
R31
Random
ran gen
SNWS
NWS
Weyl
Expected

RNG
durand
Random
RAN3
ran gen
RAN0
durxor
SNWS
R31
NWS
Weyl
Expected

n = 3
0.47999737
0.47995440
0.48004715
0.48006530
0.48008265
0.47990347
0.47986482
0.47975570
0.55841828
3.31162983
0.48000000

n = 3
−0.24000387
−0.24001846
−0.23997958
−0.24003206
−0.23994286
−0.24011639
−0.23964945
−0.24070892
−0.28813072
−5.78662461
−0.24000000

Error
0.00000263
0.00004560
0.00004715
0.00006530
0.00008265
0.00009653
0.00013518
0.00024430
0.07842818
2.83162983

Error
0.00000387
0.00001846
0.00002042
0.00003206
0.00005714
0.00011639
0.00035055
0.00070892
0.04813072
5.54662461

RNG
R31
RAN3
SNWS
ran gen
durxor
Random
durand
RAN0
NWS
Weyl
Expected

RNG
SNWS
R31
ran gen
durxor
durand
Random
RAN0
RAN3
NWS
Weyl
Expected

n = 9
0.74538039
0.74567962
0.74582752
0.74634598
0.74637990
0.74644366
0.74646979
0.74659547
0.69652947
1.28608478
0.74380165

n = 9
−0.55453884
−0.55373136
−0.55521687
−0.55524213
−0.55528032
−0.55533746
−0.55561838
−0.55595656
−0.48246750
−1.31133451
−0.55447032

TABLE III: Computed results for h(~r12 · ~r23) (~r34 · ~r45) (~r56 · ~r61)in. RNG denotes the speciﬁc random number generator deﬁned
in the text, and “Expected” is the exact result obtained from Eq. (1). The entries are ranked in terms of their errors, which
are the absolute values of the diﬀerences between the expected and computed results. For each entry in the table N = 108,
and multiple seeds were used where appropriate.

5

Error
0.00157874
0.00187797
0.00202587
0.00254433
0.00257825
0.00264201
0.00266814
0.00279382
0.04727218
0.54228305

Error
0.00006852
0.00073896
0.00074655
0.00077181
0.00081000
0.00086714
0.00114806
0.00148624
0.07200282
0.75686419

the random number generators they use in their simu-
lations, and verify that their random number generators
pass as many proposed tests as possible.

as 1, 2, and 3 in Fig. 1, and then calculate

~r12 ·

~r23 = r12r23 cos θ =

r12r23 cos α,

(A.1)

−

APPENDIX: DERIVATION OF h(~r12 · ~r23)in AND
h(~r12 · ~r23) (~r34 · ~r41)in

where α+θ = π. From the triangle formed by the random
points, we then have

We derive the analytical result of Eq. (1) for a circle
(n = 2) of radius R and uniform density. The same
derivation can be applied to the case of n dimensions
3. We label three independent random points
where n

≥

31 = r2
r2

12 + r2

23 −

2r12r23 cos α.

(A.2)

dimensional case to the n-dimensional
Extending this 2
case, and combining Eqs (A.1) and (A.2), we then eval-
uate

−

~r12 ·
h

~r23in =

−

12 + r2
r2

23 −

1
2 (cid:10)

r2
31

n =
(cid:11)

−

1
2 (cid:10)

r2

n =

(cid:11)

1
2 Z
0

−

2R

Pn(r)r2 dr =

n
n + 2

−

R2,

(A.3)

where we have utilized the fact that ~r12, ~r23, and ~r31 are

three independent random vectors. The functions Pn(r)

TABLE IV: Computed results for h(~r12 · ~r23) (~r34 · ~r45) (~r56 · ~r67) (~r78 · ~r81)in. RNG denotes the speciﬁc random number gen-
erator deﬁned in the text, and “Expected” is the exact result obtained from Eq. (1). The entries are ranked in terms of their
errors, which are the absolute values of the diﬀerences between the expected and computed results. For each entry in the table
N = 108, and multiple seeds were used where appropriate.

Rank
1
2
3
4
5
6
7
8
9
10

RNG
ran gen
durxor
RAN3
RAN0
durand
Random
SNWS
R31
NWS
Weyl
Expected

n = 3
0.13440377
0.13439078
0.13441796
0.13442104
0.13437131
0.13430897
0.13415229
0.13684585
0.16328766
10.1762479
0.13440000

Error
0.00000377
0.00000922
0.00001796
0.00002104
0.00002869
0.00009103
0.00024771
0.00244585
0.02888766
10.0418479

RNG
durxor
ran gen
durand
Random
RAN3
RAN0
SNWS
R31
NWS
Weyl
Expected

n = 9
0.44877762
0.44887037
0.44889786
0.44896356
0.44910757
0.44924443
0.44789799
0.44684269
0.46587567
1.53996230
0.44873984

6

Error
0.00003778
0.00013053
0.00015802
0.00022372
0.00036773
0.00050459
0.00084185
0.00189715
0.01713583
1.09122246

2

θ

α

1

3

FIG. 1: Three random points conﬁguration in a circle.

in Eq. (A.3), which can be found in Refs. [16, 17, 24,
25, 26, 27, 28, 29], are the probability density functions
for the random distance r between two random points in
an n-dimensional spherical ball of radius R and uniform
density.

We consider next the analytical result in Eq. (20) for a
circle (n = 2) of radius R and uniform density. A similar
derivation can lead to Eqs. (21), (22), and (23), as well
as to the case of n dimensions where n
3. We begin by
expressing 4 random points ~r1, ~r2, ~r3, and ~r4 in Carte-
sian coordinates, where ~ri = (xi, yi). The expression in
Eq. (20) can then be evaluated by writing

≥

(~r12 ·
h

~r23) (~r34 ·

~r41)

i2 = R

R
−R dx1

1

√R2−x2
−√R2−x2
R
R
−R dx1
R

√R2−x2
−√R2−x2
R

1

1

1

dy1 · · · R

R
−R dx4

f1 ×

4

√R2−x2
−√R2−x2
R
R
−R dx4

4

4

√R2−x2
−√R2−x2
R

4

dy1 · · · R

dy4

f2 dy4

=

R4,

3
8

(A.4)

where

ACKNOWLEDGMENTS

f1 = (x2 −
f2 = (x4 −

x1) (x3 −
x3) (x1 −

x2) + (y2 −
x4) + (y4 −

y1) (y3 −
y3) (y1 −

y2) ,
y4) .

A derivation of the general result using the probabil-
ity density functions Pn(r) in Eq. (A.3) can be found
in Ref. ([23]).

The authors wish to thank T. K. Kuo and Dave Sea-
man for helpful discussions and the Purdue University
Computing Center for computing support. This work
was supported in part by the US Department of Energy
contract DE-AC02-76ER1428.

[1] J. Dongarra and F. Sullivan, Comp. Sci. Eng. 2, 22

[2] D. E. Knuth, The Art of Computer Programming Volume

(2000).

2 (Addison-Wesley, Reading, MA, 1998), 3rd ed.

7

[3] W. Press, S. Teukolsky, W. Vetterling, and B. Flannery,
Numerical Recipes in C (Cambridge University Press,
New York, 1992), 2nd ed.

[4] G. Marsaglia, in Computer Science and Statistics: Proc.
16th Symposium on the Interface, edited by L. Billard
(1985), pp. 3–10.

[5] A. Garcia, Numerical Methods for Physics (Prentice-

Hall, Upper Saddle River, NJ, 2000), 2nd ed.

[16] S. J. Tu, A New Geometric Probability Technique and Its
Applications to Physics, PhD Thesis (Purdue University,
West Lafayette, Indiana, 2001).

[17] S. J. Tu and E. Fischbach, J. Phys. A: Math. Gen. 35,

6557 (2002).

[18] http://www.ibm.com.
[19] http://www.vni.com.
[20] M. Metcalf and J. Reid, Fortran 90/95 Explained (Ox-

[6] N. Giordano, Computational Physics (Prentice-Hall, Up-

ford, Midsomer Norton, Avon, 1999), 2nd ed.

per Saddle River, NJ, 1997).

[21] B. L. Holian, O. E. Percus, T. T. Warnock, and P. A.

[7] J. Gentle, Random Number Generation and Monte Carlo

Whitlock, Phys. Rev. E 50, 1607 (1994).

Methods (Spring-Verlag, New York, 1998), 2nd ed.

[22] K. V. Tretiakov and K. W. Wojciechowski, Phys. Rev. E

[8] A. M. Ferrenberg, D. P. Landau, and Y. J. Wong, Phys.

60, 7626 (1999).

[10] A. N. Kolmogorov and V. A. Uspenskii, Theory Prob.

[25] L. A. Santal´o, Integral Geometry and Geometric Proba-

[9] I. Vattulainen, T. Ala-Nissila, and K. Kankaala, Phys.

Rev. Lett. 69, 3382 (1992).

Rev. Lett. 73, 2513 (1994).

Appl. 32, 389 (1987).

[11] A. N. Kolmogorov, Theoret. Comp. Sci. 207, 387 (1998).
[12] G. Chaitin, Algorithmic Information Theory (Cambridge

phia, 1978).

University Press, New York, 1987).

[13] G. Chaitin, Information, Randomness and Incomplete-
ness: Papers on Algorithmic Information Theory (World
Scientiﬁc, New Jersey, 1990), 2nd ed.

[14] G. Chaitin, Exploring Randomness (Springer, New York,

[23] S. J. Tu and E. Fischbach, in preparation.
[24] M. G. Kendall and P. A. P. Moran, Geometrical Proba-

bility (Hafner, New York, 1963).

bility (Addison-Wesley, Reading, MA, 1976).

[26] H. Solomon, Geometrical Probability (SIAM, Philadel-

[27] R. V. Ambartzumian, Factorization Calculus and Ge-
ometric Probability (Cambridge University Press, New
York, 1990).

[28] D. Klain and G. C. Rota, Introduction to Geometri-
cal Probability (Cambridge University Press, New York,
1997).

[15] S. M. Pincus, Proc. Natl. Acad. Sci. USA 88, 2297

[29] E. Fischbach, Ann. Phys. 247, 213 (1996).

2001).

(1991).

