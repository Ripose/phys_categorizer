7
9
9
1
 
p
e
S
 
8
1
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
6
2
0
9
0
7
9
/
s
c
i
s
y
h
p
:
v
i
X
r
a

BI-TH-97/24
SU-4240-666
September 1997

Improved Algorithms for Simulating Crystalline
Membranes

Gudmar Thorleifsson 1 and Marco Falcioni 2

1Fakult¨at f¨ur Physik, Universit¨at Bielefeld, D-33615 Bielefeld, Germany
2Physics Department, Syracuse University, Syracuse NY 13244-1130, USA†

Abstract

The physics of crystalline membranes, i.e. ﬁxed-connectivity surfaces em-
bedded in three dimensions and with an extrinsic curvature term, is very rich
and of great theoretical interest. To understand their behavior, numerical simu-
lations are commonly used. Unfortunately, traditional Monte Carlo algorithms
suﬀer from very long auto-correlations and critical slowing down in the more
interesting phases of the model.
In this paper we study the performance of
improved Monte Carlo algorithms for simulating crystalline membrane, such as
hybrid overrelaxation and unigrid methods, and compare their performance to
the more traditional Metropolis algorithm. We ﬁnd that although the overre-
laxation algorithm does not reduce the critical slowing down, it gives an overall
gain of a factor 15 over the Metropolis algorithm. The unigrid algorithm does,
on the other hand, reduce the critical slowing down exponent to z

1.7.

≈

1

Introduction

When using Monte Carlo methods to study physical systems one is usually faced
with the problem of critical slowing-down (CSD) in the critical region were a typ-
ical correlation length of the system diverges. That is, the auto-correlation time
of traditional Monte Carlo algorithms, the time it takes to generate “statistically
independent” conﬁgurations, grows rapidly with system size. For example, for the
well known Metropolis and heat-bath algorithms this time grows linearly with the
system size, making simulations of large systems prohibitively time consuming.

It is thus very important to construct new Monte Carlo algorithms that can
reduce CSD. Much progress has been made in this direction; examples of improved

†Current Address: Chemical Engineering Department, University of California, Los Angeles,

CA, 90095-1592, USA

1

algorithms are, to name a few: Adler’s overrelaxation [1], Fourier acceleration [2],
multigrid [3] and cluster algorithms [4]. Those algorithms have been applied success-
fully to variety of models and, in some special cases, have eliminated CSD altogether.
This, though, is usually accomplished only for relatively simple models, such as free
ﬁeld theories or spin models with simple interactions. For more complicated models,
where sophisticated methods are harder to implement, the improvement is usually
somewhat less.

In this paper we study the performance of two such improved algorithms,
overrelaxation and multigrid, in simulations of crystalline membranes. Crystalline
membranes are internally rigid surfaces, embedded in three dimensions, with an ex-
trinsic curvature term. They exhibit a phase transition between a high-temperature
crumpled and a low-temperature ﬂat phase. It is especially in the ﬂat phase, and at
the crumpling transition, that Monte Carlo simulations with traditional algorithms
suﬀer from very long auto-correlations.

As with many interesting models, the Hamiltonian of a crystalline membrane
is too complicated for a direct implementation of the methods we want to employ.
Some simpliﬁcations have to be made. For the overrelaxation we use a quadratic
approximation to the Hamiltonian when choosing a new trial position — this requires
an additional accept-reject step to restore detail balance. This is usually referred to
as hybrid overrelaxation. Instead of multigrid we use a simpler implementation, the
unigrid algorithm, in which a coarsening transformation of the ﬁeld conﬁguration is
not needed — the ﬁelds at the original (ﬁne) lattice are simulated at all levels.

In addition to the performance of the algorithms, we also examine the impor-
tance of randomness in the updating procedure, i.e. the order in which the ﬁelds
are updated. According to standard folklore, too much randomness in the updating
procedure increases CSD as the system takes a drunkard’s walk through the phase
space. Too little noise, on the other hand, increases CSD as well since the system is
too weakly ergodic. It is thus important to tune the amount of randomness in the
algorithm appropriately.

The paper is organized as follows.

In Section 2 we describe the particular
model of a crystalline membrane we study, discuss the problems of the simulations
In Section 3 we describe the
and the performance of the Metropolis algorithm.
hybrid overrelaxation algorithm and our approximation. In Section 4 we test the
performance of the unigrid algorithm. Finally, in the Section 5, we compare the
overall performance and merits of those diﬀerent methods and comment on possible
further improvements and applications.

2 A model of crystalline membranes

The model we simulate is a simple discretization of a phantom (non self-avoiding)
crystalline membrane, inspired by the Polyakov action for Euclidean strings with
extrinsic curvature [5, 6]. A discrete crystalline membrane is described by a reg-

2

ular two-dimensional triangulation embedded in three-dimensional space where it
is allowed to ﬂuctuate. The Hamiltonian is composed of two terms: a pair poten-
tial between neighboring nodes and a bending energy term. As a pair potential
we use a simple Gaussian spring potential, and we model the bending energy by a
ferromagnetic interaction between neighboring normals to the faces of the surface:

=

H

~ri −
|

~rj|

2 + κ

(1

~na ·

−

~nb).

Xhiji

Xhabi

Here i, j label the intrinsic position of the nodes, ~ri is the corresponding position in
the embedding space, ~na is a normal to a triangle a, and κ is the bending rigidity.
The partition function is given by the trace of the Boltzmann weight over all possible
conﬁgurations of the embedding variables

~r
{

:
}

=

[d~r ] δ(~rcm) exp (

[~r ] ) .

−H

Z

Z

The center of mass of the membrane, ~rcm, is kept ﬁxed to eliminate the transla-
tional zero mode. As there is no self-avoidance term in the Hamiltonian, this model
describes a phantom surface.

This model has been studied extensively with numerical methods [6, 7, 8, 9].
It has been found to have a high-temperature crumpled (disordered) phase and a
low-temperature ﬂat (ordered) phase, separated by a continuous phase transition —
the crumpling transition. The behavior of the system in the ﬂat phase is governed
by an infrared stable ﬁxed point at κ =
; the whole ﬂat phase is critical. The
existence of an ordered phase in a two-dimensional system with a continuous symme-
try and short range interactions is remarkable, given the Mermin-Wagner theorem.
What stabilizes the ﬂat phase are the out-of-plane ﬂuctuation of the membrane
that couple to the in-plane phonon degrees of freedom due to non-vanishing elas-
tic moduli. Bending of the membrane is necessarily accompanied by an internal
stretching. By integrating out the phonon degrees of freedom, one is left with an
eﬀective Hamiltonian with long-range interactions between the Gaussian curvature
ﬂuctuations.

∞

Most numerical simulations so far have used either local updating methods,
usually the Metropolis algorithm, or Fourier acceleration. The Metropolis algorithm,
apart from suﬀering from CSD, has very long auto-correlations both in the ﬂat phase
and close to the crumpling transition. To establish this we have simulated the model
Eq. (2), using the Metropolis algorithm, on a L
L square lattice, L ranging from
8 to 64, and with periodic boundary conditions. We choose to simulate the model
in the ﬂat phase, at κ = 1.1, were we know from previous simulations that the
auto-correlation time is indeed very long [9].

×

To estimate the auto-correlations we measure the square radius of gyration:

(1)

(2)

(3)

Rg =

~ri

~ri ·

+

,

*

Xi

3

Table 1: The integrated auto-correlation time τ (in number of sweeps), together with the
CPU-time per sweep Ts (in ms). Column (a) is for a lexicographic update of nodes, while
(b) is for random updating. From a linear ﬁt to Eqs. (6) and (7) we get the exponents za
and zs and the corresponding amplitudes

a and

s.

A

A

(a)

(b)

τ
219(15)
546(35)
1153(90)
2714(150)
4049(210)
11443(600)
20500(1200)
2.161(34)
2.57(29)

Ts
1.112
2.784
4.900
10.86
22.23
52.33
97.59
2.143(23)
0.0129(10)

τ
227(12)
567(30)
1123(80)
2534(220)
4527(260)
10347(550)
19900(1300)
2.128(34)
2.83(28)

Ts
1.036
2.610
4.688
11.01
21.68
50.60
98.18
2.188(31)
0.0111(13)

L
8
12
16
24
32
48
64
z

A

i.e. the linear extent of the membrane in the embedding space. This is usually
the “slowest mode” of the system. From this we construct the normalized auto-
correlation function

and the integrated auto-correlation time (measured in units of sweeps)

ρ(s) = hRg(t + s)
2
g
R

2
Rg(t)
i − hRgi
2
Rg
−

,

D

E

D

E

τ =

+

ρ(s).

1
2

∞

Xs=1

This is shown in Table 1. The errors on the auto-correlation times are estimated
from 10 to 20 independent runs, each few hundred τ long.

As mentioned in the introduction, we also want to understand the eﬀect of
randomness in the updating on performance. Thus we have repeated the simulations
for two diﬀerent updating schemes: the nodes are sampled either at random or they
are traversed in a lexicographic order. Lexicographic order means that the node
at (intrinsic) position ~x is always updated before ~x + ~ei (i = 1, 2), except at the
boundaries. For a free ﬁeld theory, updated with the overrelaxation algorithm, only
the latter scheme reduces CSD [10].

As an estimate of CSD we deﬁne the dynamical critical exponent za using

ﬁnite size scaling:

(4)

(5)

(6)

τ

≈ Aaξza.

4

Here ξ is some characteristic length scale of the system; in our simulations, where
the model is critical, this is the intrinsic linear extent L.

To evaluate the performance of the algorithm, we also have to take into account
the amplitude
Aa and how the computational work performed per sweep, measured
in CPU-time Ts, scales with system size. This we include in Table 1. Similarly to
Eq. (6) we deﬁne an exponent zs:

Ts ≈ Astzs,
where t is now measured in “real” time (in ms). Combining these exponents and
amplitudes, the performance — the total “cost” of the algorithm — is given by

(7)

=

AsAatza+zs. For the Metropolis algorithm we get:

T

TM =

(

0.0332(45) L4.304(57)
0.0314(48) L4.316(67)

lexicographic updates,
random updates.

(8)

For this algorithm, the order in which nodes are updated is irrelevant.

3 Hybrid overrelaxation

Overrelaxation was introduced as a generalization of the heat-bath algorithm for
models with multi-quadratic actions [1]. In the original formulation the new value
of a ﬁeld φi is chosen to be negatively correlated with the old value. Given a multi-
quadratic action,

= ω (φi − Fi[φj6=i])2 +

S

,
terms independent of φi }

{

one chooses a local update of the ﬁeld φi as

φi →

φ′
i = (1

ζ)φi +

−

ζ
ω2 Fi +

ζ(2
ω

−

ζ)

ξ .

p

(9)

(10)

ξ is a Gaussian random variable of unit variance and ζ is a relaxation parameter.
This update fulﬁlls detail balance for 0 < ζ
2; for ζ = 1 it reduces to the standard
heat-bath algorithm, while for ζ = 2 the ﬁeld evolution becomes deterministic and
conserves energy (a micro-canonical simulation).
In the latter case, in order to
restore ergodicity, some amount of standard ergodic updates have to be included.

≤

This method has been applied successfully to variety of models; its success
based on it suppressing the usual random walk behavior of local updating algo-
rithms [11]. In order to achieve the greatest reduction of CSD, both the relaxation
parameter ζ, and the noise in the updating procedure, should be ﬁne-tuned [10, 14].
Unfortunately, the usefulness of the method has been limited by its restriction to
multi-quadratic systems.

5

A number of generalizations of the overrelaxation have been proposed [12].
They usually involve a transformation of the Boltzmann distribution to the appro-
priate form Eq. (9), and the introduction of an accept-reject step to ensure detail
balance. This has the disadvantage that the accept-reject step can enhance random
walk behavior by the algorithm and, in addition, the rejection probability usually
depends on some characteristics of the model and may not be adjustable to a rea-
sonable value. This is nevertheless the approach we will use.

We make a quadratic approximation to the Hamiltonian Eq. (1) and then
apply hybrid overrelaxation (with ζ = 2). We treat the non-linear bending energy
term by assuming that normalization in the denominator is constant for all the
triangles, i.e. we write the normals as

~na(~r) =

(~ri −
[(~ri −

~rj)

~ri)

(~ri −
(~ri −

×

×

~rk)
~rk)]2 ≈

q

~rj ×

~rk −

~ri ×
Λ

(~rj + ~rk)

′

(11)

are the nodes deﬁning triangle a. Then, a quadratic approximation to

were
the Hamiltonian can be written as

i, j, k
{

}

~rj)2

(~ri −

κ
Λ2

−

HA =

Xhiji

Xhabi

[~rj ×

~rk −

~ri ×

(~rj + ~rk)]

[~rk ×

~rl −

~ri ×

·

(~rk + ~rl)] ,

(12)
where the triangles a = (i, j, k) and b = (i, k, l) are adjacent. Since the approximate
Hamiltonian is quadratic in ~ri, we can write:

HA = ~ri ·

( ˆM~ri) + ~C

~ri +

.
terms independent of ~ri}
{

(13)

The matrix ˆM and the vector ~C are easily computed:

·

6

ˆMaa = 6

ˆMa6=b =

κ
Λ2

6

−

κ
Λ2

Xj=1 (cid:16)

Xj=1 Xb6=a (cid:16)
r (a)
j −

r (a)
j−1

r (b)
j −

r (b)
j−1

r (b)
j+1 −

r (b)
j

(cid:17) (cid:16)

,

(cid:17)

r (b)
j+1 −

r (b)
j

,

(cid:17)

(cid:17) (cid:16)

(14)

and

C (a) =

6

−

r(a)
j

κ
Λ2

(cid:20)

~rj ·
(cid:16)
~rj−2 + ~rj+1 ·

Xj=1 (cid:26)
+ ~rj−1 ·

~qj −
(2~rj−1 + 2~rj+1 −
κ

~qj−1)

(~rj+1 + ~rj−1)2

−

~rj+2

2

+

−

(cid:21)

Λ2 q(a)

j

(~rj+1 −

~rj)2

.

(cid:27)

(15)

(cid:17)
The indices a and b label the component of the ﬁelds in the embedding space, and
the index j labels the neighbors of node i, including its next-to-nearest neighbors
~qj, in a cyclic manner.

6

t

250

200

150

100

50

r

0.5

0.4

0.3

0.2

0.1

0

0

0.5

1

1.5

2

L = 16

L

Figure 1: The integrated auto-correlation time τ , vs. the “normalization” parameter Λ,
for the hybrid overrelaxation algorithm. This is shown both for a random (squares) and a
lexicographic (circles) updating. The lattice size is 162. The dashed line is the corresponding
acceptance rate ρ in the Metropolis test.

The constant energy surface,

HA(~ri) = k, is a multi-quadratic function —
in our case an ellipsoid in the embedding space. To ﬁnd the new (overrelaxed)
i , we can diagonalize the matrix ˆM and apply overrelaxation
embedding position ~r ′
to the transformed variables. This involves some amount of calculation; a quicker
and suﬃcient method is to apply overrelaxation in a random sequence to each of
the embedding positions r(a)
, a = 1, 2, 3. Once the trial position has been chosen,
it is accepted or rejected according to a Metropolis test.

i

An important feature of this approximation is the parameter Λ. Although
introduced as a substitution for the normalization of the normals, it can be tuned to
optimize the performance of the algorithm by minimizing the rejection probability
in the Metropolis test.

We have applied this method in the ﬂat phase (κ = 1.1) for both random and
lexicographic updating. To ensure ergodicity we also include a random amount of
standard Metropolis updates (about 20%). In Fig. 1 we show the integrated auto-
correlation time vs. Λ, for a lattice size L = 16. We also include the corresponding
acceptance rate in the Metropolis test.
In this case, contrary to the Metropolis
algorithm, lexicographic updating reduces τ by about 30%, independent of system
size. More important, for a suitable choice of Λ, τ is reduced by a factor of 15
relative to the Metropolis algorithm. As it might be expected, the optimal choice of

7

Table 2: Same as Table 1, except the algorithm used is the approximate hybrid overrelax-
ation. Again (a) corresponds to lexicographic and (b) to random updating. The optimal
value of the parameter Λ is also included.

(a)

τ
18.5(7)
36.6(1.1)
70.6(8.0)
150(11)
269(25)
640(40)
1120(105)
1.990(31)
0.275(24)

Λ
1.08
1.22
1.35
1.58
1.94
2.60
3.20

Tsweep
1.247
3.078
5.735
13.42
27.27
62.69
118.7
2.190(14)
0.0132(6)

(b)

τ
31.9(1.2)
66.9(2.0)
113.3(6.0)
279(18)
484(42)
1096(90)
2600(180)
2.065(30)
0.405(34)

Tsweep
1.136
2.766
5.122
11.83
24.12
53.19
103.5
2.163(18)
0.0127(8)

Λ
1.08
1.23
1.38
1.57
1.92
2.68
3.09

L
8
12
16
24
32
48
64
z

A

Λ corresponds to maximizing acceptance rate in the Metropolis test. Surprisingly
this value is much higher than one would expect from the average length of the
0.3 for κ = 1.1). This implies that, in order to
un-normalized normals (
enhance the acceptance rate, it is convenient to suppress the bending energy term
in the approximation.

~nun|i ≈
h|

We have repeated this analysis for lattices sizes L = 8 to 64. In Table 2 we
show the optimal values of Λ, the corresponding integrated auto-correlation time
and the CPU-time for a sweep. From this data we extract, as before, the exponents
za and zs and the amplitudes

As, and obtain the following performance:

Aa and
0.00364(36) L4.167(46)
0.00514(30) L4.228(48)

TO =

(

lexicographic updates,
random updates.

(16)

Although hybrid overrelaxation does not reduce CSD, it gives an improvement of one
order of magnitude over the Metropolis algorithm, provided the nodes are updated
in a lexicographic order and the “normalization” parameter Λ is properly adjusted.

4 A unigrid Monte Carlo algorithm

The critical slowing down of traditional Monte Carlo algorithms arises mainly from
the fact that the update is local, and thus the system takes a random walk through
the conﬁguration space. This can be improved by using collective mode (non-local)
updating such as multigrid methods [3, 13]. The basic idea is to consider a sequence
of coarser lattices (levels) in addition to the original lattice. At each level the system
is updated using traditional methods but, as this is repeated recursively at all length
scales, the long wavelength modes are equilibrated much faster.

8

There are several basic ingredients to a multigrid algorithm: a restriction
operator and the corresponding interpolation operator, or kernel, are needed to
map the system onto the coarser lattices and back; an updating algorithm, such as
Metropolis, is applied at each level; ﬁnally, one has to choose how to traverse the
diﬀerent levels.

For a crystalline membrane it is not possible to construct an exact interpo-
lation operator between diﬀerent levels due to the complexity of the Hamiltonian
Eq. (1). This problem can be circumvented by using an alternative implementation,
the unigrid method, in which the coarse lattices are simply deﬁned as subdivisions
of the original one; the update of a coarse lattice acts on blocks of the original ﬁelds.
For the update, the choice is usually between a piecewise constant or a piecewise
linear kernel. A piecewise kernel simply shifts all of the ﬁelds in the block by a uni-
form value. A piecewise linear kernel shifts the ﬁelds by a value linearly interpolated
between zero, at the boundary, and a maximum value at the center of the block.
The shift operation is one of the global symmetries of the system.

Several considerations should be made in choosing a kernel. The piecewise
linear kernel has the advantage that the acceptance rate of the proposed moves does
not depend on the block size. For a crystalline membrane, on the other hand, this is
outweighed by the computational cost which, as all the normal-normal interactions
in the block have to be recalculated, grows linearly with the block size. Hence a
piecewise constant kernel is preferable, since the sole contribution to the energy
change comes from the boundary.

We parameterize a non-local change of the conﬁguration, when we shift a

block Λk at level k, as:

~r ′
i =

~ri + ǫk~x
~ri

(

Λk

if i
∈
otherwise,

where ~x is some normalized random noise and ǫk is the amplitude of the shift. A
necessary prerequisite for the unigrid method to be eﬃcient is that the energy cost
does not grow too fast with the perimeter Lk of the block. Stated diﬀerently:
in
order to maintain a constant acceptance rate in the Metropolis test, the amplitudes
have to be scaled like

ǫk ∼

L−α
k .

If the exponent α is too big, i.e. of order unity, it is unlikely that any multigrid
algorithm will reduce CSD.

Following the analysis of [15], we can estimate whether the unigrid update has
a chance of improving the dynamical behavior in the case of a crystalline membranes.
Assuming that the probability distribution is nearly Gaussian, one can approximate
the acceptance rate by

where h =
is the average change in energy and ǫ is the amplitude of the
proposed move. For a piecewise constant kernel we take the Hamiltonian Eq. (1),

∆
h

Hi

Ω(ǫ)

erfc(√h/2),

∼

9

(17)

(18)

(19)

Table 3: The auto-correlation and CPU-times for the unigrid algorithm. Results are shown
both for V and W –cycles.

V -cycle

W -cycle

τ
17.1(0.4)
45.8(3.2)
115.2(6.1)
269.3(19.1)
1.349(28)
1.040(77)

Ts
3.123
16.325
107.18
524.70
2.489(55)
0.0175(31)

τ
14.0(0.3)
30.1(0.9)
51.0(2.1)
96.8(8.7)
0.955(27)
3.96(14)

Ts
4.195
25.904
203.24
1324,25
2.788(45)
0.0123(18)

L
8
16
32
64
z

A

insert Eq. (17) and expand the change in the energy in powers of ǫ:

+ ǫ2

+

H

= ǫ

∆
h

; ~x)
i

; ~x)
i

; ~x)
i

~ri}
(
{

~ri}
F2(
{
h

~ri}
F1(
O
{
h
i, the func-
~ri ∀
The key observation is that under a global sign change, ~ri → −
tion F1 changes sign (as each term is a product of odd number of ﬁelds ~ri), hence
= 0. The leading contribution to h is therefore proportional to ǫ2. At
~ri}
F1(
h
{
the same time, the number of terms contributing to Eq. (20) depends linearly on
the length of the boundary. Therefore, in order to maintain a constant acceptance
rate, one should scale the amplitudes as ǫ
. This agrees with our numerical
simulations where we ﬁnd α = 0.52(1).

L−1/2
B

; ~x)
i

(20)

∼

(ǫ3).

Another free parameter in the unigrid method is the relative frequency with
which diﬀerent levels are updated. One must strike a balance between the eﬀec-
tiveness of block moves and their relative computational cost. Two general schemes
In a V –cycle the levels are up-
are used in the literature; the V and W –cycles.
dated consecutively, from the ﬁnest to the coarsest and back, whereas a W –cycle
recursively applies a V –cycle at each visited level, spending more time in updating
coarser levels. For multigrid algorithms, where the lattices size decreases between
levels, a W –cycle is preferable, provided that the interpolations between levels is
not too time consuming. For a unigrid algorithm the computational cost increases
with the block size, as discussed above, and, depending on the exponent α, a V or
W –cycle will be advantageous. For a piecewise constant kernel the computational
cost scales like LB and a W -cycle might be advantageous, while for a piecewise
linear kernel the computational cost scales linearly with the area of the block and a
V –cycle would be better.

As before, we have simulated a crystalline membrane in the ﬂat phase and
for lattice sizes L = 8, 16, 32 and 64, using the unigrid algorithm and updating the
system at each level with the Metropolis algorithm. We repeated the simulation
both for a V and W –cycle. In Table 3 the show the measured value of the auto-
correlation and CPU-times, from which we determine the overall performance of the

10

algorithm:

TU =

(

0.0182(35) L3.838(84) V –cycle,
0.0242(39) L3.743(72) W –cycle.

(21)

In both cases the unigrid algorithm reduces CSD, albeit not very much, but enough
to make it worthwhile for large membranes. For the W –cycle this implies a dynam-
ical CSD exponent z
1.7, although this value is probably to large, as we observe
strong ﬁnite size eﬀects in the ﬁt to Eq. (6); if we exclude the smallest volume
(L = 8), we get z
1.6. In conclusion, although the W –cycle is more time consum-
ing per sweep, its performance is better than V –cycle in simulations of membranes
of size L >
∼

20.

≈

≈

5 Discussion

Comparing the performance of these diﬀerent algorithms, Eqs. (8), (16), and (21),
we see that, in the simulation of crystalline membranes on realistic lattice sizes
(L = 10 to 200), both the hybrid overrelaxation and the unigrid algorithm reduce
the computational cost by an order of magnitude over the Metropolis algorithm.
As the unigrid algorithm also reduces the dynamical exponent z, especially using a
W –cycle, it is clearly the best choice for large membranes. In the particular case we
studied in this paper, large means L >
50, although this value may depend on the
∼
simulation parameters (i.e. κ).

We would also like to emphasize that, in order to achive optimal performance
of the hybrid overrelaxation, it is imperitive to adjust the noise in the updating pro-
cedure (to use lexicographic updating), and to tune the “normalization” parameter
Λ appropriatly.

An alternative algorithm used to simulate crystalline membranes is a com-
bination of Langevin updates with Fourier acceleration [7, 8]. This algorithm is
known to substantially reduce CSD, although the gain is lost to some extent in the
large computational overhead. This method is also complicated by systematic errors
induced by using a ﬁnite time step ∆t; this necessitates an extrapoltion to ∆t = 0,
which can itself become time consuming. Nevertheless, it would be interesting to
know how well this algorithm performes, in realistic simulations, compared to the
algorithms we have studied in this paper. Unfortunately, we do not have an esti-
mate of its performance in similar conditions (e.g., using the same computers) for
comparison.

An obvious extension of the methods studied in this paper, is to combine
hybrid overrelaxation with the unigrid algorithm. It is possible to maximize the shift
of a block in a unigrid update, by choosing it in a deterministic and energy preserving
way, improving the performance even further. This is though more complicated to
implement and it is under investigation.

There are few application in which the hybrid overrelaxation might be more
advantageous compared to the unigrid algorithm. Overrelaxation can be parallelized

11

in a straightforward manner, although it could be diﬃcult to deﬁne a lexicographic
update in that case. It also easy to adapt hybrid overrelaxation to modiﬁed versions
of the model like, for example, self-avoiding crystalline membranes, which are of
great physical interest. In that case, a proposed updated is rejected if it leads to
self-intersection of the membrane. Intuitively, a non-local change, like one proposed
by the unigrid algorithm, is more likely to be rejected — hybrid overrelaxation might
turn out to be more eﬀective.

Finally, we would like to point out that both these updating algorithms can be
used in simulations of ﬂuid membranes with extrinsic curvature [16]. In that case,
the surface ﬂuctuates in the embedding space, and its connectivity matrix changes
dynamically.
It is known that simulations of ﬂuid membranes suﬀer from even
longer auto-correlation times than their crystalline counterparts. For ﬂuid mem-
branes, the random nature of the lattice causes some complications in implementing
hybrid overrelaxation and unigrid algorithms. For example, it is not obvious how
to deﬁne lexicographic ordering. A possible method would be to propagate the
updates outwards from a randomly chosen node, i.e. by traversing the lattice in
steps of increasing geodesic distance from a marked point. For the unigrid algo-
rithm the problem is that a random lattice cannot be divided into regular blocks.
Again, blocks could be deﬁned as nodes within a given geodesic distance from some
randomly chosen node.

Acknowledgements

MF wishes to thank Bengt Petersson for his hospitality at Bielefeld, where part
of this work was carried out, and Alan Sokal for stimulating discussions. We are
grateful to NPAC (North-East Parallel Architecture Center) for the use of their
computational facilities. The research of GT was supported by the Alexander von
Humboldt Stiftung and the Deutsche Forschungsgemeinschaft. The research of MF
was supported by the Department of Energy U.S.A. under contract No. DE-FG02-
85ER40237 and by a Syracuse University Graduate Fellowship.

References

[1] S.L. Adler, Phys. Rev. D23 (1981) 2901.

[2] G.G. Batrouni, G.R. Katz, A.S. Kronfeld, G.P. Lepage, B. Svetitsky, and

K.G. WIlson, Phys. Rev. D32 (1985) 2736.

[3] G. Parisi, in Progress in Gauge Field Theory, (Charges 1983), G. t’Hooft

et. al. (eds.), Plenum, New York, 1984;
J. Goodman and A.D. Sokal, Phys. Rev. Lett. 56 (1986) 1015; Phys. Rev.
D40 (1989) 2035.

12

[4] R.H. Swendsen and J.-S. Wang, Phys. Rev. Lett. 58 (1987) 86.

[5] A. Polyakov, Nucl. Phys. B268 (1986) 406.

[6] J. Ambjørn, B. Durhuus and T. Jonsson, Nucl. Phys. B316 (1989) 526.

[7] R.G. Harnish and J.F. Wheater, Nucl. Phys. B350 (1991) 861;

J.F. Wheater, Nucl. Phys. B458 (1996) 671 (hep-lat/9503008).

[8] M. Baig, D. Espriu and A. Travesset, Nucl. Phys. B426 (1994) 575;

D. Espriu and A. Travesset, Phys. Lett. B356 (1995) 329 (hep-lat/9505018);
Nucl. Phys. B47 (Proc. Suppl.) (1996) 637 (hep-lat/9509062).

[9] M.J. Bowick, S.M. Catterall, M. Falcioni, G. Thorleifsson and

K.N. Anagnostopoulos, Nucl. Phys. B47 (Proc. Suppl.) (1996) 838
(hep-lat/9509074); J. Phys. I France 6 (1996) 1321 (cond-mat/9603157);
Nucl. Phys. B53 (Proc. Suppl.) (1997) 746 (hep-lat/9608044);
M. Falcioni, M.J. Bowick, E. Guitter and G. Thorleifsson, Europhys. Lett. 38
(1997) 67 (cond-mat/9610007).

[10] I. Horv´ath and A.D. Kennedy, The Local Hybrid Monte Carlo Algorithm for

Free Field Theory: Reexmaining Overrelaxation, FSU-SCRI-97-94
(hep-lat/9708024).

[11] R.M. Neal, Suppressing Random Walks in Markov Chain Monte Carlo Using
Ordered Overrelaxation, Technical report No. 9508, Dept. of Statistics,
University of Toronto (bayes-an/9506004).

[12] F.R. Brown and T.J. Woch, Phys. Rev. Lett. 58 (1987) 2394;

M. Creutz, Phys. Rev. D36 (1987) 515;
P.J. Green and X. Han, in Stocastic Models, Statistical Methods, and
Algorithms in Image Analysis, P. Barone et. al. (eds.), Lecture Notes in
Statistics, Berlin (1992), Springer-Verlag;
Z. Fodor and K. Jansen, Phys. Lett. B331 (1994) 119 (hep-lat/9403024);

[13] W.L. Briggs, A Multigrid Tutorial, SIAM, Philadelphia, 1987;

W. Hackbush, Multigrid Methods and Applications, Springer, Berlin, 1985.

[14] A. Cucchieri and T. Mendes, Nucl. Phys. B471 (1996) 263

[15] M. Grabstein and K. Pinn, Phys. Rev. D 45(12) (1992) 4372

[16] J. Ambjørn, A. Irback, J. Jurkiewicz, B. Petersson, Nucl. Phys. B393 (1993)

(hep-lat/9511020).

(hep-lat/9204016).

571 (hep-lat/9207008);

13

M. Bowick, P. Coddington, L. Han and G. Harris, Nucl. Phys. B394 (1993)
791 (hep-lat/9209020);
K. Anagnostopoulos, M. Bowick, P. Coddington, M. Falcioni, L. Han,
G. Harris and E. Marinari, Phys. Lett. B317 (1993) 102 (hep-th/9308091).

14

