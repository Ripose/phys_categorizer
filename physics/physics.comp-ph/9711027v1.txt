Universidade do Estado do Rio de Janeiro
Instituto de F´ısica

IF-UERJ-2/97
Preprint
November 1997

Integrating Factors and ODE Patterns

E.S. Cheb-Terrab1,2, A.D. Roche2

Abstract

A systematic algorithm for building integrating factors of the form µ(x, y′) or µ(y, y′) for non-
linear second order ODEs is presented. When such an integrating factor exists, the scheme returns
the integrating factor itself, without solving any diﬀerential equations. The scheme was implemented
in Maple, in the framework of the ODEtools package and its ODE-solver. A comparison between
this implementation and other computer algebra ODE-solvers in solving non-linear examples from
Kamke’s book is shown.

(Submitted for publication in Journal of Symbolic Computation)

7
9
9
1
 
v
o
N
 
7
2
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
7
2
0
1
1
7
9
/
s
c
i
s
y
h
p
:
v
i
X
r
a

1Department of Computer Science, Faculty of Mathematics, University of Waterloo, Ontario, Canada
2Symbolic Computation Group, Departamento de F´ısica Te´orica, IF-UERJ.
Available as http://dft.if.uerj.br/preprint/e7-2.tex; also as http://lie.uwaterloo.ca/odetools/e7-2.tex

1

Introduction

From a practical point of view, when developing solving methods for ODEs, what we actually do is
to attempt to determine families of ODEs which can be transformed into algebraic problems or simple
ODEs such as3 y′ = F (x) or y′ = F (y) by changes of variables or equivalent processes. For high order
ODEs, one hopes that such a simpliﬁcation of the problem will be possible after successive reductions of
order. Some more powerful schemes are also able to exploit other information, as for instance the ODE’s
symmetries, and so to try a multiple reduction of order at once (see for instance [1] and [2]).

In the speciﬁc case of high order ODEs, the methods based on determining integrating factors play
a relevant role in the general solving scheme [3], leading to ODEs of reduced order, which solvability is
usually viewed as a separate problem. Now, although in principle it can always be determined whether
a given ODE is exact (a total derivative), there is no known universal scheme for making ODEs exact.
Actually, for nthorder ODEs, integrating factors arise as solutions of an nthorder linear PDE in n+1
variables, and to solve this PDE is a major problem in itself.

Bearing this in mind, this paper presents a method for obtaining integrating factors of the form
µ(x, y′) and µ(y, y′) for non-linear second order explicit ODEs, using a diﬀerent approach, based only
on a computerized analysis of the pattern of the given ODE. That is, for a given explicit ODE, if an
integrating factor with such a functional dependence exists, the scheme returns the integrating factor
itself, without solving any diﬀerential equations.

The exposition is organized as follows. In sec. 2, the use of integrating factors for solving ODEs is
brieﬂy reviewed. In sec. 3, the scheme for obtaining the aforementioned integrating factors µ(x, y′) or
µ(y, y′) is presented and some examples are given. Sec. 4 contains some statistics concerning the new
solving method and the second order non-linear ODEs found in Kamke’s book, as well as a comparison
of performances of computer algebra packages in solving a related subset of these ODEs. In sec. 5 the
computer algebra implementation of the scheme in the framework of the ODEtools package [5] is outlined
and a description for the package’s new command, redode, is presented. Finally, the conclusions contain
some general remarks about this work and its possible extensions.

Aside from this, in the Appendix, a table containing extra information concerning integrating factors

for some of Kamke’s ODEs is presented.

2

Integrating factors and reductions of order

2.1 First order ODEs

The idea of looking for an integrating factor (µ) is usually presented in the framework of solving a given
ﬁrst order ODE, say,

If by multiplying Eq.(1) by a factor µ(x, y), the ODE becomes a total derivative4,

for some function R, then one can look for µ as a solution to the ﬁrst order PDE:

y′ = Φ(x, y)

µ(x, y) (y′

−

Φ(x, y)) =

R(x, y)

d
dx

∂µ
∂x

+

∂
∂y

µ Φ

= 0

(cid:18)
which arises as the exactness condition for the problem (see Eq.(7)). Once µ has been obtained, R(x, y)
- an implicit form solution - can be calculated as a line integral.

(cid:19)

Although to solve Eq.(3) for µ is as diﬃcult as the original problem, it turns out that for a given
∼
µ (q) N (x, y) exists - q is either x or y - µ can be determined

N (x, y), when a solution of the form µ(x, y) =

3Throughout this article, we use the notation y = y(x), y′ = dy
4In this paper we use the term “integrating factor” in connection with the explicit form of the ODE, i.e., the ODE,

dx , y(n) = dny
dxn .

turned exact by taking the product µ ODE, is assumed to be of the form y′′ = Φ(x, y, y′) or y′′ − Φ(x, y, y′) = 0.

(1)

(2)

(3)

2

by solving an auxiliary linear ﬁrst order ODE. For example, introducing µ(x, y) =
M (x, y) = N (x, y) Φ(x, y), one obtains:

∼
µ (x) N (x, y) and

∼
µ (x) = C1 e

−

Z

1
N

∂M
∂y

+

∂N
∂x

(cid:18)

dx

(cid:19)

∼
µ (x) exists only when the integrand in above does not depend on y. This gives both an
and a solution
existence condition and an explicit solution to the problem; however, the advantages of the scheme are
only apparent since there is no way to determine in advance what would be the appropriate N (x, y).

2.2 High order ODEs

Integrating factors for high order ODEs are deﬁned as in the ﬁrst order case. Here, we consider
µ(x, y, y′, ..., y(n−1)) to be an integrating factor for an nthorder ODE, say

if after multiplying the explicit ODE by µ we obtain a total derivative:

y(n) = Φ(x, y, y′, ..., y(n−1))

µ

y(n)

Φ

=

dR
dx

−
for some function R(x, y, y′, ..., y(n−1)). To determine µ, one can try to solve for it in the exactness
condition (see [6], p. 221):

(cid:1)

(cid:0)

where H

µ

y(n)

≡

−

∂H
∂y −

d
dx

∂H
∂y′

(cid:18)

(cid:19)

+

d2
dx2

∂H
∂y′′

(cid:18)

(cid:19)

+ ... + (

1)n dn
dxn

−

∂H
∂y(n)

(cid:18)

(cid:19)

= 0

Φ

. Now, Eq.(7) is always of the form

(cid:0)

(cid:1)

A(x, y, y′, ..., y(2n−3)) + y(2n−2)B(x, y, y′, ..., y(n−1))

where A is of degree n-1 in y(n) and linear in y(k) for n < k
an overdetermined system of PDEs for µ. For example, for second order ODEs Eq.(7) is of the form

3), so that Eq.(8) can be split into

(2n

−

≤

Hence, by taking A(x, y, y′) = 0 and B(x, y, y′) = 0 we have a system of two PDEs for µ:

A(x, y, y′) + y′′ B(x, y, y′)

A(x, y, y′)

≡

(cid:18)

+

+

∂2µ
∂y2

∂µ
∂y′

∂2µ
∂y′∂x

+

∂2µ
∂y′∂y

y′

−

∂µ
∂y

Φ +

(cid:18)

∂2Φ
∂y′∂x −

∂Φ
∂y

+

∂2Φ
∂y′∂y

y′

µ

(cid:19)

(cid:19)

(cid:18)

y′2 +

(cid:19)

∂µ
∂y′

(cid:19)

+

∂Φ
∂y

∂µ
∂y

∂Φ
∂y′ + 2

(cid:18)
∂2µ
∂x∂y

(cid:18)

(cid:19)(cid:19)

y′

(cid:18)

(cid:19)

(cid:18)(cid:18)

(cid:19)

∂Φ
∂x

+

∂µ
∂x

(cid:18)

(cid:19)

∂Φ
∂y′ +

(cid:18)

(cid:19)

(cid:19)

(cid:18)
∂2µ
∂x2 = 0

B(x, y, y′)

≡
2

∂µ
∂y

+

∂2µ
∂y′2

(cid:18)

(cid:19)

Φ + 2

∂µ
∂y′

(cid:18)

(cid:19)

∂Φ
∂y′ + µ

∂2Φ
∂y′2 +

∂2µ
∂y′∂x

+

∂2µ
∂y′∂y

(cid:18)

(cid:19)

y′ = 0

Nonetheless, there are no general rules which might help in solving these PDEs5.

5In a recent work by [3] (1997), the authors arrive at Eq.(9) and Eq.(11) - numbered there as (3.5) and (3.8) - departing
from the adjoint linearised system corresponding to a given ODE; the possible splitting of Eq.(8) into an overdetermined
system for µ is also mentioned. However, in formula (3.5) of that work, y′′ of Eq.(9) above appears replaced by Φ(x, y, y′),
and the authors discuss possible alternatives to tackle Eqs.(9) and (11) instead of Eqs.(10) and (11).

3

(4)

(5)

(6)

(7)

(8)

(9)

(10)

(11)

In the speciﬁc case of linear high order ODEs, one can also look for an integrating factor by trying
to solve the adjoint ODE (see for instance [6]), which however is of equal order and may be no easier to
solve.

Alternatively, a possible strategy for directly obtaining R instead of looking for µ can be formulated

as follows. Consider the ﬁrst order linear operator associated to Eq.(5)

where x, y and its derivatives are all treated as independent variables on the same footing. Now

A : f

∂f
∂x

+ y′ ∂f
∂y

→

+ y′′ ∂f

∂y′ + ... + Φ

∂f
∂y(n−1)

A(R) = 0

and there are n functionally independent solutions (ﬁrst integrals) to the problem. In some cases, a ﬁrst
integral R such that dR/dy(n−1)
= 0 can be obtained as the solution to a subset of the characteristic
strip of A(R) = 0, or by other means.

3

Integrating Factors and ODE patterns

Since the classical way for determining integrating factors leads to problems similar in diﬃculty to solving
the ODEs themselves, we consider here a diﬀerent approach, based on a careful matching of an ODE
pattern.

The starting point is the observation that it is trivial to solve the inverse problem; i.e., to ﬁnd the

most general ODE having a given µ. In fact, from Eq.(6), we have

and hence the reduced ODE R is of the form

µ(x, y, y′, ..., y(n−1)) =

∂ R
∂y(n−1)

R = G(x, y, ..., y(n−2)) +

µ dy(n−1)

Z

for some function G. Inserting Eq.(15) into Eq.(13) and solving for y(n) leads to the general form of an
ODE having µ as integrating factor:

1
y(n) = −
µ

∂
∂x

(cid:20)

(cid:18)Z

µ dy(n−1) + G

+ ... + y(n−1)

µ dy(n−1) + G

(16)

(cid:19)

(cid:19)(cid:21)

∂
∂y(n−2)

(cid:18)Z

The expression above then becomes an ODE pattern which, for some families of integrating factors, one
can try to match against an input ODE. The generation of such matching pattern routines is diﬃcult, even
for restricted subfamilies of integrating factor, but once built, they are a powerful and computationally
eﬃcient way to reduce the order of the corresponding ODEs (see sec. 4).

3.1 Second order ODEs and the integrating factor family µ(x, y′)
In the case of second order ODEs, if instead of considering the general case µ(x, y, y′) we restrict the
family of integrating factors under consideration to µ(x, y′), Eq.(15) - the reduced ODE - becomes

for some functions G and F , where

R(x, y, y′) = F (x, y′) + G(x, y)

µ(x, y′) = Fy′(x, y′)

(we denote Fy′ = ∂F

∂y′ ). Eq.(16) can then be written in terms of F and G as

y′′ =

Fx(x, y′) + Gx(x, y) + Gy(x, y) y′
Fy′ (x, y′)

−

4

(12)

(13)

(14)

(15)

(17)

(18)

(19)

6
The idea is now to build a routine to determine if a given ODE can be written in the form Eq.(19), in
which case it will have an integrating factor of the form µ(x, y′), and if so, determine also F and G,
directly leading to the reduced ODE Eq.(17). The feasibility of such a computational routine is based on
the following theorem.

Theorem 1 Given a nonlinear second order ODE

(20)
= 0) 6 having an integrating factor of the form µ(x, y′), then a pair of functions F (x, y′) and G(x, y)

y′′ = Φ(x, y, y′)

( ∂Φ
∂y 6
satisfying

Φ(x, y, y′) =

Fx(x, y′) + Gx(x, y) + Gy(x, y) y′
Fy′ (x, y′)

−

and leading to the reduced ODE Eq.(17) can be systematically determined.

PROOF. We then divide the proof in two steps.

it is always possible to determine µ(x, y′) up to a factor depending on x; that is, to ﬁnd some
satisfying

F

In the ﬁrst step we assume that, given Eq.(20),
(x, y′)

(x, y′) =

F

µ(x, y′)
∼
µ (x)

for some unknown function
∼
µ (x), leading to the desired integrating factor µ(x, y′).

∼
µ (x). We then prove that the knowledge of

(x, y′) is enough to determine

In a second step, we prove our assumption, that is, we show how to ﬁnd

(x, y′) satisfying Eq.(22),

F

F

concluding the proof of the theorem.

3.1.1 Determination of

∼
µ (x) when

(x, y′) is known

Starting with the ﬁrst aforementioned step, we assume that we can determine
Eqs.(18), (21) and (22) that

F

(x, y′). It follows from

∂
∂y

(cid:18)

Φ(x, y, y′)

(x, y′)

=

Gy x(x, y) + Gy y(x, y) y′
∼
µ (x)

(cid:19)

so that by taking coeﬃcients of y′ in ∂Φ

we obtain

F

F

∂y F

ϕ1 ≡

Φy(x, y, y′)

(x, y′)

F

y′ ∂
∂y′

−

(cid:18)

Φy(x, y, y′)

(x, y′)

=

F

(cid:19)

Gy x(x, y)
∼
µ (x)

ϕ2 ≡

∂
∂y′

(cid:18)

Φy(x, y, y′)

(x, y′)

=

F

(cid:19)

Gy y(x, y)
∼
µ (x)

Similarly, we obtain

ϕ3 ≡ −

∂
∂y′

(cid:18)

Φ(x, y, y′)

(x, y′)

=

Fy′

x(x, y′) + Gy(x, y)
∼
µ (x)

ϕ4 ≡

∂
∂y′ F

(x, y′) =

F

(cid:19)
Fy′ y′(x, y′)
∼
µ (x)

6ODEs missing y may also have integrating factors of the form µ(x, y′), which cannot be determined using the scheme
here presented. However, such integrating factors are not relevant here since these ODEs can always be reduced to ﬁrst
order by a simple change of variables.

(21)

(22)

(23)

(24)

(25)

5

Now, since Eq.(20) is nonlinear by hypothesis, either ϕ2 or ϕ4 is diﬀerent from zero, so that at least
∼
µ (x) as the solution of an

can be used to determine

one of the pairs of ratios
{
auxiliary ﬁrst order linear ODE. For example, if ϕ2 6

ϕ1, ϕ2}

ϕ3, ϕ4}

or

{

∂
∂y

(cid:16)

ϕ1(x, y)

∼
µ (x)

ϕ2(x, y)

∼
µ (x)

(cid:17)

(cid:16)

(cid:17)

= 0,

=

∂
∂x

and we obtain

If ϕ4 6

= 0,

∼
µ (x) = e Z

1
ϕ2 (cid:18)

∂ϕ1
∂y −

∂ϕ2
∂x

dx

(cid:19)

∼
µ (x) = e Z

1
ϕ4 (cid:18)

∂ϕ3
∂y′ −

∂ϕ4
∂x

dx

(cid:19)

Eqs.(27) and (28) alternatively give both an explicit solution to the problem and an existence condition,
∼
µ (x) - and hence an integrating factor of the form µ(x, y′) - exist if the integrand in
since a solution
Eq.(27) or Eq.(28) only depends on x.

Example: Kamke’ ODE 37.

△

y′′ =
(x, y′) was determined (see sec. 3.1.2) as:

2 y y′

f (x)

−

−

y′ + y2

(cid:0)

(cid:1)

+ g(x)

(x, y′) = 1

F

For this ODE,

F

from which (Eq.(23))

Gy x(x, y) + Gy y(x, y) y′
∼
µ (x)

=

2y f (x)

−

2y′

−

and then as in Eq.(24) we obtain

Using this in Eq.(27), we get

ϕ1 =

2y f (x)

ϕ2 =

−

−

2

f (x) dx

∼
µ (x) = e Z
∼
µ (x).

and so, from Eq.(22), since

(x, y′) = 1, µ(x, y′) =

3.1.2 Determination of

(x, y′)

F

F

We now prove our assumption, that is, we show how to obtain a function
the knowledge of Φ(x, y, y′).

F

Since we have already assumed that the given ODE has an integrating factor of the form µ(x, y′),
then there exist some functions F (x, y′) and G(x, y) such that it is possible to rewrite Φ(x, y, y′) - the
right-hand-side (RHS) of the given ODE - as in Eq.(19). We then start by considering the expression

(x, y′) satisfying Eq.(22) from

Υ

≡

∂Φ
∂y

=

−

Gx y(x, y) + Gy y(x, y) y′
Fy′ (x, y′)

6

(26)

(27)

(28)

(29)

(30)

(31)

(32)

(33)

(34)

and the possible cases.

Case A

The ﬁrst case happens when the ratio Gx y(x, y)/Gy y(x, y) depends on y; i.e., Gx y(x, y) and Gy y(x, y)
are linearly independent w.r.t y. To determine whether this is the case, note that we cannot just analyze
the mentioned ratio itself since it is unknown. However, we can always select the factors of Υ containing
y, and check if this expression also contains y′. If so, we just determine Fy′(x, y′) up to a factor depending
on x, that is, the required
△

(x, y′), as the reciprocal of the factors of Υ which depend on y′ but not y.

F
Example: Kamke’ ODE 226.

This ODE is presented in Kamke’s book already in exact form, so we start by rewriting it in explicit

form as

y′′ =

x2yy′ + xy2
y′

Υ =

x(xy′ + 2y)
y′

We determine Υ (Eq.(34)) as

The only factor of Υ containing y is:

and since this also depends on y′,

F

xy′ + 2y
(x, y′) is immediately given by

(x, y′) = y′

F

Case B

Case C

When the expression formed by all the factors of Υ containing y does not contain y′, it is impossible
is zero, or alternatively their
(x, y′)
∼
µ (x) as explained in the previous subsection. If this doesn’t lead to the

to determine apriori whether one of the functions
ratio does not depend on y. We then proceed by assuming the former, build an expression for
as in Case A, and determine
required integrating factor, we then proceed as follows.

Gx y(x, y), Gy y(x, y)
}

F

{

In this case, we assume that neither Gx y(x, y) nor Gy y(x, y) are zero and their ratio is a function of

just x, so that we have

for some unknown functions v1(x) and v2(x), such that Eq.(34) can be factored as

for some function w(x, y) which can always be determined as the factors of Υ depending on y. To
determine Fy′ (x, y′) up to a factor depending on x, we then need to determine the ratio v1(x)/v2(x). For
this purpose, from Eq.(39) we build an auxiliary PDE for Gy(x, y),

The general solution of Eq.(41) is given by

Gx y(x, y) = v1(x) w(x, y)

Gy y(x, y) = v2(x) w(x, y)

Υ = w(x, y)

(v1(x) + v2(x) y′)
Fy′ (x, y′)

Gx y(x, y) =

Gy,y(x, y)

v1(x)
v2(x)

Gy(x, y) =

(y + p(x))

G

7

(35)

(36)

(37)

(38)

(39)

(40)

(41)

(42)

where

is an arbitrary function of its argument and for convenience we introduced

G

(43)
We can now determine p′(x), that is, the ratio v1/v2 we were looking for, as follows. Taking into account
Eq.(39), we arrive at

v1(x)/v2(x)

(x)

≡

p

′

By taking the ratio between this expression and its derivative w.r.t y we obtain

v2(x) w(x, y) =

(y + p(x))

′

G

(y + p(x))

H

∂w
∂y

≡

′′(y + p(x))
′(y + p(x))

/w = G
G

that is, a function of y + p(x) only, which we can determine since we know w(x, y). If
p′(x) as

′

H

= 0, we obtain

′

p

(x) =

∂
H
∂x

/

∂
H
∂y

=

(cid:16)

2
∂
w
∂y2∂x

(cid:17)

∂2w
∂y2

∂w
∂x
2

w

w

−

−

∂w
∂y

(cid:16)

(cid:17)

∂w
∂y

(cid:16)
Once we determined p′(x), from Eq.(40) we determine

(cid:17)
(cid:16)
(x, y′) as

(cid:17)

F

(p′ + y′) w
Υ

(x, y′) =

F

△

where Υ, w(x, y) and p′(x) are now all known.

Example: Kamke’ ODE 136.

We begin by writing the ODE in explicit form as

Here Υ (Eq.(34)) is determined as

and w(x, y) as

Then

(y + p(x)) (Eq.(45)) becomes

H

and hence, from Eq.(46), p′(x) is

so from Eq.(47):

y′′ =

h(y′)
y
x

−

Υ =

−

(x

h(y′)
y)2

−

w(x, y) =

1

−

(x

y)2

=

H

x

y

2

−

′

p

(x) =

1

−

(x, y′) =

F

y′
1
−
h(y′)

8

Case D

We now discuss how to obtain p′(x) when
= 0, hence

′ = 0, and so, recalling Eq.(42), we see that

H

H

G

′(y + p(x)) = 0. We consider at ﬁrst the case in which

G(x, y) = B1 (y + p(x))2 + B2 (y + p(x)) + g(x)

(44)

(45)

(46)

(47)

(48)

(49)

(50)

(51)

(52)

(53)

(54)

6
for some function g(x) and some constants B1, B2. Recalling Eq.(21), Φ(x, y, y′) takes the form

Φ(x, y, y′) =

Fx(x, y′) + g′(x) + (2B1 (y + p(x)) + B2)(y′ + p′(x))
Fy′ (x, y′)

−

We can now obtain explicit equations where the only unknown is p(x) as follows. First, from the knowledge
of Υ and Φ we build the two explicit expressions:

and

Λ

≡

1
Υ

=

−

Fy′
2B1 (y′ + p′(x))

Φ(x, y, y′)
Υ

Ψ

≡

y =

−

Fx + g′(x)
2B1 (y′ + p′(x))

+ p(x) +

B2
2B1

It is now clear from Eq.(56) and Eq.(57) that Λ and Ψ are related by the following equation:

∂
∂x

(y′ + p

′

(x)) Λ

+

(y′ + p

′

(x)) Ψ

= p(x) +

∂
∂y′

B2
2B1

(cid:18)
where the only unknowns are p(x), B1, and B2. By diﬀerentiating the equation above w.r.t y′ and x we
obtain two equations where the only unknown is p′(x):

(cid:19)

(cid:19)

(cid:18)

Λy′p′′(x) + (Λxy′ + Ψy′y′)(y′ + p′(x)) + Λx + 2Ψy′ = 0

Λ p′′′(x) + (Λxx + Ψy′

x)(y′ + p′(x)) + (Λx + Ψy′)p′′(x) + Ψx = p′(x)

As a shortcut, if (Λxy′ + Ψy′y′)/Λy′ depends on y′, then we can build a linear algebraic equation for
p′(x) by solving for p′′(x) in Eq.(59) and diﬀerentiating w.r.t. y′. Otherwise, in general we obtain p′(x)
by solving a linear algebraic equation built by eliminating p′′(x) between Eq.(59) and Eq.(60)7.

If Eq.(59) depends neither on p′(x) nor on p′′(x) this scheme will not succeed. However, it is possible
to prove that in that case the original ODE is already linear, and easy to solve. To see this, we set to
zero the coeﬃcients of p′(x) and p′′(x) in Eq.(59), obtaining:

from which Λ is a function of x only, and then

Λy′ = Λxy′ + Ψy′y′ = Λx + 2Ψy′ = 0

If we now rewrite F (x, y′) as in

Ψy′y′ = 0

F (x, y′) = Z(x, y′)

g(x)

Λ(y′ + p

′

)2 B1

−
and introduce this expression in Eq.(56), we obtain Zy′ = 0; similarly, using this result, Eq.(57), Eq.(62)
and Eq.(63) we obtain Zx = 0. Hence, Z is a constant. Finally, taking into account that Z is constant,
Eq.(63) and Eq.(55), we see that the ODE Eq.(20) which led us to this case is just a non-homogeneous
linear ODE of the form

−

−
which homogeneous part does not depend on p(x):

−

′′
(y + p)

+ (Λ

′

′
(y + p)

2(y + p)

B2/B1)/2Λ = 0

−
7From Eq.(56), Λ 6= 0, so that Eq.(60) always depends on p′′′(x), and solving Eq.(59) for p′′(x) and substituting twice
into Eq.(60) will lead to the desired equation for p′(x). If Eq.(59) depends on p′(x) but not on p′′(x), then Eq.(59) itself is
already a linear algebraic equation for p′(x).

y′′ +

Λ′(x)
2Λ(x)

y′

y
Λ(x)

= 0

9

(55)

(56)

(57)

(58)

(59)

(60)

(61)

(62)

(63)

(64)

(65)

and which solution is in any case straightforward.

△

Example: Kamke’ ODE 66.

This ODE is given by

Proceeding as in Case A, we determine Υ, w(x, y), and

y′′ = a (c + bx + y)

3/2

y′2 + 1
(cid:16)
H

(cid:17)
(y + p(x)) as

Υ = a

3/2

;

y′2 + 1
(cid:16)

(cid:17)

w(x, y) = 1;

= 0

H

From the last equation we realize that we are in Case D. We determine Λ and Ψ (Eqs. (56), (57)) as:

Λ =

1

y′2 + 1

3/2

a

(cid:16)

(cid:17)

Ψ = c + b x

p′′(x)

y′2 + 1

3/2

a

+ c + b x = p(x) +

B2
2B1

We then build Eq.(58) for this ODE:

Diﬀerentiating w.r.t. y′ leads to Eq.(59):

(cid:16)

(cid:17)

from which it follows that p′′(x) = 0. Using this in Eq.(60) we obtain:

(cid:16)

(cid:17)

after which Eq.(47) becomes

3

−

p′′(x) y′
5/2

y′2 + 1

a

= 0

′

p

(x) = b

(x, y′) =

F

y′ + b

3/2

a

y′2 + 1
(cid:16)

(cid:17)

Case E

We now show how to obtain p′(x) when

′ is a constant, B1, which is
′ is an exponential function of its argument (y + p(x)) and hence from Eq.(42)

′(y + p(x)) = 0 and

′′/

H

H

=

G

G

diﬀerent from zero; so

G

G(x, y) = B2e(y+p(x))B1 + (y + p(x))B3 + g(x)

for some constants B2, B3 and some function g(x). In this case, it is always possible to arrive at an
algebraic equation for p′(x), though the case entails some subtleties. First of all, Φ(x, y, y′) will be of the
form

Fx(x, y′) + g′(x) +

B2B1e(y+p(x))B1 + B3

(y′ + p′(x))

Φ(x, y, y′) =

−

(cid:0)
Now, taking advantage of the fact that we explicitly know B1, we build our ﬁrst explicit expression by
dividing B1eyB1 by Υ:

(cid:1)

Fy′ (x, y′)

Λ

≡ −

Fy′
B2ep(x)B1 (y′ + p′(x))

10

(66)

(67)

(68)

(69)

(70)

(71)

(72)

(73)

(74)

(75)

We now multiply Φ by Λ and subtract B1eB1y to obtain our second explicit expression:

Now, as in Case D, Λ and Ψ are related by

Ψ

≡

1
B2ep(x)B1

Fx + g′(x)
y′ + p′(x)

(cid:18)

+ B3

(cid:19)

(y′ + p

′

(x)) Λ

+ (y′ + p

′

′

(x)) p

(x)ΛB1 +

(y′ + p

′

(x)) Ψ

∂
∂x

(cid:18)

(cid:19)

∂
∂y′

(cid:18)

(cid:19)

=

B3
B2ep(x)B1

where the only unknowns are B2, B3 and p(x). We build a ﬁrst equation for p′(x) by diﬀerentiating
Eq.(77) with respect to y′

′′

p

(x) + p

′

(x)2B1

Λy′ + p

′

(x)

y′Λy′B1 + ΛB1 + Λxy′ + Ψy′y′

(cid:18)

(cid:19)

(cid:18)

+2Ψy′ + Λx + y′Λxy′ + y′Ψy′y′ = 0

(cid:19)

The problem now is that, due to the exponential on the RHS of Eq.(77), diﬀerently from Case D, we are
not able to obtain a second expression for p′(x) by diﬀerentiating w.r.t x. The alternative we have found
to determine p′(x) can be summarized as follows.
We ﬁrst note that if Λy′ = 0, Eq.(78) is already a linear algebraic equation for p′8, so that we are
only worried with the case Λy′
= 0. With this in mind, we divide Eq.(78) by Λy′ and, if the resulting
expression depends on y′, we directly obtain a linear algebraic equation in p′(x) just diﬀerentiating w.r.t
y′.

△
Example:

Proceeding as in Case A, we determine Υ, w(x, y), and

y′′ =

2 + ey)

y′ (xy′ + 1) (
−
y′x2 + y′
−
(y + p(x)) as

1

H

Υ =

y′(xy′ + 1)ey
y′x2 + y′
1

;

−

w(x, y) = ey;

= 1

H

From the last equation we know that we are in Case E. We then determine Λ and Ψ as in Eqs. (75) and
(76):

(76)

(77)

(78)

(79)

(80)

(81)

Λ =

y′x2 + y′
1
−
y′(xy′ + 1)

Ψ =

2

−

Now, we build Eq.(77):

8We can see this by assuming Λy′ = 0 and that Eq.(78) does not contain p′, and then arriving at a contradiction as

follows. We ﬁrst set the coeﬃcients of p′ in Eq.(78) to zero, arriving at

0 = B1 Λ + Ψy′y′ = 2Ψy′ + Λx + Ψy′y′ y′

(A)

Eliminating Ψy′y′ gives

2Ψy′ = B1 Λ y′ − Λx
Diﬀerentiating the expression above w.r.t y′ and since Λy′ = 0 we have,

Finally using Eq.(A), 0 = Λ, contradicting Fy′ 6= 0.

2Ψy′y′ = B1 Λ

11

6
1)
−
xy′ + 1
(cid:18)(cid:18)
and, diﬀerentiating w.r.t. y′, we obtain (Eq.(78)),

1
xy′ + 1

′2 + y′2 (xp′

+ p

p

′′

(cid:19) (cid:18)

x2 + 1

′

+ 2 xp

1
y′

−

(cid:19)

2

=

−

(cid:19)

B3
B2 ep

2 xy′ + 1

(x3 + x)y′2

−
y′2(xy′ + 1)2

′′

p

+ p

′2

+

(cid:16)

(cid:17)

2 y′

1

2 x + xy′

−
−
(xy′ + 1)3

′

(xp

−

1) = 0

Proceeding as explained, dividing by Λy′ and diﬀerentiating w.r.t. y′ gives

∂
∂y′

y′2

2 y′
(xy′ + 1) (2 xy′ + 1

−

−

1

2 x + xy′

(x3 + x)y′2) !

′

(xp

−

1) = 0

 
Solving for p′(x) gives p′(x) = 1/x, from which (Eq.(47)):

−

(x, y′) =

y′

1
x

−

(cid:19)

(cid:18)

F

y′x2 + y′
1
−
y′(xy′ + 1)

Case F

The ﬁnal branch occurs when Eq.(78) divided by Λy′ does not depend on y′ (so that we will not be
able to diﬀerentiate w.r.t y′). In this case we can build a linear algebraic equation for p′(x) as follows.
Let us introduce the label β(x, p′, p′′) for Eq.(78) divided by Λy′, so that Eq.(78) becomes:

Λy′(x, y′) β(x, p

′

′′

, p

) = 0

Again, since we obtained Eq.(78) by diﬀerentiating Eq.(77) with respect to y′, we see that Eq.(77) can
be written in terms of β by integrating Eq.(86) with respect to y′:

Λ(x, y′)β(x, p

′

, p

′′

) + γ(x, p

, p

) =

′

′′

B3
B2ep(x)B1

where γ(x, p′, p′′) is the constant of integration, and can be determined explicitly in terms of x, p′ and
p′′ by comparing Eq.(87) with Eq.(77). Taking into account that β(x, p′, p′′) = 0, we see that Eq.(87)
reduces to:

′

′′

γ(x, p

, p

) =

B3
B2ep(x)B1

dγ
dx

′

+ B1 p

γ = 0

We can remove the unknowns B2 and B3 after multiplying Eq.(88) by ep(x)B1, diﬀerentiating with respect
to x, and then dividing once again by ep(x)B1. We now have our second equation for p′, which we can
build explicitly in terms of p′, since we know γ(x, p′, p′′) and B1:

Eliminating the derivatives of p′ between Eq.(86) and Eq.(88) leads to a linear algebraic equation in p′.
Once we have p′, the determination of

(x, y′) follows directly from Eq.(47). ✷

F

3.2 Integrating factors of the form µ(y, y′)

Just as in the previous section, the following ﬁrst integral is associated with the integrating factor family
µ(y, y′):

where µ = Fy′, and to this integrating factor corresponds the ODE pattern:

R(x, y, y′) = F (y, y′) + G(x, y)

y′′ =

Gx(x, y) + (Fy(y, y′) + Gy(x, y))y′
Fy′ (y, y′)

−

12

(82)

(83)

(84)

(85)

(86)

(87)

(88)

(89)

(90)

(91)

→

→

x, x

For this ODE family, it would be possible to build a matching pattern routine as done in the previous
section for the case µ(x, y′). However, it is straightforward to notice that under the transformation
y(x)
y(x), we obtain Eq.(19) from Eq.(91), so that the transformed ODE will have an
integrating factor of the form µ(x, y′). This means that the above pattern can be matched by merely
changing variables in the given ODE and trying to match Eq.(19). It follows that any explicit 2nd order
ODE having an integrating factor of the form µ(y, y′) can be reduced to a ﬁrst order ODE by ﬁrst
changing variables, and then using the scheme outlined in the previous section, unless the resulting ODE
is linear.

3.3 The Connection to PDEs
Let R(x, y, y′) be a ﬁrst integral of Eq.(20). We rewrite Eq.(13) by renaming y′

z

≡

∂R
∂x

∂R
∂y

+ z

+ Φ(x, y, z)

= 0

∂R
∂z

(92)

From Theorem 3.1, if a given PDE of the form Eq.(92) has a particular solution of the form R(x, y, z) =
F (x, z) + G(x, y), such that R(x, y, z) is nonlinear in y or z; or R(x, y, z) = F (y, z) + G(x, y), such that
R(x, y, z) is nonlinear in y or z−1, then F and G can be determined in a systematic manner.

Although this is a natural consequence of the previous sections, it is worth mentioning that the
determination of R using the scheme here presented does not require solving the characteristic strip of
Eq.(92), thus being a genuine alternative.

4 Tests

After plugging the reducible-ODE scheme here presented into ODEtools, we tested the scheme and
routines using Kamke’s non-linear 246 second order ODE examples9. The purpose was to conﬁrm the
correctness of the returned results and to determine which of these ODEs have integrating factors of the
form µ(x, y′) or µ(y, y′). The test consisted of determining µ and testing the exactness condition Eq.(7)
of the product µ times ODE.

We then ran a comparison of performances in solving a related subset of Kamke’s examples using dif-
ferent computer algebra ODE-solvers (Maple, Mathematica, MuPAD and the Reduce package Convode).
The idea was to situate the new scheme in the framework of a sample of relevant packages presently
available. As a secondary goal, we were also interested in comparing the solving performance of the new
scheme with the one of the symmetry scheme implemented in ODEtools.

Finally we considered the table of integrating factors for second order non-linear ODEs found in

Murphy’s book and the answers for them returned by all these ODE-solvers.

4.1 The reducible-ODE solving scheme and Kamke’s ODEs

To run the test with Kamke’s ODEs, the ﬁrst step was to classify these ODEs into: missing x, missing
y, exact and reducible, where the latter refers to the new scheme. The reason for such a classiﬁcation is
that ODEs missing variables are straightforwardly reducible, so they are not the relevant target of the
new scheme. Also, ODEs already in exact form can be easily reduced after performing a simple check
for exactness; before running the tests all these ODEs were rewritten in explicit form by isolating y′′.
For classifying the ODEs we used the odeadvisor command from ODEtools. All the integrating factors
found satisﬁed the exactness condition Eq.(7). The classiﬁcation we obtained for these 246 ODEs is as
follows

9Kamke’s ODEs 6.247 to 6.249 cannot be made explicit and are then excluded from the tests.

13

Classiﬁcation
99 ODEs are missing x
or missing y

13 are in exact form
40 ODEs are reducible
with integrating factor
µ(x, y′) or µ(y, y′) and
missing x or y
28 ODEs are reducible
and not missing x or y

ODE numbers as in Kamke’s book
1, 2, 4, 7, 10, 12, 14, 17, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 40, 42, 43, 45,
46, 47, 48, 49, 50, 54, 56, 60, 61, 62, 63, 64, 65, 67, 71, 72, 81, 89, 104, 107,
109, 110, 111, 113, 117, 118, 119, 120, 124, 125, 126, 127, 128, 130, 132,
137, 138, 140, 141, 143, 146, 150, 151, 153, 154, 155, 157, 158, 159, 160,
162, 163, 164, 165, 168, 188, 191, 192, 197, 200, 201, 202, 209, 210, 213,
214, 218, 220, 222, 223, 224, 232, 234, 236, 237, 243, 246
36, 42, 78, 107, 108, 109, 133, 169, 170, 178, 226, 231, 235
1, 2, 4, 7, 10, 12, 14, 17, 40, 42, 50, 56, 64, 65, 81, 89, 104, 107, 109, 110,
111, 125, 126, 137, 138, 150, 154, 155, 157, 164, 168, 188, 191, 192, 209,
210, 214, 218, 220, 222, 236

36, 37, 51, 66, 78, 97, 108, 123, 133, 134, 135, 136, 166, 169, 173, 174, 175,
176, 178, 179, 193, 196, 203, 204, 206, 215, 226, 235

Table 1. Missing variables, exact and reducible Kamke’s 246 second order non-linear ODEs.

From the table above,

30% of these 246 Kamke’s ODEs are reducible to ﬁrst order using the scheme
here presented. Also, although the symmetry scheme is more general, and ﬁnds symmetries for 191 of
these 246 ODEs, its implementation in ODEtools is not reducing ﬁve ODEs which are being reduced by
the new scheme. These are the ODEs numbered 36, 37, 123, 215, and 235. For ODE 215, which we write
in explicit form as

≈

−
−
the integrating factor found using the computer algebra implementation of the new scheme (see sec. 5)
was10:

(93)

b −

ode := y′′ =

f (x) y′

6 y2
4 y3
(cid:0)

y′2

a
2
a y
(cid:1)
−

> mu = intfactor(ode,y(x));

µ =

1
y′

This integrating factor leads to a reduced ODE which can be solved as well, resulting in the following
implicit solution in terms of an elliptic integral11:

> odsolve(ode);

−

f (x)dx

e

Z

Z

dx

C1

−

Z

y

1

√

4 a 3 + a a + b

d a + C2 = 0

(95)

−
The integrating factor found for ODE 37 (see Eqs.(29) and (33)) lead to a reduction of order resulting
in the most general ﬁrst order Riccati type ODE; in this example odsolve just returns the reduction
of order obtained using the new scheme. For ODE 123, the integrating factor found was 1/y, and the
reduced ODE is also a generic Riccati ODE. Finally, ODE 235 appears in Kamke’s book written in exact
form, but the ODE is interesting because it contains three arbitrary functions, of the ﬁrst derivative, the
dependent and the independent variables, respectively. Such an arbitrary dependence makes this ODE
almost intractable for most computer algebra ODE-solvers and related packages. We then ﬁrst isolated
the highest derivative as to make the ODE non-exact

(94)

(96)

ode := y′′ = −

(G(y) y′ + F (x))
H(y′)

The integrating factor here found is

> mu = intfactor(ode,y(x));

10In what follows, the input can be recognized by the Maple prompt >.
11For ODE 6.215, there is a typographical mistake in Kamke’s book concerning the reduced ODE:

instead of

...

4y3 − g2y − g3..., one should read ...

4 y3 − g2y − g3....

p

p

14

µ = H(y′)

(97)

It is interesting to note that none of the other computer algebra ODE-solvers tested during this work
succeeded in solving or reducing the order of any of these ﬁve ODEs, even though the corresponding
integrating factors depend on only one variable.

Concerning timings, it is worth mentioning that in the speciﬁc subset of 28 Kamke’s examples which
are not missing variables, the average time consumed by odsolve in solving each ODE using the new
scheme was 2.5 sec, while using symmetries this time jumps to 21 sec. These tests were peformed using
a Pentium 200, 64 Mb RAM, running Windows 95. In summary: for ODEs having an integrating factor
of the form µ(x, y′) or µ(y, y′), the new scheme seems to be, on the average,
10 times faster than the
symmetry scheme.

≈

4.2 Comparison of performances

With the classiﬁcation presented in Table 1.
in hands, we used diﬀerent computer algebra systems to
run a comparison of performances in solving these ODEs having integrating factors of the form µ(x, y′)
or µ(y, y′). For our purposes, the interesting subset is the one comprised of the 28 ODEs not already
missing variables (see Table 1.). The results we obtained are summarized in the following table12:

Solved:

Convode
51, 166, 173, 174,
175, 176, 179.

Kamke’s ODE numbers

Mathematica 3.0
78, 97, 108, 166,
169, 173, 174, 175,
176, 178, 179, 206.

MuPAD 1.3
78, 97, 108, 133,
166, 169, 173, 174,
175, 176, 179,

ODEtools
51, 78, 97, 108, 133, 134,
135, 136, 166, 169, 173, 174,
175, 176, 178, 179, 193, 196,
203, 204, 206, 215.

36, 37, 66, 123, 226, 235.

22

6

Totals:
Reduced:
Totals:

7

0

12

0

11

0

Table 2. Performances in solving 28 Kamke’s ODEs having an integrating factor µ(x, y′) or µ(y, y′)

As shown above, while the scheme here presented is ﬁnding ﬁrst integrals in all the 28 ODE examples,
opening the way to solve 22 of them to the end, the next scores are only 12 and 11 ODEs, respectively
solved by Mathematica 3.0 and MuPAD 1.3.

Concerning the six reductions of order returned by odsolve, it must be said that neither MuPAD
nor Mathematica provides a way to convey them, so that perhaps their ODE-solvers are obtaining ﬁrst
integrals for these cases but the routines are giving up when they cannot solve the problem to the end.
Maple R4 is not present in the table since it is not solving any of these 28 ODEs. This is understandable
since in R4 the only methods implemented for high order non-linear ODEs are those for ODEs which
are missing variables. This situation is being resolved in the upcoming Maple R5, where the ODEtools
routines are included in the Maple library, and the previous ODE-solver has been replaced by odsolve13.
Although the primary goal of this work is just to obtain ﬁrst integrals for second order ODEs, it is
also interesting to comment on the six ODEs shown in Table 2. for which the new scheme succeeds in
determining integrating factors but the reduced ODEs remain unsolved. First of all, for ODEs 36, 37
and 123 the reduction of order lead to general Riccati type ODEs, so that in these cases no more than a
reduction of order should be expected. Concerning ODE 235 (Eq.(96)), the reduced ODE is:

y′

Z

y

−

Z

−

−

Z

−

H( a)d a

G( a)d a

F (x)dx + C1 = 0

(98)

Methods for solving such a ﬁrst order ODE are known only for very special explicit combinations of H,
G and F . Concerning ODEs 66 and 226, the obtained reduced ODEs are the same as those shown in
Kamke’s book, and are out of the scope of odsolve.

12When building the statistics for ODEtools, we passed to odsolve the optional argument [reducible], meaning: try
the reducible scheme, and if it does not solve the problem just give up. To solve the reduced ODE all of odsolve’s methods,
including symmetries, were used. The input and output in the respective format for all the packages tested are available in
http://dft.if.uerj.br/odetools/mu odes.zip.

13However, the scheme here presented was not ready when the development library was closed; the reducible scheme

implemented in Maple R5 is able to determine, when they exist, integrating factors only of the form µ(y′).

15

4.3 The reducible-ODE scheme and Murphy’s table of integrating factors
There is an explicit paragraph in Murphy’s book concerning integrating factors of the form µ(y′), where
it is shown a table with four second order non-linear ODE families for which µ(y′) is already known. The
ﬁrst two families are trivial in the sense that they are already missing variables. The third of these ODE
families is:

ode := y′′ = P (x) y′ + Q(y) y′2

(99)

where P and Q are arbitrary functions of its arguments; this is actually Liouville’s ODE. The integrating
factor mentioned in the book is the same found by the scheme here presented: y′; and the corresponding
reduced ODE can be solved in implicit form:

> odsolve(ode);

y

−

e

−

Z

e

P (x)dxdx

Q( a)d a+C1d a + C2 = 0

(100)

Z

R
The fourth ODE family is the most general second order ODE having 1/y′ as integrating factor (see sec.
5):

R

∂R(x, y)
∂x
for some function R(x, y). Here the new scheme ﬁnds the integrating factor 1/y′ and returns the reduced
ODE

∂R(x, y)
∂y

ode := y′′ =

y′ +

(101)

y′2

ln(y′)

−

R(x, y) + C1 = 0

(102)

actually a generic ﬁrst order ODE14.

5 Computer algebra implementation

We implemented the scheme for ﬁnding integrating factors described in sec. 3 in the framework of the
ODEtools package [5], taking advantage of its set of programming tool routines speciﬁcally designed to
work with ODEs. The implementation consists of:

The plugging of the reducible-ODE solving scheme here presented in the block of methods for nonlinear

second order ODEs of the ODEtools command odsolve;

The extension of the capabilities of the ODEtools intfactor command to determine integrating factors

for non-linear second order ODEs using the scheme here presented;

A new user-level routine, redode, returning the most general explicit ODE having a given integrating

•

•

•

factor (Eq.(16));

The computational implementation follows straightforwardly the explanations of sec. 3 and includes
∼
µ (x) and the reduced ODE R(x, y, y′), respectively. Call-
three main routines, for determining
ings to these routines were in turn added to both the intfactor and odsolve commands, so that the
scheme becomes available at user-level.

(x, y′),

A test of this implementation in odsolve and some related examples are found in sec. 4. Since
detailed descriptions of the ODEtools commands are found in the On-Line help, we have restricted this
section to a description of the new command redode followed by two examples.

F

14For the third ODE family, Mathematica 3.0 returns a wrong answer and MuPAD 1.3 gives up, while for the fourth

family, Mathematica gives up and MuPAD returns an ERROR message.

16

Description of redode

Command name: redode
Feature: returns the nthorder ODE having a given integrating factor
Calling sequence:
> redode(mu, n, y(x));
> redode(mu, n, y(x), R);

Parameters:

n
mu
y(x)
R

Synopsis:

- indicates the order of the requested ODE.
- an integrating factor depending on x, y, ..., y(n−1).
- the dependent variable.
- optional, the expected reduced ODE depending on x, y, ..., y(n−1).

Given an integrating factor µ(x, y, ...y(n)), redode’s main goal is to return the ODE of order n

having µ as integrating factor

1
y(n) = −
µ

∂
∂x

(cid:20)

(cid:18)Z

µ dy(n−1) + G

+ ... + y(n−1)

µ dy(n−1) + G

(cid:19)

(cid:19)(cid:21)

∂
∂y(n−2)

(cid:18)Z

≡

G(x, y, ...y(n−2)) is an arbitrary function of its arguments (see sec. 3). This command is
where G
useful to identify the general ODE problem related to a given µ, as well as to understand the possible
links between the integrating factor scheme for reducing the order and other reduction schemes (e.g.,
symmetries).

When the expected reduced ODE (diﬀerential order n

1), here called R, is also given as argument,

the routine proceeds as follows. First, a test to see if the requested ODE exists is performed:

•

•

µ(x, y, ...y(n−1)) = ν(x, y, ...y(n−2))

∂y(n−1) R(x, y, ..., y(n−1))
If the problem is solvable, redode will then return an nthorder

(103)

for some function ν(x, y, ...y(n−1)).
ODE(n) = y(n)

Φ(x, y, ..., y(n−1)) satisfying

−

µ(x, y, ..., y(n−1)) ODE(n) =

R(x, y, ..., y(n−1))

(104)

that is, an ODE having as ﬁrst integral R + constant.

When the given µ does not depend on y(n−1) and R is non-linear in y(n−1), the requested nthorder

•

ODE nevertheless exists if R can be solved for y(n−1).

−

∂

d
dx

Examples:

The redode command is interesting mainly as a tool for generating solving schemes for given ODE

families; we illustrate with two examples.

1. Consider the family of second order ODEs having as integrating factor µ = F (x) - an arbitrary
function - such that the reduced ODE has the same integrating factor. We want to set up an algorithm
such that, given a second order linear ODE,

y′′ = ψ1(x) y′ + ψ2(x) y + ψ3(x)
where there are no restrictions on ψ1(x), ψ2(x) or ψ3(x), the scheme determines if the ODE belongs to
the family just described, and if so it also determines F (x). The knowledge of F (x) will be enough to
build a closed form solution for the ODE.

(105)

To start with we obtain the ﬁrst order ODE having F (x) as integrating factor via

> ode_1 := redode(F(x), y(x));

y
(cid:18)
where F1 (x) is an arbitrary function. To obtain the second order ODE aforementioned we pass ode_1
as argument (playing the role of the reduced ODE) together with the integrating factor F (x) to obtain

+ F1 (x)

(106)

−

(cid:19)

ode1 := y′ =

1
F (x)

dF (x)
dx

17

(107)

(108)

(109)

(110)

> ode_2 := redode(F(x), y(x), ode_1);

ode2 := y′′ =

1
F (x)

−

2 y′ dF (x)
dx
(cid:18)

+ y

d2F (x)
dx2 +

d F1 (x)
dx

(cid:19)

Taking this general ODE pattern as departure point, we setup the required solving scheme by com-

paring coeﬃcients in Eq.(105) and Eq.(107), obtaining

2
−
F (x)

dF (x)
dx

= ψ1(x),

1
−
F (x)

d2F (x)
dx2 = ψ2(x)

By solving the ﬁrst equation, we get F (x) as

and by substituting this result into the second one we get the pattern identifying the ODE family

F (x) = C1 e

Z

−

ψ1(x)
2

dx

1
2

dψ1(x)

dx −

1
4

(ψ1(x))2

ψ2(x) = 0

−

Among the ODE-solvers of Maple R4, Mathematica 3.0, MuPAD 1.3 or Convode (Reduce), only those
of MuPAD and Maple succeed in solving this ODE family.

2. Consider the second order ODE family having as integrating factor µ = F (x) - an arbitrary function
- also having the symmetry15 [ξ = 0, η = F (x)], and such that the reduced ODE is the most general ﬁrst
order linear ODE

where A(x) and B(x) are arbitrary functions. To start with, we obtain the aforementioned second order
ODE having the integrating factor F (x) as in Example 1.

ode1 :=y′ = A(x) y + B(x)

(111)

> ode_2 := redode(F(x), y(x), ode_1);

dA(x)
dx

+

(cid:16)

dF (x)
dx

A(x)

(cid:17)
F (x)

y +

A(x)

 

dF (x)
dx
F (x) !

−

y′ +

dB(x)
dx

+

(cid:16)

dF (x)
dx

B(x)

(cid:17)
F (x)

(112)

y′′ =









In this step, ode_2 is in fact the most general second order linear ODE. If we now impose the symmetry
condition16 X(ode_2)=0, where X = [0, F (x)] we arrive at the following restriction on A(x)

F (x)

−

dA(x)

dx −

dF (x)
dx

2

(cid:18)

(cid:19)

A(x) +

2

dF (x)
dx
(cid:17)
F (x)

(cid:16)

+

d2F (x)
dx2 = 0

(113)

Solving this ODE for A(x), introducing the result into Eq.(112) and disregarding the non-homogeneous
term (irrelevant in the solving scheme) we obtain the homogeneous ODE family pattern:

1
2

dH(x)
dx

+

3
4 (cid:16)

2

dH(x)
dx

(cid:17)
(H(x))2 −

1
2

d

2
H(x)
dx2
H(x) 



y′′ = 



y + H(x) y′

(114)

where we introduced H(x) = (F (x))−2. Although this ODE family appears more general than the one
treated in Example 1., the setting up of a solving scheme here is easier: one just need to check if the
coeﬃcient of y in a given ODE is related to the coeﬃcient of y′ as in equation Eq.(114), in which case
the integrating factor is just

1
√H(x)
15Here we denote the inﬁnitesimal symmetry generator by [ξ, η] ≡ ξ ∂
16For linear ODEs, symmetries of the form [0, F (x)] are also symmetries of the homogeneous part.

∂x + η ∂

∂y

.

18

6 Conclusions

This paper presented a systematic method for obtaining integrating factors of the form µ(x, y′) and µ(y, y′)
- when they exist - for second order non-linear ODEs, as well as its computer algebra implementation in
the framework of the ODEtools package. The scheme is new, as far as we know, and the implementation
has proven to be a valuable tool since it leads to reductions of order for varied ODE examples, as shown
in sec. 4. Actually, the implementation of the scheme is solving ODEs not solved by other computer
algebra ODE-solvers. Furthermore, the method being presented involves simple operations, resulting in
answers about 10 times faster than the symmetry scheme.

It is also worth mentioning that restricting the dependence of µ in Eq.(7) to µ(x, y′), does not lead to
a straightforwardly solvable problem except for few or simple cases. Moreover, when the determination
of µ from Eq.(7) is frustrated, there is no manner to determine whether such a solution µ(x, y′) exists.
It is then a pleasant surprise to see such integrating factors - provided they exist - being determined in
all cases and without solving any diﬀerential equations, convincing us of the value of the new scheme.

On the other hand, the method presented is not as general as for instance the symmetry scheme. We
are restricting the problem to the universe of second order ODEs having integrating factors depending
only on two variables - the general case is µ(x, y, y′) - and even so, the method is as yet unable to ﬁnd
integrating factors of the form µ(x, y).

Some natural extensions of this work then would be to develop a scheme for building integrating
factors of the form µ(x, y), and for higher order ODEs, at least for restricted ODE families yet to be
determined. We are presently working on some prototypes in these directions17 and expect to succeed in
obtaining reportable results in the near future.

This work was supported by the State University of Rio de Janeiro (UERJ), Brazil, and by the Symbolic
Computation Group, Faculty of Mathematics, University of Waterloo, Ontario, Canada. The authors
would like to thank T. Kolokolnikov18 for fruitful discussions.

Acknowledgments

References

[1] MacCallum, M.A.H., Using computer algebra to solve ordinary diﬀerential equations, Computer
algebra in industry 2: Problem solving in practice, ed. A.M. Cohen, L.J. van Gastel and S.M.
Verduyn Lunel, pp. 19-41, John Wiley and Sons, Chichester (1995).

[2] Stephani, H. Diﬀerential equations: their solution using symmetries, ed. M.A.H. MacCallum, Cam-

bridge University Press, New York and London (1989).

[3] S.C. Anco and G.W. Bluman, Integrating Factors and First Integrals for Ordinary Diﬀerential Equa-

tions, Preprint, University of British Columbia (1997).

[4] Kamke, E., Diﬀerentialgleichungen: L¨osungsmethoden und L¨osungen. Chelsea Publishing Co, New

York (1959).

[5] E.S. Cheb-Terrab, L.G.S. Duarte and L.A.C.P. da Mota, “Computer Algebra Solving of Second
Order ODEs Using Symmetry Methods”. To appear in Computer Physics Communications (see
http://dft.if.uerj.br/odetools.html; or http://lie.uwaterloo.ca/odetools.html).

[6] Murphy, G.M., Ordinary Diﬀerential Equations and their solutions. Van Nostrand, Princeton, 1960.

17See http://dft.if.uerj.br/odetools.html
18Symbolic Computation Group, Faculty of Mathematics, University of Waterloo.

19

Appendix A

This appendix contains some additional information which may be useful as a reference for developing
computer algebra implementations of this work, or for improving the one here presented.

As explained in sec. 3.1.2, the scheme presented can be subdivided into six diﬀerent cases: A, B, C,
D, E and F. Actually, there are just ﬁve cases since case B is always either A or C. From the point of
view of a computer implementation of the scheme it is interesting to know what one would expect from
such an implementation concerning Kamke’s ODEs and the cases aforementioned. We then display here
both the integrating factors obtained for the 28 Kamke’s ODEs used in the tests (see sec. 4) and the
“case” corresponding to each ODE.

Integrating factor
1

Kamke’s book ODE-number
36

Case
D

37
51, 166, 169, 173, 175, 176, 179, 196, 203, 204, 206, 215

f (x)dx

e
y′−1
R

b+y′
1+y′ 2

3/2

(cid:1)

x
(cid:0)
x−1
y
y−1

y′

1+y′
y′−1
y′−1
y′
1+y′
(cid:1)
(cid:0)
y′−1
(cid:1)

1+y′
(cid:0)
y′−1
h(y′
(cid:0)
(cid:1)(cid:0)
)
x
2 xy′−1
(1 + y′)
1
1+2 yy′

−1

1+y′ 2

(cid:1)

66

78
97
108
123

133

134

135

136

174

178
193

y′
y′
(cid:0)
h(y′)
Table A.1 Integrating factors for Kamke’s reducible and ODEs not missing variables.

226
235

(cid:1)

A
C

D

D
A
D
A

C

C

C

C

C

C
C

A
C

20

