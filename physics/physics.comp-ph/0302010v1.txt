3
0
0
2
 
b
e
F
 
4
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
0
1
0
2
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Incompressible Couette Flow ∗

Maciej Matyka†
email: maq@panoramix.ift.uni.wroc.pl

Exchange Student
at
University of Linkoping

Abstract

This project work report provides a full solution of
simpliﬁed Navier Stokes equations for The Incom-
pressible Couette Problem. The well known analyt-
ical solution to the problem of incompressible cou-
ette is compared with a numerical solution. In that
paper, I will provide a full solution with simple C
code instead of MatLab or Fortran codes, which are
known. For discrete problem formulation, implicit
Crank-Nicolson method was used. Finally, the sys-
tem of equation (tridiagonal) is solved with both
Thomas and simple Gauss Method. Results of both
methods are compared.

1

Introduction

Main problem is shown in ﬁgure (1). There is
viscous ﬂow between two parallel plates. Upper
plate is moving in x direction with constans velocity
(U = Ue). Lower one is not moving (U = 0). We
are looking for a solution to describe velocity vector
ﬁeld in the model (between two plates).

∗Thanks for Grzegorz Juraszek (for English languague

checking).

†Student of Computational Physics subsection of Theo-
retical Physics at University of Wroclaw in Poland. Depar-
tament of Physics and Astronomy.

D(cid:13)

Flow(cid:13)

U=U(cid:13) e(cid:13)

U=0(cid:13)

Figure 1: Schematic representation of Couette Flow
Problem

2 Fundamental Equations

Most of incompressible ﬂuid mechanics (dynam-
ics) problems are described by simple Navier-Stokes
equation for incompressible ﬂuid velocity, which can
be written with a form:

∂~u
∂t

= (−~u~∇)~u − ~∇ϕ + υ ~∇2~u + ~g,

(1)

where ϕ is deﬁned is deﬁned as the relation of

pressure to density:

ϕ =

p
ρ

(2)

and υ is a kinematics viscosity of the ﬂuid.
We will also use a continuity equation, which can

be written as follows 1:

1I assume constans density of the ﬂuid.

D = ~∇ · ~v = 0

(3)

Of course, in a case of couette incompressible ﬂow

we will use several simpliﬁcations of (1).

3 Mathematical Formulation
of the Couette Problem

Incompressible couette problem is not needed to
solve full Navier-Stokes equations. There is no ex-
ternal force, so ﬁrst simpliﬁcation of (1) will be:

∂~u
∂t

= (−~u~∇)~u − ~∇ϕ + υ ~∇2~u,

(4)

In [1] there can be found easy proof that in cou-
ette problem there are no pressure gradients, which
means that:

We will ignore a convection eﬀects so, equation

(4) can be written with a form:

Now we have simple diﬀerential equation for ve-
locity vector ﬁeld. That equation is a vector type
and can be simpliﬁed even more. Let us write
continuity equation (3) in diﬀerential form. Let
~u = (u, v), then continuity equation can be ex-
panded as follows2:

∂u
∂t

= υ

∂2u
∂y2

(10)

Our problem is now simpliﬁed to mathematical
problem of solving equations like (10). That is now
a governing problem of incompressible couette ﬂow
analysis.

3.1 Analytical soulution

Analytical solution for velocity proﬁle of steady
ﬂow, without time-changes (steady state) can be
found very easily in an equation:

∂2u
∂y2 = 0
And without any changes of viscosity υ it can be

(11)

υ

written in form:

∂2u
∂y2 = 0
After simple two times integration of equation

(12)

(12) we have analytical solution function of (12):

u = c1 · y + c2

(13)

where c1 and c2 are integration constans.

(5)

(6)

3.2 Boundary Conditions for The

Analytical Solution

(7)

Simple boundary conditions are provided in that
problem. We know that:

We know that there is no u velocity component
gradient along x axis (symmetry of the problem),
so:

u =

(cid:26)

0
y=0
ue y=D

Evaluation of Taylor series3 at points y = 0 and
y = D gives us a proof that only one possible and
physically correct value for y component of velocity
~u is:

Because of (9) equation (6) can be written as fol-

2Only with assumption of non compressible ﬂuid.
3Those simple expressions can be found in [1], chapter

lows:

9.2.

(14)

(15)

(16)

(8)

Simple applying it to our solution (13) gives a

more speciﬁed one, where c1 = ue

D and c2 = 0:

It means, that a relationship between u and y is
linear. A Better idea to write that with mathemat-
ical expression is:

(9)

u =

ue
D

· y

u
y

=

ue
D

Where ue

D is a constans for the problem (initial u

velocity vs size of the model).

2

~∇ϕ = 0,

∂~u
∂t

= υ ~∇2~u

∂u
∂x

+

= 0

∂v
∂y

∂u
∂x

= 0

v = 0

4 Numerical Solution

4.1 Non-dimensional Form

Let us deﬁne some new non-dimensional variables4:

′

′

u
y
t

′

= u
ue
= y
D
=

t
D/ue

u = 




∆t
2(∆y)2Re

j +

(un+1

j +un+1

un+1
j = un

j+1−2un+1

j+1 +un

j−1 +un
(23)
Simple grouping of all terms which are placed in
time step (n+1) on the left side and rest of them
- on right side, gives us an equation which can be
written as:

j−1)

(17)

Now let us place these variables into equation
(10) and we have now a non-dimensional equation
written as follows:

Aun+1

j−1 + Bun+1

j + Aun+1

j+1 = Kj

(24)

Where Kj is known and depends only on values

u at n time step:

ρ

∂u/ue
(t · ue)/D (cid:18)

u2
e
D (cid:19)

= υ

∂2(u/ue)
∂(y/D)2

ue
D2

(cid:16)

(cid:17)

(18)

Now we replace all the variables to nondimen-

sional, like deﬁned in (17):

′

∂u
∂t′ (cid:18)

u2
e
D (cid:19)

ρ

′

∂2u
∂y′2

ue
D2

(cid:16)

(cid:17)

= υ

′

(19)

Now we will remove all

chars from that equa-
tion (only for simpliﬁcation of notation), and the
equation becomes5 to:

υ
Dρue (cid:19)
In that equation Reynold’s number Re appears,

∂u
∂t

(20)

=

(cid:18)

∂2u
∂y2

and is deﬁned as:

Re =

Dρue
υ

(21)

Where Re is Reynold’s number that depends on
D height of couette model. Finally, the last form of
the equation for the couette problem can be written
as follows:

1
Re (cid:19)
We will try to formulate numerical solution of the

∂u
∂t

(22)

=

(cid:18)

∂2u
∂y2

equation (22).

tion

4.2 Finite - Diﬀerence Representa-

In our solution of equation (22) we will use Crank-
Nicolson technique, so discrete representation of
that equation can be written 6 as:

4Exacly the same, like in [1].
5Constans simpliﬁcation also implemented
6That representation is based on central discrete diﬀeren-

tial operators.

Kj =

1 − ∆t

(cid:18)

(∆y)2Re (cid:19)

un
j +

∆t
2(∆y)2Re

(un

j+1 +un

j−1)

Constans A and B are deﬁned as follows7:

A = −

∆t
2(∆y)2Re

B = 1 +

∆t
(∆y)2Re

(25)

(26)

(27)

4.3 Crank - Nicolson Implicit scheme

For numerical solution we will use one-dimensional
grid points (1, . . . , N + 1) where we will keep cal-
culated u velocities. That means u has values from
the range (u1, u2, . . . , uN +1). We know (from ﬁxed
boundary conditions), that: u1 = 0 and uN +1 = 0.
Simple analysis of the equation (24) gives us a sys-
tem of equations, which can be described by matrix
equation:

A · ~X = ~Y
(28)
Where A is tridiagonal [N − 1] · [N − 1] matrix

of constant A and B values:

B A
A B A
. . .

A =











. . .
A B A
A B











(29)

~X vector is a vector of u values:

~X = [u1, u2, . . . , uN +1]

(30)

7Directly from equation (23).

3

~Y vector is a vector of constans Kj values:

~Y = [K1, . . . , KN +1]

(31)

5 Solving The System of Lin-

ear Equations

Now the problem comes to solving the matrix - vec-
tor equation (28). There are a lot of numerical
methods for that8, and we will try to choose two
of them: Thomas and Gauss method. Both are
very similar, and I will start with a description of
my implementation with the simple Gauss method.

5.1 Gauss Method

Choice of the Gauss method for solving system of
linear equations is the easiest way. This simple al-
gorithm is well known, and we can do it very easily
by hand on the paper. However, for big matrices
(big N value) a computer program will provide us
with a fast and precise solution. A very important
thing is that time spent on writing (or implement-
ing, if Gauss procedure was written before) is very
short, because of its simplicity.

I used a Gauss procedure with partial choice of
a/the general element. That is a well known tech-
nique for taking the ﬁrst element from a column of
a matrix for better numerical accuracy.

The whole Gauss procedure of solving a system of
equations contains three steps. First, we are look-
ing for the general element.

After that, when a general element is in the ﬁrst
row (we make an exchange of rows9) we make some
simple calculations (for every value in every row
and column of the matrix) for the simpliﬁed matrix
to be diagonal (instead of a tridiagonal one which
we have at the beginning). That is all, because af-
ter diagonalization I implement a simple procedure
(from the end row to the start row of the matrix)
which calculates the whole vector ~X. There are my
values of ui velocity in all the model10.

5.2 Thomas Method

Thomas’ method, described in [1] is simpliﬁed ver-
sion of Gauss method, created especially for tridiag-

8Especially for tridiagonal matrices like A
9We made it for A matrix, and for ~X, ~Y too.
10More detailed description of Gauss method can be found

in a lot of books on numerical methods, like [2].

onal matrices. There is one disadvantage of Gauss
method which disappears when Thomas’ method is
implemented. Gauss method is rather slow, and
lot of computational time is lost, because of special
type of matrix. Tridiagonal matrices contain a lot
of free (zero) values.
In the Gauss method these
values joins the calculation, what is useless.

Thomas’ simpliﬁcation for tridiagonal matrices is
to get only values from non-zero tridiagonal part of
matrix. Simply applying a Thomas’ equations for
our governing matrix equation (28) gives us:

(32)

(33)

(34)

(35)

′

i = B − A2

d

d

′
i−1

u

′

i = ui − u
d

′

iA
′
i−1

uM =

′

u
M
B

We know that exact value of uM is deﬁned as

follows:

Now solution of the system of equations will be

rather easy. We will use recursion like that:

ui−1 =

′

u

i−1 − A · ui
B

That easy recursion provides us a solution for the

linear system of equations.

6 Results

Main results are provided as plots of the function:

y
D

= f

u
ue (cid:19)

(cid:18)

(36)

In ﬁgure (2) there is drawn an analytical solu-
tion to the problem of couette ﬂow. That is linear
function, and we expect that after a several time
steps of numerical procedure we will have the same
conﬁguration of velocity ﬁeld.

6.1 Diﬀerent Time Steps

In ﬁgure (3) there are results of velocity u calcu-
lation for several diﬀerent time steps. Analytical
solution is also drawn there.

As we can see in the ﬁgure (3) - the solution is
going to be same as analytical one. Beginning state
(known from boundary conditions) is changing and
relaxing.

4

 1

 0.8

 0.6

 0.4

 0.2

 1

 0.8

 0.6

 0.4

 0.2

D
/
y

D
/
y

D
/
y

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 1

 0.8

 0.6

 0.4

 0.2

D
/
y

 0

 0

analitycal solution

u/u_e

 0.2

 0.4

 0.6

 0.8

 1

 0.2

 0.4

 0.6

 0.8

 1

Re=500
Re=2000
Re=5000
Re=10000

u/u_e

Figure 2: Analytical exact solution.

Figure 4: Calculation for same time (t = 2500) and
diﬀerent Reynold’s numbers.

We see that there is also strong correlation between
grid density, and speed of changes on the grid. Also,
very interesting case N = 10 shows, that for low
density of the grid changes are very fast, and not
accurate.

step=4
step=8
step=15
step=35
step=69
step=122
analitycal solution

u/u_e

 0

 0

 0.2

 0.4

 0.6

 0.8

 1

Figure 3: Results for diﬀerent time steps of numer-
ical calculations.

6.2 Results for Diﬀerent Reynolds

Numbers

In the ﬁgure (4) there is plot of numerical calcula-
tions for diﬀerent Reynold’s numbers. For example
Reynold’s number depends on i.e. viscosity of the
ﬂuid, size of couette model. As it is shown on the
plot there is strong relationship between the speed
of the velocity ﬁeld changes and Reynold’s number.
In a couple of words: when Reynolds number in-
creases - frequency of changes also increases.

N=10
N=15
N=20
N=30
N=50

 0

 0

 0.2

 0.4

 0.6

 0.8

 1

u/u_e

Figure 5: Calculation for same time (t = 2500),
same Reynold’s numbers (Re=5000) and diﬀerent
grid density (N number).

6.4 Conclusion

6.3 Results for Diﬀerent Grid Den-

sity

In ﬁgure (5) there is an example of calculations of
velocity ﬁeld for diﬀerent grid density (N number).

Solving of Incompressible Couette Problem can be
good way to check numerical method, because of
existing analytical solution.
In that report there
were presented two methods of solving system of
equations: Gauss and Thomas’ method. System of
equations was taken from Crank-Nicolson Implicit

5

scheme. Well known linear relationships were ob-
served.

6

void Zamien(double *a, double *b) {

double c;
c=*a;

*a=*b; *b=c;

}

void WypiszMacierz(double A[NN][NN], int n) {

// show matrix

printf("%2.4f

",A[i][j]);

7 APPENDIX A

#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#define N (40)
#define NN (N+1)

int i,j;

for(j=1;j<n;j++)
{

for(i=1;i<n;i++)
{

}
printf("\n");

}

}

int i,j,k;
double m;

// Gauss Elimination

for(i=0;i<n;i++)
{

// Step #1: Change governing element

m=fabs(A[i][i]);
k=i;

for(j=i+1;j<n;j++)
if(fabs(A[i][j])>m)
{

m=fabs(A[i][j]);
k=j;

}
if(k!=i)
for(j=0;j<n;j++)
{

Zamien(&A[j][i],&A[j][k]);
Zamien(&b[i+1],&b[k+1]);

7

void Gauss(double A[NN][NN], double *b, double *x, int n) {

}

}

}

}

// Step #2: make it triangle
for(j=i+1;j<n;j++)
{

m = A[i][j]/A[i][i];

for(k=i;k<n;k++)

A[k][j] = A[k][j] - m*A[k][i];

b[j+1] = b[j+1] - m*b[i+1];

// Step#3: Solve now

for(i=n-1;i>=1;i--)
{

for(j=i+1;j<n;j++)

b[i+1] = b[i+1]-A[j][i]*x[j+1];

x[i+1] = b[i+1]/A[i][i];

}

int main(void)
{

// initialization

double U[N*2+2]={0},A[N*2+2]={0},B[N*2+2]={0},C[N*2+2]={0},D[N*2+2]={0},Y[N*2+2]={0};

double OneOverN = 1.0/(double)N;
double Re=5000;
double EE=1.0;
double t=0;
double dt=EE*Re*OneOverN*2;
double AA=-0.5*EE;
double BB=1.0+EE;
int KKEND=1122;
int KKMOD=1;
int KK;
int i,j,k;
int M;
double GMatrix[NN][NN]={0};
double test;
Y[1]=0; // init

// Reynolds number
// dt parameter

// delta time

// for a loop
// for loops too
// temporary needed variable
// for Gauss Elimination

// apply boundary conditions for Couette Problem

U[1]=0.0;
U[NN]=1.0;

for(j=2;j<=N;j++)
U[j]=0.0;

8

// initial conditions (zero as values of vertical velocity inside of the couette model)

C[j]=(1.0-EE)*U[j]+0.5*EE*(U[j+1]+U[j-1]);
if(j==N)

C[j]=C[j]-AA*U[NN];

// Gauss
// C[]
-
// A[]B[]D[] -
-
// U[]

free
for matrix calculation
X

// calculate matrix for Gauss Elimination

A[1]=B[1]=C[1]=D[1]=1.0;

for(KK=1;KK<=KKEND;KK++)
{

for(j=2;j<=N;j++)
{

Y[j]=Y[j-1]+OneOverN;
A[j]=AA;
if(j==N)

A[j]=0.0;

D[j]=BB;
B[j]=AA;
if(j==2)

B[j]=0.0;

}

}

{

GMatrix[0][0]=D[1];
GMatrix[1][0]=A[1];

for(i=1;i<N-1;i++)
{

GMatrix[N-2][N-1]=B[N];
GMatrix[N-1][N-1]=D[N];

Y[1]=0.0;
Y[NN]=Y[N]+OneOverN;

t=t+dt;
test=KK % KKMOD;

GMatrix[i-1][i]=B[i+1];
GMatrix[i][i]=D[i+1];
GMatrix[i+1][i]=A[i+1];

// GMatrix[1][2]=B[2]
// GMatrix[2][2]=D[2]
// GMatrix[3][2]=A[2]

Gauss(GMatrix,C,U,N);

// Gauss solving function

// time increment

if(test < 0.01)

// print the results

printf("KK,TIME\n");
printf("%d,%f\n",KK,t);

// info 1

9

printf(",J,Y[J],U[j]\n");
for(j=1;j<=NN;j++)

// info 2

printf("%d , %f, %f\n",j,U[j],Y[j]);
printf("\n \n \n \n");

// for nice view of several datas

}

}

return (1);

}

8 APPENDIX B

#include <stdlib.h>
#include <stdio.h>

#define N (50)
#define NN (N+1)

int main(void)
{

// initialization

double OneOverN = 1.0/(double)N;
double Re=7000;
double EE=1.0;
double t=0;
double dt=EE*Re*OneOverN*2;
double AA=-0.5*EE;
double BB=1.0+EE;
int KKEND=122;
int KKMOD=1;
int KK;
int j,k;
int M;

double test;
Y[1]=0; // init

U[1]=0.0;
U[NN]=1.0;

for(j=2;j<=N;j++)
U[j]=0.0;

A[1]=B[1]=C[1]=D[1]=1.0;

double U[N*2+2],A[N*2+2],B[N*2+2],C[N*2+2],D[N*2+2],Y[N*2+2];

// Reynolds number
// dt parameter

// delta time

// for a loop
// for loops too
// temporary needed variable

// apply boundary conditions for Couette Problem

// initial conditions (zero as values of vertical velocity inside of the couette model)

printf("dt=%f,

Re=%f,

N=%d \n",dt,Re, N);

10

for(KK=1;KK<=KKEND;KK++)
{

for(j=2;j<=N;j++)
{

Y[j]=Y[j-1]+OneOverN;
A[j]=AA;
if(j==N)

A[j]=0.0;

D[j]=BB;
B[j]=AA;

if(j==2)

B[j]=0.0;

C[j]=(1.0-EE)*U[j]+0.5*EE*(U[j+1]+U[j-1]);

if(j==N)

C[j]=C[j]-AA*U[NN];

// upper bidiagonal form
for(j=3;j<=N;j++)
{

D[j]=D[j]-B[j]*A[j-1]/D[j-1];
C[j]=C[j]-C[j-1]*B[j]/D[j-1];

// calculation of U[j]
for(k=2;k<N;k++)
{

M=N-(k-2);
U[M]=(C[M]-A[M]*U[M+1])/D[M];

// Appendix A

}

}

}

Y[1]=0.0;
Y[NN]=Y[N]+OneOverN;
t=t+dt;
test=KK % KKMOD;

if(test < 0.01)
{

// time increment

// print the results

printf("KK,TIME\n");
printf("%d,%f\n",KK,t);

printf(",J,Y[J],U[j]\n");
for(j=1;j<=NN;j++)

// info 1

// info 2

printf("%d , %f, %f\n",j,U[j],Y[j]);
printf("\n \n \n \n");

// for nice view of several datas

}

}
return (1);

}

11

References

Hill Inc, 1995.

[1] John D. Andertson, Jr. ’Computational Fluid Dynamics: The Basics with Applications’, McGraw-

[2] David Potter ’Metody obliczeniowe ﬁzyki’, PWN 1982.

[3] Ryszard Grybos, ’Podstawy mechaniki plynow’ (Tom 1 i 2), PWN 1998.

12

