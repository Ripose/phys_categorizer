7
9
9
1
 
l
u
J
 
9
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
8
0
0
7
0
7
9
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Common Molecular Dynamics Algorithms Revisited: Accuracy and Optimal Time
Steps of St¨ormer-Leapfrog Integrators

Alexey K. Mazur
Laboratoire de Biochimie Th´eorique, CNRS UPR9080 Institue de Biologie Physico-Chimique 13, rue Pierre et Marie Curie,
Paris,75005, France
(February 9, 2008)

The St¨ormer-Verlet-leapfrog group of integrators commonly used in molecular dynamics simu-
lations has long become a textbook subject and seems to have been studied exhaustively. There
are, however, a few striking eﬀects in performance of algorithms which are well-known but have not
received adequate attention in the literature. A closer view of these unclear observations results
in unexpected conclusions. It is shown here that contrary to the conventional point of view, the
leapfrog scheme is distinguished in this group both in terms of the order of truncation errors and
the conservation of the total energy. In this case the characteristic square growth of ﬂuctuations of
the total energy with the step size, commonly measured in numerical tests, results from additional
interpolation errors with no relation to the accuracy of the computed trajectory. An alternative pro-
cedure is described for checking energy conservation of leapfrog-like algorithms which is free from
interpolation errors. Preliminary tests on a representative model system suggest that standard step
size values used at present are lower than necessary for accurate sampling.

I. INTRODUCTION

The well-known group of integrators for the Newton’s equations comprising Verlet [1], leapfrog [2], velocity Verlet
[3], and Beeman [4] methods play a central role in the classical methodology of molecular dynamics. Due to their
simplicity and exceptional stability they proved to be the best choice for long time - large step size calculations and
they are now employed in the great majority of simulations of large systems. All or some of these methods are
always described in detail and compared in any modern textbook [2,5,6]. It is well-known that they are based upon
a ninety-year-old St¨ormer time-centered diﬀerence approximation of accelerations [7,8], that given appropriate initial
conditions they produce the same trajectory in coordinate space and that, therefore, they all represent variations of
a single algorithm.

Despite this long prehistory, the performance of these algorithms still attracts remarkable attention, ﬁrst, because
of their practical importance and, second, because understanding of the origin of their exceptional properties may help
to develop even better algorithms. In particular, their stability has been attributed to the correspondence between
the order of the ﬁnite diﬀerence equation and its analytical analog [2], to their time reversibility [2,9,10], to oscillating
fundamental solutions [11] and to their symplectic property [9,12,13]. A hallmark of these method is a square power
growth of global errors with the step size, which is invariably observed with diﬀerent testing techniques and can even
be used for debugging computer codes [5]. Because of the low apparent order of approximation they usually appear
less accurate than other methods in comparative studies, but, with large step sizes, when other algorithms loose
stability, the leapfrog scheme and its analogs still produce trajectories with very low total energy drift and correct
average static and dynamic properties [14–16]. These observations are known and exploited for such a long time
that it seems to have been forgotten that actually they are quite unusual and that this behavior still has no clear
explanation.

The observed persistence of averages and a low drift of the total energy might mean that the numerical trajectory
computed with a large step size, though inaccurate in a strict sense, holds well to the correct constant energy
hypersurface in phase space. It is well-known, however, that compared with other integrators the St¨ormer-equivalent
algorithms conserve the instantaneous total energy rather poorly - its value already strongly ﬂuctuates at time steps
well below the theoretical limit of stability. Thus, it appears that the trajectory constantly deviates from the initial
hypersurface, but always ﬁnds a way back, which is rather striking because, for example, the velocity Verlet algorithm
is self-starting and, consequently, keeps no memory of the preceding part of the trajectory. One explanation to these
observations follows from the general property of symplectic integrators which, with a suﬃciently small time step,
generate discretizations of exact trajectories corresponding to perturbed Hamiltonians [12]. This property, however,
holds for small time steps only and it does not explain why the leapfrog-equivalent algorithms are distinguished among
symplectic integrators as well.

The above contradiction may be settled if one assumes that the total energy is actually conserved better than
it appears. For a St¨ormer or a leapfrog trajectory this is possible, in principle, because in these cases the total
energy is not a well-deﬁned quantity. The original St¨ormer formula [1,5] needs only coordinates and accelerations

1

for computing a trajectory and so, strictly speaking, velocities are not deﬁned. There are many methods to evaluate
velocities and kinetic energies but they all employ some ﬁnite diﬀerence approximations and, usually, interpolations,
which is often done implicitly, as in the case of the velocity Verlet and Beeman algorithms [3,4]. It is understood that
these computations may introduce additional errors into the computed total energy, but these errors are diﬃcult to
evaluate or to get rid of and one cannot generally tell how large is their relative contribution.

The initial goal of the present study was to check more accurately how well a leapfrog trajectory holds to a constant-
energy hypersurface, when only approximations intrinsic to the algorithm play a role and there is no inﬂuence of
additional approximations and interpolations. As happens sometimes, the solution of a practical task has lead to a
comprehensive “ab initio” analysis of several related problems which have been unrecognized or simply ignored in
the literature. It is shown here that contrary to the conventional point of view, the leapfrog scheme is more accurate
than other algorithms of this group, both in terms of the order of the truncation errors and the conservation of the
total energy. The observed square growth of ﬂuctuations of the total energy with the step size appears to result
from interpolations only and has no relation to the accuracy of the computed trajectory. An alternative procedure is
proposed for checking energy conservation of leapfrog-like algorithms which is free from interpolation errors. Testing
on an example of protein dynamics conﬁrms that the leapfrog trajectory really manages to sample from a correct
hypersurface in phase space with larger step sizes than commonly recommended.

When a classical text-book subject is discussed it is diﬃcult to maintain the logic of argumentation without
reproducing some well-known general results. The author hopes, therefore, to be excused by experts if some of the
derivations in the text appear trivial.

II. RESULTS AND DISCUSSION

We will consider Newton’s equation for a particle of a unit mass

¨x = f (x)

where the dot notation denotes time derivatives. The St¨ormer fourth order algorithm (the order of the algorithm here
and below refers to the order of the truncation error) ﬁrst introduced in this ﬁeld by Verlet [1] is

where xn and an are the coordinate and the acceleration at the nth time step and h is the step size. The leapfrog
scheme popularized by Hockney and Eastwood [2] is

where vn+ 1
is

2

is the half-step velocity. The Swope et al. [3] formulation of the algorithm referred to as velocity Verlet

xn+1 = 2xn − xn−1 + anh2

vn+ 1
2 = vn− 1
xn+1 = xn + vn+ 1

2 + anh
2 h

xn+1 = xn +

vn + an

(cid:18)

vn+1 = vn + (an + an+1)

h
2 (cid:19)

h

h
2

Finally, the Beeman method [4]

xn+1 = xn + vnh +

vn+1 = vn +

an+1 +

1
3

(cid:18)

(cid:18)

2
3
5
6

an − 1
6
an − 1
6

an−1

h2

(cid:19)

an−1

h

(cid:19)

Instructive discussions of the relationships between these methods can be found elsewhere [2,5,10,17,18]. The algo-
rithms deﬁned by Eqs. (2)-(5) signiﬁcantly diﬀer in the implicitly adopted point of view upon the deﬁnition of the
on-step velocities and, consequently, the total energy. For the velocity Verlet and Beeman integrators the on-step
velocity vn, kinetic energy Kn and the total energy En are well deﬁned quantities. In contrast, for both the leapfrog
and the original St¨ormer algorithms no complete trajectory in phase space is computed and one can choose between

2

(1)

(2)

(3a)

(3b)

(4a)

(4b)

(5a)

(5b)

diﬀerent interpolation formulae for the calculation of on-step velocities or kinetic energies. Because of the reasons
given below it is most convenient for us to take the second choice. Let us consider that our trajectory is computed
by the leapfrog integrator (3a,b). The coordinates thus obtained automatically satisfy Eq. (2). The corresponding
solution of Eqs. (4a,b) is obtained if we employ the interpolation formula

and the solution of Eqs. (5a,b) with

vn =

vn− 1

2

+ vn+ 1

2 (cid:17)

1
2 (cid:16)

vn =

2vn+ 1

2

+ 5vn− 1

2

− vn− 3

2 (cid:17)

1
6 (cid:16)

It should be noted that since the Beeman algorithm employs coordinates and velocities from several time steps it is
equivalent to the leapfrog algorithm with interpolation (7) only if its initial conditions match Eqs. (3a,b).

When analytical trajectories are described it is common to use the term “state” to refer to a point in phase space.
From any state the analytical trajectory can be continued in a unique way in both time directions. For the following
discussion, it will be convenient to use a similar terminology referring to numerical trajectories. Thus, a leapfrog
, a velocity Verlet state as (xn, vn), and a St¨ormer state as (xn, xn−1). In each
state is deﬁned as a pair
xn, vn−1/2
of these three cases there exists a unique analytical solution of Eq. (1) to which these states belong although the
(cid:1)
(cid:0)
corresponding exact trajectories are not identical.

A. The Order of Approximation of The Leapfrog Scheme

This very basic and apparently simple question appears to be very confused and persistently misinterpreted in the
literature. Fundamental textbooks always demonstrate that algorithm (2) is accurate to fourth order but add that
velocities are usually computed with a lower accuracy. Equivalence between all integrators of this group also appears
only when low-order approximations are used for velocities [18]. At the same time, Eqs. (3a,b) and the velocity Verlet
h2
and Beeman algorithms are only O
(cid:0)
(cid:1)
growth of global errors in agreement with O
order of the local truncation error [5,6]. This occurs even when no
lower-order approximations are involved, for instance, if Eq. (2) is used and the deviation of coordinates from an
analytical solution is checked [7]. Although these observations are not contradictory they are rather perplexing, but,
however surprising, they are essentially ignored in the literature. The confusion clearly results from approximations
of velocities which are not included in Eq. (2), but since all these algorithms can produce the same trajectory the
diﬃculty is only formal and seems to present no practical interest. We will now see that this reasoning involves a
conceptual error with important consequences.

accurate. In various numerical tests all these integrators exhibit an O

h3
(cid:0)

h3
(cid:0)

(cid:1)

(cid:1)

Consider the standard derivation of Eq. (2), which starts from two Taylor series from time t in opposite directions

x (t + h) = x (t) + ˙x (t) h +

x (t − h) = x (t) − ˙x (t) h +

1
2
1
2

1
¨x (t) h2 +
6
¨x (t) h2 − 1
6

˙¨x (t) h3 + O

˙¨x (t) h3 + O

h4
(cid:0)
h4
(cid:0)

(cid:1)

(cid:1)

Adding these two expansions gives Eq. (2), with all odd-order terms eliminated, and a resultant truncation error of
O

. Now let us perform a similar derivation for half-step velocities, which gives
(cid:1)

h4

(cid:0)

v

t +

(cid:18)

h
2 (cid:19)

= 2v

t − h
(cid:18)

2 (cid:19)

− v

t − 3h
(cid:18)

2 (cid:19)

+ ¨v

t − h
(cid:18)

2 (cid:19)

h2 + O

h4
(cid:0)

(cid:1)

and by substituting

we get a fourth order ﬁnite diﬀerence equation

¨v

t − h
(cid:18)

2 (cid:19)

=

1
h

[¨x (t) − ¨x (t − h)] + O

h2
(cid:0)

(cid:1)

vn+ 1

2

= 2vn− 1

2

− vn− 3

2

+ (an−1 − an) h2

It is readily seen that any trajectory produced by the leapfrog scheme (3a,b) satisﬁes this equation, so it is an exact
analog of the St¨ormer formula (2) for velocities. We see, therefore, that the order of approximation of the leapfrog

3

(6)

(7)

(8a)

(8b)

(9)

(10)

(11)

scheme is four rather than three, both for coordinates and velocities. Eqs. (2) and (11) are common fourth order
predictors which use values from several time steps to reduce the truncation error. The fact that the same trajectory
can be generated by lower-order Eqs. (3a,b) results from a fortunate cancelation of errors.

Note, however, that Eqs. (2), (11) and Eqs. (3a,b) are not equivalent. Eq. (11) provides a leapfrog solution
only if initial conditions match Eq. (3a). Note also, that Eqs. (2) and (11) are coupled only via accelerations - no
relationship between coordinates and velocities is implied a priori. Therefore, starting from arbitrary initial conditions
a completely non-leapfrog trajectory may be produced. The relationship between the general solutions of Eqs. (2),
(11) and (3a,b) presents an interesting question, but it is beyond the scope of the present paper.

B. Accumulation of Errors Along A Leapfrog Trajectory

The truncation error is in fact only a part of the story because single-step errors can accumulate thus producing
so called global errors [5,6], which are relevant for assessment of an algorithm and which, as noted above, exhibit a
h2
growth. Let us check how, in the case of a leapfrog trajectory, truncation errors accumulate for
characteristic O
conventional testing procedures.
(cid:0)

(cid:1)

Suppose we have a trajectory of duration T ; we compute some parameter Q [x (ti) , v (ti)] at M time steps i = 1, ..., M

and evaluate

Here Qa
overbar here and below denotes time averaging. Now we have

0 (ti) is the corresponding analytical value computed for an exact trajectory starting from the initial state. An

∆Q2 =

∆Q2

i =

[Q (ti) − Qa

2
0 (ti)]

1
M

M

Xi=1

1
M

M

Xi=1

∆Qi =

∆∆Qj

i

Xj=0

where

∆∆Qj =

∆Qj+1 − ∆Qj = Q (tj+1) − Q (tj) − Qa
j (tj+1) − Q (tj)
+

Qa

0 (tj+1) + Qa

0 (tj) =
0 (tj+1) − Qa

− [Qa

0 (tj)]

Q (tj+1) − Qa
(cid:2)

j (tj+1)
(cid:3)

(cid:2)

(cid:3)

where Qa
j (t) refers to the analytical trajectory starting from jth state in the numerical trajectory. Here only the ﬁrst
bracket in the r.h.s. is contributed by the local truncation error while the rest results from deviations of analytical
solutions corresponding to diﬀerent initial conditions. Discarding higher order terms one can rewrite Eq. (14) as

∆∆Qj ≈ αjhm +

˙Qa

j (tj) − ˙Qa

h

h

0 (tj)
i

where αj are constant coeﬃcients and, for the leapfrog scheme, m = 4.

In the general case both terms in the r.h.s. of Eq. (15) must be taken into consideration. Let us check the case
j+1 (t)

when Q is just the coordinate and so Eq.(12) estimates deviation from an analytical trajectory. Let xa
be two analytical solutions of Eq. (1) with boundary conditions

j (t) and xa

j (t − h) = xj−1;
xa
xa
j (t) = xj
xa
j+1 (t + h) = xj+1

xa
j+1 (t) = xj;

where xj−1, xj and xj+1 are successive points on a numerical trajectory. We have

j+1 (t + h) = xj + ˙xa
xa

j+1 (t) h + f (xj)

a
+ ˙¨x
j+1 (t)

a
+ ¨¨x
j+1 (t)

j (t − h) = xj − ˙xa
xa

j (t) h + f (xj )

− ˙¨x

a
j (t)

a
+ ¨¨x
j (t)

h2
2

h2
2

h3
6

h3
6

h4
24
h4
24

+ O

+ O

h5

h5

(cid:0)

(cid:0)

(cid:1)

(cid:1)

Taking into account that xj−1, xj and xj+1 are related by Eq. (2) summation of Eqs (17a,b) yields

j+1 (t) − ˙xa
˙xa

j (t)
(cid:3)

h +

˙¨x
h

(cid:2)

a

j+1 (t) − ˙¨x

a
j (t)

a

j+1 (t) + ¨¨x

a
j (t)

h4
24

i

+ O

= 0

h5
(cid:0)

(cid:1)

h3
6

i

+

¨¨x
h

4

(12)

(13)

(14)

(15)

(16a)
(16b)

(17a)

(17b)

(18)

Thus, except for the special case ˙xa

j+1 (t) ≡ ˙xa

j (t) we have

j+1 (t) − ˙xa
˙xa

j (t) = O

h3
(cid:0)

(cid:1)

Assuming that xa (t) are smooth enough, relation (19) can be continued over a ﬁnite time interval and we may write

j (tj) − ˙xa
˙xa

0 (tj) =

k+1 (tj) − ˙xa
˙xa

βkh3 = tjβ (tj) h2

j

Xk=0 (cid:2)

j

≈

Xk=0

k (tj)
(cid:3)

(cid:1)

(cid:1)

h2
(cid:0)

h4
(cid:0)

where βk are constant coeﬃcients and β (tj) results from averaging over interval (0, tj) for a suﬃciently small step
h3
size. Thus in Eq. (15) the second term appears to be O
and it dominates over the truncation error given by
the ﬁrst term. Now, by performing the summation in Eq.(13) similarly to Eq. (20), we see that the deviation of the
(cid:0)
leapfrog trajectory from an analytical solution must be of the order of O
in agreement with usual conclusions
[7]. We see, therefore, that the square growth of the deviation of the coordinates from an analytical trajectory has
h4
a more complicated origin than the simple accumulation of truncation errors and it does not contradict the O
truncation error of the algorithm.
(cid:0)

(cid:1)
Now let us consider the case when Q is the total energy. For any analytical solution its time derivative is zero and
. The same result is obtained with the average total energy instead of the
∆∆Ej in Eq. (15) appears to be O
analytical value in Eq. (12). Summation in Eq. (13) now gives the global error on the order of O
, that is one
(cid:1)
order higher than the common conclusion [5,14]. There is one complication, however, which was missed in the above
(cid:1)
derivations. We tentatively assumed in Eq. (14) that for any state on a numerical trajectory one can ﬁnd a reference
analytical solution passing through this state. For the next-step total energy to deviate as O
both coordinates
and velocities must be within O
of this reference trajectory, which, in turn, requires that it pass through both
(xn, xn−1) and (vn−1/2, vn−3/2) according to Eqs. (2) and (11), respectively. However, since Eq. (1) is only of second
order, such an analytical solution does not necessarily exist. In the general case, we have two diﬀerent analytical
trajectories corresponding to coordinates and velocities and the overall single-step error in the total energy has a
contribution from incoherence between these trajectories. On the other hand, if we use as a reference an analytical
h2
trajectory passing through a leapfrog state or a velocity Verlet state we obtain O
global error, but this is only an upper estimate because it does not take into account the cancelation of local errors
(cid:0)
(cid:1)
which allows solutions of Eqs. (3a,b) to ﬁt higher order equations (2) and (11). We conclude, therefore, that the
global error in the total energy for a leapfrog trajectory must be between O
, but it may depend upon
the speciﬁc properties of Eq. (1). That is why the order of global errors in this case cannot be estimated analytically
(cid:1)
a priori, and should rather be measured numerically. We will see in the next section, however, that this appears
diﬃcult.

single-step deviation and O

h3
(cid:0)

h4
(cid:0)

h3
(cid:0)

h4
(cid:0)

h2
(cid:0)

and O

h3

(cid:0)

(cid:1)

(cid:1)

(cid:1)

(cid:1)

C. Eﬀects of Interpolations of Kinetic Energy

We are going to show here that the common approach to testing energy conservation in molecular dynamics in the
case of the leapfrog scheme in fact fails to evaluate the true error of the algorithm because of a dominating contribution
of additional interpolations necessary to compute on-step kinetic energies. Following many previous studies, we ﬁrst
consider a simple harmonic oscillator as a model case suitable for analytical treatment. This simple model appears
to have a signiﬁcant predictive power because the fastest motions in real systems are nearly harmonic. We will check
this on a more realistic example of protein dynamics.

Consider an oscillator with the Hamiltonian

and the leapfrog equations of motion

H =

1
2

˙x2 + ω2x2
(cid:0)

(cid:1)

vn+ 1

2

2 = −ω2xnh
− vn− 1
xn+1 − xn = vn+ 1
2 h

It is known that these ﬁnite diﬀerence equations have an analog of the total energy [2]. By multiplying Eq. (22a) by
(vn+1/2 + vn−1/2) with simple algebra one obtains

1
2 (cid:16)

v2
n+ 1
2

+ ω2xnxn+1

=

1
2 (cid:16)

v2
n− 1
2

(cid:17)

+ ω2xn−1xn

= ε1

(cid:17)

5

(19)

(20)

(21)

(22a)

(22b)

(23)

Similarly, by multiplying Eq (22b) by (xn+1 + xn) we obtain

1
2 (cid:16)

vn− 1

2

vn+ 1

2

+ ω2x2
n

=

vn− 3

2

vn− 1

2

+ ω2x2

n−1

= ε2

(cid:17)

1
2 (cid:16)

(cid:17)

and it is easy to check that ε1 = ε2 = ε. Thus, there is a quantity with the dimension of energy which is exactly
conserved along the numerical trajectory. In the general case a numerical “ﬁrst integral” analogous to ε does not exist,
but it is very useful in analytical derivations and gives the possibility to reveal certain qualitative features intrinsic
in the common approaches to the estimation of the on-step total energy. Consider the most common approximation
of the on-step total energy for the leapfrog scheme

En

lf =

1
2 (cid:20)

1
2 (cid:16)

v2
n− 1
2

+ v2

n+ 1

+ ω2x2

n(cid:21)

2 (cid:17)

= ε +

Un

τ 2
2

where τ = ωh is the reduced step size. Here we made a substitution of Eqs. (22a) and (24) and denoted potential
energy as Un. As expected, the total energy is not constant and it ﬂuctuates with a small amplitude on the order of
. The relative ﬂuctuation, sometimes used as a convenient indicator of the accuracy of the trajectory, is simply
O

τ 2

(cid:0)

(cid:1)

qlf =

D [Elf ]
D [U ]

=

τ 2
2

where D [ ] denotes the operator of variance. The ﬂuctuating term in Eq. (25) is usually used to check for the accuracy
and stability of a computed trajectory. One can note, however, that the analytical form of this term is somewhat
suspicious. Namely, it could have been expected that a numerical ﬂuctuation of an analytically constant value has
a more complicated form than just a scaled oscillation of the potential energy. In order to make clear the origin of
this oscillation let us consider the related value for an exact analytical trajectory of an oscillator with x (0) = 0 and
v (0) = ω. We have

Ea

lf =

ω2
2 (cid:26)

1
2 (cid:20)

cos2 ω

t − h
(cid:18)

2 (cid:19)

+ cos2 ω

t +

(cid:18)

h
2 (cid:19)(cid:21)

+ sin2 ωt

= Ea (cid:18)

(cid:27)

1 − τ 2
4 (cid:19)

τ 2
2

+

U (t) + O

h4
(cid:0)

(cid:1)

(27)

where Ea and U (t) are analytical total and potential energies, respectively. Comparison of this result with Eq. (25)
shows that the O
oscillation is exactly same for the numerical trajectory as for the analytical one suggesting
that it is introduced by the interpolation and has no relation to the accuracy of the trajectory. In order to validate
this suggestion let us check what one gets when more accurate interpolation formulas are employed. Consider the
interpolation

τ 2
(cid:0)

(cid:1)

where Kn−1/2 denotes the half-step kinetic energy. It is not diﬃcult to check that when applied to an exact trajectory
τ 3
it gives an O
oscillation around the correct total energy. For the leapfrog solution, derivations similar to that
used for Eq. (25) result in
(cid:0)

(cid:1)

Kn =

3Kn+ 1

2

+ 6Kn− 1

2

1
8 (cid:16)

− Kn− 3

+ O

2 (cid:17)

h3
(cid:0)

(cid:1)

En

3 = ε

1 +

(cid:18)

τ 2
4 (cid:19)

+

τ 3
2

ωxnvn− 1

2

Kn− 1

2

− τ 4
8

Again we see that the amplitude of the oscillation scales as the order of the interpolation. Note that its phase is
shifted by π/2 from that of Elf . For the following discussion we need one more interpolation

which gives

Kn =

15Kn+ 1

2

+ 45Kn− 1

2

− 15Kn− 3

2

+ 3Kn− 5

+ O

2 (cid:17)

h4
(cid:0)

(cid:1)

1
48 (cid:16)

En

4 = ε

1 +

(cid:18)

τ 2
2 (cid:19)

+

τ 4
16 (cid:16)

5Kn− 1

2

+ Kn− 3

2

− 4Un−1

(cid:17)

with O
means that it is shifted by π from Elf .

(cid:1)

τ 4
(cid:0)

oscillation, as expected. E4 oscillates in phase with the kinetic rather than with potential energy, which

(24)

(25)

(26)

(28)

(29)

(30)

(31)

6

One might conclude that in this special case the total energy is conserved exactly with any time step size. We
will later see, however, that actually the leapfrog trajectory deviates from an exact constant energy hypersurface,
but these deviations are regular and they appear to be compensated by the approximation errors of the interpolation
formulas. This occasional cancelation certainly results from the fundamental solutions of the ﬁnite diﬀerence equation
(2) being sine and cosine functions [2], but it is rather instructive because it demonstrates that interpolations can
produce very misleading eﬀects. The most interesting for us, however, is the form of the oscillations produced by the
interpolation formulas. We will now see that qualitatively similar behavior is observed in real simulations.

Figs. 1-3 present a 50 fsec interval of a molecular dynamics trajectory computed with three diﬀerent time steps:
0.5 fsec, 0.1 fsec and 0.05 fsec, respectively. The system modeled consists of an immunoglobulin binding domain
of streptococcal protein G [19] which is a 56 residue α/β protein subunit (ﬁle 1pgb in the Protein Database [20])
with 24 bound water molecules presented in the crystal structure. All hydrogens are considered explicitly thus giving
927 atoms. The trajectory was computed without constraints upon the protein structure and with TIP3P water
molecules held rigid. Other details of the simulation protocol are given in Section II D below. In such a system the
fastest oscillations are due to bond stretching of hydrogens with a period of about 10 fsec, which is clear in the time
proﬁles of the potential energy shown in Figs. 1a-3a. Figures 1b-3b show the time proﬁle of the total energy computed
by Eq. (25). Note that according to Eqs. (25), (29) and (31) the amplitude of the oscillation of the total energy grows
with the frequency, which means that, in systems of many oscillators, interpolations tend to ﬁlter lower frequencies.
It is not surprising therefore that in Figs. 1b-3b the highest frequency strongly dominates compared with Figs. 1a-3a.
Note, however, that in all three ﬁgures Elf oscillation has exactly the same phase as that of the potential energy.

The proﬁles of the potential energy in Figs. 1a - 3a are indistinguishable, which means that with a step size of 0.5
fsec the trajectory is perfectly accurate. In agreement with the simple case considered above the shapes of the proﬁles
of the total energy in Figs. 1b-3b also appear to be indistinguishable, with the amplitude of the oscillation scaled
as the square of the step size. The identity of the three proﬁles in this case is not evident a priori and it is diﬃcult
to explain unless the above observations for an oscillator are not invoked. Thus, despite the simplicity of the model
employed, Eq. (25) very accurately predicts both the growth rate with the step size and the shape of the ﬂuctuation
of the total energy in a much more complex system.

Now consider the time proﬁles of the total energy computed with higher order interpolations. Figs. 1c and 1d
show that both E3 and E4 behave similarly to Elf and as predicted by Eqs (29) and (31). Note that the oscillations
of E3 and E4 are shifted by π/2 and π, respectively, from Elf in Fig. 1b. With a reduced step size, however, both
E3 and E4 reveal some new features. Similarly to Elf the E3 oscillation in Figs. 2c and 3c remains dominated by
high-frequency oscillation, although its overall proﬁle slightly changes. It is easy to see that the amplitude of the
and that the change in the proﬁle is likely to be due to an underlying
high-frequency oscillation scales as O
. Finally, for E4 oscillation in Figs. 2d and 3d we observe a proﬁle of the
ﬂuctuation which scales slower than O
ﬂuctuation qualitatively diﬀerent from those in Figs. 1(a-d). The amplitude of the oscillation in Fig. 1d reduced by
factors of 625 and 104 in Figs. 2d and 3d, respectively, would present a negligible part of the remaining ﬂuctuation
and that is why this hidden proﬁle is revealed. This residual deviation of the total energy can be attributed to the
interpolation-free error of the trajectory itself. Comparison of Figs. 2d and 3d shows that the amplitude of the
, as we expected. If scaled back to the step size
remaining ﬂuctuation scales faster than O
of 0.5 fsec used in Fig.1 this ﬂuctuation can account for only a few percent of the whole amplitude, which indicates
(cid:1)
that the total energy is really much better conserved than it appears to be. It is interesting that the high-frequency
harmonic oscillation that dominates in Figs.1 (b-d) essentially disappears in Figs. 2d and 3d suggesting that harmonic
motions in the system really do not contribute to the apparent ﬂuctuation of the total energy, which is produced by
slower anharmonic motions.

but slower than O

h3
h3
(cid:1)
(cid:0)
(cid:1)
(cid:0)

h3
(cid:0)

h2

(cid:1)

(cid:0)

Let us now summarize the above results. In the case of an oscillator, ﬂuctuations are produced by interpolations only,
their phases and amplitudes are related to those of the kinetic and potential energies in a simple way. For a realistic
microcanonical ensemble with all common types of interactions, the total energy behaves similarly for the second and
third order interpolations, as well as with the fourth order one at a moderately small step size. For an extremely small
step size, however, a qualitative diﬀerence is observed between the fourth and lower order interpolations. All this
agrees very well with the global error in the total energy between O
local
error in the trajectory. Although the trajectory contribution can be revealed by interpolations of the fourth and higher
orders, with practical time step values, the interpolation errors always dominate overwhelmingly. Taking into account
that, because of the rapid growth of higher derivatives on repulsive walls of non- bonded potentials, higher order
interpolations tend to be less accurate in “less harmonic” systems, we are obliged to conclude that straightforward
interpolations in principle cannot adequately evaluate instantaneous on-step velocities and kinetic energies in the case
of the leapfrog scheme. This approach, therefore, should not be used for assessing the accuracy of the algorithm.

corresponding to O

τ 4
(cid:0)

τ 2
(cid:0)

τ 3
(cid:0)

and O

(cid:1)

(cid:1)

(cid:1)

7

D. Alternative Strategy for Checking Energy Conservation

In this section we consider how numerical tests with microcanonical ensembles can be arranged so that the real
accuracy of conservation of the total energy can be assessed. The main idea is simple. Note that all interpolations of
the kinetic energy such as Eqs. (28) and (30) give the same average kinetic energy. For any suﬃciently long analytical
trajectory these interpolations, upon averaging, result in a correct average kinetic energy and, consequently, exact
total energy. This property does not depend upon the speciﬁc form of the Hamiltonian or the number of degrees
of freedom. Note, for example, that in Figs. 1-3 with the same step size, Elf , E3 and E4 oscillate around the
same average. At the same time there is a distinguishable diﬀerence between the averages for the three given values
of the step size. We see, therefore, that unlike instantaneous energies, their time averages appear to be free from
interpolation errors and they represent adequate indicators of the accuracy of the energy conservation.

Suppose we know the analytical value of the total energy. We could then repeatedly calculate a long enough test
trajectory with gradually growing time steps and compare the average total energy with the analytical one. As long
as these two values are close to each other, the computed trajectory remains close to a correct hypersurface in phase
space. Instead of the unknown analytical total energy, we can use that obtained for the same trajectory with a very
small step size. It is important to make sure, however, that the test trajectory starts from the same state on a ﬁxed
constant-energy hypersurface with each step size, which is not automatic in the case of the leapfrog scheme. Let us
consider the implementation of this testing procedure for a harmonic oscillator.

By using Eqs. (22a) and (24) one can derive an identity

Denoting

we obtain

Un ≡ ε
2

+

1
2 (cid:20)

Un − 1

2 (cid:16)

Kn− 1

2 + Kn+ 1

2

+

Un

τ 4
4

(cid:17)(cid:21)

δn = Un − 1

Kn− 1

2

+ Kn+ 1

2 (cid:17)

2 (cid:16)

Un =

(ε + δn)

2

1
1 − τ 2
4
(cid:0)

(cid:1)

It can be shown by a straightforward solution of the ﬁnite diﬀerence equations (22a,b), that within the time step
range of stability of an oscillator ¯U = ¯K. Therefore δn presents an oscillation around a zero average and we have

ε
1 − τ 2
4
(cid:0)
Let us now check how accurately the numerical average total energy approximates exact values, that is total energies
corresponding to constant-energy hypersurfaces sampled by a leapfrog trajectory. Consider an analytical trajectory
passing through a leapfrog state

¯Elf = 2 ¯U =

. We have

(35)

(cid:1)

vn−1/2, xn
(cid:0)
ε = Ea (cid:26)

(cid:1)

sin2 ωt + cos ω

t − h
(cid:18)

2 (cid:19) (cid:20)

cos ω

t − h
(cid:18)

2 (cid:19)

− τ sin ωt

(cid:21)(cid:27)

From Eqs. (35) and (36) by using a Taylor series expansion, we obtain

Ea
¯Elf

= 1 +

τ 3
48

(cid:20)

+ O(τ 5)
(cid:21)

sin 2ωt −

τ 4
96

(cid:20)

+ O(τ 6)
(cid:21)

cos 2ωt − τ 4
96

− τ 6
64

+ O(τ 8)

The r.h.s. of Eq. (37) involves two qualitatively diﬀerent types of deviations. The ﬁrst depends upon the current
phase of the oscillation and it in fact presents the true measure of the energy conservation along the trajectory: as long
as the phase-dependent terms in Eq. (37) are small, all states on the trajectory belong, or are close, to the same exact
constant energy hypersurface. When these terms become too large, successive leapfrog states correspond to diﬀerent
hypersurfaces, but the corresponding analytical total energies oscillate around a certain value. The second type of
deviation is phase-independent and it is presented by the fourth and sixth-order terms. Because of this deviation,
with large step size all leapfrog states appear to belong to hypersurfaces of a systematically lower energy than the
computed average value, which means that they are no longer sampled ergodically. The magnitudes of both these

8

(32)

(33)

(34)

(36)

(37)

types of deviations can be easily evaluated, and it turns out that for τ <∼ 1.1 the ﬂuctuating part dominates, while
above this level the phase-independent contribution rapidly becomes overwhelming due to its sixth order growth.

Now consider what one would observe in the numerical tests outlined above. It can be seen from Eq. (35) that by
simply increasing the step size one obtains an O(τ ) regular growth of ¯U and ¯Elf . It is clear, however, that, in this
case, the starting leapfrog state in phase space is eﬀectively moved from one constant energy hypersurface to another,
which results in a regular drift of averages. In order to remove this drift, the trajectory should start from the same
hypersurface, that is from x0 and v−1/2 corresponding to the same analytical trajectory. It is easy to see that this
case is also described by Eq. (37) if it is read in an opposite sense. Namely, now Ea and the phase of the oscillating
terms on the right are constant because they correspond to the initial constant energy hypersurface and the phase of
the starting state. Equation (37) therefore describes the step size dependence of Elf which beyond τ ≈ 1.1 should
rapidly deviate upward from its zero step size limit. It turns out that this estimate holds quite well for representative
molecular models as well, which is illustrated by Fig. 4.

This ﬁgure presents an example of application of the proposed test to protein dynamics. The simulations were made
by AMBER molecular modeling program [21] with AMBER94 force ﬁeld [22]. The system considered was same as in
Figs.1-3, that is with only water bond lengths and bond angles constrained by the SHAKE algorithm [23]. Initial data
for these tests were prepared as follows. The equilibration was more or less standard and included minimization of the
crystal structure followed by a 12.5 psec run starting from Maxwell distribution at 300K with periodic temperature
control and a step size of 0.5 fsec. After that the step size was reduced to 0.25 fsec and a short trajectory of 150 fsec
was calculated, with the ﬁnal part stored and used in place of an analytical trajectory for generating initial data. The
last point was used as the starting state for a 10 psec test trajectory which was computed with gradually growing
step sizes and half-step velocities taken at appropriate time intervals from coordinates.

In order to apply our test to a real molecular system we should also take into account that, since in common empirical
potentials the absolute value of the potential energy involves many non-harmonic contributions which always remain
far from zero, it is no longer sensible to compare the deviations with the absolute energy values. An appropriate
natural scale, however, is given by the variance of the instantaneous potential energy over the test trajectory. One
may reasonably consider for ¯U the deviation of ±0.1D [U ], for instance, as an acceptable level of accuracy. Note that
in the oscillator case this gives approximately same criterion as above. The deviation of Elf should be two times
larger because it involves a similar contribution from the kinetic energy.

Figure 4 (a) shows the step size dependence of D [U ]. The dotted line in this ﬁgure shows the low step size level used
to plot the corresponding bands of acceptable accuracy in Figs. 4 (b) and (c). As seen in Fig. 4(b) the ﬂuctuation
of ¯U remains within the band ±0.1D [U ] up to a time step of 1.7 fsec. These ﬂuctuations are relatively large because
they are aﬀected by rare conformational transitions which cannot be averaged during a test trajectory. Oppositely,
Elf shown in Fig. 4 (c) grows steadily, but its deviation also remains within the band of acceptable accuracy up to
the same step size. Assuming that this value corresponds to τ ≈ 1.1 one obtains a frequency of 3400 cm−1, that is
exactly that of bond stretching of peptide hydrogens. The whole spectrum of bond stretching modes of hydrogens
covers the range 3000–3700 cm−1, which corresponds to characteristic step sizes in the range 1.6–1.9 fsec. We may
conclude, therefore, that Fig. 4 demonstrates a good agreement with the single oscillator model considered above.

At this point it is convenient to compare our step size estimates with the common recommendations. Although
no strict rules exist, it is usually considered that the computed trajectory provides an acceptably accurate sampling
when the relative ﬂuctuation qlf given by Eq. (26) is less than 0.1, which gives τ <∼ 0.4 , i.e. at least 14 time steps
per a single cycle of the oscillation. Our estimates show that actually this level of accuracy is reached with an almost
three times larger time step, although in this case qlf is already so large that the energy conservation seems to be
lost. In practice, however, the above recommendations are almost never respected and most often molecular dynamics
trajectories are computed with less than 10, or even less than 5 steps, per the shortest cycle [24]. This practice thus
appears to be well justiﬁed and it is clear from Fig. 4 that the leapfrog trajectory really manages to hold to a constant
energy hypersurface with somewhat larger time steps than commonly recommended.

E. Leapfrog Scheme Versus Its Relatives

In this section we will demonstrate that, contrary to the conventional point of view the leapfrog scheme exhibits

exceptional properties compared with the other algorithms of this group.

The results obtained in Section II C above obviously are not applicable to the velocity Verlet and Beeman algorithms,
h3
Eqs. (4-5). In these cases, interpolations appear to be built into the algorithms, which makes them only O
accurate in velocities. (Note that interpolation (7) has the same order of truncation as that in Eq. (6)). Oscillations
(cid:1)
(cid:0)
of the instantaneous total energy result from the algorithms themselves and they grow simply as O
in agreement
with the order of the truncation error. Let us look more thoroughly at the total energy computed by the velocity

h2
(cid:0)

(cid:1)

9

Verlet integrator. Similarly to Eq.(25) we obtain for the oscillator

En

vv =

1
2 (cid:20)

1
4 (cid:16)

vn− 1

2 + vn+ 1

2

2

(cid:17)

+ ω2x2

n(cid:21)

= ε +

Un

τ 2
4

(38)

We see that Evv behaves similarly to Elf with two times smaller amplitude of the oscillation and always Evv < Elf ,
which means that, in the case of velocity Verlet, the temperature estimated for the same trajectory is somewhat lower.
In real simulations qvv is normally smaller by a factor of 0.5-0.7 and the corresponding temperature can be lower
by as much as a few degrees. The origin of these diﬀerences is clear from the previous discussion and it is not very
interesting.

Since ¯Elf and ¯Evv are O

diﬀerent it is clear that ¯Evv gives one order less accurate estimate of the total energy
of the analytical trajectory approximated by leapfrog states. The same order of approximation is obtained if we
consider the trajectories passing through velocity Verlet states. In this case the analytical energies are given simply
by Eq. (38), and we have

τ 2

(cid:0)

(cid:1)

Ea − ¯Evv =

τ 2
Un − ¯U
4
(cid:0)
which shows that successive states belong to hypersurfaces of O(τ 2) diﬀerent energies. If we consider Ea and Un in
Eq. (39) as constants and ¯Evv and τ as variables we obtain the rate of growth of the deviation of ¯Evv with the step
size. We see that it is on the order of O(τ 2), i.e. similar to the leapfrog scheme with ﬁxed ε according to Eq. (35).
All these derivations can be readily reproduced for Beeman and the original St¨ormer algorithms which both deviate
from their starting hypersurfaces as O(τ 2).

(39)

(cid:1)

The above results can be summarized as follows. Consider a numerical trajectory of an oscillator in phase space.
It may be represented by St¨ormer-Verlet states (xn, xn−1), velocity Verlet states (xn, vn) or by leapfrog states
(xn, vn−1/2). According to Eq. (37), the leapfrog states sample from constant energy hypersurfaces which are O(τ 3)
close to each other, while in the former two cases a broader O(τ 2) spectrum of energies is covered. In this sense one
can say that the leapfrog trajectory presents the most accurate sampling among the three representations.

III. CONCLUSIONS

The results presented in the paper shed some light upon the long-standing confusion involved in the conventional
interpretation of the common algorithms of the classical molecular dynamics. The main practical result is a new
simple testing scheme for energy conservation, which gives a better estimate of the quality of leapfrog trajectories. It
is shown that the leapfrog trajectories provide accurate sampling in phase space with large time step values, when the
apparent total energy obtained by routine interpolations is no longer conserved. This explains the recognized quality
of thermodynamic averages at large step size. The new testing scheme should be particularly useful for studying the
time step limitations in various molecular models appearing in internal coordinate molecular dynamics simulations of
polymers [25].

[1] L. Verlet, Computer “experiments” on classical ﬂuids. 1: Thermodynamic properties of Lennard-Jones molecules, Phys.

Rev. 159, 98 (1967).

[2] R. W. Hockney and J. W. Eastwood, Computer Simulation Using Particles (McGraw-Hill, New-York, 1981).
[3] W. C. Swope, H. C. Andersen, P. H. Berens, and K. R. Wilson, A computer simulation method for the calculation of
equilibrium constants for the formation of physical clusters of molecules: Application to small water clusters, J. Chem.
Phys. 76, 637 (1982).

[4] D. Beeman, Some multistep methods for use in molecular dynamics calculations, J. Comput. Phys. 20, 130 (1976).
[5] M. P. Allen and D. J. Tildesley, Computer Simulation of Liquids (Clarendon Press, Oxford, 1987).
[6] J. M. Haile, Molecular Dynamics Simulations: Elementary Methods (Wiley-Interscience, New York, 1992).
[7] G. D. Venneri and W. G. Hoover, Simple exact test for well-known molecular dynamics algorithms, J. Comput. Phys. 73,

[8] C. W. Gear, Numerical Initial Value Problems in Ordinary Diﬀerential Equations (Prentice-Hall, Engelwood Cliﬀs, NJ,

486 (1987).

1971).

10

[9] M. E. Tuckerman, B. J. Berne, and G. J. Martyna, Reversible multiple time scale molecular dynamics, J. Chem. Phys. 97,

[10] S. Toxvaerd, Comment on: Reversible multiple time scale molecular dynamics, J. Chem. Phys. 99, 2277 (1993).
[11] A. R. Janzen and J. W. Leech, Periodic multistep methods in molecular dynamics, Comput. Phys. Commun. 32, 349

1990 (1992).

(1984).

[12] S. P. Auerbach and A. Friedman, Long-time behaviour of numerically computed orbits: Small and intermediate timestep

analysis of one-dimensional systems, J. Comput. Phys. 93, 171 (1991).

[13] S. Toxvaerd, Molecular dynamics at constant temperature and pressure, Phys. Rev. E 47, 343 (1993).
[14] W. F. van Gunsteren and H. J. C. Berendsen, Algorithms for macromolecular dynamics and constraint dynamics, Mol.

Phys. 34, 1311 (1977).

[15] D. MacGowan and D. M. Heyes, Large timesteps in molecular dynamics simulations, Mol. Simul. 1, 277 (1988).
[16] D. Fincham, Choice of time step in molecular dynamics simulations, Comput. Phys. Commun. 40, 263 (1986).
[17] M. E. Tuckerman, B. J. Berne, and G. J. Martyna, Reply to comment on: Reversible multiple time scale molecular

dynamics, J. Chem. Phys. 99, 2278 (1993).

[18] P. M. Rodger, On the accuracy of some common molecular dynamics algorithms, Mol. Simul. 3, 263 (1989).
[19] T. Gallagher, P. Alexander, P. Bryan, and G. L. Gilliland, Two crystal structures of the B1 immunoglobulin-binding

domain of streptococcal protein G and comparison with NMR, Biochemistry 33, 4721 (1994).

[20] F. C. Bernstein, T. F. Koetzle, G. J. B. Williams, E. F. Meyer, M. D. Brice, J. R. Rodgers, O. Kennard, T. Shimanouchi,
and M. Tasumi, The protein data bank: A computer-based archival ﬁle for macromolecular structures, J. Mol. Biol 112,
535 (1977).

[21] D. A. Pearlman, D. A. Case, J. C. Caldwell, W. S. Ross, T. E. Cheatham, III, D. M. Ferguson, G. L. Seibel, U. C. Singh,

P. K. Weiner, and P. A. Kollman, AMBER 4.1 (University of California, San Francisco, 1995).

[22] W. D. Cornell, P. Cieplak, C. I. Bayly, I. R. Gould, K. M. Merz, D. M. Ferguson, D. C. Spellmeyer, T. Fox, J. W. Caldwell,
and P. A. Kollman, A second generation force ﬁeld for the simulation of proteins, nucleic acids and organic molecules, J.
Amer. Chem. Soc. 117, 5179 (1995).

[23] J. P. Ryckaert, G. Ciccotti, and H. J. C. Berendsen, Numerical integration of the Cartesian equations of motion of a system

with constraints: Molecular dynamics of n-alkanes, J. Comput. Phys. 23, 327 (1977).

[24] M. Levitt, Molecular dynamics of native protein. 1: Computer simulation of trajectories, J. Mol. Biol. 168, 595 (1983).
[25] A. K. Mazur, results prepared for publication.

FIG. 1. Time dependence of the potential energy (a) and the total energy (c-d) for an unconstrained protein molecule. All
energies are in kcal/mole. The molecular dynamics trajectory was computed with the leapfrog algorithm and a time step of
0.5 fsec. Three diﬀerent estimates of the total energy for ﬁgures (c)-(d) were obtained with interpolations of second, third and
fourth order, respectively, applied to half-step kinetic energies. The average total energy subtracted from the instantaneous
values in ﬁgures (c)-(d) was 254.68 kcal/mole.

FIG. 2. Same as Fig. 1, but with the molecular dynamics trajectory computed with a time step of 0.1 fsec. The average

total energy in Figs. (c)-(d) was 255.42 kcal/mole.

FIG. 3. Same as Fig. 1, but with molecular dynamics trajectory computed with a time step of 0.05 fsec. The average total

energy in Figs. (c)-(d) was 255.51 kcal/mole.

FIG. 4. Time step dependencies of the potential energy (b), its time variance (a) and the total energy (c) computed over
a 10 psec molecular dynamics trajectory. All energies are in kcal/mole. The dotted lines in ﬁgures (b) and (c) show the
corresponding bands of acceptable deviation deﬁned as described in the text from the low time step limit of variance indicated
by the dotted line in ﬁgure (a).

11

Time (fsec)

20

40

60

80

100

-500

(a)

U

1

(b)

    _
E  -E
 lf

   _
E -E
 3

   _
E -E
 4

-520

-540

-560

-580

0.5

-0.5

-1

0.2

0.1

-0.1

-0.2

-0.3

0.1

-0.1

0.3

(c)

(d)

Time (fsec)

20

40

60

80

100
U

    _
E  -E
 lf

   _
E -E
 3

   _
E -E
 4

   -500

(a)

   -520

   -540

   -560

   -580

  0.04

(b)

  0.02

  -0.02

  -0.04

0.003

(c)

0.002

0.001

-0.001

-0.002

-0.003

0.002

(d)

0.001

-0.001

-0.002

Time (fsec)

20

40

60

80

100
U

    _
E  -E
 lf

   _
E -E
 3

   _
E -E
 4

    -500

(a)

    -520

    -540

    -560

    -580

   0.01

(b)

   -0.01

0.0006

(c)

0.0004

0.0002

-0.0002

-0.0004

-0.0006

0.0004

(d)

0.0002

-0.0002

-0.0004

(a)

(b)

(c)

]

U
D

[

16

16.6

16.4

16.2

15.8

15.6

15.4

-534

-536

-538

-542

-544

-546

-548

E

280

290

285

275

270

_ U

-540

0.5

1

1.5

2

2.5

0.5

1

1.5

2

2.5

0.5

1

1.5

2

2.5

Time step (fsec)

