Gauss-Hermite Approximation Formula

Krzysztof Pomorski
Katedra Fizyki Teoretycznej, University MCS, Lublin, Poland

A multidimesional function y(~r) deﬁned by a sample of points

is approx-
y(~r). The problem is solved by using the Gauss-
imated by a diﬀerentiable function
Hermite folding method developed in the nuclear shell correction method by Strutinsky.

~ri, yi}
{

Abstract

e

1 Introduction

~ri, yi}
{

which represents a measured or hard
Our aim is to approximate a sample of points
to evaluate data by a diﬀerentiable function y(x). We would like to solve this problem using
the Gauss-Hermite folding method which idea was originally proposed by V.M. Strutinsky
[1] and later-on generalized in Ref. [2]. A detailed description of this method may be found
already in text-books, e.g. in Ref. [3]. Having the width of the folding function comparable
with the average distance between xi points in the ith direction one can obtain the folded
function which goes very close to the data points but increasing its width one can also wash
out the ﬁne structure stored in the data. Usually the Strutinsky method was used to realize
the second scope. The parameter of the folding procedure will be determined by requirement
that the integral in the ith direction of the folded function should be the same as the integral
pairs using the trapezium rule. A corresponding Fortran program for
evaluated with
the approximation in the n-dimensional space is listed in Appendix.

xi, yi}

{

2 General folding formulae in the one-dimesional case

distributed uniformly in the interval [a, b]1. To
We consider an ensemble of N points
each point xi corresponds a point yi, and we assume there exists a function y(x) such that:

xi}

{

Let jn(x, x′) be a symmetric function of its arguments (i.e. jn(x, x′) = jn(x′, x)) having

the following properties:

4
0
0
2
 
r
p
A
 
5
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
8
1
0
4
0
4
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

and

Pk(x) =

Pk(x′) jn(x, x′) dx′ ,

1Truly speaking the assumption about the uniform distribution of the points is too strong. It is suﬃcient

to assume that the points xi have to cover the whole interval [a, b] and to be ordered i.e. xi+1 > xi).

(1)

(2)

(3)

yi = y(xi) .

jn(x, x′) dx = 1

+∞

Z−∞

+∞

Z−∞

1

≤

n are the even natural numbers and Pk is an arbitrary polynomial of the order
where k
k. In the following the function jn(x, x′) will be called the folding function of the nth order.
An example of such a folding function can be a combination of the Gauss function and the
Hermite polynomials of argument proportional to
frequently used in the Strutinsky
shell correction method [1, 3]. More detailed description of the Strutinsky folding function
will be given in the next section.

x′

−

x

|

|

With each discrete point (xi, yi), one can associate the function

yi(x) deﬁned by:

yi(x) =

yi δ(x′

xi) jn(x, x′) dx′ ,

e

−

+∞

Z−∞

where δ(x) is the Dirac δ-function, so that

e

yi(x) = yi jn(x, xi) .

Using Eq. (2) it is easy to verify that the integral of the function

yi(x) is

Let us construct the function
xi point

y(x) by summing up all functions

yi(x) corresponding to each

y(x) is an approximation of y(x) if the weights
The Lebesgue theorem says that the function
ωi are determined from the assumption that the integrals of the unfolded and folded functions
are (nearly) equal:
e

e

e

e
The Riemann formula for the integral of the function y(x) between bounds a and b reads:

e

+∞

Z−∞

e

yi(x) dx = yi .

e

e

y(x) =

ωi

yi(x) .

e

N

i=1
X

y(x) dx

y(x) dx =

ωi yi .

+∞

≈

Z−∞

N

i=1
X

y(x) dx = lim
N→∞

y(xi) ∆xi ,

b

Za

b

Za

N

i=1
X

1
2

ωi = ∆xi .

e
y(x) =

yi ∆xi jn(x, xi) .

N

i=1
X

2

e

where ∆xi is set to:

(xi+1 −
with x0 = a and xN +1 = b. Comparing Eqs. (8) and (9) one can see that a reasonable choice
of the weight is

∆xi =

xi−1)

(10)

If the number N of sample points (xi, yi) large enough than the condition (8) will be fullﬁled.

So, ﬁnally the folded function

y(x) is given by

(4)

(5)

(6)

(7)

(8)

(9)

(11)

(12)

3 Gauss-Hermite folding function

Let the folding function jn(x, x′) be a modiﬁed Gauss function

jn(x, x′) =

1
γ√π

exp

x

2

x′

−
γ

fn

)

(cid:19)

(cid:18)

x

x′

−
γ

,

(cid:19)

(−

(cid:18)

where γ is the parameter and fn( x−x′
γ ) is the so called correction polynomial of the order n
determined by the Strutinsky condition (3). In the following we would like to evaluate the
coeﬃcients of the correction polynomial using some properties of the Hermite polynomials
which are orthogonal with the weight equal to the Gauss function.

Let us introduce the variable u = (x

x′)/γ which belongs to the interval (

−∞
−
The smearing function jn(x, x′) and the polynomial Pn(x) (3) can be now written as

, +

).

∞

and

Let us decompose the function Pn

Pn(x) = Pn(x + γ 0)

′(0) .
′(u) into series of the Hermite polynomials Hi(u)

Pn

≡

Now the condition (3) for k = n can be written as

jn(x, x′) =

fn(u) ,

e−u2
γ√π

Pn(x′) = Pn(x

γ u)

−

≡

′(u) ,

Pn

′(u) =

Pn

ai Hi(u) .

n

i=1
X

′(0) =

Pn

′(u)e−u2

Pn

fn(u) du

+∞

1
√π

Z−∞

and inserting the relation (17) one obtains

n

ai

i=1
X

(cid:26)

1
√π

+∞

e−u2

−∞

Z

Hi(u) fn(u) du

Hi(0)

= 0 .

(19)

−

(cid:27)

= 0) what leads to the following

The last equation should be fullﬁled for arbitrary values of ai 6
set of equations
1
√π

e−u2

+∞

−∞

Hi(u) fn(u) du = Hi(0) ,

Z

where i = 0, 2, ..., n. From the other side the correction function fn(u) can be also decom-
posed into series of the Hermite polynomials

fn(u) =

CkHk(u) .

Inserting the above relation to Eq. (20) one obtains

Hi(0) =

Ck

1
√π

n

Xk=1

e−u2

Hi(u) Hk(u) du .

n

Xk=1

+∞

−∞

Z

3

(13)

(14)

(15)

(16)

(17)

(18)

(20)

(21)

(22)

Then using the orthogonality properties of the Hermite polynomials

+∞

−∞

Z

e−u2

Hi(u) Hk(u) du = 2i i! δik ,

one obtains the coeﬃcients of the correction polynomial (21)

The values of the Hermite polynomials at zero-point are

Ci =

Hi(0)

1
2ii!

so

Hi(0) =

2n

(

−

1
1)n(2n
−
0

1)!!

for i = 0 ,
for i = 2n ,
for i = 2n + 1 ,

Ci =

1
1)n (2n−1)!!
2n(2n)!
0

(

−

for i = 0 ,
for i = 2n > 0 ,
for i = 2n + 1 .











C0 = 1

H0 = 1

The ﬁrst few coeﬃcients Ci and the corresponding Hermite polynomials are:

C2 =

1
4

−

C4 = + 1
32

C6 =

1
384

H2(u) = 4u2

2

−

−

H4(u) = 16u4

48u2 + 12

−
and the corresponding correction polynomials have the following form

−

−

H6(u) = 64u6

480u4 + 720u2

120

f0(u) = 1 ,

f2(u) = 3

u2 ,

2 −

8 −

16 −

f4(u) = 15

5

2u2 + 1

2u4 ,

f6(u) = 35

35

8 u2 + 7

4 u4

1

6 u6 ,

−

Finally the function

y(x) approximated by the Gauss-Hermite folding reads:

y(x) =

yi ∆xi exp

1
e
γ√π

N

i=1
X

x

xi

−
γ

2

fn

)

(cid:19)

(cid:18)

x

xi

−
γ

.

(cid:19)

(−

(cid:18)

e

As a rule the smearing parameter γ is arbitrary and it can be diﬀerent at each point xi.
But it should be related to the distance ∆xi between subsequent points if one would like to
approximate the function stored in the mesh of
points. Similarly one has to choose
the γ parameter of the order of the period-length of the ﬁne structure (e.g. shell eﬀects) in
case when one would like to wash out this structure from the function y(x).

xi, yi}

{

4

(23)

(24)

(25)

(26)

(27)

(28)

(29)

data 
appox
exact

)
x
(
n
s

i

 1

 0.8

 0.6

 0.4

 0.2

 0

-0.2

-0.4

-0.6

-0.8

-1

 0

 5

 10

 15

 20

 25

x

Figure 1: The sinus function and its approximation with the 2nd order Gauss-Hermite
smoothing.

4 Multidimensional case

The extension of the formalism described in the previous sections is straightforward. Let
assume that the data points are stored in a m-dimensional array Y [1 : N1, 1 : N2, ..., 1 : Nm]
which corresponds to the ordinates given by the m one-dimensional arrays Xi[1 : Ni], where
i = 1, 2, ..., m. It means that each element of Y [i1, i2, ...., im] corresponds to the coordinate
Xk[ik] with k = 1, 2, ..., m.

The ensemble of the Hermite polynomials Hi(x) forms a complete basis of orthogonal
F (x1, x2, ..., xm) can be

functions in which an arbitrary m-dimensional function F (~r)
expanded

≡

F (x1, x2, ..., xm) =

....

Ci1i2...im Hi1(x1) Hi2(x2) ... Him(xm) .

(30)

∞

∞

∞

i1=0
X

i2=0
X

im=0
X

The same is true for any polynomial Pn(x1, x2, ..., xm) of the order n but in this case the
upper limit of the sums in equation analogous to (30) will be n. It means that the folding
function in the m-dimensional space is simply the product of the m-th one-dimensional
foldings performed in each single direction:

Jn(x1, x′

1; x2, x′

2; ....; xm, x′

m) =

jn(xi, x′

i) .

m

i=1
Y

∞

The folded function

Y (x1, x2, ..., xm) is given by the equation analogous to (12):

Y (x1, x2, ... , xm) =
e

∆xi1

∆xi2 ...

∞

∞

∆xim ·

e

im=0
i1=0
P
P
Y [i1, i2, ... , im] jn(x1, X1[i1]) ... jn(xm, Xm[im]) .

i2=0
P

·

The folding function jn(xi, x′

i) for the Gauss-Hermite smoothing (13) is

jn(xi, x′

i) =

1
γi√π

exp

2

xi −

x′
i
γi (cid:19)

)

fn

xi −

x′
i
γi (cid:19)

(cid:18)

.

(−

(cid:18)

5

(31)

(32)

(33)

The Gaussian width γi can be diﬀerent in each coordinate. The correction polynomial fn
was already given by Eq. (21) and it is tabulated in (28) for n=0,2,4, and 6.

5 Some data illustrating the quality of the method

The second order (n = 2) Gauss-Hermite folding in a four-dimensional space is used. Taking
into account higher order correction polynomials (28) one does not increase signiﬁcantly the
quality of the approximation of the function in the middle of the data region but it would
need a more careful treatment of the problem at the edges. The folding is performed using
the p mesh points closest to the given point in each direction. The tested function are
spanned on 214 points. In addition it is assumed that outside the the data region
xi, yi}
the function which should be folded has a constant value (equal to the value of the ﬁrst or
the last point in the given direction depending from which side of the data region one takes
the data for folding).

{

The data in Table 1 are listed for some values of the smearing parameter γ in order to
see its inﬂuence on the accuracy of the approximation. The cosines function in the four-
dimensional space is chosen as the test function:

Y (x1, x2, x3, x4) = cos(r) ,

(34)

where r =
and n = 1, 2, 3, 4. The upper and lower limit are Ymax = 1 and Ymin =

4 and the equidistant points xn(i)

∈ h−

1 + x2
x2

2 + x2

3 + x2

2π, 2π

for i = 1, 2, ..., 21

i
1 respectively.

p

−

Table 1: The approximation of the four-dimensional cos(r) function by the 2nd order Gauss-
Hermite folding on basis of p = 5 and p = 7 closest to the given points in function of the
smearing parameter γ.

1/γ

0.98
1.00
1.02
1.04
1.06
1.08
1.10

δavr

δmax

δmin
p = 5
0.0530
-0.0296
0.0081
0.0485
-0.0261
0.0072
0.0452
-0.0233
0.0065
0.0428
-0.0210
0.0060
0.0057
0.0414
-0.0192
0.0057 -0.0179 0.0409
0.0411
-0.0171
0.0059

δavr

δmax

δmin
p = 7
0.0030
0.0241
-0.0073
0.0029 -0.0074 0.0242
0.0249
-0.0076
0.0030
0.0260
-0.0080
0.0032
0.0276
-0.0086
0.0035
0.0295
-0.0093
0.0040
0.0320
-0.0102
0.0046

The root mean square deviation

δavr = 

N

i=1{
P





Y [~r(i)]

2

Y [~r(i)]
}

−

N

1
e

−

1/2







(35)

as well as the maximal in plus diﬀerence (δmax) and the minimal in minus one (δmin) are
evaluated for the N = 149057 mesh and inter-mesh points (in the middle) excluding the
points which lie on two outer layers (i.e two ﬁrst or last rows or columns). Such a choice of
the test nodes was made in order to eliminate the inﬂuence of the border condition on the
deviation δavr.

6

Some other examples of the accuracy of the 2nd order Gauss-Hermite approximations are
listed in Table 2. The function written in the ﬁrst column are tabulated at 21 equidistant
points in the each coordinate in the 4-dimensional space in the interval written in the 2nd
column. The smearing parameter γ = 0.93 or γ = 1 is chosen in case of the p = 5 or
p = 7 point basis used when folding, respectively. It is seen in Tables 1 and 2 that in all

Table 2: A few examples of the approximation accuracy in the four-dimensional space.

Function Y
sin(r)/r

Range
2π : 2π -0.2172

Ymin

Ymax
1

−

1 + x2
x2

2 + x2

3 + x2
4

-2 : 2

x4)2

-2 : 2

(x1 ·
x1 ·

x2 ·
x2 ·

x3 ·
x3 ·

x4

-2 : 2

-16

16

0

0

8

256

p
5
7
5
7
5
5
5
7

δavr
0.0011
0.0005
0.0053
0.0013
0.0076
0.0017
0.0014
0.0001

δmin
-0.0029
-0.0012
-0.0218
-0.0017
-0.2491
-0.0191
-0.0180
-0.0017

δmax
0.0128
0.0059
0.0102
0.0014
0.1161
0.0102
0.0180
0.0017

considered cases the root mean square deviation (δavr) is of the order 10−3 or less of the
maximal diﬀerence Ymax −

Ymin between the data points.

6 Summary and conclusions

A new method of the smooth approximation of a function deﬁned on a sample of points
in a multidimensional space is proposed. The folding of the discrete data points using the
Gauss-Hermite method of Strutinsky is performed. Depending on the width of the Gauss
function the folded function can be very close to the approximated data or can give its
average behavior only.

The folded function and all its derivatives are continuous. This signiﬁcantly increases the
range of applicability of the method. Our approximation of the discrete data can be used e.g.
when solving transport equations or other type of equations of motion in a multidimensional
space, what is a frequent problem in economy, meteorology and environment protection
problems as well as in molecular or nuclear dynamics.

The proposed approximation of the data can be also used in the computer graphic art.
It can wash out the ﬁne structure from a photography keeping unchanged its average back-
ground. One can also think about the use of the new folding method when one evaluates
the cross-sections of a multidimensional data which one has e.g. in the X-ray tomography.

References

Phys. A122, (1968) 1.

[1] V.M. Strutinsky, Sov. J. Nucl. Phys. 3, (1966) 449. Nucl. Phys. A95, 420 (1967); Nucl.

[2] S.G. Nilsson, C.F. Tsang, A. Sobiczewski, Z. Szyma´nski, S. Wycech, S. Gustafson, I.L.

Lamm, P. M¨oller, B. Nilsson, Nucl. Phys. A131, (1969) 1.

[3] P. Ring, P. Schuck, The Nuclear Many–Body Problem, Springer–Verlag, New York–

Heidelberg–Berlin, 1980.

7

7 Appendix

The source of the fortran program for the 2nd order Gauss-Hermite approximation:

ghost.f
C−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
C   The 2nd order Gauss−Hermite folding (a la V.M. Strutinsky) of a function 
C   defined on a sample of equidistant points in the n−dimensional space
C−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−− 
      subroutine ghost(nna,npts,xdn,dx,y,yref,gamma,x,fun,dfun)
      parameter (ndim=4,id=2,nid=2*id+1)
      dimension y(npts),xdn(ndim),dx(ndim),x(ndim),dfun(ndim),nna(ndim)
C
C     The data points which should be approximated by the function fun(x) have 
C     to be stored in the main program as the n−dimensional array:
C     dimension y(nna(1),nna(2),....,(nna(ndim)) ,
C     where nna(i) is the number of points related to the x_i coordinate.
C     The total number of points in y is npts=nna(1)*nna(2)*.....*nna(ndim).
C     The equidistant grid beginning at xdn(i) with step dx(i) is assumed 
C     for each coordinate. The value and gradient of the approximated function 
C     in the the point x(ndim) are stored in fun and dfun respectively. 
C     REMARK:  In order to increase the accuracy of the approximation one 
C     preforms the folding of the differences y(i)−yref, where yref is the 
C     function value around which the approximation should be the best.
C     A reasonable choice of yref is the average of the input points i.e.  
C     yref=(sum y(i))/npts. The folding is performed using 2*id+1 points 
C     closest to point x in each direction and gamma is the smearing width.
C     (C) Copr. 2004 Krzysztof Pomorski, email: pomorski@kft.umcs.lublin.pl
C
      dimension f(ndim,nid),df(ndim,nid),fdf(ndim),ni(ndim),nnn(ndim)
      gami=1./gamma
      fun=0.
      nnn(1)=1
      do 2 i=1,ndim
      dfun(i)=0.
      if(i.gt.1) nnn(i)=nnn(i−1)*nna(i−1)
      xx=(x(i)−xdn(i))/dx(i)+1.
      ni(i)=int(xx+0.5)
      fnorm=0.
      do 1 j=1,nid
      t=gami*(xx−(ni(i)+j−id−1))
      gauss=exp(−t**2)
      f(i,j)=gami*gauss*(1.5−t**2)
      fnorm=fnorm+f(i,j)
    1 df(i,j)=gami**2*gauss*(2.*t**3−5.*t)/dx(i)
      do 2 j=1,nid
      f(i,j)=f(i,j)/fnorm
    2 df(i,j)=df(i,j)/fnorm
      nbox=nid**ndim
      do 6 k=1,nbox
      l=1
      ff=1.
      do 3 m=1,ndim
    3 fdf(m)=1.
      icur=k−1
      nn=nid**(ndim−1)
      do 5 i=ndim,1,−1
      j=icur/nn+1
      ff=ff*f(i,j)
      do 4 m=1,ndim
      if(m.eq.i) fdf(m)=fdf(m)*df(i,j)
    4 if(m.ne.i) fdf(m)=fdf(m)*f(i,j)
      l=l+nnn(i)*(min(nna(i),max(1,ni(i)+j−id−1))−1)
      icur=icur−(j−1)*nn
    5 nn=nn/nid
      fun=fun+(y(l)−yref)*ff
      do 6 m=1,ndim
    6 dfun(m)=dfun(m)+(y(l)−yref)*fdf(m)
      fun=fun+yref
      return
      end

8

