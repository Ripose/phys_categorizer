3
0
0
2
 
l
u
J
 
3
2
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
9
1
1
7
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Been Down So Long it Looks Like Up to Me: A Uniﬁed Derivation of Conjugate
Gradient and Variable Metric Minimization

R. A. Hyman, Bridget Doporcyk, John Tetzlaﬀ
Department of Physics, DePaul University, Chicago, IL 60614-3504
(February 2, 2008)

Simple derivations, at a level appropriate for an undergraduate computational physics course, of
the most popular methods for ﬁnding the minimum of a function of many variables are presented
in a uniﬁed manner in the context of a general optimization scheme that emphasizes their essential
similarities. The derivations in this paper encompass the conjugate gradient methods with and
without conditioning, and the variable metric methods. The common variants of these methods
including Fletcher-Reeves, Polak-Ribiere, Davidon-Fletcher-Powell, and Broyden-Fletcher-Goldfarb-
Shanno are described and motivated.

I. INTRODUCTION

You are near the top of a long valley and are meeting your friend at the valley’s lowest point for a picnic. You
could probably see the lowest point just by looking around and could walk right to it. To make things challenging you
have decided to ﬁnd the minimum in the same way that a computer would. First you blind-fold yourself, since the
information that you get from your eyes, which includes the heights of a huge area around your location, would be far
too costly for a computer to calculate. To ﬁnd the lowest point in the valley while blindfolded you would probably
walk down hill, continuously changing your orientation to be always pointing in the direction of steepest descent,
which you can determine with your feet alone. The path you would take is the same path that a ball would take if
velocity was proportional to the force as in Aristotilian dynamics. Regardless, this method is also very costly for a
computer, since it requires determination of the steepest descent direction at every point along one’s trajectory. So
to make your path more closely match what a computer would do you have procured a magic scooter. You control
the initial orientation of the scooter, hop on, and away you go. The scooter takes a straight line path and stops
at the point where to go any farther would take you up hill1. This is almost never the lowest point in the valley.
When the scooter stops you can change its orientation and take another ride. This curious way of going downhill
actually resembles the procedure many computer algorithms use to ﬁnd the minimum of a function of many variables.
Diﬀerent methods vary only in their choice of which way to orient the scooter at each step, and the method by which
the scooter ﬁnds the local minimum along the ray determined by the scooter’s orientation. Finding a minimum along
the length of the ray is the problem of ﬁnding the minimum of a function of one variable. Routines for doing this are
described in several popular texts2. In this paper we focus on the many variables aspect of the problem, the choice
of which way to point the scooter, and in particular those choices that correspond to conjugate gradient and variable
metric minimization.

Conjugate gradient and variable metric (sometimes called quasi-newton) optimization methods are very popular and
successful algorithms for ﬁnding minima of functions of many variables3. In this paper we motivate these optimization
methods, and derive them in a uniﬁed manner in a way that emphasizes their essential similarity. The derivation in this
paper encompasses the conjugate gradient method with and without conditioning, and the variable metric method.
The common variants of these methods including Fletcher-Reeves4, Polak-Ribiere5, Davidon-Fletcher-Powell6, and
Broyden-Fletcher-Goldfarb-Shanno7 are described and motivated. In section II we describe what is wrong with the
steepest descent method. In section III we derive a generalized optimization routine which is the starting point for
all of the algorithms mentioned above. In section IV we take up some convergence proofs which are followed up in
the Appendices. In section V we focus on conjugate gradient routines with and without conditioning and in section
VI we turn to variable metric methods.

II. WHAT’S WRONG WITH STEEPEST DESCENT?

In this section we introduce numerical minimization of a function of many variables and show why the steepest
descent minimization method is not an optimal choice. Consider a function E(x) of m unconstrained real variables
collectively denoted by the m-component vector x. For concreteness you can consider the function to be the energy

1

(2.1)

(2.2)

(2.3)

(2.4)

of a conﬁguration of ions. We seek the position of the ions for which the energy is minimized. As with ﬁnding the
lowest point in a valley, we can think in terms of orienting and moving a single magic scooter but now the scooter
moves in an m-dimensional space in which each point corresponds to a conﬁguration of all of the ions. For example,
if there are two ions labeled by coordinates (x1, y1, z1) and (x2, y2, z2) the scooter moves in the six dimensional space
x = (x1, y1, z1, x2, y2, z2) . In general the n+1 guess for the location of the scooter is determined by

where hn is a vector, diﬀerent for each minimization scheme, that points along the direction the scooter is headed
and λn is a positive scaler that represents how far the scooter moves, in units of |hn|. Once hn is chosen we ﬁnd xn+1
by varying λn to minimize E(xn+1). The minimum is found where the derivative of the energy E with respect to λn
is zero,

xn+1 = xn + λnhn

∂E
∂λn

= ∇E(xn+1) · hn = 0,

∇E(xn+1) · (xn+1 − xn) = 0.

or by multiplying by λn

This result tells us that the gradient, ∇E(xn+1), at the new minimum xn+1 is perpendicular to the descent direction,
xn+1 − xn, that took us to the minimum. This result is easy to visualize. The dot-product of the gradient of the
energy with a particular vector represents the change in energy along that vector. The scooter stops when this is zero
since that indicates that the energy is no longer decreasing in that direction.

Numerical minimization schemes diﬀer in their choice for hn. A naive choice is the steepest decent direction at xn ,

hn = −∇E(xn).

As well described in standard texts3, this choice turns out to be far from optimal since it forces each new decent
direction to be orthogonal to the previous one. The path to the minimum using this method is a series of 90 degree
jogs and it can take many steps of this sort to get close to the true minimum. Consider, for example, a valley with
a long shallow axis and a short steep axis shaped like a canoe or a long wooden stirring spoon. Start the scooter
somewhere away from the long axis. The steepest descent direction will point somewhere between the shortest path
to the long axis, and the direct path to the minimum. Most people assume that the scooter will stop at the long axis
and the next move will be along the long axis to the minimum. But the lowest point along the ray must overshoot
the long axis by some amount for the next steepest descent direction to be 90 degrees from the path just taken. This
is because the energy lost by going parallel to the long axis isn’t overtaken by the gain in going up the steep side until
some distance beyond the long axis. For this reason, the steepest descent path constantly overshoots, taking many
short 90 degree jogs along the long axis on the way to the minimum, when only two steps appear to be necessary.
The way out of this dilemma, adopted by the conjugate gradient and variable metric methods, is to use some other
direction than steepest descent for the descent direction. This is what we turn to in the next section.

III. A UNIVERSAL OPTIMIZATION PROCEDURE

In this section we improve upon the steepest descent method and develop a universal framework for optimization.
The basic idea is to pick a descent direction that has some positive projection onto the steepest descent direction
but also incorporates information about previous moves into our n+1 guess. A natural choice, as we will see below,
for the n+1 guess constructs the direction vector from a linear combination of all previous displacements plus a new
vector vn that incorporates new information about E at xn,

xn+1 = xn + λn

vn +

aj,n(xj − xj−1)

.

(3.1)









For conjugate gradient minimization vn = −∇E(xn). For conjugate gradient with conditioning or variable metric
minimization vn = −Hn∇E(xn) where Hn is an appropriately chosen symmetric matrix called the conditioner if it
is independent of n or the variable metric if it depends on n. The variables λn and aj,n are varied either analytically
or numerically to minimize the function in question. We will minimize E analytically with respect to the aj,n’s. E

n

j=2
X

2

is then a function of the single variable λn and can be minimized numerically using a routine to ﬁnd the minimum
of a function of one variable. Choosing vn and the aj,n beforehand determines hn and is like orienting the scooter.
Determining λn numerically is like taking a scooter ride.

When we take the derivative of the energy E with respect to λn at the point xn+1 and set it to zero, we get Eq.(2.3),
as before, but now ∇E(xn+1) is not the next descent direction so this condition does not constrain us to right angle
turns as was the case for steepest descent minimization.

We get n-1 new conditions when we take the derivative of the energy E with respect to aj,n at the point xn+1 and
set it to zero (In practice it is always clear that we are dealing with the n+1 guess so we have throughout the rest of
this paper suppressed the second index in the aj,n.),

∂E
∂aj

= λn∇E(xn+1) · (xj − xj−1) = 0 2 ≤ j ≤ n.

Divided by λn and combined with Eq.(2.3) we have

∇E(xn+1) · (xj − xj−1) = 0 2 ≤ j ≤ n + 1.

which tells us that the gradient at step n + 1 is orthogonal to all previous displacements. These relations will be a
great aid in simplifying expressions.

We will get back to Eq.(3.2) shortly but ﬁrst we need to express ∇E(xn+1) in terms of the aj’s and known quantities.
To do so we assume an explicit form for E(x). We develop our optimization scheme assuming that our guess for the
minimum is close enough to the true minimum xmin that we can approximate E(x) by its Taylor expansion to second
order around its true minimum.

E(x) = E(xmin) +

(x − xmin) · A · (x − xmin),

1
2

where the ﬁrst order term is zero since we are expanding E(x) around its minimum. The m × m symmetric constant
matrix A is the diadic second derivative of E(x) evaluated at xmin with matrix elements Ai,j = ∂2E(xmin)/∂xi∂xj.
For a unique minimum, A must have only positive eigenvalues.

The quadratic form for the energy Eq.(3.4) allows us to ﬁnd an explicit expression for the gradient

∇E(x) = A · (x − xmin) = (x − xmin) · A.

However, for this to be useful we must express it in such a way that xmin and A do not explicitly appear since they
are unknown. We can get rid of xmin by subtracting the gradients at any two points in conﬁguration space,

∇E(x) − ∇E(y) = A · (x − y) = (x − y) · A.

This is an incredibly useful formula since it allows us to turn any expression with A, which we don’t know, into
quantities we do know as long as we can arrange for A to operate on a displacement. This is the reason why including
previous displacements in our n+1 guess turns out to be the natural way to incorporate information from previous
moves. We now have what we need to manipulate Eq.(3.2) to ﬁnd the n-1 aj’s.

First we use Eq.(3.6) to ﬁnd an explicit expression for ∇E(xn+1) in Eq.(3.2) by setting x = xn+1 and y = xn,

∇E(xn+1) = ∇E(xn) + (xn+1 − xn) · A.

We now use this expression for ∇E(xn+1) in Eq.(3.2) to get, after dividing by λn,

∇E(xn) · (xj − xj−1) + (xn+1 − xn) · A · (xj − xj−1) = 0 2 ≤ j ≤ n.

The ﬁrst term in Eq.(3.8) is zero via Eq.(3.3) with n+1 replaced with n. We are left with

(xn+1 − xn) · A · (xj − xj−1) = 0 2 ≤ j ≤ n.

We can now, as promised, get rid of the unknown A via Eq.(3.6) since it is operating on a displacement.

(xn+1 − xn) · (∇E(xj ) − ∇E(xj−1)) = 0 2 ≤ j ≤ n.

When we put the formula for xn+1, Eq.(3.1), into Eqs.(3.10) we get, after dividing by λn, what we have been after

since the beginning of this section: n-1 equations for the n-1 aj’s in terms of known quantities from previous steps,

3

(3.2)

(3.3)

(3.4)

(3.5)

(3.6)

(3.7)

(3.8)

(3.9)

(3.10)

(3.12)

(3.13)

(3.14)

vn +

ak(xk − xk−1)

· (∇E(xj ) − ∇E(xj−1)) = 0 2 ≤ j ≤ n.

(3.11)

n

k=2
X

 

!

By inverting these equations we can ﬁnd a direction to orient our scooter that is closer to optimal the closer we are
to the minimum and the closer the quadratic approximation is to E. This is already more than we had any right
to expect but it gets even better! These n-1 equations are uncoupled since by combining Eq.(3.6) with Eq.(3.9) and
using the fact that A is symmetric, we have

(xk − xk−1) · A · (xj − xj−1) = (xk − xk−1) · (∇E(xj ) − ∇E(xj−1))
= (∇E(xk) − ∇E(xk−1)) · (xj − xj−1)
= δj,k (∇E(xj ) − ∇E(xj−1)) · (xj − xj−1)

so that all terms in the k-sum of Eq.(3.11) drop out except the k=j term. The resulting formula for aj is

aj = −

vn · (∇E(xj ) − ∇E(xj−1))
(∇E(xj ) − ∇E(xj−1)) · (xj − xj−1)

.

Plugging this into the update formula Eq.(3.1) we obtain the expression that all of the optimization schemes take as
a starting point.

xn+1 = xn + λn

vn −

(xj − xj−1)

vn · (∇E(xj ) − ∇E(xj−1))
(∇E(xj ) − ∇E(xj−1)) · (xj − xj−1) 

n

j=1
X





This is the most important equation in this paper. Conjugate gradient and variable metric routines use this formula
and only diﬀer in their choice of vn.



IV. CONVERGENCE

Of course, none of this is worth it unless Eq.(3.14) is demonstrably faster than steepest descent. And it is, at
least for those cases where one is close enough to a minimum that the second order Taylor expansion for E is a good
approximation. For quadratic energies, this updating scheme will converge to the minimum of E in no more steps
than the number of components of x (two for the canoe, not including the ﬁrst guess), provided that the vn’s are
chosen to be linearly independent of each other. The proof is straightforward. Consider the m + 1 step of Eq.(3.14).
As long as vm and the m − 1 (xj − xj−1)’s are linearly independent, which will be true if all the vn’s are linearly
independent, then by varying λm and the m − 1 aj’s, xm+1 spans the entire conﬁguration space. Since λm and all
the aj’s are minimized exactly (remember the aj’s are exact only for quadratic functions) xm+1 is guaranteed to be
the minimum. So, our intuition that it should only take two steps to ﬁnd the minimum of a canoe is correct, as long
as we have a quadratic canoe.

We can achieve the minimum in fewer than m steps with a clever choice of vn, provided that E is exactly given
by Eq.(3.4). For example, the steepest descent method, v1 = −∇E(x1), ﬁnds the minimum in one step regardless
of the dimensionality of the conﬁguration space for the maximally symmetric case of quadratic functions with A
proportional to the identity matrix (a circular parabolic bowl is an example). More generally one step minimization
for quadratic functions is always possible with

xmin = xn − A−1 · ∇E(xn),

(4.1)

found by inverting Eq.(3.5). This motivates choosing vn = −Hn · ∇E(xn) where the matrix Hn is a possibly diﬀerent
symmetric positive deﬁnite matrix at each step and is ideally a good approximation for A−1. Diﬀerent choices for
Hn correspond to diﬀerent conjugate gradient and variable metric routines.

In the appendix we show that optimization of quadratic functions with appropriate choices for Hn converges to the
minimum of E in no more steps than the number of distinct eigenvalues of H1A, which can be much less than m for
highly symmetric systems (notice that this agrees with 1 step minimization when H1 is proportional to A−1). In the
Appendix we also show that these schemes automatically construct a better approximation for A−1 at each step so
the optimal choice for λn approaches 1 for large n, regardless of how poorly H1 initially approximates A−1.

Even if the energy is not well approximated by a quadratic function, positive deﬁnite Hn still guarantees that the

positive λn direction points down hill. The proof is straightforward. Downhill is determined by

4

Replacing the displacement xn+1 − xn with Eq.(3.14) and using Eq.(3.3) to remove all terms in the j sum we have

∇E(xn) · (xn+1 − xn) < 0.

−λn∇E(xn) · Hn∇E(xn) < 0,

which guarantees that E decreases in the positive λn direction, at least initially, provided Hn is positive deﬁnite.

If the energy function is not quadratic, convergence to the minimum is not guaranteed for any ﬁnite number of
steps since the aj’s given by this procedure are no longer the true minima. Regardless, these methods are generally
better than steepest descent, since smooth functions are generally closer to quadratic the closer one is to the minimum
so the approximate aj’s get progressively closer to their true values. Many implementations of these methods switch
over to steepest descent minimization in the event that xn is in a region that is suﬃciently far from quadratic.

V. CONJUGATE GRADIENT OPTIMIZATION

We are now ready to derive conjugate gradient optimization formulas. This section will be short since we have
already done most of the work we need to do. Conjugate gradient optimization is just the general optimization
procedure, Eq.(3.14) with vn = −H · ∇E(xn) where H, called the conditioner, is an appropriately chosen symmetric
positive deﬁnite matrix. This is motivated by the exact result in case of quadratic functions Eq.(4.1). If one has a
good estimate for A−1 then one can use it for H. Often no such information is known and the identity matrix is used
for H. The updating formula is

xn+1 = xn − λn

H · ∇E(xn) −

(xj − xj−1)

(∇E(xj ) − ∇E(xj−1)) · H · ∇E(xn)
(xj − xj−1) · (∇E(xj ) − ∇E(xj−1)) 

.

(5.1)

n

j=2
X





The conjugate gradient choice for vn has the wonderful feature that it makes all terms in the j sum in Eq.(5.1)

equal to zero except for the j=n term. To see this note that

∇E(xn) · H · ∇E(xj ) = ∇E(xn) ·

H · ∇E(xj) −

(xk − xk−1)

 

j

k=2
X

(∇E(xk) − ∇E(xk−1)) · H · ∇E(xj )
(xk − xk−1) · (∇E(xk) − ∇E(xk−1)) !

,

(5.2)

for j ≤ n, where we have added terms that are zero via Eq.(3.3). Now using Eq.(5.1) we can replace the terms in
parenthesis with the displacement so we get

∇E(xn) · H · ∇E(xj ) = ∇E(xn) · (xj+1 − xj )/λj,

which by Eq.(3.3) is zero for j < n − 1, so that we have the result

∇E(xn) · H · ∇E(xj ) = 0 2 ≤ j ≤ n − 1

Eq.(5.4) makes all terms in the j sum zero in Eq.(5.1) except for j = n. We are left with

xn+1 = xn − λn

H · ∇E(xn) − (xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · H · ∇E(xn)
(xn − xn−1) · (∇E(xn) − ∇E(xn−1))

(cid:18)

(cid:18)

This expression for xn+1 is the Polak-Ribiere conjugate gradient updating formula (However, see Appendix A). One can
come up with dozens of other formulas simply by adding or subtracting terms that are zero if the function is quadratic.
Another popular choice is the Fletcher-Reeves updating formula which, using the fact that ∇E(xn−1)·H·∇E(xn) = 0
from Eq.(5.4), simpliﬁes Eq.(5.5) to

xn+1 = xn − λn

H · ∇E(xn) − (xn − xn−1)

∇E(xn) · H · ∇E(xn)
(xn − xn−1) · (∇E(xn) − ∇E(xn−1)).

If the
The Polak-Ribiere and the Fletcher-Reeves formulas are equal
energy function is not quadratic it is possible for the Polak-Ribiere numerator to be negative, while the
Empirically the best form for the numerator appears to be
Fletcher-Reeves numerator is always positive.

if the energy function is quadratic.



.

(cid:19)

(cid:19)

(4.2)

(4.3)

(5.3)

(5.4)

(5.5)

(5.6)

5

max ((∇E(xn) − ∇E(xn−1)) · H · ∇E(xn), 0) which uses the Polak-Ribiere numerator but restarts the conjugate gra-
dient routine with a steepest descent step (assuming the conditioner is the identity) if the P-R numerator goes
negative.

The conjugate gradient update formulas are swell but they don’t exactly look much like the one step formula
Eq.(4.1) that we might have expected them to resemble. This can be remedied by taking advantage of the ability to
create matrices by forming the outer product of two vectors. For the Polak-Ribiere formula we can write

xn+1 = xn − λn

H −

(xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · H

(xn − xn−1) · (∇E(xn) − ∇E(xn−1))

(cid:18)

N

· ∇E(xn),

(cid:19)

(5.7)

N

in which
connotes the outer product. A similar expression holds for the Fletcher-Reeves update formula. This
change to the form of the descent direction is entirely cosmetic, and is given primarily to show the similarity with
Eq.(4.1). However, Eq.(5.7 suggests the possibility that the expression in parenthesis, modiﬁed to exhibit symmetry,
positive deﬁniteness and other properties we expect of an approximation for A−1, would be an improvement over H
that could proﬁtably be used in the next update in its place. This is the motivation for variable metric minimization
which is discussed in the next section.

VI. VARIABLE METRIC OPTIMIZATION

For variable metric optimization we choose vn = −Hn · ∇E(xn) where Hn is an appropriately chosen symmetric
positive deﬁnite matrix that is updated at each step to more closely resemble A−1. The initial H1 is often the identity
matrix. A−1 has the useful property determined by the inverse of Eq.(3.6) that

x − y = A−1 · (∇E(x) − ∇E(y)) = (∇E(x) − ∇E(y)) · A−1,

which is good for any x and y. Since Hn is supposed to be a good approximation for A−1 we will require that Hn is
symmetric and satisﬁes Eq.(6.1) for x and y chosen from the set of xj for j ≤ n. This will be so if we require

For an Hn satisfying Eq.(6.2) the update formula

Hn · (∇E(xj ) − ∇E(xj−1)) = xj − xj−1 2 ≤ j ≤ n.

xn+1 = xn − λ

Hn · ∇E(xn) −

(xj − xj−1)

(∇E(xj ) − ∇E(xj−1)) · Hn · ∇E(xn)
(∇E(xj ) − ∇E(xj−1)) · (xj − xj−1) 





n

j=2
X



simpliﬁes to

xn+1 = xn − λnHn · ∇E(xn)

via Eqn.’s (6.2) and (3.3). The resulting expression is naturally in the form resembling Eq.(4.1) so Hn is acting like
an approximate A−1.

There are many ways to construct an Hn that satisﬁes Eq.(6.2). An interesting formula results if we choose

vn = −Hn−1 · ∇E(xn) but insist that we still end up with Eq.(6.4) for xn+1. For this to be true we must have

Hn · ∇E(xn) = Hn−1 · ∇E(xn) − (xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · Hn−1 · ∇E(xn)
(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

An Hn that satisﬁes this is

Hn = Hn−1 −

(xn − xn−1)

Hn−1 · (∇E(xn) − ∇E(xn−1))

(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

N

,

which is an iterative form of Eq.(5.7). However, this Hn is a bad approximation for A−1 since it is neither symmetric
nor does it satisfy Eq.(6.2). This can be remedied by amending Hn with terms that give zero for any E, quadratic or
not, when operating on ∇E(xn);

Hn = Hn−1 −

(xn − xn−1)

Hn−1 · (∇E(xn) − ∇E(xn−1))

Hn−1 · (∇E(xn) − ∇E(xn−1))

(xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

−

N

(6.7)

+ a(xn − xn−1)

N
(xn − xn−1).

O

6

(6.1)

(6.2)

(6.3)

(6.4)

(6.5)

(6.6)

The next to last term was added to make Hn symmetric. The last term is allowed with any value of a. Remarkably,
there is a special value:

a =

1
(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · Hn−1 · (∇E(xn) − ∇E(xn−1))
(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

1 +

(cid:18)

(6.8)

(cid:19)

for which Eq.(6.2) is automatically satisﬁed, so that we are improving our approximation for A−1 at every step. With
this value for a Eq.(6.7) is the Broyden-Fletcher-Goldfarb-Shanno variable metric updating formula. The proof that
Hn is positive deﬁnite, needed to guarantee that the positive λn direction points downhill, is left for the Appendix.
Another popular variable metric update formula, the Davidon-Fletcher-Powell scheme, was developed with only
Eq.(6.2) and symmetry in mind, with no regard for Eq.(6.5) (although it turns out to satisfy it as a proportionality
rather than an equality as we show in the Appendix). It is

Hn = Hn−1 −

Hn−1 · (∇E(xn) − ∇E(xn−1))

Hn−1 · (∇E(xn) − ∇E(xn−1))

(∇E(xn) − ∇E(xn−1)) · Hn−1 · (∇E(xn) − ∇E(xn−1))
N

+

(xn − xn−1)

(xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)
N

.

This is an arbitrary formula in that we can add the term bu

u to Hn with

u =

(xn − xn−1)
(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

−

Hn−1 · (∇E(xn) − ∇E(xn−1))
(∇E(xn) − ∇E(xn−1)) · Hn−1 · (∇E(xn) − ∇E(xn−1))

N

for any b and still obey Eq.(6.2). The choice

b = (∇E(xn) − ∇E(xn−1)) · Hn−1 · (∇E(xn) − ∇E(xn−1))

(6.9)

(6.10)

(6.11)

corresponds to the BFGS scheme. It also is the only choice that makes Hn linear in Hn−1. The Davidon-Fletcher-
Powell scheme, for any b, is exactly equivalent to the Broyden-Fletcher-Goldfarb-Shanno scheme if the energy function
is quadratic. Empirically, for more general nonquadratic energies, the Broyden-Fletcher-Goldfarb-Shanno scheme is
usually better than the b = 0 Davidon-Fletcher-Powell scheme.

For quadratic energy functions variable metric and conjugate gradient methods are equivalent. The proof is in
the appendix c. Variable metric minimization diﬀers from conjugate gradient minimization for non-quadratic energy
functions.

The variable metric method requires more memory than the conjugate gradient method since for variable metric
optimization one is building up an m × m matrix. In practice, for large m, one can cut this way down by keeping
information from only the last q < m steps8. My experience has been that for nonquadratic functions the variable
metric method with q > 1 converges faster than the conjugate gradient method (equivalent to variable metric with
q = 1) but past performance is no guarantee of future returns.

APPENDIX A: WILL THE REAL CONJUGATE GRADIENT FORMULA PLEASE STAND UP?

Eq.(5.5) is the Polak-Ribiere conjugate gradient update formula and Eq.(5.6) is the Fletcher-Reeves formula. How-
ever, the conventions for conjugate gradient minimization and variable metric minimization are diﬀerent.
In this
paper we have followed the variable metric convention throughout so our expressions for conjugate gradient updates
are disguised. In what follows we make several changes in the appearance of Eq.(5.5) and Eq.(5.6) relying only on the
orthogonality of a gradient with the most recent displacement, Eq.(2.3), which is always true regardless if the energy
function is quadratic or not. The resulting formulas are the conventional expressions for the cg formulas that appear
in most text books.

First we can simplify the denominator in the Polak-Ribiere routine.

xn+1 = xn − λn

H · ∇E(xn) + (xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · H · ∇E(xn)
(xn − xn−1) · ∇E(xn−1)

(cid:19)

One is also always free, from the deﬁnition Eq.(2.1), to express the update scheme in terms of hn−1 instead of

xn − xn−1.

(A1)

(A2)

xn+1 = xn − λn

H · ∇E(xn) + hn−1

(∇E(xn) − ∇E(xn−1)) · H · ∇E(xn)
hn−1 · ∇E(xn−1)

(cid:19)

7

(cid:18)

(cid:18)

Next we expand the denominator using the cg form for hn−1.

hn−1 · ∇E(xn−1) = −

H · ∇E(xn−1) + hn−2

(cid:18)

= −∇E(xn−1) · H · ∇E(xn−1),

(∇E(xn−1) − ∇E(xn−2)) · H · ∇E(xn−1)
hn−2 · ∇E(xn−1)

· ∇E(xn−1)

(cid:19)

where the second term was zero by orthogonality, Eq.(2.3). The update formula now looks like

xn+1 = xn − λn

H · ∇E(xn) − hn−1

(cid:18)

(∇E(xn) − ∇E(xn−1)) · H · ∇E(xn)
∇E(xn−1) · H · ∇E(xn−1)

(cid:19)

This is the formula that is conventionally used in implementations of the Polak-Ribiere update formula.

Similarly, the conventional Fletcher-Reeves update is

xn+1 = xn − λn

H · ∇E(xn) − hn−1

(cid:18)

∇E(xn) · H · ∇E(xn)
∇E(xn−1) · H · ∇E(xn−1)

,

(cid:19)

which we remind the reader is only equivalent to the Polak-Ribiere update formula for quadratic energy functions.

APPENDIX B: PROOF THAT HN IS POSITIVE DEFINITE PROVIDED HN−1 IS POSITIVE DEFINITE

When ﬁnding the minimum of a function it is important to know which way is down. As shown in section IV,
for conjugate gradient and variable metric minimization, downhill is in the direction of positive λn provided that
Hn is positive deﬁnite. For conjugate gradient minimization Hn does not change with n so positive deﬁniteness is
trivially guaranteed by making H positive deﬁnite initially. For variable metric minimization, on the other hand Hn
is updated at each step so it is not obvious that if H1 is chosen to be positive deﬁnite that Hn will be too.

We will simultaneously show that the Broyden-Fletcher-Goldfarb-Shanno and Davidon-Fletcher-Powell forms of
Hn are positive deﬁnite provided that Hn−1 is positive deﬁnite, regardless if the energy is quadratic or not. We start
with the BFGS expression for Hn, Eq.(6.7), and the DFP expression for Hn, Eq.(6.9) written in the alternative form8

Hn = (1 − S†) · Hn−1 · (1 − S) +

(xn − xn−1)

(xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)
N

,

(B1)

S =

=

(∇E(xn) − ∇E(xn−1))
(xn − xn−1)
(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)
(∇E(xn) − ∇E(xn−1))
(∇E(xn) − ∇E(xn−1))Hn−1
(∇E(xn) − ∇E(xn−1)) · Hn−1 · (∇E(xn) − ∇E(xn−1))

BFGS

N

N

DFP.

To prove positive deﬁniteness we show that v · Hn · v > 0 for arbitrary v.

v · Hn · v = r · Hn−1 · r +

(v · (xn − xn−1))2
(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

,

where

in which

The denominator of the last term is always greater than zero provided that Hn−1 is positive deﬁnite,

(∇E(xn) − ∇E(xn−1)) · (xn − xn−1) = λn−1∇E(xn−1) · Hn−1 · ∇E(xn−1) > 0.

It is also the case that r and v · (xn − xn−1) can not both be zero at the same time if v 6= 0. This is because r = 0 only
when v is proportional to (∇E(xn) − ∇E(xn−1)) which makes v · (xn − xn−1) unequal to zero via Eq.(B5). Therefore,
assuming Hn−1 is positive deﬁnite, Eq.(B3) is the sum of two nonnegative numbers, of which at least one must be
greater than zero. Hence Hn is positive deﬁnite provided that Hn−1 is positive deﬁnite. Consequently the positive
λn direction points down hill for the variable metric routines just as it does for the conjugate gradient routines.

r = (1 − S) · v.

8

(A3)

(A4)

(A5)

(B2)

(B3)

(B4)

(B5)

APPENDIX C: PROOF THAT ALL OF THE VARIABLE METRIC AND CONJUGATE GRADIENT
SCHEMES ARE IDENTICAL FOR QUADRATIC FUNCTIONS

In this section we show that all of the variable metric and conjugate gradient schemes produce the same sequence
of xn’s for quadratic functions. We have already shown that the Polak-Ribiere and the Fletcher Reeves conjugate
gradient routines are equivalent for quadratic functions. We will now show that the variable metric routines are
equivalent to conjugate gradient routines, and that therefore they are also equivalent to each other. The proof is
inductive and relies on the following proportionality relations for descent directions

Hn · ∇E(xn) ∝ Hk · ∇E(xn) − (xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · Hk · ∇E(xn)
(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

k < n.

(C1)

The weaker requirement of proportionality rather than equality is suﬃcient to guarantee that the descent directions
are the same for diﬀerent k; the equality of the displacements and therefore the xn’s is recovered when λn is varied
numerically. This is trivially satisﬁed for k = n − 1 in the Broyden-Fletcher-Goldfarb-Shanno updating formula
where the proportionality is the equality in Eq.(6.5), and was the motivation for the BFGS update scheme. The
proportionality is also true for k = n − 1 for the Davidon-Fletcher-Powell updating formula as we will prove below.
Putting oﬀ the k = n − 1 proof for the DFP formula for now, we will show that for either scheme if Eq.(C1) is satisﬁed
for Hk then it is also true for Hk−1. Once this is proven the equivalence between variable metric and conjugate
gradient optimization is achieved by setting k = 1. Plugging either the BFGS expression for Hk, Eq.(6.7), or the
DFP expression for Hk, Eq.(6.9), into Eq.(C1) gets us back Eq.(C1) with Hk−1 provided that E is quadratic (so that
we may make liberal use of Eq.(3.3)) and that

(∇E(xk) − ∇E(xk−1)) · Hk−1 · ∇E(xn) = 0. k < n.

(C2)

The second part of this expression is zero via Eq.(3.3) since E(xk−1) · Hk−1 is proportional to the displacement
xk − xk−1. To show that E(xk) · Hk−1 is also proportional to a linear combinations of displacements depends on
Eq.(C1) being true for k = n − 1. If it is then

Hk−1 · E(xk) = (xk − xk−1)

(∇E(xk) − ∇E(xk−1)) · Hk−1 · ∇E(xk)
(∇E(xk) − ∇E(xk−1)) · (xk − xk−1)

+ γ(xk+1 − k),

(C3)

where γ is a proportionality constant. This is zero when dotted into ∇E(xn) so the theorem is proved. Setting k = 1
in the displacement formula Eq.(C1) completes the proof of equivalence of the BFGS variable metric and conjugate
gradient optimization for quadratic functions. To show that DFP variable metric optimization is also equivalent to
conjugate gradient optimization for quadratic functions we must show that Eq.(C1) is satisﬁed for k = n − 1 using the
DFP Hn. To do so we operate with, Eq.(6.9), the DFP formula for Hn in terms of Hn−1, on the gradient ∇E(xn).
The result is

Hn · ∇E(xn) = Hn−1 · ∇E(xn) − Hn−1 · (∇E(xn) − ∇E(xn−1))

(∇E(xn) − ∇E(xn−1))Hn−1 · ∇E(xn)
(∇E(xn) − ∇E(xn−1)) · Hn−1 · (∇E(xn) − ∇E(xn−1))

Combining terms we get

Hn · ∇E(xn) =

∇E(xn−1) · Hn−1 · ∇E(xn−1)
∇E(xn) · Hn−1 · ∇E(xn)

(cid:18)

Hn−1 · ∇E(xn) − (xn − xn−1)

(∇E(xn) − ∇E(xn−1)) · Hn−1 · ∇E(xn)
(∇E(xn) − ∇E(xn−1)) · (xn − xn−1)

where we have used the fact that Hn−1 ·∇E(xn−1) is proportional to xn − xn−1, and we have used Eq.(3.3) to simplify
the proportionality prefactor.

This completes the proof that all of the standard conjugate gradient and variable metric optimization routines
produce exactly the same sequence of xn’s for quadratic functions. We can use this fact to prove fast convergence of
all of these routines for the case of quadratic functions merely by showing that it is true for one. This is what we do
in the next section of the appendix.

(C4)

,

(cid:19)

(C5)

9

APPENDIX D: PROOF OF FAST CONVERGENCE FOR QUADRATIC FUNCTIONS

In this section we show that optimization with vj = −H · ∇E(xj) converges to the minimum of quadratic functions
in the number of steps equal to the number of distinct eigenvalues of H · A, regardless of the dimension of the
conﬁguration space. Since conjugate gradient and variable metric minimization is the same for quadratic functions,
it is suﬃcient to show this for the conjugate gradient minimization. The proof is based on the one step minimization
formula

and the little known fact, which we prove below, that if a matrix M has p distinct eigenvalues then M−1 is a polynomial
in M with highest power p − 1,

xmin = x − A−1∇E(x),

M−1 =

cj(M)j.

A−1 =

cj(HA)jH.

p−1

j=0
X

p−1

j=0
X

p−1

j=0
X

(ǫj − M) = 0

p

j=1
Y

I = I − β

(ǫj − M)

p

j=1
Y

p

j=1
Y

With M = HA we have

Plugging this into Eq.(D1) we have

xmin = x −

cj(HA)jH · ∇E(x).

In this appendix we prove that for quadratic functions, and for HA with p distinct eigenvalues, Eq.(D4) is equal to
the conjugate gradient expression after p steps, not including the ﬁrst guess.

First we prove Eq.(D2). For M with p distinct eigenvalues we have

where ǫj are the distinct eigenvalue of M. Therefore the identity can be written

for any β. Consequently

M−1 = (I − β

(ǫj − M))M−1

p
for any β. In general this is an implicit equation for M−1 but with β = 1/
k=1 ǫk each term in parenthesis contains
at least one power of M, cancelling out M−1 on the right hand side. The ﬁnal result expresses M−1 explicitly as a
polynomial in M alone with highest power p − 1, as alleged in Eq.(D2). The results for p from one to four are

Q

M−1

1 =

1
ǫ1

I

M−1

2 =

M−1

3 =

M−1

4 =

1
ǫ1
1
ǫ1
1
ǫ1

+

+

+

1
ǫ2 (cid:19)
1
+
ǫ2
1
ǫ2

+

I −

M2

1
ǫ1ǫ2

1
ǫ3 (cid:19)
1
+
ǫ3
1
ǫ1ǫ2ǫ4

I −

(cid:18)

1
ǫ4 (cid:19)
+

+

1
ǫ1ǫ2ǫ3

+

(cid:18)

(cid:18)

(cid:18)

(cid:18)

1
ǫ1ǫ2

I −

+

1
ǫ1ǫ3
1
ǫ1ǫ2

+

+

1
ǫ2ǫ3 (cid:19)
1
+
ǫ1ǫ3

M3 +

1
ǫ1ǫ4

+

1
ǫ1ǫ2ǫ3
1
ǫ2ǫ3

+

M2
3

(cid:18)
+

1
ǫ1ǫ3ǫ4

1
ǫ2ǫ3ǫ4 (cid:19)

M2

4 −

1
ǫ1ǫ2ǫ3ǫ4

M3
4

1
ǫ2ǫ4

+

1
ǫ3ǫ4 (cid:19)

M4

10

(D1)

(D2)

(D3)

(D4)

(D5)

(D6)

(D7)

(D8)

(D9)

(D10)

(D11)

Next we show that conjugate gradient minimization is equal to Eq.(D4) after p steps. The proof is inductive. We

will prove that for conjugate gradient minimization

where Pn−2(HA) is a polynomial of order n − 2. First, it is trivially true for n = 2 since x2 = x1 − H∇E(x1). We
will now prove that if it is true for the pth step then it is also true for the p+1th step where

xn = x1 + Pn−2(HA)H∇E(x1)

xp+1 = xp − λpH · ∇E(xn) + λp

aj(xj − xj−1),

(D12)

(D13)

in which the aj’s are the coeﬃcients of your favorite conjugate gradient routine. Using Eq.(3.6) we can put things in
terms of x1.

xp+1 = x1 + (xp − x1) − λpH · (∇(E(x1) + A(xp − x1)) + λp

aj((xj − x1) − (xj−1 − x1))

(D14)

Therefore using Eq.(D12) we have

xp+1 = x1 +

−λpHAPp−2(HA) + Pp−2(HA) + λp

ap(Pj−2(HA) − Pj−3(HA)) − λp

· H · (∇E(x1),

(D15)





p

j=2
X





where P−1 = 0. The expression in parenthesis, because of its ﬁrst term, is a polynomial of order p − 1. Indeed it can
be any polynomial of order p − 1 since λp and the p-1 aj’s in principle can be varied arbitrarily. In particular it can
be the polynomial in Eq.(D4). The conjugate gradient formula picks out the polynomial of order p − 1 that minimizes
E(xp+1). Since E is minimized for xp+1 = xmin, Eq.(D15) must equal Eq.(D4) and the theorem is proved.

p

j=2
X

p

j=2
X

1 The scooter represents a routine that minimizes the function along a particular ray. A real line minimization routine moves
quite unlike the motion of any real scooter, more like several pogo sticks bouncing along the ray until the minimum is found.
If there is more than one minima, such routines can not guarantee that the minima found is the closest one to your starting
point. References for line minimization routines can be found the next citation.

2 Some texts, in addition to those listed in the next citation, that describe minimizing a function of one variable are : Ale-
jandro L. Garcia, Numerical Methods for Physics (Prentice Hall 1994), and Forman S. Acton Numerical Methods that Work
(Mathematical Association of America)

3 Several texts that describe conjugate gradient and variable metric minimization are: Jorge Nocedal and Stephen J. Wright,
Numerical Optimization (Springer, New York, 1999), corrected second printing, Elijah Polak, Optimization: Algorithms
and Consistent Approximations, (Springer, New York, 1997) , William H. Press, Brian P. Flannery, Saul A. Teukolsky,
Wiiliam T. Vetterling Numerical Recipes in Fortran/C(++): The Art of Scientiﬁc Computing, (www.nr.com). Also see
Jonathan Richard Shewchuk, ”An Introduction to the Conjugate Gradient Method without the agonizing pain,” www-
2.cs.cmu.edu/ jrs/jrspapers.html.

4 R Fletcher C.M. Reeves, Comput. J. 7 (2), 149-154 (1964)
5 E Polak and G. Ribiere, Rev. Fr. Inform. Rech. Operation. (16-R1) 35-43 (1969)
6 W. C. Davidon, AEC Research and Development Rept. ANL 5900 (Rev.) 1959., R. Fletcher and M. J. D. Powell, Comput.

J. 6, 163-168 (1963)

7 C. G. Broyden, J. Inst. Mat. Appl. 6 222-231 1970, R. Fletcher Comp. J., 13 317-322 (1970), D. Goldfarb Mat. Comp. 24

23-26 (1970), D. F. Shanno, Mat. Comp. 24 647-656 (1970), D. F. Shanno, J. Opt. Th. Appl., 46 (1) 87-94 (1985)

8 J. Nocedal, Math. Comput. 35, 773 (1980)

We acknowledge support from Research Corporation grant CC5326. R.A. Hyman thanks the hospitable folks of

the James Frank Institute of the University of Chicago where portions of this paper were written.

11

