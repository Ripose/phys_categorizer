Hurst’s Rescaled Range Statistical Analysis for Pseudorandom Number
Generators used in Physical Simulations

7
9
9
1
 
g
u
A
 
7
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
9
0
0
8
0
7
9
/
s
c
i
s
y
h
p
:
v
i
X
r
a

B. M. Gammel
Physik Department der Technischen Universit¨at M¨unchen, T30, 85747 Garching, Germany
August 7, 1997

The rescaled range statistical analysis (R/S) is proposed as a new method to detect correlations
in pseudorandom number generators used in Monte Carlo simulations. In an extensive test it is
demonstrated that the R/S analysis provides a very sensitive method to reveal hidden long run
and short run correlations. Several widely used and also some recently proposed pseudorandom
number generators are subjected to this test. In all considered generators correlations are detected
and quantiﬁed.

I. INTRODUCTION

PACS numbers: 02.70.Lq, 05.40.+j, 02.50.-r, 75.40.Mg

Random numbers are the essential ingredient of all
stochastic simulations. A great many algorithms in
Monte-Carlo (MC) simulations and other non-physical
computational ﬁelds rely crucially on the statistical prop-
erties of the random numbers used. High precision calcu-
lations on nowadays computer hardware typically involve
the generation of billions of random numbers.

Today the most convenient and most reliable method
of obtaining random numbers in practice is the use of
a deterministic algorithm. Such a numerical method
produces a sequence of pseudorandom numbers (PRN)
which mimic the statistical properties of true random
numbers as good as possible. Usually the pseudoran-
dom number generator (PRNG) is assumed to generate a
sequence of independent and identically distributed con-
tinuous U(0, 1) random number, that means uniformly
distributed over the interval (0, 1). Other distributions
can be obtained by transformation methods [1]. Since
the state space of the generator is ﬁnite the sequence
of PRNs will be eventually periodic. Therefore the ex-
pected properties of “true” random variables can only be
approximated.

the generation method. There is a large battery of stan-
dard tests [3–5,7,8,2] which every candidate to be used
in “serious” simulations has to pass. PRNGs that have
succeeded in all of these tests seemed to work reliable
in apparently all physical simulations until the last few
years. But the rapid development of computer hardware
and improved simulation algorithms have caused the de-
mands on the quality of the random number sequences
to greatly increase. As a consequence erroneous results
have been found in recent high precision MC calcula-
tions. The errors could be related to the use of popular
PRNGs in combination with some specialized algorithms
[9–13] which revealed hitherto undetected correlations in
the pseudorandom sequences.

p re p rint

Thus there is a strong need to enlarge the tool box
of empirical tests to gain conﬁdence in newly proposed
PRNGs [14–17] and to check whether traditionally used
PRNGs are still reliable in modern applications. Any
good statistical test should have an idiosyncracy for un-
wanted correlations and detect defects before they show
up in an application. Newly developed and highly spe-
cialized algorithms may be sensitive to structural defects
in PRNGs which are not evident in the standard tests.
As diﬀerent tests detect diﬀerent types of defects it is de-
sirable to develop application speciﬁc tests [18] that are
especially sensitive to the features of the random num-
bers which are probed in simulations in current ﬁelds of
research. But often this cannot be assessed in advance
and the only way to reassure oneself of the correctness of
a suspicious (or very important) result is to perform an
in situ test and to repeat the simulation with some diﬀer-
ent PRNGs. Enlarging the set of test methods therefore
can help to save precious time and to avoid painful re-
calculations.

True random numbers can only be produced by phys-
ical devices that generate events which are principally
unpredictable in advance, such as noise diodes or gamma
ray counters. But such devices are inconvenient to use
and Marsaglia reported that several commercial products
fail standard statistical tests spectacularly [2,3]. An al-
ternative could be the archiving of random numbers of
high quality on a CDROM [2], although such a source is
by far not as convenient to handle as a simple function
call.

While theoretical test methods [4,5], such as the anal-
ysis of the lattice structure [6] of linear congruential gen-
erators, are certainly the starting point for constructing
a good PRNG there is also a strong need for so-called
empirical tests. These view the PRNG under consider-
ation as a black box and statistically analyze sequences
of numbers for various types of correlations, regardless of

In section II a new test method is proposed which is
applied to a set of several popular generators described
in section III. In section IV the results of the numeri-
cal experiments are discussed illustrating the capability
of the new test. Following the conclusions, section V,
additional results are tabulated in the appendices.

1

II. THE R/S ANALYSIS

In the following I describe a new technique for judging
the quality of PRNGs in at least several physically rele-
vant situations. It will be demonstrated that the rescaled
range statistical analysis (R/S analysis) provides an ex-
tremely sensitive method for revealing hidden correla-
tions in PRNGs.

As this method is based on general statistical prop-
erties expected for an independent Gaussian process it
should also be useful as a general tool to test the suitabil-
ity of a PRNG in a wide class of stochastic simulations.
In the sequel it will be shown that it is especially eﬀective
for testing the presence of long run statistical dependence
and in cases where such a correlation is present, for es-
timating its intensity. In addition it is shown that also
short run cyclic components in a pseudorandom sequence
are easily made evident using the R/S statistic.

Hydrology is the oldest discipline in which noncyclic
long run dependence has been reported. In particular the
R/S analysis has been invented by Hurst [19,20] when he
was studying the Nile in order to describe the long term
dependence of the water level in rivers and reservoirs.
Later his method has gained much attention in the con-
text of fractional Brownian motion [21].

The R/S statistic for a series ξt in the discrete integer

valued time is deﬁned as follows:

t

Xu=1

X(t, s) =

(ξu − hξis)

R(s) = max
1≤t≤s
s
1
s

S(s) =

(cid:20)

X(t, s) − min
1≤t≤s
1
2

(ξt − hξis)2

(cid:21)

Xt=1

R/S(s) = R(s)/S(s)

X(t, s)

(1)

Viewing the ξt as spatial
increments in a one-
s
t=1 ξt is the distance
dimensional random walk then
of the walker from the starting point at time s. In the
quantity X(t, s) the mean

P

hξis =

1
s

s

ξt

Xt=1

(2)

over the time lag s − 1 is subtracted to remove a trend if
the expectation value of ξt is not zero. In the sequel the
diﬀerence between the ﬁnal time s and the initial time 1
of the stochastic process will be termed the lag τ = s − 1.
R(τ ) is the self-adjusted range of the cumulative sums
and R/S(τ ) is the self-rescaled self-adjusted range, which
is the quantity of our interest.

Feller [22] has proved that the asymptotic behavior for
the expectation value of any independent random process
with ﬁnite variance is given by

E[R/S(τ )] =

π/2 τ

1

2 .

lim
τ →∞

p

The combination R(τ )/S(τ ) is of superior sampling sta-
bility, in the sense that the relative deviation of R/S,

deﬁned as ∆R/S(τ ) =
Var[R/S(τ )] / E[R/S(τ )], is
small. For an independent Gaussian process its asymp-
totic value is given by

p

lim
τ →∞

∆R/S(τ ) =

π/3 − 1 ≈ 0.21725.

(4)

p

The importance of the division by the sample standard
deviation to obtain a statistical quantity of extreme ro-
bustness has been pointed out by Mandelbrot and Wallis
[23]. In fact they found that the relative deviation for
R/S is smaller than for any alternative expression they
could conceive to study long run dependence. The im-
portance increases as the process exhibits dependencies
of increasingly longer extent or as the process deviates
from the Gaussian.

On the other hand Hurst had found empirically that
many time series of natural phenomena are described by
the scaling relation

R/S(τ ) ∝ τ H .

(5)

where H diﬀers signiﬁcantly from 1/2.
In the context
of fractional Brownian motion [21,23] a Hurst exponent
of H = 1/2 corresponds to the vanishing of correlations
between past and future spatial increments in the record.
For H > 1/2 one has persistent behavior, that means
a positive increment for some time in the past will on
the average lead to a positive increment in the future
(if the increments are distributed symmetrically around
zero). Correspondingly the case of H < 1/2 denotes
antipersistent behavior.

Thus almost all long run correlations in the stochastic
process should show up in deviations from the asymptotic
(3), (4).

p

Furthermore, Mandelbrot and Wallis have demon-
strated that the value of the asymptotic prefactor
π/2
is not robust with respect to short run statistical depen-
dence [23]. This value can be arbitrarily modiﬁed by
cyclic components in the random process. The superpo-
sition of a white noise (with zero mean and unit variance)
and a purely periodic process, for instance, leads to an
τ π/2 (1 + A/2)−1/2, with A being
asymptotic value of
the amplitude of a sine wave. Moreover, the transient to
the asymptotic is not smooth, but typically shows a series
of oscillations, resembling the case of a purely oscillatory
process [23].

p

Therefore the R/S statistic is perfectly suited to ana-

lyze a stochastic process for correlations on all scales.

In the following section several types of PRNGs will
be used to generate U (0, 1)-distributed random numbers
ξt. The sequence of ξt will then be analyzed according to
the R/S statistic. It will be demonstrated that various
PRNGs produce sequences of numbers that show devia-
tions from the asymptotic behavior (3), (4). Moreover, it
is found that for ﬁnite lags τ the value of R/S(τ ) diﬀers
signiﬁcantly between the tested PRNGs being indicative
of short range correlations. This way it is possible to ob-
tain a complete “ﬁngerprint” of correlations of a PRNG
and to measure their intensity as a function of the lag.

(3)

2

III. RANDOM GENERATORS

Because of the vast number of diﬀerent PRNGs cur-
rently employed in simulations only a small fraction can
be selected in this work.

The generators of the ﬁrst group, labeled G1 to G6,
are included as they are in general use – either because
of traditions, because they are recommended in popular
books, or because they can be found in many commercial
software packages. Some of them have documented deﬁ-
ciencies (G1,G2,G4). These are considered here to study
how their deviations show up in the R/S statistics. The
generators in the second group, G7 to G10, have been
proposed recently to match also future requirements on
period length and quality. But there is little documented
experience about their behavior in physical simulations.
As there are many good reviews and books on the various
generation methods and the performance in the standard
tests [3–5,7,8,24–26] only a brief outline of the considered
algorithms is given in the next section.

A. Generation Methods

Most of

the commonly used PRNGs are based
on the linear congruential method.
In general a
multiple recursive generator of order k, denoted by
MRG(a1, . . . , ak; c; m), is based on the kth-order linear
recurrence

xn = (a1xn−1 + · · · + akxn−k + c) mod m,

(6)

where the order k and the modulus m are positive
integers and the coeﬃcients are integers in the range
{−(m − 1), . . . , m − 1}. The numbers xn of the sequence
are then scaled to the interval (0, 1) by un = xn/m.

The special case, where k = 1, is the well-known lin-
ear congruential generator LCG(a; c; m) introduced by
Lehmer [27], or in the homogeneous case, c = 0, the
multiplicative linear congruential generator, denoted by
It can be shown that a recursion of or-
MLCG(a; m).
der k with a non-zero constant c is equivalent to some
homogeneous recurrence of order k + 1 [5,25]. All con-
gruential generators show a pronounced lattice structure.
That means, if n subsequent numbers are used to form
vectors in the n-dimensional space all points that can be
generated within the period lie on a family of equidistant
parallel hyperplanes [6]. Tables with good choices for the
constants can be found in recent reviews [3,25,28,29].

A lagged Fibonacci generator, LF(l1, . . . , lk; m; ◦), with
k lags is obtained for c = 0 and k coeﬃcients ai being set
to unit modulus, the others being set to zero,

xn = (xn−l1 ◦ · · · ◦ xn−lk ) mod m.

(7)

The Linear feedback shift register or Tausworthe
method, LFSR(p, q), generates a sequence of binary dig-
its (bits) bn from the recurrence relation

bn = bn−p ⊕ bn−q

(8)

where the exclusive-or operation ⊕ is equivalent to a bit-
wise addition modulo two [8,30]. A sequence of pseu-
dorandom numbers is then obtained by taking an ap-
propriate number of consecutive bits to form an integer
number.

Generalized feedback shift register generators [31], de-
noted by GFSR(l1, . . . , lk; m), which can be considered as
a generalization of the Tausworthe generator, are related
to the lagged Fibonacci method, but use the exclusive-or
operation instead of the arithmetic operators to combine
computer words w

wn = (wn−l1 ⊕ · · · ⊕ wn−lk ) mod m.

(9)

The modulo 2d ≡ m operation is not really performed
in this case, but rather indicates that d bits of the word
are used to form an integer number. A generator of this
type with two lags (103 and 250) has been made popular
by Kirkpatrick and Stoll and is known as R250 [32] (see
also [9]). A particular realization with four lags has been
given by Ziﬀ [33] (for test results see [18]). A recently
proposed special variant with huge period is the twisted
GFSR generator, TGFSR [17].

The

multiply-with-carry

denoted
by MWC(a1, . . . , ak; c; m), is deﬁned by the recurrence
relation

generator,

xn = (a1xn−1 + · · · + akxn−k + cn−1) mod m,
cn = (a1xn−1 + · · · + akxn−k + cn−1) div m.

(10)

The div denotes an integer division. Here, in contrast
to the MRG a carry (or borrow) cn is propagated to the
next iteration step.

Special cases of the MWC are the the add-with-
carry, AWC(l1, l2; m), and the subtract-with-borrow,
SWB(l1, l2; m), generators, which are obtained by setting
two coeﬃcients ai to unit modulus and all others equal
to zero [14,34]. This basically results in a LF generator
with two lags, but with an extra addition of a carry

xn = (xn−l1 + xn−l2 + cn−1) mod m,
cn = [xn−l1 + xn−l2 + cn−1 ≥ m].

(11)

In the case of an AWC the bracket indicates the value
of the carry which is equal to 1 if the inequality is true,
and equal to 0 otherwise.
In the case of an SWB the
addition operations accordingly have to be replaced by
subtractions and the borrow is equal to 1 if the result
of the subtractions becomes negative. These generators
can produce much longer periods than the underlying LF
generators, but have a bad lattice structure in dimension
l + 1, (l being the larger of the lags) [3,5,35].

The subtraction method, SUB(c; m), is based on a sim-

The binary operator ◦ is usually either addition or sub-
traction.

ple arithmetic sequence

3

xn = (xn−1 − c) mod m.

(12)

B. Tested Generators

This method is not suitable by itself, but it may be in-
cluded in combination generators [7,36].

The multiplicative quadratic congruential method,
MQC [4,8], the cryptographic BBS [37] and DES [38] gen-
erators, or the inversive congruential generator, ICG [39]
are only mentioned for completeness, as these have re-
ceived considerable theoretical attention recently. These
new methods have promising features, but the genera-
tors are currently not in common use as there is little
practical experience with them.

In general the PRNGs with several lags require an ini-
tial set of seeds x1, . . . , xk the number of which is deter-
mined by the largest lag k. While most generators do
not require a special initialization procedure care has to
be taken with the GFSR generators. Here an improper
selection of the seeds can severely aﬀect the quality of the
sequence of PRNs [40]. Often a congruential generator is
used to generate the initial state.

Tausworthe and LFSR generators which are based
on the theory of primitive trinomials form unfavourable
structures similar to the lattice structure of LCGs and
have bad statistical properties [16,26]. Such simple gener-
ators should be avoided and combined generators should
be used instead.

There is strong empirical support that the combination
of diﬀerent pseudorandom sequences in general leads to
an improved statistical behavior [4,41]. The two well-
known methods are the shuﬄing of one sequence with
another or with itself [4,8] or the combination by modu-
lar addition [25,29]. Hybrid generators based on the ﬁrst
method are still not well understood from the theoretical
viewpoint [3,5]. The latter method is better understood
and is suited to obtain very long periods. Adding two se-
quences modulo the modulus of either of them the period
obtained is the least common multiple of the component
periods. Generators based on such combination methods
currently provide us with the “best” PRNs. Many diﬀer-
ent kinds of combined generators have been proposed, see
Refs. [4,5,7,14–16,25,29,36] and references given therein.
Another common method which can lead to an im-
provement of a generator is a decimation strategy, that
means a number of PRNs is thrown away before the next
random number is delivered. This approach is taken
for instance in the RANLUX generator [42,43] which sig-
niﬁcantly improves the defective SWB generator RCARRY
[7,34]. The period reduction is usually no problem for
current long period generators, but neither shuﬄing nor
the decimation method may be desirable if speed consid-
erations are very important (see Appendix A for timing
results).

In the following the generators subjected to the R/S

statistical analysis are described in brief.

G1 is the well-known MLCG(175; 231 − 1), which
has been proposed as the ”mimimal standard’
against which all other generators should be judged
It is also known as GGL [28], CONG
[24,28,44].
[9], ran0 [38,45], SURAND (IBM computers), RNUM
(IMSL library), or RAND (MATLAB software). It
has the serious drawback of a short period, 231 − 1,
and a pronounced lattice structure in low dimen-
sions. Multiplier and modulus are not the optimal
choice considering several ﬁgures of merit, see for
instance [3]. This generator should only be consid-
ered as a toy for experimenting with new test meth-
ods like all other simple congruential and LFSR
generators.

G2 is identical to G1, but additionally Bays-Durham
shuﬄing in a table of size 32 is used to improve
the low-order serial correlations. Here the imple-
mentation ran1 of Ref. [38,45] has been applied.
It is included in this test to show the inﬂuence of
shuﬄing on the R/S statistic.

G3 combines the two congruential sequences

MLCG(40014; 231 − 85)

and

MLCG(40692; 231 − 249)

by modular addition and applies an additional shuf-
ﬂing in a table of 32 entries. The period is approx-
imately 262. This algorithm has been invented by
L’Ecuyer [29] and implemented by James [7] (called
RANECU). The additional shuﬄing has been added
in the version ran2 of Press et al. [38,45]. Many
recommendation for the improvement (for instance
of the speed) of the later version have been given
by Marsaglia and Zaman [14]. They reported that
this generator passes all standard tests. Because
of its popularity the implementation of Ref. [38,45]
has been used in the following R/S analysis.
G4 is a LF(55, 24; 231; −) generator which has a period of
255 − 1. It has been devised by Mitchell and Moore
in 1958 and is described by Knuth [4] (originally
using an add operation). This generator (a version
of which is implemented in [38] as ran3) is reported
to have signiﬁcant correlations on the bit-level and
to fail several physical tests [11,18]. It is included
to demonstrate the eﬀect of short range correlations
on the R/S statistic.

G5 is a modiﬁcation of the above generator G4. If a dec-
imation strategy is used, that means if only every
k-th number of the sequence is used, the generator
passes all of the physical tests in Ref. [18] (for k = 2
and k = 3). In this work only the case of k = 3 is
considered.

G6 The combination generator RANMAR proposed by
Marsaglia and Zaman [7,36] has a period of about

4

2144. It is based on the subtraction modulo 224 of
a simple arithmetic sequence
SUB(7654321; 224 − 3)

and a subtractive Fibonacci generator

LF(97, 33; 224; −)

The initial state is generated by another combina-
tion of LCG(53; 1; 169) and a multiplicative three-
lag Fibonacci sequence. The implementation of
James [7] tested here is in wide-spread use and has
been recommended as a “universal generator”.

G7 is the recently proposed PRNG mzran13 of Marsaglia

and Zaman. It combines

LCG(69069, 1013904243; 232)

and

SWB(2, 3; 232 − 18)

by modular addition and has a period of about 2125
[14]. Although the published program takes advan-
tage of the inherent modulo 232 arithmetic of mod-
ern CPU’s it can easily be made portable to CPUs
with any larger word size by using bit-masks.

G8 This is a composite generator of L’Ecuyer [15] based
on the modular addition of the sequences of

MRG(0, 63308, −183326; 0; 231 − 1)

and

MRG(86098, 0, −539608; 0; 231 − 2000169).

It has a very long period of about 2205 and a lattice
structure with theoretically better properties than
G3 [15].

G9 The twisted GFSR generator TT800 proposed by
Matsumoto and Kurita [17] has a huge period of
2800 − 1 and is reported to have excellent equidis-
tribution properties up to a dimension of 25. This
generator is recommended in [3]. The tested ver-
sion includes Matsumoto’s code change of 1996
which improves the lower bit correlations.

G10 This generator is the maximally equidistributed
three-component Tausworthe generator taus88
proposed by L’Ecuyer [16] with a period of approx-
imately 288.

IV. DESCRIPTION OF THE TEST AND
RESULTS

A. The Test Setup

A few additional words have to be said about the gen-
eration of the initial seeds for the PRNGs. As these are
(possibly) the only truely random part when generating
pseudorandom numbers some care should be taken.

The following method has been applied, as it corre-
sponds to a common way random generators are used in
practice:

The initial seed is calculated from a combination of
some obviously truely random events, such as the time

5

and the date when the program is started, several system
speciﬁc (unique) process identiﬁers, and the processor
clock state. For this initial seed a sequence of 109 to 1010
random numbers is generated and analyzed according to
(1). Then for some new random seed another sequence
is obtained and analyzed.

This procedure has been iterated until the statistical
error for the average of R/S(τ ) was considered small
enough. For each of the generators this amounted to
1011 to 1012 generated PRNs.

As this approach does not ensure that the generated
substreams are disjoint it might look safer to split the
period into disjoint parts. This could be done for al-
most all generators, but there are several cases known
where these (typically) equidistantly spaced seeds intro-
duce even worse correlations [5]. One should also bear in
mind that for the long period generators there is only a
very small probability that, for instance, ten or twenty
sequences of 1010 numbers selected by a random seed are
not disjoint (of course the period of the “toy” generators
is exhausted immediately).

In the case of generators requiring more than one seed
one initial seed has been generated and mixed into the de-
fault seeds of the original source code. For instance, the
25 published seeds that deﬁne the state of the TGFSR
generator G9 have all been exclusive-or-ed with a new
random seed every time a new sequence has been gener-
ated.

All calculations necessary to evaluate the R/S statistic
have been performed in double precision using IEEE 754
standard ﬂoating point arithmetics.

The number of PRNs generated in the test of each gen-
erator is comparable to the number of random variates
typically required in a nowadays high precision Monte-
Carlo simulation. Such a number may seem large for a
mere test, but it comprises the current state of the art in
research ﬁelds like percolation, random walks, diﬀusion
limited aggregation, and many others [9,11,13]. Consid-
ering the speed of the advances in computer technology
much larger simulations will be in reach within the next
few years posing increased demands on precision to the
PRNGs. Correspondingly the stringency of the empirical
tests has to increase too.

In the following section it will be shown that several
current thought-to-be-reliable PRNGs show pronounced
correlations in the R/S statistic. This does not mean
that a large scale simulation inevitably produces erro-
neous results with such a PRNG, but it just means that
in some types of simulations deviations are not unlikely
if high precision is required. Moreover, the main purpose
of this paper is to demonstrate that the R/S statistic is
a ﬁt candidate to enrich the toolbox of empirical tests for
random number generators.

104

103

)
τ
(
S
R

/

102

101

0.01

0.00

-0.01

-0.03

-0.04

)
τ
(

1
R

-0.02

0.000

-0.004

-0.008

-0.012

0.0005

0.0004

0.0003

0.0001

0.0000

)
τ
(

2
R

0.0002

)
τ
(

2
R

)
τ
(
 
S
/
R
∆

0.001

0.000

-0.001

-0.002

2.0

1.5

1.0

0.5

0.0

100

100 101 102 103 104 105 106 107

100

100

101

102

103

105

106

107

108

104
τ

FIG. 1. Double-logarithmic plot of the numerical data (•)
of R/S(τ ) for all PRNGs. On this scale the results for the var-
τ π/2
ious PRNGs are indistinguishable. The asymptotic
behavior is indicated by the dotted line.

p

-0.0001

100

101

102

τ

103

FIG. 3. R2(τ ) versus τ for G1 (◦) and G2 (∗) illustrating
the improvement by shuﬄing. The inset shows a larger range
of τ .

-0.05

102

103

104

105

106

107

τ

101

102

103

104

105

106

107

τ

FIG. 2. Semi-logarithmic plot of R1(τ ) for the pseudoran-
dom number generators G1 (◦) and G8 (✷). The lines are
intended as a guide to the eye.

FIG. 4. Upper ﬁgure: R2(τ ) versus τ for G4 (△). Lower
ﬁgure: Drastic deviations from the asymptotic value (dotted
line) are also visible in ∆R/S(τ ).

B. A Practical Method to Analyze the R/S Data

In Fig. 1 the diagram of log R/S(τ ) versus log τ is
shown for all tested random generators. R/S(τ ) has been
calculated for all powers of two in the range from τ = 2
to τ = 222 ≈ 4.2 × 106 as indicated by the dots. After
a transient behavior for lags smaller than τ ≈ 104 the
asymptotic law (3) applies almost perfectly. But on this
scale the results for the various PRNGs are indistinguish-
able for all lags.

To resolve diﬀerences between the PRGNs the asymp-
totic trend is removed. It is convenient to divide out the
power law and to deﬁne

R1(τ ) ≡

− 1.

(13)

R/S(τ )

πτ /2

p

In Fig. 2 the reduced function R1(τ ) is displayed for a

generator with known correlations, G1 (◦), and the com-
bination generator G8 (✷). On this scale of magniﬁcation
it can be seen that the simple LCG spectacularly fails to
approach the expected asymptotic. The relative devia-
tion becomes as large as 1% corresponding to a reduced
asymptotic prefactor (which appears to be approximately
1.243 instead of

π/2 = 1.253).

p

The half width of the error bars for the estimate of the
mean (in this and the following ﬁgures) is given by three
standard deviations (3σ) corresponding to a conﬁdence
level of 99.7%.

For comparison the results for the highly reliable com-
posite MRG G8 are shown, which converges smoothly to
the asymptotic (at least on this scale of magniﬁcation).
Indeed, it will be shown that most other generators un-
der consideration, including the combination generators
currently considered as most reliable, exhibit prominent

6

0.0001

0.0000

-0.0001

-0.0002

0.0002

0.0001

0.0000

τ

τ

100

101

102

-0.0001

104

100

101

102

103

104

105

-0.0015

100

101

102

104

105

106

107

-0.0015

100

101

102

103

104

105

106

107

103

103

τ

FIG. 5. R2(τ ) for the generator G5 (✸). Inset: Magniﬁed

FIG. 7. R2(τ ) for the combination generator G3 (×). In-

view for small lags τ .

set: Magniﬁed view for small lags τ .

0.0005

0.0000

)
τ
(

2
R

-0.0005

-0.0010

0.0015

0.0010

)
τ
(

2
R

0.0005

0.0000

0.0002

0.0001

0.0000

0.0001

0.0000

-0.0001

-0.0002

0.0005

0.0000

)
τ
(

2
R

-0.0005

-0.0010

0.0015

0.0010

)
τ
(

2
R

0.0005

0.0000

100

101

102

103

104

105

100

101

102

103

104

105

-0.0001

-0.0005

100

101

102

103

104

105

106

107

-0.0005

100

101

102

103

104

105

106

107

τ

FIG. 6. R2(τ ) for the combination generator G6 (+). In-

FIG. 8. R2(τ ) for the combination generator G8 (✷). Inset:

set: Magniﬁed view for small lags τ .

Magniﬁed view for small lags τ .

structures at large lags. But before doing so a more expe-
dient method to represent the deviations from an “ideal”
generator (also at small lags) will be developed.

For the stochastic process deﬁned by (1) only the
asymptotic behavior (3) is currently known. But also
the transient behavior for ﬁnite lags contains valuable
information about correlations in the pseudorandom se-
quences. Therefore it is desirable to remove the transient
behavior also for lags smaller than τ ≈ 104 to visualize
deviations. An obvious way would be to study the rel-
ative properties of diﬀerent PRNGs by calculating the
diﬀerences of the R/S(τ ). But this way it would be dif-
ﬁcult to assign deviations for a range of lags to one or
the other generator. If several PRNGs produce similar
results, hoping that these are not due to similar struc-
tural defects, one of them could be used as a reference
generator. But as we are discouraged to consider any of
the generators as really trustworthy a diﬀerent approach
is taken.

It can be safely assume that the asymptotic limit is ap-
proached smoothly. Therefore any apparent local struc-
ture in the transient obtained with a PRNG will be in-

dicative of correlations. Analyzing the functional form of
the transient a simple and smooth interpolation can be
found which gives a very accurate approximation for all
lags within a range of more than 6 orders of magnitude.
The transient of R/S(τ ) can be parametrized by

R2(τ ) ≡

(cid:18)

p

R/S(τ )
πτ /2 − α

− 1

(cid:19)

1
arctan βτ

−
(cid:18)
+ γe−δτ ε

.

−

2
π (cid:19)

(14)

Using only two parameters α, β the ﬁrst two terms suﬃce
to approximate the transient with a relative precision of
≈ 10−5 for all lags larger than τ = 32. The last term
in (14) has been introduced to approximate the transient
for lags as small as τ = 4. The coeﬃcients have been
obtained from a numerical adjustment using the mean
values obtained from the “better” generators G3, G5,
G7, G8, G9, and G10 with τ in the range from 4 to
212. In this range the individual results agree to a high
precision. The values of the coeﬃcients in (14) used in
the following are

7

0.0002

0.0001

0.0000

-0.0001

τ

-0.0010

100

101

102

103

104

105

-0.0010

100

101

102

103

104

100

101

102

103

104

105

106

107

100

101

102

103

105

106

107

FIG. 9. R2(τ ) for the combination generator G7 (✁). In-

FIG. 11. R2(τ ) for the combination generator G10 (✄).

set: Magniﬁed view for small lags τ .

Inset: Magniﬁed view for small lags τ .

0.0005

0.0000

-0.0005

)
τ
(

2
R

0.0005

0.0000

)
τ
(

2
R

-0.0005

-0.0010

0.0002

0.0001

0.0000

-0.0001

105

104

τ

0.0001

0.0000

-0.0001

-0.0002

0.0005

0.0000

-0.0005

)
τ
(

2
R

-0.002

)
τ
(

1
R

0.000

-0.001

-0.003

-0.004

-0.005

105

106

τ

107

FIG. 10. R1(τ ) for the combination generators G3 (×), G7
(✁), and G8 (✷). For lags larger than τ = 105 the approach
to the asymptotic (dotted line) is evidently diﬀerent. R2(τ )
is indicated by the broken line.

100

101

102

103

104

105

-0.0015

100

101

102

103

104

105

106

107

τ

FIG. 12. R2(τ ) for the combination generator G9 (▽). In-

set: Magniﬁed view for small lags τ .

C. Discussion of the Results

α ≈ 1.0323275 γ ≈ 0.12072098 ε ≈ 0.59429819
β ≈ 0.4200655 δ ≈ 0.97412413

(15)

The smooth interpolation R2(τ ) of the transient now
allows an unbiased comparison of the various PRNGs.
In the following it will become clear that the important
point is not to have a precise approximation of the tran-
sient for truely random numbers, but to recognize that all
PRNGs exhibit pronounced non-monotone structures in
R/S(τ ) on a scale where the transient changes smoothly.
Therefore the subtraction of any monotone and slowly
varying function would suﬃce to reveal a characteristic
“ﬁngerprint” of correlations in the PRNG.

The proposed and practical way is to plot the function
R2(τ ) for lags within several orders of magnitude. Then
all systematic deviations from zero are indicative of the
presence of correlations and the amplitude at lag τ can
be considered as a measure of the strength of correla-
tions for the given lag. Hence the various PRNGs can be
compared quantitatively.

In Fig. 3 the semi-logarithmic plots of R2(τ ) versus
log τ for the toy generators G1 (◦) and G2 (∗) are shown
for lags between 4 and 221 ≈ 2×106 (inset). Serious devi-
ations from an “ideal” generator (dotted line) are evident
for lags larger than 103. Magnifying on the vertical axis
by a factor of 25 the plot of R2(τ ) reveals deviations also
at small lags (main ﬁgure). In generator G2 additional
shuﬄing in a small table has been introduced to improve
low order serial correlations of generator G1. For lags up
to τ ≈ 128 the deviations are indeed strongly reduced.
As expected there is no improvement for lags which are
much larger than the size of the shuﬄing table.

In Fig. 4 the results for the lagged Fibonacci genera-
tor G4 (△) are shown. This generator is known to fail
several tests (see Ref. [18] and appendix C).
It is re-
assuring to see that the R/S statistic easily reveals the
onset of disastrous correlations at τ corresponding to the
larger lag of the generator (l = 55). The deviations show
up as a crossover of R2(τ ) (upper ﬁgure) to a “shifted
asymptotic” reﬂecting a modiﬁed asymptotic prefactor.

8

This gives evidence to the presence of some strong cyclic
components in the pseudorandom process of G4. Also
the relative deviation ∆R/S(τ ) (lower ﬁgure) indicates
strong correlations: At τ = 512 the deviation from the
asymptotic value (4) is almost a factor of 10. Similar de-
viations are expected for all simple LF, LFSR, and GFSR
generators with two lags (e.g. R250). If larger lags are
choosen then the onset of correlations will be at the cor-
responding larger τ (and thus may be less disturbing).

If a decimation strategy with k = 3 is applied, cor-
responding to generator G5 (✸), the correlations are
strongly suppressed. Fig. 5 illustrates that the amplitude
of the deviations of R2 from zero are strongly decreased
upto a lag of τ ≈ 105 . Nevertheless deviations are still
signiﬁcant.

Pseudorandom numbers of much better quality are ex-
pected from the combination generators discussed in the
following.

In Fig. 6 the performance of the popular combination
generator G6 (+) can be estimated. When τ is some-
what larger than the lags of the LF component of the
generator signiﬁcant deviations in R2 are observed (sim-
ilar to G4). These are presumably due to the deﬁcient LF
component of the composite generator. But compared to
G4 the deviation is about 10 times smaller. In contrast
to G4 no signiﬁcant signature in the relative deviation
∆R/S(τ ) can be observed (see Fig. 14). Also because
of the exploding deviations for lags larger than τ ≈ 105
this generator cannot be recommended for high precision
simulations when long ranged correlations are studied.
PRNGs which are as fast and which have better long-
range properties are discussed below.

In the next ﬁgure, Fig. 7, the results for the combined
congruential generator G3 (×) is shown. Compared to
the simple MLCG variants G1 and G2 the amplitude of
the deviations is drastically decreased. But deviations
become prominent for lags larger than τ = 216 (compa-
rable to the size of the multipliers of the MLCG com-
ponents). Also at smaller lags (see inset) some structure
being indicative of correlations can be resolved. Although
G3 is doubtlessly one of the better generators within this
test it should be immediately evident that it cannot come
up to the expectations of Press and Teukolsky [38,45] to
provide perfect random numbers (within the limits of its
ﬂoating point precision). Thus their proposed “practical”
deﬁnition of perfect should at least be put into perspec-
tive.

Random numbers of much better quality (at least in
the R/S statistics) are generated by the composite MRG
G8 which has a theoretically better lattice structure than
G3. Upto lags as large as τ = 106 no major deviations are
observed. But both combined congruential generators
are two to three times slower than the other generators
considered in this work (see appendix A).

The fast composite generator G7 (✁), displayed in Fig.
9 produces very satisfactory PRNs for lags τ < 214.
But it exhibits strongly growing deviations when the lag
reaches the modulus of the LCG component of the gener-

ator. Hence it should only be applied when no excessivly
long ranged correlations are examined (for instance in
random walk type simulations).

In Fig. 10 the plots of R1(τ ) for the three generators
G3, G7, and G8 illustrate the signiﬁcantly diﬀerent ap-
proach to the asymptotic. Compared to Fig. 2 the scale
on the vertical axis is magniﬁed by a factor of 10. The
interpolation for the transient behavior (14), (15) is in-
dicated by the broken line. Clearly the results for gener-
ator G8 are closest to the expected transient, while the
PRNGs G3 and G7 show growing deviations for increas-
ing lags.

Based on heuristics Marsaglia recommended the com-
bination of generators of diﬀerent algebraic structure
[14,36] instead of combining generators of the same class
[5,29]. Here it is found that at least the two hybrid gener-
ators G6 and G7 which are based on diﬀerent classes ex-
hibit stronger long-term correlations in the R/S statistic
than for instance G3 and G8 which combine generators of
the same class. But if speed considerations are dominant
over high precision and if no excessively long run cor-
relations are thought to be important in the simulation
then the much faster generator G7, or the feedback shift
register generators G9, or G10 described in the following
may be of advantage.

The three-component Tausworthe generator G10, dis-
played in Fig. 11 (✄), produces PRNs of high quality at
least upto lags larger than τ ≈ 105. Observable devia-
tions are very small.

In Fig. 12 the results for the huge period TGFSR gen-
erator G9 (▽) are plotted. Below τ ≈ 214 deviations are
very small, but approximately at τ ≈ 105 a prominent
lobe indicates the presence of long-range correlations.

It should be noted that R/S(τ ) necessarily has been
sampled on a coarse grid on the logarithmic scale. There-
fore it is possible that several types of correlations which
would have shown up as a narrow structure have not been
recognized. Nevertheless the observed deviations are in-
triguing.

V. CONCLUSIONS

The sensitivity for correlations on all scales and the
robustness predestinates the R/S statistic as a tool to
catch up defects in pseudorandom number generators. A
practical method has been described which makes it easy
to obtain a characteristic ﬁngerprint of the correlations
in a pseudorandom sequence. The deviations can be de-
scribed quantitatively and the performance of generators
for some given range of lags can be compared.

To illustrate the capability of the R/S statistical anal-
ysis several popular generators have been subjected to
an extensive test. The randomness of all tested PRNGs
could be refuted and the strength of the correlations
within a wide range of lags has been quantiﬁed.

Thus the R/S analysis has to be considered more strin-

9

0.5

G1

0.0
0.5

G2

0.0
0.5

G3

)
τ
(
 
S
/
R
∆

0.0
0.5

G5

0.5

G6

0.0
0.5

G7

0.0
0.5

G8

0.0
0.5

G9

)
τ
(
 
S
/
R
∆

0.0

100

101

102

103

104

105

106

107

τ

0.0
0.5

G10

FIG. 13. Semi-logarithmic plot of ∆R/S(τ ) for the gener-

ators G1, G2, G3, and G5 in the range 2 ≤ τ ≤ 222.

gent than many of the previously suggested tests in the
sense that more generators fail it.

The selection of a PRNG for a speciﬁc simulation de-
pends on the required level of precision and on the range
of the correlations which may have an impact on the
quantity of interest – although this often cannot be as-
sessed in advance. A failure of the considered PRNGs
in the R/S statistical analysis could be enforced easily
by increasing the statistical ensemble suﬃciently. There-
fore it doesn’t make much sense to give a ﬁxed threshold
value for the deviation of R2(τ ) above (below) which a
generator is assumed to fail (pass) the test (with some
probability in a goodness-of-ﬁt test). But no generator
showing a performance inferior to another generator in
several tests should be used any longer if it doesn’t even
distinguish itself at least by speed. Weak correlations
in a current state-of-the-art generator (like some of this
test) can lead to erroneous results in a tomorrow high-
precision calculation. The quest for generators matching
the state-of-the-art simulations in near future has to be
enforced.

APPENDIX A: TIMING RESULTS

In table I the typical execution times relative to the
generator G1 are given. All generators have been conﬁg-
ured to deliver one PRN per function call and no function
code has been inlined. Although the ﬁgures may scatter
between diﬀerent architectures, compilers and optimiza-
tion options they should be indicative for the relative
performance on work station type computers.

0.0

100

101

102

103

104

105

106

107

τ

FIG. 14. Semi-logarithmic plot of ∆R/S(τ ) for the gener-

ators G6, G7, G8, G9, and G10 in the range 2 ≤ τ ≤ 222.

PRNG
G1
G2
G3
G4
G5

rel. time
≡ 1
≈ 1.1
≈ 2.2
≈ 0.7
≈ 1.3

sidered in this test.

PRNG
G6
G7
G8
G9
G10

rel. time
≈ 0.9
≈ 0.7
≈ 2.8
≈ 0.9
≈ 0.7

TABLE I. Relative execution times of the generators con-

APPENDIX B: RESULTS FOR ∆R/S(τ )

In Figs. 13, 14 the results for the relative deviations
∆R/S(τ ) for the various generators are compiled. The
stronger ﬂuctuations for the generators G1 and G2 at
large lags are due to the much smaller number of samples.
The asymptotic value (dotted line) is reached already for
small lags (τ ≈ 10). Except for generator G4 (see Fig. 4)
no signiﬁcant deviations from the asymptotic value are
detected.

APPENDIX C: ADDITIONAL RESULTS

For comparison the performance of the generators G1–
G10 in the recently proposed n-block test and the ran-
dom walk test [18] has been calculated. For the group of
PRNGs which have already been considered in Ref. [18]
the results were reproduced. The ﬁgures for all genera-
tors tested newly are reported in Tab. II. According to
Ref. [18] the limit of acceptance in the χ2-test has been
chosen χ2 < 7.815 in the case of the random walk test and

10

χ2 < 3.841 for the n-block test. A generator is assumed
to pass the test if in at least two of three independent
runs the value of χ2 is below the given limit.

The only PRNG which shows signiﬁcant deviations
from the expected distribution in the random-walk test
is generator G4. If the decimation strategy is used (G5)
then it also passes this test.

These results have to be contrasted with the perfor-
mance of the PRNGs in the R/S statistical analysis
which is much more stringent in the sense that more gen-
erators fail it.

From the presented ﬁgures it is obvious that the walk
length (block size) in these tests is too small (by orders of
magnitude) to catch the severe defects at lags that cor-
respond to the large walk lengths in realistic simulations.
It is also evident that it is not suﬃcient to consider only
a ﬁxed lag as the amplitude of the deviations can vary
strongly with the lag. Finally the R/S statistic appears
to be superior considering its sensitivity for correlations.

PRNG
G1
G2
G3
G4
G5
G6
G7
G8
G9
G10

χ2 in random walk test
2.499
1.539
1.386
5.127
2.889
2.131
1.093
0.329
1.764
36.567 61.235 44.200
7.080
2.225
0.780
1.958
3.497
1.289
8.249
4.663
0.239
3.858
0.979
1.699

1.402
1.883
2.378
2.275
2.368
2.634

χ2 in n-block test
0.067
0.197
0.026
0.009
0.488
0.397
2.161
1.607
0.801
0.982
0.152
1.797
0.764
0.160
0.008
1.592
0.035
0.452
2.550
0.325

0.079
0.014
0.002
1.104
1.002
0.214
0.024
2.598
0.817
0.341

TABLE II. Results for three runs of the random walk test
(walk length N = 750 using 106 samples) and of the n-block
test (block size N = 500 using 3 × 106 samples) [18]. The
boldface ﬁgures indicate that G4 clearly fails this test.

[1] Software packages

this purpose can be found
for instance at NETLIB at http://netlib.att.com/
netlib/random/.

for

[2] G. Marsaglia, in Computer Science and Statistics: The
Interface, Ed.: L. Billard, Elsevier Science Publ., Am-
sterdam, p. 3, 1985; The software package DIEHARD, A
battery of tests of randomness, is vailable via WWW at
http://stat.fsu.edu/∼geo/diehard.html, 1996; The
Marsaglia Random Number CDROM contains 4.8 billion
random bits obtained from a combination of several
sources.

11

[3] P. L’Ecuyer, Chap. 4 Random Number Generation in
Handbook on Simulation, Ed. Jerry Banks, Wiley, 1997.
[4] D. E. Knuth, The Art of Computer Programming, Vol-
Seminumerical Algorithms, Addison-Wesley,

ume 2:
Reading, MA, 2nd edition, 1981.

[5] P. L’Ecuyer, Ann. Oper. Res. 53, 77, (1994).
[6] G. Marsaglia, Proc. of the Nat. Acad. Sci. 61, 25 (1968).
[7] F. James, Comput. Phys. Commun. 60, 329 (1990).
[8] H. Niederreiter, Random Number Generation and Quasi-
Monte Carlo Methods, Vol. 63, SIAM, Philadelphia, 1992.
[9] A. M. Ferrenberg, D. P. Landau, and Y. J. Wong, Phys.

Rev. Lett. 69, 3382 (1992).

[10] W. Selke, A. L. Talapov, and L. N. Shchur, Pis’ma Zh.
Eksp. Teo. Fiz. 58, 684 (1993) [JETP Lett. 58, 665
(193)].

[11] P. Grassberger, J. Phys. A 26, 2796 (1993); Phys. Lett.

A 181, 43 (1993).

[12] P. D. Coddington, Int. J. Mod. Phys. C 5, 547 (1994).
[13] F. Schmid, N. B. Wilding, Int. J. Mod. Phys. C 6, 781

(1995).

[14] G. Marsaglia and A. Zaman, Comput. Phys. 8, 117
(1994); Apparently the published C source code for the
composite generator mzran13 contains a misprint: the
“−” in line 8 should be replaced by a “=”.
[15] P. L’Ecuyer, Ann. Oper. Res. 44, 816 (1996).
[16] P. L’Ecuyer, Math. Comp. 65, 203 (1996).
[17] M. Matsumoto and Y. Kurita, ACM Trans. Models and
Comput. Simul. 2, 179 (1992); ibid., 4, 254 (1994); the
1996 version which improves the lower bit correlations
can be obtained from the author.

[18] I. Vattulainen, T. Ala-Nissila, and K. Kankaala, Phys.
Rev. Lett. 73, 2513 (1994); Phys. Rev. E 52, 3205 (1995);
I. Vattulainen and T. Ala-Nissila, Comput. Phys. 9, 500
(1995); I. Vattulainen, K. Kankaala, J. Saarinen, and T.
Ala-Nissila, Comput. Phys. Commun. 86, 209 (1995).
[19] H. E. Hurst, Trans. Am. Soc. Civ. Eng. 116, 770 (1951).
[20] H. E. Hurst, R. Black, Y. M. Sinaika, Long-Term Storage
in Reservoirs: An experimental Study, Constable, Lon-
don, 1965.

[21] B. B. Mandelbrot and J. W. van Ness, SIAM Review 10,

[24] P. Brateley, B. L. Fox, and L. E. Schrage, A Guide
to Simulation, 2nd edition, Springer-Verlag, New York,
1987.

[25] P. L’Ecuyer, Commun. ACM 33, 85 (1990).
[26] S. Tezuka, Uniform Random Numbers: Theory and Prac-

tice, Kluwer Academic Publishers, Norwell, Mass. 195.

[27] D. H. Lehmer, in Proc. 2nd Symp. on Large-Scale Digital
Calculating Machinery, Harvard Univ. Press, Cambridge,
p. 141 (1951).

[28] S. K. Park and K. W. Miller, Comm. ACM 31, 1192

[29] P. L’Ecuyer, Commun. ACM 31, 742 (1988).
[30] R. C. Tausworthe, Math. Comp. 19, 201 (1965).
[31] T. G. Lewis, W. H. Payne, J. Assoc. Comput. Mach. 20,

(1988).

456 (1973).

[32] S. Kirkpatrick and E. Stoll, J. Comput. Phys. 40, 517

ACKNOWLEDGMENTS

I would like to thank Eckhard Pehlke for many stimu-

lating discussions.

[22] W. Feller, Ann. Math. Stat. 22, 427 (1951);
[23] B. B. Mandelbrot and J. R. Wallis, Water Resour. Res.

422 (1968).

5, 967 (1969).

[33] R. M. Ziﬀ, Phys. Rev. Lett. 69, 2670 (1992).
[34] G. Marsaglia and A. Zaman, Ann. Appl. Probability 1,

[35] R. Couture, P. L’Ecuyer, Math. Comp. 62, 798 (1994).
[36] G. Marsaglia, A. Zaman, and W. W. Tsang, Stat. Prob.

[37] L. Blum, M. Blum, and M. Schub, SIAM J. Comput. 15,

(1981).

462 (1991).

Lett. 8, 35 (1990).

364 (1986).

[38] W. H. Press, B. P. Flannery, S. A. Teukolsky, and W. T.
Vetterling, Numerical Recipes in C, 2nd edition, Cam-
bridge University Press, 1992.

[39] J. Eichenauer and J. Lehn, Statist. Hefte 27, 315 (1986);
J. Eichenauer-Hermann, Int. Stat. Rev. 60, 167 (1992);
ibid., 63, 247 (1995).

[40] M. Fushimi, Appl. Math. Lett. 2, 135 (1989).
[41] M. D. McLaren and G. Marsaglia, J. Assoc. Comput.

Mach. 12, 83 (1965).

[42] M. L¨uscher, Comput. Phys. Commun. 79, 100 (1994).
[43] F. James, Comput. Phys. Commun. 79, 111 (1994).
[44] L. E. Schrage, ACM Trans. Math. Soft. 5, 132-138 (1979).
[45] W. H. Press and S. A. Teukolsky, Comput. Phys. 6, 522

(1992).

12

