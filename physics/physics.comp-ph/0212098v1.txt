2
0
0
2
 
c
e
D
 
6
2
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
8
9
0
2
1
2
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

POLYNOMIAL MAP SYMPLECTIC ALGORITHM

GOVINDAN RANGARAJAN
Department of Mathematics and Centre for Theoretical Studies, Indian Institute of Science
Bangalore 560 012, India
E-mail: rangaraj@math.iisc.ernet.in

Long-term stability studies of nonlinear Hamiltonian systems require symplectic integra-
tion algorithms which are both fast and accurate. In this paper, we study a symplectic
integration method wherein the symplectic map representing the Hamiltonian system
is refactorized using polynomial symplectic maps. This method is analyzed in detail
for the three degree of freedom case. We obtain explicit formulas for the action of the
constituent polynomial maps on phase space variables.

Keywords: Symplectic integration; polynomial maps; Lie perturbation theory

1. Introduction

Numerical integration algorithms are essential to study the long term single parti-
cle stability of nonlinear, nonintegrable Hamiltonian systems. However, standard
numerical integration algorithms can not be used since they are not symplectic 1.
This violation of the symplectic condition can lead to spurious chaotic or dissipative
behavior. Numerical integration algorithms which satisfy the symplectic condition
are called symplectic integration algorithms 1. Several symplectic integration algo-
rithms have been proposed in the literature 2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21.
Some of these directly use the Hamiltonian whereas others use the symplectic map
22,23 representing the nonlinear Hamiltonian system. For complicated systems like
the Large Hadron Collider which has thousands of elements, using individual Hamil-
tonians for each element can drastically slow down the integration process. One the
other hand, the map based approach is very fast in such cases 24,25.

One class of the map-based methods uses jolt factorization 6,11,17,19. But there
are still unanswered questions on how to best choose the underlying group and
elements in the group 26. Further, some of these methods 11,17,19 can be quite
diﬃcult to generalize to higher dimensions. Another class of methods uses solvable
maps 12,21 or monomial maps 18. Even though they are fairly straightforward to
generalize to higher dimensions, they tend to introduce spurious poles and branch

Polynomial Map Symplectic Algorithm

points not present in the original map 26.

We investigate a new symplectic integration method where the symplectic map is
refactorized using “polynomial maps” (maps whose action on phase space variables
gives rise to polynomials). This does not introduce spurious poles and branch
points. Moreover, it is easy to generalize to higher dimensions. Further, since it is
map-based, it is also very fast. In this paper, we describe in detail the theoretical
underpinnings of the polynomial map factorization of symplectic maps. We also
apply it to Hamiltonian systems.

2. Preliminaries

We restrict ourselves to three degrees of freedom nonlinear Hamiltonian system.
The eﬀect of a Hamiltonian system on a particle can be formally expressed as the
action of a symplectic map M that takes the particle from its initial state zin to
its ﬁnal state zf in 22,23

Here z represents the collection of six phase space variables:

zf in = M zin.

z = (q1, q2, q3, p1, p2, p3).

Using the Dragt-Finn factorization theorem27,22, the symplectic map M can be
factorized as shown below:

M = ˆM e:f3: e:f4: . . . e:fn: . . . .

Here fn(z) denotes a homogeneous polynomial (in z) of degree n uniquely deter-
mined by the factorization theorem. The Lie transformation e:f (z): is given by

where

Here [f (z), g(z)] denotes the usual Poisson bracket of the functions f (z) and g(z).
Further ˆM gives the linear part of the map and hence has an equivalent represen-
tation in terms of the Jacobian matrix M of the map M 22:

e:f (z): =

∞

X
n=0

: f (z) :n
n!

,

: f (z) :g(z) = [f (z), g(z)].

ˆM zi = Mijzj = (M z)i.

(1)

(2)

(3)

(4)

(5)

(6)

(3)

The inﬁnite product of Lie transformations exp(: fn :) (n = 3, 4, . . .) in Eq.
represents the nonlinear part of M.

As an application, let us consider a charged particle particle storage ring which
typically comprises thousands of elements (drifts, quadrupoles, sextupoles etc.) Us-
ing the above procedure, one can represent each element in the storage ring by a
symplectic map. By concatenating 22 these maps together using group-theoretical

Polynomial Map Symplectic Algorithm

methods 28, we obtain the so-called ‘one-turn’ map representing the entire storage
ring. The one-turn map gives the ﬁnal state z(1) of a particle after one turn around
the ring as a function of its initial state z(0):

(7)

(8)

(9)

z(1) = Mz(0).

z(n) = Mnz(0).

To obtain the state of a particle after n turns, one has to merely iterate the above
mapping N times i.e.

Since M is explicitly symplectic, this gives a symplectic integration algorithm.
Further, since the entire ring can be represented by a single (or at most a few)
symplectic map(s), numerical integration of particle trajectories using symplectic
maps is very fast.

To obtain a practical symplectic integration algorithm, we follow the perturba-

tive approach and truncate M after a ﬁnite number of Lie transformations:

M ≈ ˆM e:f3: e:f4: . . . e:fP :.

The symplectic map is said to be truncated at order P . This map is still symplectic.
However, each exponential e:fn: in M still contains an inﬁnite number of terms in
its Taylor series expansion. We get around the above problem by refactorizing
M in terms of simpler symplectic maps which can be evaluated exactly without
truncation. We use ‘polynomial maps’ which give rise to polynomials when acting
on the phase space variables. This avoids the problem of spurious poles and branch
points present in generating function methods 26, solvable map 12,21 and monomial
map 18 refactorizations.

3. Symplectic Polynomial Maps

In this section we study symplectic polynomial maps in some detail. We start
by describing the diﬀerence between monomial maps and polynomial maps with
respect to presence of poles and branch points. This diﬀerence can be illustrated
using the following examples. Consider the monomial symplectic map exp(: q2
1p1 :).
Its action on q1, p1 in a two dimensional phase space is given as follows:

′
1 = exp(: q2
q

1p1 :)q1 =

′
1 = exp(: q2

p

1p1 :)p1 = p1(1 + q1)2.

(10)

q1
1 + q1

;

This map has a pole at q1 = −1.

On the other hand, consider the symplectic map exp(: a1q3

1 + a2p1 :) where a1,
a2 are real constants. We determine its action on phase space variables as follows.
Note that the symplectic map is of the form exp(: h(z) :) where h(z) is a function
which depends only on the phase space variables z and is independent of time t. If
we take h(z) to be the Hamiltonian function, then solving the Hamilton’s equations

Polynomial Map Symplectic Algorithm

of motion for this Hamiltonian from time t = ti to time t = tf is equivalent to the
following symplectic map action 22:

z(t = tf ) = exp[−(tf − ti) : h(z) :]z(t = ti).

(11)

Equivalently, obtaining the action of the symplectic map exp[−(tf − ti) : h(z) :] on
the phase space variables is the same as solving the Hamilton’s equations of motion
with h(z) as the Hamiltonian from time ti to tf . Setting ti = 0 and tf = −1 we have
the following equivalence: Obtaining the action of the symplectic map exp(: h(z :)
on phase space variables is equivalent to solving the Hamilton’s equations of motion
using h(z) as the Hamiltonian from time t = 0 to time t = −1. In this case, z(0)
will correspond to the initial values of the phase space variables and z(−1) to the
ﬁnal values obtained after the action of the map exp(: h(z :).

Returning to our symplectic map, we obtain its action by ﬁrst solving the Hamil-
ton’s equations of motion from time t = 0 to t = −1 using the argument of the Lie
transformation, h = a1q3
1 + a2p1, as the Hamiltonian. The Hamilton’s equations of
motion are given by:

dq1
dt
dp1
dt

=

∂h
∂p1

,

= −

∂h
∂q1

.

(12)

Solving these simple equations, we obtain:

q1(t) = q1(0) + a2t;
p1(t) = p1(0) − a1a2

2t3 − 3a1a2q1(0)t2 − 3a1q1(0)2t.

(13)

where q1(0) and p1(0) denote the values of q1 and p1 at time t = 0. To obtain the
action of the map exp(: a1q3
1 + a2p1 :) on the phase space variables, we set t = −1
in the above equations and denote q1(−1), p1(−1) by qf in
and q1(0), p1(0) by
1 , pin
qin

, pf in
1

1

1 respectively. Thus we get
pf in
1 = pin

qf in
1 = qin

1 − a2,

1 + a1a2

2 − 3a1a2qin

1 + 3a1(qin

1 )2.

(14)

Using Eq. (4), we can easily verify that the above result is indeed correct. We note
that the ﬁnal values of the phase space variables are polynomial functions of the
initial variables and therefore involve no poles or branch points. This is an example
of a polynomial map.

We now determine the classes of symplectic maps which are also polynomial
maps. We obtain the following simple principles which are equally applicable in
higher dimensions.

1. All polynomials of the form h(z) where both a phase space variable and its
canonically conjugate variable 29 do not occur simultaneously give rise to
symplectic polynomial maps via exp(: h(z) :). We will call such h(z)’s as
polynomials of the ﬁrst type.

Polynomial Map Symplectic Algorithm

2. If a canonically conjugate pair qi, pi is present in the polynomial h(z) and it
appears either in the form [a(¯z)qi + g(pi, ¯z)]m or [a(¯z)pi + g(qi, ¯z)]m (where
m = 1, 2 . . ., ¯z = {qj, pk} with j 6= k 6= i and a, g are polynomials in the
indicated variables), then this polynomial h(z) again gives rise to a symplectic
polynomial map via exp(: h(z) :). If a product/sum of such factors appears
in h(z), each term in the product/sum is a function of diﬀerent canonically
conjugate pairs. We will call h(z)’s of the form described above as polynomials
of the second type.

We can prove the above results as follows. Let ˆz denote a collection of phase
space variables {qj, pk} with j 6= k. Thus polynomials of the ﬁrst type are of the
form h(ˆz). The polynomial map is then given by exp(: h(ˆz) :). As described earlier,
its action on the phase space variables is given by solving the Hamilton’s equations
of motion from time t = 0 to t = −1 using h(ˆz) as the Hamiltonian. From classical
mechanics 29 each of the variables in the collection ˆz is a cyclic variable and is
therefore conserved by the Hamiltonian. Thus ˆz(t) = ˆz(0). Consequently

ˆzf in = exp(: h(ˆz) :)ˆzin = ˆzin.

Next we consider the action of this map on the variable ˜zj which is canonically con-
jugate to ˆzj. Solving Hamilton’s equations of motion with h(ˆz) as the Hamiltonian
from time t = 0 to t = −1 we get

where r is zero if ˜zi is a coordinate variable and 1 otherwise. As before, the action
of exp(: h(ˆz) :) on ˜zj is obtained by setting ˜zj(0) as ˜zj

in and ˜zj(−1) as ˜zi

f in:

˜zj(−1) = ˜zj(0) − (−1)r dh
dˆzj

(ˆzj(0)),

˜zj

f in = ˜zj

in − (−1)r dh
dˆzj

(ˆzin

j ).

(15)

(16)

(17)

Since h(ˆz) is a polynomial in ˆz, the right hand side of the above equation is a
polynomial in ˆz and ˜z. From Eqs. (15) and (17) we conclude that exp(: h(ˆz) :) is
a polynomial map. Further, since all Lie transformations are symplectic maps 22,
exp(: h(ˆz) :) is a symplectic polynomial map.

Next we consider polynomials h(z) of the second type described in item 2) above.
Let h(z) = [a(¯z)qi + g(pi, ¯z)]m where qi, pi is a canonically conjugate pair. Further
m is a positive integer, ¯z = {qj, pk} with j 6= k 6= i and a, g are polynomials in the
indicated variables. We will show that exp(: h(z) :) is a polynomial map. The proof
for the case h′(z) = [a(¯z)pi + g(qi, ¯z)]m is similar. A concrete example of the type
of h(z) that we are considering is given by h(z) = (α1p2 + α2p3 + α3p2
2 + α4p2p3 +
α5p2

3 + α6q3p2)m where αi’s are real constants.
As before we ﬁrst solve the Hamilton’s equations of motion with h(z) as the
Hamiltonian. Since each of the variables in the collection denoted by ¯z is cyclic, we
have ¯z(t) = ¯z(0) and

¯zf in = exp(: h(¯z) :)¯zin = ¯zin.

(18)

Polynomial Map Symplectic Algorithm

Solving the Hamilton’s equation of motion for pi we get

dpi
dt

= −

∂h(z)
∂qi

= −m[a(¯z(0))qi(0) + g(pi(0), ¯z(0))]m−1a(¯z(0)),

(19)

where we have used the fact that [a(¯z)qi + g(pi, ¯z)] is a conserved quantity under
this Hamiltonian ﬂow i.e. [a(¯z)qi + g(pi, ¯z)] = [a(¯z(0))qi(0) + g(pi(0), ¯z(0))]. Solving
this simple equation we obtain

pi(t) = pi(0) − m[a(¯z(0))qi(0) + g(pi(0), ¯z(0))]m−1a(¯z(0))t.

(20)

Note that pi(t) is a polynomial in both z and t. Setting t = −1 and denoting
z(0), z(−1) by zin, zf in respectively, we see that pf in
is a
polynomial in zin:

i = exp(: h(z)

:)pin
i

pf in
i = pin

i + m[a(¯zin)qin

i ) + g(pin

i , ¯zin)]m−1a(¯zin).

(21)

The equation of motion for qi gives us

dqi
dt

=

∂h(z)
∂pi

= −m[a(¯z(0))qi(0) + g(pi(0), ¯z(0))]m−1 dg(pi, ¯z)

.

(22)

dpi

Since pi(t) is a polynomial in z and t, the right hand side of the above equation
is also a polynomial in z and t. Therefore, the above diﬀerential equation can be
easily integrated to give qi(t) which is guaranteed to be a polynomial in z and t.
Setting t = −1 and denoting z(0), z(−1) by zin, zf in respectively, we obtain the
result that qf in
is a polynomial in zin. Finally, the equation of
i = exp(: h(z) :)qin
i
motion for ˘zj, the variable canonically conjugate to ¯zj, is given by

d˘zj
dt

= (−1)r ∂h(z)
∂ ¯zj

= (−1)rm[a(¯z(0))qi(0) + g(pi(0), ¯z(0))]m−1

×

d[a(¯z)qi + g(pi, ¯z)]
d¯zj

(¯z = ¯z(0)),

(23)

where r is zero if ˘zj is a coordinate variable and 1 otherwise. The right hand side is
a polynomial function of qi, pi both of which in turn are polynomials in t. Hence the
equation can be integrated giving ˘zj(t) as a polynomial in z and t. Setting t = −1
f in = exp(: h(z) :
and denoting z(0), z(−1) by zin, zf in respectively, we ﬁnd that ˘zj
is a polynomial in zin. Thus we have proved that exp(: h(z) :) is a (symplectic)
)˘zin
j
polynomial map.

To conclude, we consider the case where a sum/product of factors of the form
[a(¯z)qi +g(pi, ¯z)]m or [a(¯z)pi+g(qi, ¯z)]m appear in h(z). If a phase space variable ap-
pears in one factor of the sum/product, by assumption, neither this variable nor its
canonically conjugate variable appears in the remaining factors of the sum/product.
Therefore each term in the sum/product is independently conserved by the Hamil-
tonian ﬂow generated by h(z) and acts only on the phase space variables appearing

Polynomial Map Symplectic Algorithm

in that term. Consequently each term can be considered separately and since each
term is of the form [a(¯z)qi + g(pi, ¯z)]m or [a(¯z)pi + g(qi, ¯z)]m, the argument given
above can be immediately applied proving that exp(: h(z) :) is a symplectic poly-
nomial map even in this case. This completes the proof of the claims made in items
1) and 2). We conjecture that all symplectic polynomial maps have one of the two
forms enumerated above.

4. Symplectic Integration using Polynomial Maps

In this section, we return to the problem of symplectic integration. We restrict
ourselves to symplectic maps in a six dimensional phase space truncated at order
4. The results obtained below can be generalized to both higher orders and higher
dimensions using symbolic manipulation programs. The Dragt-Finn factorization
of the symplectic map is given by:

where

M = ˆM e:f3: e:f4:,

f3 = a28q3
f4 = a84q4

1 + a29q2
1 + a85q3

1p1 + · · · + a83p3
3,
1p1 + · · · + a209p4
3.

(24)

(25)

Here the coeﬃcients a28, . . . , a209 can be explicitly computed given a Hamiltonian
system22 and are therefore known to us. The numbering of these monomial coeﬃ-
cients follows the standard Giorgilli scheme 30. The above map captures the leading
order nonlinearities of the system. Since the action of the linear part ˆM on phase
space variables is well known [cf. Eq. (6)] and is already a polynomial action, we
only refactorize the nonlinear part of the map using N polynomial maps 31. This
is done as follows:

M ≈ P = ˆM e:h1: e:h2: · · · e:hN :,
(26)
where e:hi:’s are symplectic polynomial maps and the numeral appearing in the
subscript indexes the polynomial maps. The polynomial maps are determined by
requiring that P agree with M up to order 4. That is, when the N polynomial
maps are combined, the resulting symplectic map should have all the monomials
present in f3 and f4 with the correct coeﬃcients up to order 4.

The basic idea in obtaining the required refactorization is to group the monomial
terms present in f3 and f4 [cf. Eq. (25)] such that the Lie transformation corre-
sponding to each grouping gives a polynomial map. It is obviously easy to handle
monomials where both members of the canonically conjugate pair are not present
simultaneously. They can be grouped into diﬀerent polynomials (for example, mono-
mials involving only the coordinate variables qi’s in one group and those involving
only the momentum variables pi’s in another group etc.) so that each one of these
is a polynomial of the ﬁrst type. Since a product of two Lie transformations (e:f3:
and e:f4:) is being refactorized as a product of many simpler polynomial symplec-
tic maps, the coeﬃcients multiplying the monomials in each individual polynomial

Polynomial Map Symplectic Algorithm

map will be in general diﬀerent from the coeﬃcient multiplying the corresponding
monomial in Eq. (25). The relation between these coeﬃcients is easily obtained
using the CBH theorem 28. Monomials s(z) where both members of the canonically
conjugate pair are present simultaneously (like for example, s(z) = q3
1p1) are more
diﬃcult to handle since the corresponding Lie transformations e:s(z): typically give
rise to poles and branch points which we wish to avoid. But by using a product of
two polynomial maps of type 2 with carefully chosen coeﬃcients, these can also be
generated.

Using the above procedure, it turns out that we require 23 polynomial maps for

M ≈ P = ˆM e:h1: e:h2: · · · e:h23:,

(27)

refactorization:

The hi’s are given as follows:

1 b28 + q2
h1 = q3
2 b64 + q2
q3
q2
1 q2
q1 q2 q2
q2 q3

3 b127 + q1 q3
3 b205,

3 b191 + q4

1 q2 b30 + q2
2 q3 b66 + q2 q2

2 b39 + q1 q2 q3 b41 + q1 q2
1 q2 b86 + q3

3 b46 +
1 q3 b88 +

1 q3 b32 + q1 q2
3 b71 + q3
1 q2
3 b136 + q4

3 b80 + q4
3 b102 + q1 q3
2 b175 + q3

1 b84 + q3
2 b120 + q1 q2
2 q2

2 q3 b177 + q2

2 q3 b122 +
3 b182 +

2 b95 + q2

1 q2 q3 b97 + q2

h2 = [(b29 + b34) + q2 (b91 + b106) + p2 (b92 + b107) + q3 (b93 + b108) +

p3 (b94 + b109)] (p1 + q1)3,

h3 = [(−b29 + b34) + q2 (−b91 + b106) + p2 (−b92 + b107) +

q3 (−b93 + b108) + p3 (−b94 + b109)] (−p1 + q1)3,
h4 = [(b65 + b68) + q1 (b121 + b124) + p1 (b156 + b159) +

q3 (b180 + b186) + p3 (b181 + b187)] (p2 + q2)3,
h5 = [(−b65 + b68) + q1 (−b121 + b124) + p1 (−b156 + b159) +

q3 (−b180 + b186) + p3 (−b181 + b187)] (−p2 + q2)3,

h6 = [(b81 + b82) + q1 (b137 + b138) + p1 (b172 + b173) + q2 (b192 + b193) +

p2 (b202 + b203)] (p3 + q3)3,

h7 = [(−b81 + b82) + q1 (−b137 + b138) + p1 (−b172 + b173) +

q2 (−b192 + b193) + p2 (−b202 + b203)] (−p3 + q3)3,

h8 = (p1 + q1)2
h9 = (p1 + q1)2
h10 = (p2 + q2)2
h11 = (p2 + q2)2
h12 = (p3 + q3)2
h13 = (p3 + q3)2
h14 = p2 q2

(cid:0)q2 b35 + q3 b37 + q2
(cid:0)p2 b36 + p3 b38 + p2
(cid:0)q1 b40 + q3 b69 + q2
(cid:0)p1 b55 + p3 b70 + p2
(cid:0)q1 b47 + q2 b72 + q2
(cid:0)p1 b62 + p2 b78 + p2
1 b33 + p2

2 b110 + q2 q3 b112 + p3 q2 b113 + q2
2 b114 + p2 q3 b115 + p2 p3 b116 + p2
1 b96 + q1 q3 b125 + p3 q1 b126 + q2
1 b146 + p1 q3 b160 + p1 p3 b161 + p2
1 b103 + q1 q2 b128 + p2 q1 b134 + q2
1 b153 + p1 q2 b163 + p1 p2 b169 + p2

3 b117(cid:1) ,
3 b119(cid:1) ,

3 b188(cid:1) ,

3 b190(cid:1) ,
2 b183(cid:1) ,
2 b199(cid:1) ,

1 b31 + p3 q2

2 q1 b43 + p2 p3 q1 b45 + p2

3 q1 b48 + p2 q3

1 b87 +

Polynomial Map Symplectic Algorithm

1 b99 + p2 p3 q2

3 q1 b135 + p3

1 b101 + p2
3 q1 b139,

3 q2

1 b104 + p3

2 q1 b130 +

1 q3 b52 + p1 q2
1 q2
2 b145 + p2

2 b54 + p1 q2 q3 b56 + p1 q2
1 q2 q3 b147 + p2

3 b152 + p1 q3

1 q2

2 b155 +

3 b61 + p3

1 q2 b141 +

3 b162 + p1 q3

3 b171,
3 q2 b73 + p2

2 b67 + p2
2 b178 + p2
2 q3 b75 + p2 q2
2 q3 b196 + p2
1 p2 q3 b150 + p1 p2
1 q2 b98 + p3 q1 q2
1 p3 b53 + p1 p2
3 b79 + p3

1 p3 q2 b148 + p1 p3 q2

2 b158 +

2 b184 + p3
3 q2
3 b77 + p2 q2
2 q2

3 b198 + p2 q3

3 q2 b194,
1 q3 b100 + p2
3 b201,

2 q1 q3 b131 +

3 b168,

2 q3 b166 + p1 p2 q2
2 b123 + p2
3 q1 q2 b129,
2 b58 + p1 p2 p3 b60 + p1 p2
1 p2 b142 +

3 b83 + p4
1 p2 p3 b151 + p2

1 b140 + p3
1 p2
3 b174 + p4

3 b154 + p1 p3
2 b195 + p3

2 b165 +
2 p3 b197 +

3 b63 +

2 q2

1 b89 + p2

p3 q3
p2
2 p3 q1 b132 + p2 p2
h15 = p2
1 q2 b50 + p2
p3
1 q3 b143 + p2
p1 q2

2 q3 b157 + p1 q2 q2

h16 = p1 p3 q2 b57 + p3 q2
3 q2 b164 + p3 q3

p1 p2
h17 = p2 q1 q3 b44 + p2
p2 q1 q2
3 b133 + p3
h18 = p1 p2 q3 b59 + p2
h19 = p3 q1 q2 b42 + p3 q2
h20 = p3
1 b49 + p2
2 b74 + p2
p3
p3
1 p3 b144 + p2
p1 p2
2 p2
p2
h21 = (cid:0)p1 + q1 + p2
h22 = (cid:0)−p1 − q1 + q2
(cid:0)−p3 − q3 + q2

1 p2

3
1 b105(cid:1)
3
1 b85(cid:1)
3
3 b206(cid:1)

1 p2 b51 + p2
2 p3 b76 + p2 p2

2 b149 + p2

2 p3 b167 + p1 p2 p2
3 b200 + p2 p3

3 b204 + p4

3 b170 + p1 p3
3 b209,
+ (cid:0)p2 + q2 + p2
+ (cid:0)−p2 − q2 + q2
,

3
2 b185(cid:1)

+ (cid:0)p3 + q3 + p2

3
3 b208(cid:1)

,

3
2 b176(cid:1)

+

h23 = (p1 + q1)4 b90 + (p1 + q1)2 (p2 + q2)2 b111 + (p1 + q1)2 (p3 + q3)2 b118
+(p2 + q2)4 b179 + (p2 + q2)2 (p3 + q3)2 b189 + (p3 + q3)4 b207.

Here bi’s are at present unknown coeﬃcients. As mentioned above, by forcing the
refactorized form P to equal the original map M up to order 4 and using the
CBH theorem28, we can easily compute these unknown coeﬃcients in terms of the
known ai’s. These expressions are available from the author as part of a FORTRAN
program implementing the above algorithm.

The explicit actions of the polynomial maps on phase space variables can be
obtained and they are given below. This completely determines the refactorized
map P. Each exp(: hi :) is a polynomial map which can be evaluated exactly and
is explicitly symplectic. Thus by using P instead of M in Eq. (8), we obtain an
explicitly symplectic integration algorithm. Further, it is fast to evaluate and does
not introduce spurious poles and branch points. The above factorization is not
unique. However, the principles outlined earlier impose restrictions on the possible
forms and this eases considerably the task of refactorization. Moreover, we require
the coeﬃcients bi to be polynomials in the known coeﬃcients ai. Otherwise this can
lead to divergences when ai’s take on certain special values. Finally, we minimize
the number of polynomial maps in the refactorized form. Our studies show that

Polynomial Map Symplectic Algorithm

diﬀerent polynomial map refactorizations obeying the above restrictions do not lead
to any signiﬁcant diﬀerences in their behavior.

We now derive the explicit actions of the polynomial maps on phase space vari-
ables. First consider exp(: h1 :). We obtain its action on the phase space variables
by following the procedure outlined in the paragraph before Eq. (12). We notice
that h1 = h1(q1, q2, q3) depends only on the coordinate variables which are therefore
cyclic variables. Hence we immediately obtain: qi(t) = qi(0) (i = 1, 2, 3). Solving
the Hamilton’s equations of motion for pi with h1 as the Hamiltonian from t = 0
to t = −1 we get:

pi(−1) = pi(0) +

(q1(0), q2(0), q3(0)),

i = 1, 2, 3.

(28)

∂h1
∂qi

Denoting zi(0) and zi(−1) by zin
of exp(: h1 :):

i and zf in

i

respectively, we ﬁnally obtain the action

qf in
i = qin
i

;

pf in
i = pin

i +

(qin

1 , qin

2 , qin

3 ),

i = 1, 2, 3.

(29)

∂h1
∂qi

Next consider the action of exp(: h2 :). The 2 factors in the product are inde-

pendently conserved under the Hamiltonian ﬂow. Consequently, we have

A2 = [(b29 + b34) + q2 (b91 + b106) + p2 (b92 + b107) +

q3 (b93 + b108) + p3 (b94 + b109)]

= [(b29 + b34) + q2(0) (b91 + b106) + p2(0) (b92 + b107) +

q3(0) (b93 + b108) + p3(0) (b94 + b109)] ,

(30)

B2 = (q1 + p1) = (q1(0) + p1(0)).

Solving Hamilton’s equation of motion with h2 as the Hamiltonian from t = 0 to
t = −1 we get

q1(−1) = q1(0) − 3A2B2
2 ;
q2(−1) = q2(0) − B3
q3(−1) = q3(0) − B3

2 (b92 + b107) ;
2 (b94 + b109) ;

p1(−1) = p1(0) + 3A2B2
2;

p2(−1) = p2(0) + B3
p3(−1) = p3(0) + B3

2 (b91 + b106) ; (31)
2 (b93 + b108) .

respectively, we obtain the action of

Denoting zi(0) and zi(−1) by zin
i
exp(: h2 :):

and zf in

i

qf in
1
qf in
2
qf in
3

pf in
1 = pin

= qin
= qin
= qin

1 − 3A2B2
2 ;
2 − B3
3 − B3

2 (b92 + b107) ;
2 (b94 + b109) ;

1 + 3A2B2
2;
pf in
2 = pin
2 + B3
pf in
3 = pin
3 + B3

2 (b91 + b106) ;
2 (b93 + b108) ,

(32)

where A2, B2 are now functions of zin. The actions of exp(: hi :), i = 3, 4, . . . , 7
on the phase space variables are obtained in a similar fashion and these actions are
listed in the Appendix.

(33)

(34)

We now consider the action of exp(: h8 :). From the Hamilton’s equations of

motion, we have the following conserved quantities:

Polynomial Map Symplectic Algorithm

A8 = (cid:0)q2 b35 + q3 b37 + q2

2 b110 + q2 q3 b112 + p3 q2 b113 + q2

3 b117(cid:1)

2(0)b110 + q2(0)q3(0)b112+

= (cid:0)q2(0)b35 + q3(0)b37 + q2
p3(0)q2(0)b113 + q2
3(0)b117(cid:1) ,
B8 = (q1 + p1) = (q1(0) + p1(0)).

Solving the equations of motion for qi’s with h8 as the Hamiltonian from t = 0 to t
we get:

q1(t) = q1(0) + 2A8B8t;
q3(t) = q3(0) + B2

8 b113q2(0)t.

q2(t) = q2(0);

For the momentum variables we get the following diﬀerential equations:

= −2A8B8,

dp1(t)
dt
dp2(t)
dt
dp3(t)
dt

= −B2

8[b35 + 2b110q2(t) + b112q3(t) + b113p3(t)],

(35)

= −B2

8[b37 + b112q2(t) + 2b117q3(t)].

The ﬁrst equation can be trivially solved to obtain p1(t). After substituting for
q2(t) and q3(t) which are known, we can next solve the last equation for p3(t).
Substituting this in the second equation, we ﬁnally get p2(t). Setting t = −1 and
denoting zi(0), zi(−1) by zin
respectively, we obtain the action of exp(: h8 :):
i

, zf in
i

qf in
1
qf in
2

qf in
3
pf in
3

pf in
= qin
1 = pin
1 − 2A8B8;
pf in
= qin
2 = pin
2 + B2
2 ;
8 b113(b37/2 + b113qin
B2
8b113qin
= qin
3 − B2
2 ;
8 (cid:2)b37 + b112qin
= pin
3 + B2

1 + 2A8B8;
8 (cid:2)b35 + 2b110qin
3 − B2

8b113b117qin

2 + b112qin
2 /3)(cid:3) ;

3 + b113pin

3 +

(36)

2 + 2b117qin

3 − B2

8b113b117qin

2 (cid:3) ,

where A8, B8 are now functions of zin. The actions of exp(: hi :), i = 9, 10, . . ., 13
on the phase space variables are obtained in a similar fashion and these actions are
listed in the Appendix.

Next consider the action of exp(: h14 :). We notice that h14 = h14(q1, p2, p3) is
independent of p1, q2 and q3. Hence q1, p2, p3 are cyclic variables and are conserved
under the action of the Hamiltonian. Solving the Hamilton’s equations of motion
for p1, q2 and q3 with h14 as the Hamiltonian from t = 0 to t = −1 we get:

p1(−1) = p1(0) +

(q1(0), p2(0), p3(0)),

∂h14
∂q1

Polynomial Map Symplectic Algorithm

q2(−1) = q2(0) −

(q1(0), p2(0), p3(0)),

(37)

q3(−1) = q3(0) −

(q1(0), p2(0), p3(0)).

∂h14
∂p2
∂h14
∂p3

Denoting zi(0) and zi(−1) by zin
of exp(: h14 :):

i and zf in

i

respectively, we ﬁnally obtain the action

qf in
1

= qin
1 ;

pf in
1 = pin

1 +

(qin

1 , pin

2 , pin

3 ),

∂h14
∂q1
2 , pin

3 ),

∂h14
∂p2
∂h14
∂p3

qf in
2

= qin

2 −

(qin

1 , pin

pf in
2 = pin
2 ,

(38)

qf in
3

= qin

3 −

(qin

1 , pin

2 , pin

3 ),

pf in
3 = pin
3 .

The actions of exp(: hi :), i = 15, 16, . . . , 20 on the phase space variables are ob-
tained in a similar fashion and these actions are listed in the Appendix.

We now consider the action of exp(: h21 :). From the Hamilton’s equations of

motion, we have the following conserved quantities:

A21 = (cid:0)p1 + q1 + p2
B21 = (cid:0)p2 + q2 + p2
C21 = (cid:0)p3 + q3 + p2

1 b105(cid:1) = (cid:0)p1(0) + q1(0) + p2
2 b185(cid:1) = (cid:0)p2(0) + q2(0) + p2
3 b208(cid:1) = (cid:0)p3(0) + q3(0) + p2

1(0) b105(cid:1),
2(0) b185(cid:1)
3(0) b208(cid:1).

Solving the equations of motion for pi’s with h21 as the Hamiltonian from t = 0 to
t we get:

p1(t) = p1(0) − 3A2
p3(t) = p3(0) − 3C2

21t;
21t.

p2(t) = p2(0) − 3B2

21t;

The equations of motion for qi’s are given as:

(39)

(40)

(41)

dq1(t)
dt
dq2(t)
dt
dq3(t)
dt

= 3A2

21(1 + 2b105p1(t)),

= 3B2

21(1 + 2b185p2(t)),

= 3B2

21(1 + 2b208p3(t)).

Substituting the expressions for p1(t), p2(t), p3(t) obtained earlier, the above equa-
, zf in
tions can be easily solved. Setting t = −1 and denoting zi(0), zi(−1) by zin
i
i
respectively, we obtain the action of exp(: h21 :):

qf in
1
qf in
2
qf in
3

= qin
= qin
= qin

1 − 3A2
2 − 3B2
3 − 3C2

21(1 + 2b105pin
21(1 + 2b185pin
21(1 + 2b208pin

1 + 3A2
2 + 3B2
3 + 3C2

21b105);
21b185);
21b208);

pf in
1 = pin
pf in
2 = pin
pf in
3 = pin

1 + 3A2
21;
2 + 3B2
21;
3 + 3C2
21,

Polynomial Map Symplectic Algorithm

where A21, B21, C21 are now functions of zin. The action of exp(: h22 :) on the
phase space variables is obtained in a similar fashion and is listed in the Appendix.
Finally, we consider the action of exp(: h23 :). From the Hamilton’s equations

of motion, we have the following conserved quantities:

A23 = (p1 + q1) = (p1(0) + q1(0)),
B23 = (p2 + q2) = (p2(0) + q2(0)),
C23 = (p3 + q3) = (p3(0) + q3(0)).

From the equations of motion with h23 as the Hamiltonian we get:

dq1(t)
dt
dq2(t)
dt
dq3(t)
dt

= −

= −

= −

dp1(t)
dt
dp2(t)
dt
dp3(t)
dt

= 4b90A3

23 + 2b111A23B2

23 + 2b118A23C2
23,

= 4b179B3

23 + 2b111A2

23B23 + 2b189B23C2
23,

= 4b207C3

23 + 2b118A2

23C23 + 2b189B2

23C23.

(43)

Solving these equations from t = 0 to t = −1 and denoting zi(0), zi(−1) by zin
i
zf in
i

respectively, we obtain the action of exp(: h23 :):

,

qf in
1
pf in
1
qf in
2
pf in
2
qf in
3
pf in
3

= qin
= pin
= qin
= pin
= qin
= pin

1 − [4b90A3
1 + [4b90A3
2 − [4b179B3
2 + [4b179B3
3 − [4b207C3
3 + [4b207C3

23 + 2b111A23B2
23 + 2b111A23B2
23 + 2b111A2
23 + 2b111A2
23 + 2b118A2
23 + 2b118A2

23 + 2b118A23C2
23];
23 + 2b118A23C2
23];
23B23 + 2b189B23C2
23];
23B23 + 2b189B23C2
23];
23C23 + 2b189B2
23C23];
23C23 + 2b189B2
23C23],

(42)

(44)

where A23, B23, C23 are now functions of zin.

Substituting in Eq. (27) the explicit formulas for the actions of the polynomial
maps listed above and in the Appendix, we can evaluate the action of P without
violating the symplectic condition. Using this explicitly symplectic map in Eq. (8),
we have the desired symplectic integration algorithm.

5. Applications

We have applied the method to a large particle storage ring for storing charged
particles. This storage ring consists of 5109 individual elements (where these ele-
ments could be drifts, bending magnets, quadrupoles or sextupoles). If one tries to
numerically integrate the trajectory of a charged particle through this ring using a
conventional integration algorithm, one has to go through the ring element by ele-
ment where each element is described by its own Hamiltonian. This is cumbersome
and slow and further, does not respect the Hamiltonian nature of the system. On
the other hand, a map based approach where one represents the entire storage ring

Polynomial Map Symplectic Algorithm

in terms of a single map is much faster 24,25. When this is combined with our poly-
nomial map refactorization, one obtains a symplectic integration algorithm which
is both fast and accurate and is ideally suited for such complex real life systems.
The q1 − p1 phase plot for one million turns around the ring using our polynomial
map method is given in Figure 1. In this case, q1 and p1 represent the deviations
from the closed orbit coordinate and momentum respectively. From theoretical con-
siderations, we expect the so-called betatron oscillations in these variables. This
manifests itself as ellipses in the phase space plot of q1 and p1 variables. In Figure
1, we observe the expected betatron oscillations. We also see the thickening of the
ellipses caused by nonlinearities present in the sextupoles.

1
p

0

0.0004

0.0003

0.0002

0.0001

-0.0001

-0.0002

-0.0003

-0.0004

-0.0004

-0.0003

-0.0002

-0.0001

0.0001

0.0002

0.0003

0.0004

0

q1

Fig. 1. This ﬁgure shows the q1 − p1 phase space plot for one million turns around a storage ring
using the polynomial map method (only every 1000th point is plotted).

6. Conclusions

To conclude, we described in detail a new symplectic integration algorithm based
on polynomial map refactorization. We enumerated the types of symplectic maps
which give rise to polynomial actions on phase space variables. For a six dimensional
phase space, we obtained the refactorization of a given symplectic map in terms of 23
polynomial maps. The explicit actions of these polynomial maps were derived. This
polynomial map method can be used to study long term stability of complicated

Polynomial Map Symplectic Algorithm

nonlinear Hamiltonian systems.

Acknowledgements

This work was supported by the Homi Bhabha Fellowship. The author is also
associated with the Jawaharlal Nehru Center for Advanced Scientiﬁc Research as a
honorary faculty member.

Appendix A

The actions of polynomial maps exp(: hi :) which were not listed in the main text
are given in this Appendix.

The action of exp(: h3 :) is given as follows:

qf in
1
qf in
2
qf in
3

pf in
1 = pin

= qin
= qin
= qin

1 + 3A3B2
3;
2 − B3
3 − B3

3 (−b92 + b107) ;
3 (−b94 + b109) ;

1 + 3A3B2
3 ;
pf in
2 = pin
2 + B3
pf in
3 = pin
3 + B3

3 (−b91 + b106) ;
3 (−b93 + b108) ,

where

where

where

A3 = (cid:2)(−b29 + b34) + qin

qin
3 (−b93 + b108) + pin
B3 = (qin
1 − pin

1 ).

2 (−b91 + b106) + pin
3 (−b94 + b109)(cid:3) ,

2 (−b92 + b107) +

The action of exp(: h4 :) is given as follows:
pf in
1 = pin
1 + B3
2 + 3A4B2
4;
pf in
3 = pin
3 + B3

1 − B3
2 − 3A4B2
4 ;
3 − B3

= qin
= qin
= qin

qf in
1
qf in
2
qf in
3

4 (b181 + b187) ;

4 (b156 + b159) ;

pf in
2 = pin

4 (b121 + b124) ;

4 (b180 + b186) ,

A4 = (cid:2)(b65 + b68) + qin

qin
3 (b180 + b186) + pin
2 + pin
B4 = (qin

2 ).

1 (b121 + b124) + pin
3 (b181 + b187)(cid:3) ,

1 (b156 + b159) +

The action of exp(: h5 :) is given as follows:
pf in
1 = pin
1 + B3
2 + 3A5B2
5;
pf in
3 = pin
3 + B3

1 − B3
2 + 3A5B2
5;
3 − B3

= qin
= qin
= qin

5 (−b156 + b159) ;

5 (−b181 + b187) ;

qf in
1
qf in
2
qf in
3

pf in
2 = pin

5 (−b121 + b124) ;

5 (−b180 + b186) ,

A5 = (cid:2)(−b65 + b68) + qin

3 (−b180 + b186) + pin
qin
2 − pin
B5 = (qin

2 ).

1 (−b121 + b124) + pin
3 (−b181 + b187)(cid:3) ,

1 (−b156 + b159) +

(1)

(2)

(3)

(4)

(5)

(6)

Polynomial Map Symplectic Algorithm

The action of exp(: h6 :) is given as follows:
pf in
1 = pin
1 + B3
pf in
2 = pin
2 + B3
3 + 3A6B2
6,

1 − B3
2 − B3
3 − 3A6B2
6 ;

6 (b172 + b173) ;
6 (b202 + b203) ;

= qin
= qin
= qin

qf in
1
qf in
2
qf in
3

pf in
3 = pin

6 (b137 + b138) ;
6 (b192 + b193) ;

where

where

A6 = (cid:2)(b81 + b82) + qin

2 (b192 + b193) + pin
qin
3 + pin
B6 = (qin

3 ).

1 (b137 + b138) + pin
2 (b202 + b203)(cid:3) ,

1 (b172 + b173) +

The action of exp(: h7 :) is given as follows:
pf in
1 = pin
1 + B3
pf in
2 = pin
2 + B3
3 + 3A7B2
7,

1 − B3
2 − B3
3 + 3A7B2
7;

7 (−b172 + b173) ;
7 (−b202 + b203) ;

= qin
= qin
= qin

qf in
1
qf in
2
qf in
3

pf in
3 = pin

7 (−b137 + b138) ;
7 (−b192 + b193) ;

(9)

A7 = (cid:2)(−b81 + b82) + qin

2 (−b192 + b193) + pin
qin
B7 = (qin
3 + −pin
3 ).

1 (−b137 + b138) + pin
2 (−b202 + b203)(cid:3) ,

1 (−b172 + b173) +

The action of exp(: h9 :) is given as follows:

qf in
1
qf in
2

qf in
3
pf in
3

pf in
1 = pin
9 (cid:2)−b36 − 2b114pin

= qin
1 − 2A9B9;
= qin
2 + B2
9b115(b38/2 + b119pin
B2
9 (cid:2)b38 + b116pin
= qin
3 − B2
9 b115pin
= pin
3 + B2
2 ,

1 + 2A9B9;
2 − b115qin

3 + B2
2 + 2b119pin

9b115b119pin
3 + B2

3 +

3 − b116pin
pf in
2 = pin
2 /3)(cid:3) ;
9 b115b119pin
2 (cid:3) ;

2

3 b38 + (pin

2 )2 b114 + pin

2 qin

3 b115 + pin

2 pin

3 b116+

where

A9 = (cid:0)pin
(pin
B9 = (qin

2 b36 + pin
3 )2 b119(cid:1) ,
1 + pin
1 ).

qf in
1

The action of exp(: h10 :) is given as follows:
pf in
1 = pin
= qin
1 + B2
1 ;
10b126(b69/2 + b188qin
B2
= qin
2 − 2A10B10;
10b126qin
= qin
3 − B2
1 ;
10 (cid:2)b69 + b125qin
= pin
3 + B2

10 (cid:2)b40 + 2b96qin
3 − B2
pf in
2 = pin

qf in
2
qf in
3
pf in
3

1 + 2b188qin

10b126b188qin
2 + 2A10B10;

3 − B2

3 + b126pin

3 +

1 + b125qin
1 /3)(cid:3) ;

10b126b188qin

1 (cid:3) ,

(7)

(8)

(10)

(11)

(12)

(13)

Polynomial Map Symplectic Algorithm

where

A10 = (cid:0)qin

3 b69 + (qin

1 )2 b96 + qin

1 qin

3 b125 + pin

3 qin

1 b126

+(qin

1 b40 + qin
3 )2 b188(cid:1)
2 ).

2 + pin

B10 = (qin

The action of exp(: h11 :) is given as follows:

qf in
1

qf in
2
qf in
3
pf in
3

11 (cid:2)−b55 − 2b146pin

= qin
1 + B2
11b160(b70/2 + b190pin
B2
= qin
2 − 2A11B11;
= qin
3 − B2
= pin
3 + B2

3 + B2
pf in
2 = pin
11 (cid:2)b70 + b161pin
11b160pin
1 ,

1 − b160qin

3 − b161pin
3 +
1 /3)(cid:3) ;

11b160b190pin

pf in
1 = pin
1 ;

2 + 2A11B11
3 + B2

1 + 2b190pin

11b160b190pin

1 (cid:3) ;

(15)

where

A11 = (cid:0)pin
(pin
B11 = (qin

1 b55 + pin
3 )2 b190(cid:1) ,
2 + pin
2 ).

3 b70 + (pin

1 )2 b146 + pin

1 qin

3 b160 + pin

1 pin

3 b161+

The action of exp(: h12 :) is given as follows:

qf in
1

qf in
2
pf in
2
qf in
3

pf in
1 = pin
= qin
1 + B2
1 ;
12b134(b72/2 + b183qin
B2
= qin
12b134qin
2 − B2
1 ;
12 (cid:2)b72 + b128qin
= pin
2 + B2
pf in
3 = pin
= qin
3 − 2A12B12;

12 (cid:2)b47 + 2b103qin
2 − B2

12b134b183qin

1 + b128qin
1 /3)(cid:3) ;

2 + b134pin

2 +

1 + 2b183qin

2 − B2
3 + 2A12B12,

12b134b183qin

1 (cid:3) ;

(17)

where

A12 = (cid:0)qin
(qin
B12 = (qin

1 b47 + qin
2 )2 b183(cid:1)
3 + pin
3 ).

2 b72 + (qin

1 )2 b103 + qin

1 qin

2 b128 + pin

2 qin

1 b134+

The action of exp(: h13 :) is given as follows:

qf in
1

qf in
2
pf in
2
qf in
3

13 (cid:2)−b62 − 2b153pin

= qin
1 + B2
13b163(b78/2 + b199pin
B2
= qin
13 (cid:2)b78 + b169pin
2 − B2
= pin
13b163pin
2 + B2
1
= qin
3 − 2A13B13;

pf in
3 = pin

1 − b163qin

2 + B2
1 + 2b199pin

13b163b199pin
2 + B2

2 − b169pin
2 +
pf in
1 = pin
1 ;
1 /3)(cid:3) ;
13b163b199pin
1 (cid:3) ;

3 + 2A13B13,

(14)

(16)

(18)

(19)

Polynomial Map Symplectic Algorithm

where

A13 = (cid:0)pin
(pin
B13 = (qin

1 b62 + pin
2 )2 b199(cid:1) ,
3 + pin
3 ).

2 b78 + (pin

1 )2 b153 + pin

1 qin

2 b163 + pin

1 pin

2 b169+

(20)

The action of exp(: h15 :) is given as follows:

qf in
1

= qin

1 −

1 , qin

2 , qin

3 );

pf in
1 = pin
1 ,

(pin

∂h15
∂p1
pf in
2 = pin

2 +

∂h15
∂q2
∂h15
∂q3

qf in
2

= qin
2 ;

(pin

1 , qin

2 , qin

3 ),

(21)

qf in
3

= qin
3 ;

pf in
3 = pin

3 +

(pin

1 , qin

2 , qin

3 ).

The action of exp(: h16 :) is given as follows:

The action of exp(: h17 :) is given as follows:

qf in
1

= qin

1 −

1 , qin

2 , pin

3 );

pf in
1 = pin
1 ,

(pin

∂h16
∂p1
pf in
2 = pin

2 +

∂h16
∂q2
2 , pin

3 );

(pin

1 , qin

qf in
2

= qin
2 ;

qf in
3

= qin

3 −

∂h16
∂p3

pf in
3 = pin
3 .

(pin

1 , qin

2 , pin

3 ),

(22)

qf in
1

= qin
1 ;

pf in
1 = pin

1 +

(qin

1 , pin

2 , qin

3 ),

qf in
2

= qin

2 −

qf in
3

= qin
3 ,

1 , pin

(qin

∂h17
∂p2
pf in
3 = pin

3 +

pf in
2 = pin
2 ,

(23)

(qin

1 , pin

2 , qin

3 ), .

∂h17
∂q1
2 , qin

3 ),

∂h17
∂q3

(pin

∂h18
∂p1
∂h18
∂p2
pf in
3 = pin

(pin

The action of exp(: h18 :) is given as follows:

qf in
1

= qin

1 −

1 , pin

2 , qin

3 );

pf in
1 = pin
1 ,

qf in
2

= qin

2 −

1 , pin

2 , qin

3 ),

pf in
2 = pin
2 ,

(24)

qf in
3

= qin
3 ,

3 +

∂h18
∂q3

(pin

1 , pin

2 , qin

3 ).

The action of exp(: h19 :) is given as follows:

qf in
1

= qin
1 ;

pf in
1 = pin

1 +

(qin

1 , qin

2 , pin

3 ),

qf in
2

= qin
2 ;

pf in
2 = pin

2 +

(qin

1 , qin

2 , pin

3 ),

(25)

qf in
3

= qin

3 −

∂h19
∂p3

(qin

1 , qin

pf in
3 = pin
3 .

∂h19
∂q1
∂h19
∂q2
2 , pin

3 );

The action of exp(: h20 :) is given as follows:

Polynomial Map Symplectic Algorithm

qf in
1

= qin

1 −

(pin

1 , pin

2 , pin

3 );

pf in
1 = pin
1 ,

qf in
2

= qin

2 −

(pin

1 , pin

2 , pin

3 ),

pf in
2 = pin
2 ,

(26)

qf in
3

= qin

3 −

(pin

1 , pin

2 , pin

3 ),

pf in
3 = pin
3 .

∂h20
∂p1
∂h20
∂p2
∂h20
∂p3

The action of exp(: h22 :) is given as follows:

qf in
1
qf in
2
qf in
3

= qin
= qin
= qin

1 + 3A2
22;
2 + 3B2
22;
3 + 3C2
22;

pf in
1 = pin
pf in
2 = pin
pf in
3 = pin

1 − 3A2
2 − 3B2
3 − 3C2

22(1 − 2b85qin
22(1 − 2b176qin
22(1 − 2b206qin

1 − 3A2
2 − 3B2
3 − 3C2

22b85);
22b176);
22b206),

where

(27)

(28)

A22 = = (cid:0)−pin
B22 = (cid:0)−pin
C22 = (cid:0)−pin

2 − qin
3 − qin

1 − qin

1 + (qin

1 )2 b85(cid:1),

2 + (qin
3 + (qin

2 )2 b176(cid:1)
3 )2 b206(cid:1).

References

Hall, London, 1994).

(1983).

1. J. M. Sanz-Serna and M. P. Calvo, Numerical Hamiltonian Problems, (Chapman &

2. R. D. Ruth, A canonical integration technique, IEEE Trans. Nucl. Sci. 30, 2669

3. F. Kang, On diﬀerence schemes and symplectic geometry, in: Feng Kang ed., Proc.
1984 Beijing Symposium on Diﬀerential Geometry and Diﬀerential Equations
(Science Press, Beijing, 1985), p. 42–58.

4. F. Lasagni, Canonical R-K methods, ZAMP 39, 952 (1988).
5. F. Neri, Department of Physics Technical Report, University of Maryland, 1988.
6. J. Irwin, A multi-kick factorization algorithm for nonlinear symplectic maps, SSC Re-

port No. 228, 1989.

7. Y. B. Suris, The canonicity of mappings generated by R-K type methods when inte-
grating the systems x′′ = −∂U/∂x, U.S.S.R. Comp. Maths. Math. Phys. 29, 149
(1989).

8. H. Yoshida, Construction of higher order symplectic integrators, Phys. Lett. A 150,

9. E. Forest and R. Ruth, Fourth order symplectic integration, Physica D 43, 105 (1990).
10. P. J. Channel and C. Scovel, Symplectic integration of Hamiltonian systems, Nonlin-

262 (1990).

earity 3, 231 (1990).

11. G. Rangarajan, Invariants for symplectic maps and symplectic completion of symplectic

jets, Ph. D. thesis, University of Maryland, 1990.

12. G. Rangarajan, A. J. Dragt and F. Neri, Solvable map representation of a nonlinear

symplectic map, Part. Accel. 28, 119 (1990).

Polynomial Map Symplectic Algorithm

13. A. J. Dragt, I. M. Gjaja, and G. Rangarajan, Kick factorization of symplectic maps,

Proc. 1991 IEEE Part. Accel. Conf. 1621 (1991).

14. A. Iserles, Eﬃcient R-K methods for Hamiltonian systems, Bull. Greek Math. Soc.

32, 3 (1991).

15. D. Okubnor and R. D. Skeel, An explicit Runge-Kutta-Nystrom method is canonical if

and only if its adjoint is explicit, SIAM J. Numer. Anal. 29, 521 (1992).

16. J. M. Sanz-Serna, Symplectic integrators for Hamiltonian problems: An overview, Acta

17. A. J. Dragt and D. T. Abell, Jolt factorization of symplectic maps, Int. J. Mod. Phys.

Numerica 1, 243 (1992).

A (Proc. Suppl.) 2B, 1019 (1993).

18. I. Gjaja, Monomial factorisation of symplectic maps, Part. Accel. 43, 133 (1994).
19. G. Rangarajan, Symplectic completion of symplectic jets, J. Math. Phys. 37, 4514

(1996).

31 3649 (1998).

20. G. Rangarajan, Jolt factorization of the pendulum map, J. Phys. A: Math. and Gen.

21. G. Rangarajan and M. Sachidanand, Symplectic integration using solvable maps, J.

Phys. A: Math. and Gen. 33, 131 (2000).

22. A. J. Dragt, Lectures on nonlinear orbit dynamics, in: R. A. Carrigan, F. R. Huson,
and M. Month eds., Physics of High Energy Particle Accelerators, AIP Conference
Proceedings No. 87 (American Institute of Physics, New York, 1982), pp. 147–313.
23. A. J. Dragt, F. Neri, G. Rangarajan, D. R. Douglas, L. M. Healy and R. D. Ryne, Lie
algebraic treatment of linear and nonlinear beam dynamics, Ann. Rev. Nucl. Part.
Sci. 38, 455 (1988) and references therein.

24. A. Chao, T. Sen, Y. Yan and E. Forest, SSCL Report No. 459, 1991.
25. J. S. Berg, R. L. Warnock, R. D. Ruth, E. Forest, Construction of symplectic maps for

nonlinear motion of particles in accelerators, Phys. Rev. E 49, 722 (1994).

26. E. Forest, L. Michelotti, A. J. Dragt, J. S. Berg, The modern approach to single particle
dynamics for circular rings, in: M. Month, A. Ruggiero and W. Weng, eds., Stability of
Particle Motion in Storage Rings, AIP Conf. Proc. No. 292, (AIP, New York, 1994).
27. A. J. Dragt and J. M. Finn, Lie series and invariant functions for analytic symplectic

maps, J. Math. Phys. 17, 2215 (1976).

28. J. F. Cornwell, Group Theory in Physics, Vol. 2 (Academic Press, London, 1984).
29. H. Goldstein, Classical Mechanics, 2nd ed., (Addison-Wesley, Reading, 1980).
30. A. Giorgilli, A computer program for integrals of motion, Comp. Phys. Comm. 16,

331 (1979).

31. G. Rangarajan, Symplectic integration of Hamiltonian systems using polynomial maps,

Physics Letters A 286, 141 (2001).

