5
0
0
2
 
y
a
M
 
2
1
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
3
9
0
5
0
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Solving procedure for a twenty-ﬁve diagonal coeﬃcient matrix: direct numerical
solutions of the three dimensional Fokker-Planck equation with a general collision
term

Maximiliano Ujevic∗ and Patricio S. Letelier†
Departamento de Matem´atica Aplicada, Instituto de Matem´atica, Estat´ıstica e Computa¸c˜ao Cient´ıﬁca
Universidade Estadual de Campinas, 13081-970, Campinas, SP, Brasil

We describe an implicit procedure for solving linear equation systems resulting from the discretiza-
tion of the three dimensional (seven variables) Fokker-Planck equation with a general collision term.
The discretization of the Fokker-Planck equation is perform using a twenty-ﬁve point molecule that
leads to a coeﬃcient matrix with equal number of diagonals. The method is an extension of Stone’s
implicit procedure, includes vast classes of collision terms and can be applied to stationary or non
stationary problems with diﬀerent discretizations in time. Test calculations and comparisons with
other methods are presented for a stationary example.

I.

INTRODUCTION

In dealing with solutions of partial diﬀerential equations we often encounter a set of liner equation system that
have to be solve. This set of linear equations depends on the method used for discretization.
In general, when
dealing with three dimensional systems the number of linear equations increases and the solution of these systems
uses most of the computing time. An extreme case is the Fokker-Planck equation. The Fokker-Planck equation is also
known as the Fokker-Planck approximation because truncates the BBGKY (N.N. Bogoliubov, M. Born, H.S. Green,
J.G. Kirkwood, and J. Yvon) hierarchy of kinetic equations at its lowest order by assuming that correlation between
particles only plays a role as a sequence of uncorrelated two-body encounters [1, 2]. It is worth to notice that, the only
“approximation” made in the Fokker-Planck equation comes from the model adopted for collisions and, in fact, the
Fokker-Planck equation with a general collision term can be derived from ﬁrst principles and no ad hoc suppositions
are needed. The solution of the this equation equation is not an easy task because in the three dimensional case the
Fokker-Planck equation has seven variables, three space coordinates (x), three velocity coordinates (v) and time (t).
In the two dimensional case a simpliﬁcation exist because the total number of variables are ﬁve. In either cases, the
large number of grid nodes needed for the computation of the solution becomes a storage data problem. In a three
dimensional problem, for a stationary or non stationary equation, the number of linear equations to solve correspond
to the number of nodes in the phase-space grid (x,v). If we divided each of the phase-space variables intervals of the
distribution function in nine parts (ten nodes), we will have a grid with 106 nodes. In a simple numerical method
we have to store and solve a matrix with 1012 elements. For two dimensional case, the main matrix will have 108
elements. With 10 grid nodes per variable only very simple geometries can be described. The large number of matrix
elements brings us another computational problem, the slowness of the codes. In the discretization process of the
Fokker-Planck equation, a system of linear equations is obtained and arranged into a matrix form (coeﬃcient matrix).
In forming the matrix elements for the three dimensional Fokker-Planck equation from a ﬁnite diﬀerence scheme with
a twenty-ﬁve point molecule, we see that approximately less than 0.003% of the elements are diﬀerent from zero. This
incentives the search for alternative and faster methods, usually iterative, to solved the linear system using only the
non null data. Note that, in general, the coeﬃcient matrix that arise from the discretization of the Fokker-Planck
equation is not symmetric. So, powerful methods like the Conjugate Gradient [3, 4], Cholesky [4] decomposition can
not be used. Our main goal is to obtain a code that permits fast and eﬀective numerical solutions on high resolution
schemes of the three dimensional Fokker-Planck equation with a general collision term in a direct way. The importance
and diﬃculties of having three dimensional solutions of the Fokker-Planck equation in diﬀerent physical situations can
be summarized in the words of Binney and Tremaine ([5] page 245), here in relation with galactic dynamics: Finding
the particular function of three variables that describes any given galaxy is no simple matter. In fact, this task has
proved so daunting that only in the last few years, three-quarters of a century after Jeans’s (Jeans [6]) paper posed the
problem, has the serious quest for the distribution function of even our own Galaxy got underway.

We mean direct numerical calculations of the Fokker-Planck equation because neither statistical nor mean ﬁeld

∗e-mail:mujevic@ime.unicamp.br
†e-mail: letelier@ime.unicamp.br

2

(1)

(2)

approximations are made [5]. Numerical solutions can be performed using statistical approximate methods like the
method of moment equations [7, 8, 9] and Monte Carlos methods [10, 11]. Also, solutions have been found using the
orbit-averaged Fokker-Planck equation with action-angle variables [5], this last method reduces the equation involving
six phase-space coordinates plus time to one involving only three actions plus time. But, direct three dimensional
numerical calculations of the Fokker-Planck equations, to the best of our knowledge, has not been done because of
the large number of linear equations and the computational cost involve in the process. In this article we present a
variations of Stone’s [12] method that leads us to solve with lower computational cost the three dimensional Fokker-
Planck equation with a general collision term. Variation of Stone’s method has been applied to other situations in
two [13] and three [14] dimensions when dealing with ﬁeld problems.

The article is organized as follows. In Section II we present the Fokker-Planck equation to be solved. We consider a
general collision term that includes a vast class of collisions. In Section III, we describe the algorithm of the modiﬁed
Stone method to obtain the incomplete LU decomposition. The discretization of the Fokker-Planck equation is
perform using a central diﬀerence approximation for the phase-space variables (x,v) that is described with a twenty-
ﬁve point molecule. This point molecule also allows to describe diﬀerent discretizations in time, as the implicit
Euler or Crank-Nicolson discretization. Thus, the derivation of the LU decomposition is made without assuming any
particular discretization in time maintaining its derivation as general as possible. The notation used for the diagonals
in the coeﬃcient matrix is also shown. In Section IV, we test our algorithm with other methods that solve large sparse
matrices. For the test, we choose a stationary Fokker-Planck equation that resembles the form of the one found when
Rosenbluth potentials [15] are used. In Section V, we show how to modiﬁed the code to implement curved boundary
conditions. Finally, in Section VI, we summarized our results.

The Fokker-Planck equation with a general collision term can be written us

II. THE GENERAL PROBLEM

∂f
∂t

+ v · ∇f + ˙v · ∇vf = Γ[f ],

where v represent the velocity of the stars, ∇ is the usual gradient, ∇v is the velocity gradient (derivations are done
˙v is the acceleration and the symbol Γ[f ] denotes the rate of change of f due to
with respect to the velocities),
encounters (collision term). We consider as the collision term the general expression

Γ[f ] = A(x, v)∇2f + B(x, v)∇2

vf + C(x, v)∇f + D(x, v)∇vf +

Eij (x, v)

3

Xi6=j=1

∂2f
∂vi∂vj

,

where A, B, C, D and Eij are arbitrary functions of the phase-space variables x and v. The above equation describes
a vast family of collisions. In particular, with the mixed velocity derivatives in (2) we can take into account the
important collision term found by Rosenbluth et al. [15] used in gravitating systems and plasma physics. If we need
mixed space derivatives instead of mixed velocity derivatives, we can use the same code presented in this article to
solve the problem. If a particular problem requires the inclusion of mixed velocity derivatives as well as mixed space
derivatives, it is possible to develop a similar numerical procedure following the steps of this article, but it complicates
the incomplete LU decomposition used for the method, i.e. we need twelve extra diagonals on the coeﬃcient matrix
(thirty-seven instead of twenty-ﬁve diagonals).

III. DESCRIPTION OF THE ALGORITHM

The system of equations that we obtain from the discretization of the Fokker-Planck equation (1,2) using the central
diﬀerence approximation for the phase-space and a temporal discretization in time (implicit Euler, Crank-Nicolson,
etc.) can be cast (for each time step) into the simple form

in which A is a square coeﬃcient matrix Nnode × Nnode (Nnode the number of nodes in the discretization grid), Ψ
is the vector matrix of the nodal variable values, and Q is the source vector. The position of the grid nodes in the

AΨ = Q,

(3)

TABLE I: Relations and nomenclature between the matrix form and the one dimensional storage index at node p of the
twenty-ﬁve terms used in the discretization of the Fokker-Planck equation.

Matrix Form

Abbreviation

Position From Node p

Ψ(i, j, k, l, m, n)
Ψ(i, j + 1, k, l, m, n)
Ψ(i, j − 1, k, l, m, n)
Ψ(i + 1, j, k, l, m, n)
Ψ(i − 1, j, k, l, m, n)
Ψ(i, j, k + 1, l, m, n)
Ψ(i, j, k − 1, l, m, n)
Ψ(i, j, k, l + 1, m, n)
Ψ(i, j, k, l − 1, m, n)
Ψ(i, j, k, l, m + 1, n)
Ψ(i, j, k, l, m − 1, n)
Ψ(i, j, k, l, m, n + 1)
Ψ(i, j, k, l, m, n − 1)

Ψ(i, j, k, l + 1, m + 1, n)
Ψ(i, j, k, l − 1, m + 1, n)
Ψ(i, j, k, l + 1, m − 1, n)
Ψ(i, j, k, l − 1, m − 1, n)
Ψ(i, j, k, l + 1, m, n + 1)
Ψ(i, j, k, l − 1, m, n + 1)
Ψ(i, j, k, l + 1, m, n − 1)
Ψ(i, j, k, l − 1, m, n − 1)
Ψ(i, j, k, l, m + 1, n + 1)
Ψ(i, j, k, l, m − 1, n + 1)
Ψ(i, j, k, l, m + 1, n − 1)
Ψ(i, j, k, l, m − 1, n − 1)

Name
Basic Diagonals
P
point
N
north
S
south
E
east
W
west
T
top
B
bottom
U 1
up1
D1
down1
U 2
up2
D2
down2
U 3
up3
D3
down3
Mixed Diagonals
U T 2
uptop2
U B2
upbottom2
DT 2
downtop2
DB2
downbottom2
U T 3
uptop3
U B3
upbottom3
DT 3
downtop3
DB3
downbottom3
U U 3
upup3
U D3
updown3
DU 3
downup3
DD3
downdown3

p
p + 1
p − 1
p + nj
p − nj
p + nij
p − nij
p + nijk
p − nijk
p + nijkl
p − nijkl
p + nijklm
p − nijklm

p + (nijkl + nijk)
p + (nijkl − nijk)
p − (nijkl − nijk)
p − (nijkl + nijk)
p + (nijklm + nijk)
p + (nijklm − nijk)
p − (nijklm − nijk)
p − (nijklm + nijk)
p + (nijklm + nijkl)
p + (nijklm − nijkl)
p − (nijklm − nijkl)
p − (nijklm + nijkl)

phase-space (x, y, z, vx, vy, vz) is performed by six indexes (i, j, k, l, m, n), where i represents the index for the variable
x, j represents the index for the variable y, etc. The ordering of nodes in this six dimensional space is made as
follows. The surface n=constant are stacked one above another. Within the ﬁfth dimensional space (for each n) the
hypersurfaces m=constant are stacked one above another. Within the fourth dimensional space (for each n and m)
the hypersurfaces l=constant are stacked one above another. Within the three dimensional space (for each n, m and
l) the surfaces k=constant are stacked one above another. Within the two dimensional space (for each n, m, l and
k) the index j increases ﬁrst (y-direction) than the index i (x-direction). The one dimensional storage index p of the
vector matrix Ψ is calculated from the six-dimensional grid indexes (i, j, k, l, m, n), i.e.

p = (n − 1)nijklm + (m − 1)nijkl + (l − 1)nijk + (k − 1)nij + (i − 1)nj + j,

with

i = 1 · · · ni; j = 1 · · · nj; k = 1 · · · nk;
nijklm = ninjnknlnm; nijkl = ninjnknl; nijk = ninjnk; nij = ninj;

l = 1 · · · nl; m = 1 · · · nm; n = 1 · · · nn;

where ni, nj, nk, nl, nm, nn denote the number of grid points for each variable. Therefore Nnode = ninjnknlnmnn.
With the help of the storage index p we can switch each point of the twentyﬁve-point molecule from the matrix form to
the one dimensional position representation. This is done in Table I by making the equivalence f (x, y, z, vx, vy, vz) ≡
Ψ(i, j, k, l, m, n). Until now, we were considering only the non stationary case, but the discretization in Table I can
be used in the non stationary as well as the stationary Fokker Planck equation (the term Γ[f ] is not present). In both

3

(4)

(5)

4

1

nj

nij

nijk

nijkl

nijkl

nijkl

nijk nijk

nijk

nijk

UB2

UB3

E

UT3

UU3

U3

UT2

UD3

U2

T

S

nijklm

DT2

P

U1

DU3

B

N

DT3

DB3

DD3

D1

D3

DB2

FIG. 1: Form of the coeﬃcient matrix A obtained from the discretization of the partial diﬀerence equation of our problem.
The separation between the main diagonal P and the other diagonals are indicated. Also, the distance between the diagonals
of the mixed derivatives to their nearest diagonals are shown. Note that the ﬁgure is not in scaled.

L

.

=

M

FIG. 2: Schematic representation of the matrices L, U and their product M . The multiplication of the matrices L and U leads
to extra diagonals (dotted lines) not present in the coeﬃcient matrix A. The diagonals of L, from the left-bottom corner to the
main diagonal, are: DD3, DB3, D3, DT 3, DU 3, DB2, D2, DT 2, D1, W , S, P . The diagonals of U , from the main diagonal
to the right-up diagonal, are: 1, N , E, T , U 1, U B2, U 2, U T 2, U D3, U B3, U 3, U T 3, U U 3. The diagonals in M are products
of these two sets of diagonals but we have to be careful because more than one product can be at the same diagonal.

W

D2

U

cases, with this notation, the ﬁnal system of equations (after the discretization) is of the form (3), with A being a
sparse matrix with elements diﬀerent from zero in only twenty-ﬁve diagonals, see Fig. 1. Now, we want to develop
an iteration method to solve the system of equation (3). After h iterations of such method, the approximate solution
Ψh do not satisﬁes (3) exactly, their is a non zero residual R such as

AΨh = Q − Rh.

M Ψh+1 = OΨh + B,

M ∆h+1 = Rh,

The purpose of the iteration procedure is to drive the residual term to zero after some number of iteration (actually
we stop the iteration when the residual term attained some imposed small value condition). Consider an iterative
scheme for a linear system,

when convergence is achieved we must have that A = M − O and B = Q. An alternative version of this procedure
can be obtained by subtracting M Ψh from both sides of (7) to have,

where ∆h+1 = Ψh+1 − Ψh and Rh = B − (M − O)Ψh = Q − AΨh. For faster convergence, the matrix M have
to be a good approximation of the coeﬃcient matrix A, i.e. we must have OΨh small. The original idea of Stone
is to use for the iteration matrix M an incomplete LU decomposition of the matrix A. The reason for this choice
is that LU decomposition is an excellent linear system solver. The matrices L and U have elements diﬀerent from
zero only in the diagonals in which A have also elements diﬀerent from zero. The product of the matrices, L and U ,
provide a matrix M with a larger number of diagonals with elements diﬀerent from zero, see for instance Fig. 2. To
make the decomposition LU unique, we set the elements on the principal diagonal of U equal to 1. In doing the LU
multiplication, we have to pay extra attention because sometimes more than one diagonal product are at the same
distance from the main diagonal P , e.g. the product LD3 · U1 and LDD3 · UU2 are at the same diagonal in M . The
multiplication rules furnish the elements of M = LU at node p as,

5

(6)

(7)

(8)

,

E

N

DD3U p−(nijklm+nijkl)
DD3U p−(nijklm+nijkl )
,
DD3U p−(nijklm +nijkl)
,
DD3U p−(nijklm+nijkl)

U1

T

,

DB3 + Lp

DD3U p−(nijklm+nijkl)

UB2

,

M p
M p

M p

M p

M p

M p
M p

M p

M p

M p
M p
M p
M p

DD3 = Lp
DD3,
DD3|N = Lp
DD3|E = Lp
DD3|T = Lp
DD3|U1 = Lp
DB3 = Lp
DB3|N = Lp
DB3|E = Lp
DB3|T = Lp
D3 = Lp
D3|N = Lp
D3|E = Lp
D3|T = Lp
DT 3 = Lp
DT 3|N = Lp
DT 3|E = Lp

M p
M p

M p

,

N

DB3U p−(nijklm+nijk)
DB3U p−(nijklm+nijk)
,
DB3U p−(nijklm+nijk )

E

T

,

U1
,

,

N
p−nijklm
E

D3U p−nijklm
D3U
D3U p−nijklm
DT 3 + Lp

T

,
D3U p−nijklm
DT 3U p−(nijklm−nijk )
DT 3U p−(nijklm−nijk )
,

U1

N

E

,

D3 + Lp

DB3U p−(nijklm+nijk)

+ Lp

DD3U p−(nijklm+nijkl)

U2

,

+ Lp

DD3U p−(nijklm+nijkl)

UT 2

,

6

+ Lp
DT 3U p−(nijklm−nijk)

DB3U p−(nijklm+nijk )
+ Lp

,
D3U p−nijklm

UB2

U2

U2

+ Lp

DB3U p−(nijklm+nijk)

UT 2

,

+ Lp

DT 3U p−(nijklm−nijk )

U2

+ Lp

D3U p−nijklm

UT 2

,

p−(nijklm+nijk)
UD3

+ Lp

DD3U

p−(nijklm+nijkl)
UB3

,

+ Lp

D3U

p−nijklm
UD3

+ Lp

DD3U

p−(nijklm+nijkl)
U3

,

+ Lp

DT 3U

p−(nijklm−nijk)
UD3

+ Lp

DD3U

p−(nijklm+nijkl)
UT 3

,

DT 3U p−(nijklm−nijk)
,
DT 3U p−(nijklm−nijk)
,
DB3U p−(nijklm+nijk)
D3U p−nijklm

UB2

,

,

DU3U p−(nijklm−nijkl)
DU3U p−(nijklm−nijkl)
,
DU3U p−(nijklm−nijkl)
,
DU3U p−(nijklm−nijkl)
DT 3U p−(nijklm−nijk)
,
DU3U p−(nijklm−nijkl)
DU3U p−(nijklm−nijkl)
,
DU3U

p−(nijklm−nijkl)
UT 2

UB2

UT 2

,

,

p−(nijklm+nijkl)
UD3

,

DB3U
DB2U p−(nijkl+nijk)
DB2U p−(nijkl+nijk )
,
DB2U p−(nijkl+nijk )

,

,

p−(nijkl+nijk)
U1
,

M p

M p

M p

M p

M p
M p

M p

M p

M p

M p

M p

M p

M p

M p

M p
M p

M p

M p

M p
M p
M p
M p

M p
M p

M p

M p

T

T

E

N

N

U1

U1

U2

UB2

DU3 + Lp

DD3U
DB2 + Lp

DT 3|T = Lp
DT 3|U1 = Lp
DB3|UB2 = Lp
D3|UB2 = Lp
DU3 = Lp
DU3|N = Lp
DU3|E = Lp
DU3|T = Lp
DU3|U1 = Lp
DT 3|UT 2 = Lp
DU3|UB2 = Lp
DU3|U2 = Lp
DU3|UT 2 = Lp
DD3|UD3 = Lp
DB2 = Lp
DB2|N = Lp
DB2|E = Lp
DB2|T = Lp
D2 = Lp
D2|N = Lp
D2|E = Lp
D2|T = Lp
DT 2 = Lp
DT 2|N = Lp
DT 2|E = Lp
DT 2|T = Lp
DT 2|U1 = Lp
DB2|UB2 = Lp
D1 + Lp
D1 = Lp
D1|N = Lp
D1U
D1U p−nijk
D1|E = Lp
D1|T = Lp
D1U
B = Lp
B,
B|N = Lp
B|E = Lp

D2 + Lp
D2U
D2U p−nijkl
D2U
DT 2 + Lp

BU p−nij
BU p−nij

D2U
p−nijk
N

E
p−nijkl
T

E
p−nijk
T

DB2U

DB2U
p−nijkl
N

N

E

E

E

T

T

,

,

M p

M p

M p
M p
M p
M p
M p
M p
M p

,

,

,

,

,

N

p−nijkl
U1

D2U
DT 2U p−(nijkl−nijk )
DT 2U p−(nijkl−nijk )
,
DT 2U p−(nijkl−nijk)
DT 2U

p−(nijkl−nijk)
U1

,

,

p−(nijkl+nijk)
UB2

+ Lp

p−(nijklm +nijk)
UB3

,

DB3U
p−(nijkl+nijk )
U2

p−nijkl
UB2 + Lp
,

DB2U

+ Lp

D3U

p−nijklm
UB3

+ Lp

DB3U

p−(nijklm+nijk)
U3

,

7

+ Lp

BU p−nij

T

+ Lp

p−(nijklm−nijkl)
UD3

DU3U
DD3U p−(nijklm+nijkl)

UU3

,

D1U p−nijk
U1
+ Lp

DT 3U

+ Lp

DT 2U p−(nijkl−nijk)
+ Lp

p−(nijklm−nijk)
UB3

UB2

D3U

+ Lp

D2U p−nijkl

U2
p−nijklm
U3

W U p−nj
E
+ Lp
+ Lp

M p
M p
M p
M p

,

,

,

T

N

U1

U1

UT 3

DT 2U

W U p−nj

UT 2
p−nijk
UB2

N + Lp
SU p−1
p−(nijkl+nijk)
UT 2

W = Lp
W ,
W |N = Lp
S = Lp
S,
P + Lp
P = Lp
+Lp
DB2U
DB3U p−(nijklm+nijk)
+Lp
P U p
N = Lp
N ,
SU p−1
S|E = Lp
E ,
E = Lp
P U p
E,
W U p−nj
W |T = Lp
SU p−1
S|T = Lp
,
T
T = Lp
P U p
T ,
BU p−nij
B|U1 = Lp
,
W U p−nj
W |U1 = Lp
SU p−1
S|U1 = Lp
U1 ,
U1 + Lp
P U p
U1 = Lp
DT 2U p−(nijkl−nijk )
DT 2|UT 2 = Lp
D1|UB2 = Lp
D1U
,
BU p−nij
B|UB2 = Lp
UB2 ,
W U p−nj
W |UB2 = Lp
UB2 ,
SU p−1
S|UB2 = Lp
UB2,
UB2 + Lp
P U p
UB2 = Lp
BU p−nij
B|U2 = Lp
,
W U p−nj
W |U2 = Lp
SU p−1
S|U2 = Lp
U2 ,
U2 + Lp
P U p
U2 = Lp
BU p−nij
B|UT 2 = Lp
UT 2 ,
W U p−nj
W |UT 2 = Lp
UT 2 ,
SU p−1
S|UT 2 = Lp
UT 2,
UT 2 + Lp
P U p
UT 2 = Lp
DU3|UU3 = Lp
DU3U
DB2|UD3 = Lp
D2|UD3 = Lp
DT 2|UD3 = Lp
DB2|UB3 = Lp
D1|UD3 = Lp
B|UD3 = Lp

DB2U
D2U p−nijkl
,
DT 2U p−(nijkl−nijk)
,
DB2U p−(nijkl+nijk)
D1U p−nijk
UD3 + Lp
BU p−nij
UD3 ,

p−(nijkl+nijk)
UD3

D1U p−nijk

D1U

UD3

UD3

UB3

U2

U2

U2

,

M p
M p
M p
M p
M p
M p
M p
M p
M p

M p
M p
M p
M p
M p
M p

M p
M p
M p
M p

M p
M p
M p
M p

M p
M p

M p
M p

M p

M p

M p
M p

,

DU3U
p−(nijklm−nijkl)
UU3

,

p−(nijkl−nijk)
U2

D2U

p−nijkl
UT 2

+ Lp
+ Lp
DT 3U p−(nijklm−nijk)

UT 3

DT 3U
,

+ Lp

p−(nijklm−nijk)
U3

+ Lp

D3U

p−nijklm
UT 3

,

+ Lp

DU3U p−(nijklm−nijkl)

UB3

+ Lp

DB3U p−(nijklm+nijk )

UU3

,

p−nijk
UT 2 + Lp

DU3U

p−(nijklm−nijkl)
U3

+ Lp

D3U

p−nijklm
UU3

,

p−(nijklm−nijkl )
UT 3

+ Lp

DT 3U

p−(nijklm−nijk)
UU3

,

,
D2U p−nijkl
UB3 + Lp

DB2U p−(nijkl+nijk)

U3

,

DT 2U p−(nijkl−nijk)

+ Lp
D2U p−nijkl

UT 3

,

+ Lp

D2U p−nijkl

U3

+ Lp

DB2U p−(nijkl+nijk )

UT 3

,

+ Lp

DB2U

p−(nijkl+nijk )
UU3

,

,

M p
M p

U3

U3

UB3

D1U

p−nijk
U3

UT 3
p−nijk
UB3

W U p−nj
W |UD3 = Lp
UD3 ,
S|UD3 = Lp
SU p−1
UD3,
UD3 = Lp
P U p
UD3 + Lp
DT 2U p−(nijkl−nijk)
DT 2|U3 = Lp
DT 2U p−(nijkl−nijk )
DT 2|UT 3 = Lp
D1|UB3 = Lp
D1U
,
BU p−nij
B|UB3 = Lp
UB3 ,
W U p−nj
W |UB3 = Lp
UB3 ,
S|UB3 = Lp
SU p−1
UB3,
P U p
UB3 = Lp
UB3 + Lp
BU p−nij
B|U3 = Lp
,
W U p−nj
W |U3 = Lp
SU p−1
S|U3 = Lp
U3 ,
U3 + Lp
U3 = Lp
P U p
BU p−nij
B|UT 3 = Lp
UT 3 ,
W U p−nj
W |UT 3 = Lp
UT 3 ,
SU p−1
S|UT 3 = Lp
UT 3,
UT 3 + Lp
P U p
UT 3 = Lp
D1U p−nijk
D1|UU3 = Lp
BU p−nij
B|UU3 = Lp
UU3 ,
W U p−nj
W |UU3 = Lp
UU3 ,
SU p−1
S|UU3 = Lp
UU3,
P U p
UU3 = Lp
UU3.

D1U p−nijk

UU3

UU3

U3

,

,

M p
M p

M p
M p
M p
M p
M p

M p
M p
M p
M p
M p
M p
M p
M p

M p
M p
M p
M p
M p
M p

UT 3 + Lp

D2U p−nijkl

UU3

,

DT 2U p−(nijkl−nijk)

,

where, for example, MW |UU3 represents the multiplication between the elements of the diagonal S in L with the
elements of the diagonal U U 3 in U .

Now, we choose L and U in such a way that M (= A + O) is the best possible approximation to A. The standard
method for decomposition is to let O to have elements diﬀerent from zero in the diagonals of M that corresponds to
the diagonals not present in A and to force the other diagonals of M to be equal to the corresponding diagonals in A.
But this method converges slowly. Stone recognizes that the convergence of the method could be faster if we allow O
to have elements diﬀerent from zero in the diagonals present in A. The key idea is that the contribution of M Ψ of
the diagonals not present in A partially canceled the contribution of OΨ of the diagonals present in A, in such a way
that

OΨ ≈ 0.

Note that in (9) they are diagonals that present more than one term. In general, the principal diagonals have more
than one element, as for example MDT 3, but beside these principal diagonals there exist other no-principal diagonals
that have more than one element, like MD3|UB2. Now, relation (10) can be written for one grid node in several ways.
The usual way is to consider the elements of these no-principle diagonals as part of the same diagonal. Other way is
to consider these elements as they were from diﬀerent diagonals, thus in this case, following the above example, the
no-principle diagonal MD3|UB2 is split into two diagonals MD3|UB2 and MDB3|U2. We obtained the ﬁnal relations
for the LU decomposition in both ways and we found that the LU decomposition considering the elements as they
were from diﬀerent diagonals is faster by a factor of two. Hereafter we consider this case. So, expression (10) can be
written as

8

(9)

(10)

9

ODD3ΨDD3 + ODB3ΨDB3 + OD3ΨD3 + ODT 3ΨDT 3 + ODU3ΨDU3 + ODB2ΨDB2 + OD2ΨD2 + ODT 2ΨDT 2
+OD1ΨD1 + OBΨB + OW ΨW + OSΨS + OP ΨP + ON ΨN + OEΨE + OT ΨT + OU1ΨU1 + OUB2ΨUB2
+OU2ΨU2 + OUT 2ΨUT 2 + OUD3ΨUD3 + OUB3ΨUB3 + OU3ΨU3 + OUT 3ΨUT 3 + OUU3ΨUU3 + MDD3|N ΨDD3|N
+MDD3|EΨDD3|E + MDD3|T ΨDD3|T + MDD3|U1ΨDD3|U1 + MDB3|N ΨDB3|N + MDB3|EΨDB3|E
+MDB3|T ΨDB3|T + MD3|N ΨD3|N + MD3|EΨD3|E + MD3|T ΨD3|T + MDT 3|N ΨDT 3|N + MDT 3|EΨDT 3|E
+MDT 3|T ΨDT 3|T + MDT 3|U1ΨDT 3|U1 + MDB3|UB2ΨDB3|UB2 + MDB3|U2ΨDB3|U2 + MD3|UB2ΨD3|UB2
+MDU3|N ΨDU3|N + MDU3|EΨDU3|E + MDU3|T ΨDU3|T + MD3|UT 2ΨD3|UT 2 + MDT 3|U2ΨDT 3|U2
+MDU3|U1ΨDU3|U1 + MDT 3|UT 2ΨDT 3|UT 2 + MDU3|UB2ΨDU3|UB2 + MDU3|U2ΨDU3|U2 + MDU3|UT 2ΨDU3|UT 2
+MDD3|UD3ΨDD3|UD3 + MDB2|N ΨDB2|N + MDB2|EΨDB2|E + MDB2|T ΨDB2|T + MD2|N ΨD2|N + MD2|EΨD2|E
+MD2|T ΨD2|T + MDT 2|N ΨDT 2|N + MDT 2|EΨDT 2|E + MDT 2|T ΨDT 2|T + MDT 2|U1ΨDT 2|U1
+MDB3|UB3ΨDB3|UB3 + MDB2|UB2ΨDB2|UB2 + MD1|N ΨD1|N + MD1|EΨD1|E + MD1|T ΨD1|T + MB|N ΨB|N
+MB|EΨB|E + MW |N ΨW |N + MS|EΨS|E + MW |T ΨW |T + MS|T ΨS|T + MB|U1ΨB|U1 + MW |U1ΨW |U1
+MS|U1ΨS|U1 + MDT 2|UT 2ΨDT 2|UT 2 + MDT 3|UT 3ΨDT 3|UT 3 + MD1|UB2ΨD1|UB2 + MB|UB2ΨB|UB2
+MW |UB2ΨW |UB2 + MS|UB2ΨS|UB2 + MB|U2ΨB|U2 + MW |U2ΨW |U2 + MS|U2ΨS|U2 + MB|UT 2ΨB|UT 2
+MW |UT 2ΨW |UT 2 + MS|UT 2ΨS|UT 2 + MDU3|UU3ΨDU3|UU3 + MDB2|UD3ΨDB2|UD3 + MD2|UD3ΨD2|UD3
+MDT 2|UD3ΨDT 2|UD3 + MDB2|UB3ΨDB2|UB3 + MD1|UD3ΨD1|UD3 + MD2|UB3ΨD2|UB3 + MDB2|U3ΨDB2|U3
+MB|UD3ΨB|UD3 + MW |UD3ΨW |UD3 + MS|UD3ΨS|UD3 + MDT 2|U3ΨDT 2|U3 + MD2|UT 3ΨD2|UT 3
+MDT 2|UT 3ΨDT 2|UT 3 + MD1|UB3ΨD1|UB3 + MB|UB3ΨB|UB3 + MW |UB3ΨW |UB3 + MS|UB3ΨS|UB3
+MB|U3ΨB|U3 + MW |U3ΨW |U3 + MS|U3ΨS|U3 + MB|UT 3ΨB|UT 3 + MW |UT 3ΨW |UT 3 + MS|UT 3ΨS|UT 3
+MD1|UU3ΨD1|UU3 + MB|UU3ΨB|UU3 + MW |UU3ΨW |UU3 + MS|UU3ΨS|UU3 ≈ 0.

(11)

The problem now is to deﬁned the elements of O to satisfy the above equation without introducing additional
unknowns. If we expect the solution of the partial diﬀerential equation to be smooth, we can approximate the values
of ΨB|N , ΨN |W , etc, in terms of the values of Ψ at nodes corresponding to the diagonals of A. Stone proposed the
following approximations (other approximations are possible),

ΨB|N ≈ α(ΨB + ΨN − ΨP ),
ΨW |N ≈ α(ΨW + ΨN − ΨP ), etc

(12)

where α is a constant. For stability, analysis made by Stone requires that α must be between 0 < α < 1. Replacing
the above approximations into (11) we obtain the elements of O as a linear combination of the elements of M ,

ODD3 = −α(MDD3|N + MDD3|E + MDD3|T + MDD3|U1 + MDD3|UD3),
ODB3 = −α(MDB3|N + MDB3|E + MDB3|T + MDB3|UB2 + MDB3|U2 + MDB3|UB3),
OD3 = −α(MD3|N + MD3|E + MD3|T + MD3|UB2 + MD3|UT 2),
ODT 3 = −α(MDT 3|N + MDT 3|E + MDT 3|T + MDT 3|U1 + MDT 3|U2 + MDT 3|UT 2 + MDT 3|UT 3),
ODU3 = −α(MDU3|N + MDU3|E + MDU3|T + MDU3|U1 + MDU3|UB2 + MDU3|U2 + MDU3|UT 2 + MDU3|UU3),
ODB2 = −α(MDB2|N + MDB2|E + MDB2|T + MDB2|UB2 + MDB2|UD3 + MDB2|UB3 + MDB2|U3),
OD2 = −α(MD2|N + MD2|E + MD2|T + MD2|UD3 + MD2|UB3 + MD2|UT 3),
ODT 2 = −α(MDT 2|N + MDT 2|E + MDT 2|T + MDT 2|U1 + MDT 2|UT 2 + MDT 2|UD3 + MDT 2|U3 + MDT 2|UT 3),
OD1 = −α(MD1|N + MD1|E + MD1|T + MD1|UB2 + MD1|UD3 + MD1|UB3 + MD1|UU3),
OB = −α(MB|N + MB|E + MB|U1 + MB|UB2 + MB|U2 + MB|UT 2 + MB|UD3 + MB|UB3 + MB|U3 + MB|UT 3

OW = −α(MW |N + MW |T + MW |U1 + MW |UB2 + MW |U2 + MW |UT 2 + MW |UD3 + MW |UB3 + MW |U3 + MW |UT 3

OS = −α(MS|E + MS|T + MS|U1 + MS|UB2 + MS|U2 + MS|UT 2 + MS|UD3 + MS|UB3 + MS|U3 + MS|UT 3

+MB|UU3),

+MW |UU3),

+MS|UU3),

10

OP = α(MDD3|N + MDD3|E + MDD3|T + MDD3|U1 + MDB3|N + MDB3|E + MDB3|T + MD3|N + MD3|E + MD3|T

+MDT 3|N + MDT 3|E + MDT 3|T + MDT 3|U1 + MDB3|UB2 + MDB3|U2 + MD3|UB2 + MDU3|N + MDU3|E
+MDU3|T + MD3|UT 2 + MDT 3|U2 + MDU3|U1 + MDT 3|UT 2 + MDU3|UB2 + MDU3|U2 + MDU3|UT 2
+MDD3|UD3 + MDB2|N + MDB2|E + MDB2|T + MD2|N + MD2|E + MD2|T + MDT 2|N + MDT 2|E + MDT 2|T
+MDT 2|U1 + MDB3|UB3 + MDB2|UB2 + MD1|N + MD1|E + MD1|T + MB|N + MB|E + MW |N + MS|E
+MW |T + MS|T + MB|U1 + MW |U1 + MS|U1 + MDT 2|UT 2 + MDT 3|UT 3 + MD1|UB2 + MB|UB2 + MW |UB2
+MS|UB2 + MB|U2 + MW |U2 + MS|U2 + MB|UT 2 + MW |UT 2 + MS|UT 2 + MDU3|UU3 + MDB2|UD3
+MD2|UD3 + MDT 2|UD3 + MDB2|UB3 + MD1|UD3 + MD2|UB3 + MDB2|U3 + MB|UD3 + MW |UD3 + MS|UD3
+MDT 2|U3 + MD2|UT 3 + MDT 2|UT 3 + MD1|UB3 + MB|UB3 + MW |UB3 + MS|UB3 + MB|U3 + MW |U3
+MS|U3 + MB|UT 3 + MW |UT 3 + MS|UT 3 + MD1|UU3 + MB|UU3 + MW |UU3 + MS|UU3),

ON = −α(MDD3|N + MDB3|N + MD3|N + MDT 3|N + MDU3|N + MDB2|N + MD2|N + MDT 2|N + MD1|N + MB|N

OE = −α(MDD3|E + MDB3|E + MD3|E + MDT 3|E + MDU3|E + MDB2|E + MD2|E + MDT 2|E + MD1|E + MB|E

OT = −α(MDD3|T + MDB3|T + MD3|T + MDT 3|T + MDU3|T + MDB2|T + MD2|T + MDT 2|T + MD1|T + MW |T

+MW |N ),

+MS|E),

+MS|T ),

OU1 = −α(MDD3|U1 + MDT 3|U1 + MDU3|U1 + MDT 2|U1 + MB|U1 + MW |U1 + MS|U1),
OUB2 = −α(MDB3|UB2 + MD3|UB2 + MDU3|UB2 + MDB2|UB2 + MD1|UB2 + MB|UB2 + MW |UB2 + MS|UB2),
OU2 = −α(MDB3|U2 + MDT 3|U2 + MDU3|U2 + MB|U2 + MW |U2 + MS|U2),
OUT 2 = −α(MD3|UT 2 + MDT 3|UT 2 + MDU3|UT 2 + MDT 2|UT 2 + MB|UT 2 + MW |UT 2 + MS|UT 2),
OUD3 = −α(MDD3|UD3 + MDB2|UD3 + MD2|UD3 + MDT 2|UD3 + MD1|UD3 + MB|UD3 + MW |UD3 + MS|UD3),
OUB3 = −α(MDB3|UB3 + MDB2|UB3 + MD2|UB3 + MD1|UB3 + MB|UB3 + MW |UB3 + MS|UB3),
OU3 = −α(MDB2|U3 + MDT 2|U3 + MB|U3 + MW |U3 + MS|U3),
OUT 3 = −α(MDT 3|UT 3 + MD2|UT 3 + MDT 2|UT 3 + MB|UT 3 + MW |UT 3 + MS|UT 3),
OUU3 = −α(MDU3|UU3 + MD1|UU3 + MB|UU3 + MW |UU3 + MS|UU3).

(13)

Using the relation M = A + O together with expressions (9) and (13), we ﬁnd that the elements of the matrices L
and U are given by,

[X] = DD3, DB3, D3, DT 3, DU 3, DB2, D2, DT 2, D1, B, W, S,

p−nijk
U1
− Lp

− Lp

DT 2U
DT 3U p−(nijklm−nijk)

UB3

p−(nijkl−nijk)
UB2

− Lp

− Lp
D2U
D3U p−nijklm

U3

p−nijkl
U2

+ α(KN + KE + KT + KU1 + KUB2 + KU2 + KUT 2

Lp

[X] =

P = Ap
Lp

,

N

− Lp

SU p−1

Ap
− C[X]
[X]
1 + αK[X]
− Lp
DB2U p−(nijkl+nijk )
DB3U p−(nijklm+nijk)

W U p−nj
E
− Lp
− Lp

P
−Lp
−Lp
+KUD3 + KUB3 + KU3 + KUT 3 + KUU3),
Ap

BU p−nij
− Lp
D1U
DU3U p−(nijklm−nijkl )
DD3U p−(nijklm+nijkl)

− αK[X] − C[X]

− Lp

UD3

UU3

UT 2

UT 3

T

[X]

U p

[X] =

Lp
P

where

,

[X] = N, E, T, U 1, U B2, U 2, U T 2, U D3, U B3, U 3, U T 3, U U 3,

(14)

U2

p−(nijklm+nijkl)
UB2

CDB3 = Lp
CD3 = Lp
CDT 3 = Lp
CDU3 = Lp
CDB2 = Lp
CD2 = Lp

DD3U
DD3U p−(nijklm+nijkl)
DD3U p−(nijklm+nijkl)
DB3U
DD3U p−(nijklm+nijkl)
DD3U p−(nijklm+nijkl)

UT 2
p−(nijklm+nijk )
UT 2

,
+ Lp
+ Lp
+ Lp
+ Lp
+ Lp

UB3

U3

,

U1

U1
p−nijklm
U2

DB3U p−(nijklm+nijk)
D3U p−nijklm
D3U
DT 3U
DB3U p−(nijklm+nijk)
,
D3U p−nijklm

,
+ Lp

+ Lp

UD3

UD3

p−(nijklm−nijk)
UB2

,

DB2U p−(nijkl+nijk )

U1

,

11

D2U p−nijkl

+ Lp
p−(nijkl+nijk )
U2

U1

,
+ Lp

+ Lp
DT 3U p−(nijklm−nijk)
+ Lp
+ Lp

DB3U p−(nijklm+nijk)
,
D3U

UU3
p−nijklm
UU3

,

+ Lp

p−nijkl
UB2

D2U
D3U p−nijklm

UT 3

,

,

DB2U p−(nijkl+nijk)

UT 3

,

U3

U2

UT 2

UT 3

UT 3

UB3

+ Lp

+ Lp

+ Lp

+ Lp

+ Lp

UD3
p−nijklm
UB3

p−(nijklm+nijk)
U3

p−(nijklm−nijkl )
U3

DT 3U p−(nijklm−nijk)

D3U
D2U p−nijkl

DT 3U p−(nijklm−nijk)
DB2U

DD3U p−(nijklm+nijkl)
DB3U
DT 2U p−(nijkl −nijk)
D1U p−nijk
DU3U p−(nijklm−nijkl )
+ Lp
U2
p−nijk
UT 2 + Lp
DU3U
D1U
DU3U p−(nijklm−nijkl)
DT 2U p−(nijkl−nijk)
DB2U
D1U

CDT 2 = Lp
CD1 = Lp
CU1 = Lp
CUB2 = Lp
CU2 = Lp
CUT 2 = Lp
CUD3 = Lp
CUB3 = Lp
CU3 = Lp
CUT 3 = Lp
,
CDD3 = CB = CW = CS = CN = CE = CT = CUU3 = 0,
KDD3 = U p−(nijklm+nijkl )
N
p−(nijklm+nijk )
KDB3 = U
N
p−(nijklm+nijk)
UB3
p−nijklm
N

UB3
p−nijk
+ Lp
U3
p−nijk
UT 3 + Lp
D2U
D1U
DT 2U p−(nijkl−nijk)

+ Lp
p−(nijkl+nijk)
UU3
p−nijkl
UU3

+ U p−(nijklm+nijkl )
E
p−(nijklm+nijk )
E

D2U p−nijkl
,

,
p−nijklm
E

+ Lp

+ U

+ U

+U

UU3

UU3

U3

T

,

,

+ U p−(nijklm+nijkl)
p−(nijklm+nijk )
T

U1

+ U p−(nijklm+nijkl)
p−(nijklm+nijk)
UB2

+ U

UD3

+ U p−(nijklm+nijkl)
p−(nijklm+nijk)
U2

,

+ U

p−nijklm
UB2

p−nijklm
+ U
UT 2
+ U p−(nijklm−nijk)

+ U

,

T

U1

+ U p−(nijklm−nijk)

+ U p−(nijklm−nijk)

U2

E

UT 3

+ U

p−nijklm
T
+ U p−(nijklm−nijk )
+ U p−(nijklm−nijk )

,
p−(nijklm−nijkl)
E

+ U
+ U p−(nijklm−nijkl )
UT 2
+ U p−(nijkl+nijk )

E

p−(nijklm−nijkl )
T

+ U
+ U p−(nijklm−nijkl)

,

UU3
+ U p−(nijkl+nijk )

T

+ U

p−(nijklm−nijkl)
U1

+ U

p−(nijklm−nijkl)
UB2

+ U p−(nijkl+nijk )

UB2

+ U p−(nijkl+nijk )

UD3

+ U p−(nijkl+nijk)

UB3

+ U

E

+ U

p−nijkl
T
+ U p−(nijkl−nijk )
+ U p−(nijkl −nijk)
UT 3
+ U p−nijk
T
U1 + U p−nij
+ U p−nij
U1 + U p−nj
+ U p−nj
U1 + U p−1
+ Lp
+ Lp

p−nijkl
UD3 + U
+ U p−(nijkl−nijk )

p−nijkl
UB3 + U

p−nijkl
UT 3
+ U p−(nijkl−nijk)

,

T

U1

+ U p−(nijkl−nijk)

+ U p−(nijkl−nijk)

UD3

UT 2

,
+ U p−nijk
UB2 + U p−nijk
UB2 + U p−nij
UB2 + U p−nj

UD3 + U p−nijk

UB3 + U p−nijk

UU3

,
UD3 + U p−nij

U2 + U p−nij

UT 2 + U p−nij

UB2 + U p−1
DB3U

U2 + U p−nj
UT 2 + U p−1
+ Lp
+ Lp

UT 2 + U p−nj
UD3 + U p−1
p−nijklm
D3U
N
p−nijkl
D2U
N

UD3 + U p−nj
UB3 + U p−1
+ Lp
+ Lp

UB3 + U p−nj
U3 + U p−1
DT 3U
DT 2U

U2 + U p−1
p−(nijklm+nijk)
N
DB2U

p−(nijkl +nijk)
N

UB3 + U p−nij

U3 + U p−nij

UT 3 + U p−nij
UU3 ,
UT 3 + U p−nj
U3 + U p−nj
UU3 ,
UT 3 + U p−1
UU3,
p−(nijklm−nijk)
N

p−(nijkl−nijk)
N

+ Lp

D1U

p−nijk
N

p−(nijklm+nijk)
E

DB3U
DB2U p−(nijkl +nijk)

E

+ Lp

+ Lp
+ Lp

p−nijklm
E

D3U
D2U p−nijkl

+ Lp
+ Lp

p−(nijklm−nijk)
E

DT 3U
DT 2U p−(nijkl−nijk)

E

E

+ Lp

D1U p−nijk

E

+ Lp

p−(nijklm+nijk)
T

DB3U
DB2U p−(nijkl +nijk)

T

+ Lp

+ Lp
+ Lp

p−nijklm
T

D3U
D2U p−nijkl

+ Lp
+ Lp

p−(nijklm−nijk )
T

DT 3U
DT 2U p−(nijkl−nijk)

T

T

+ Lp

D1U p−nijk

T

+ Lp
U1 + Lp

p−(nijklm−nijk )
DT 3U
U1
SU p−1
U1 ,

+ Lp

DU3U

p−(nijklm−nijkl)
U1

+ Lp

DT 2U

p−(nijkl−nijk )
U1

+ U

KD3 = U
KDT 3 = U p−(nijklm−nijk )
+U p−(nijklm−nijk)
p−(nijklm−nijkl)
N

KDU3 = U

UT 2

N

+U

+U p−(nijklm−nijkl)
U2
KDB2 = U p−(nijkl+nijk )
N
p−(nijkl+nijk)
,
U3
p−nijkl
p−nijkl
E
N

KD2 = U
KDT 2 = U p−(nijkl −nijk)
+U p−(nijkl−nijk)

+ U

N

U3

+ U p−nijk
E

+ U p−nij
E
+ U p−nj
T

N

N

KD1 = U p−nijk
KB = U p−nij
KW = U p−nj
N
KS = U p−1
KN = Lp

+Lp
+Lp

p−(nijklm−nijkl)
N

E + U p−1
DD3U

T + U p−1
p−(nijklm+nijkl)
N
DU3U
BU p−nij
N
DD3U
DU3U p−(nijklm−nijkl)
BU p−nij
SU p−1
+ Lp
E ,
p−(nijklm+nijkl)
T

+ Lp
p−(nijklm+nijkl)
E

E
DD3U

W U p−nj

N

E

+Lp
+Lp

,
+ Lp

KE = Lp

KT = Lp

T

+Lp
+Lp
KU1 = Lp
+Lp

DU3U p−(nijklm−nijkl)
W U p−nj
SU p−1
+ Lp
,
T
p−(nijklm+nijkl)
DD3U
U1
BU p−nij

U1 + Lp

W U p−nj

T

+ Lp

DU3U p−(nijklm−nijkl)

UB2

+ Lp

DB2U p−(nijkl+nijk)

UB2

+ Lp

D1U p−nijk

UB2

D3U p−nijklm
UB2
SU p−1
UB2,

+ Lp
UB2 + Lp
+ Lp

DT 3U p−(nijklm−nijk )

U2

+ Lp

DU3U p−(nijklm−nijkl)

U2

+ Lp

BU p−nij

U2 + Lp

W U p−nj

U2

DT 3U

p−(nijklm−nijk )
UT 2

+ Lp

DU3U

p−(nijklm −nijkl)
UT 2

+ Lp

DT 2U

p−(nijkl−nijk )
UT 2

+ Lp

BU p−nij

UT 2

UD3

+ Lp
UD3 + Lp
+ Lp

DB2U p−(nijkl+nijk )
SU p−1
UD3,
DB2U p−(nijkl+nijk )

UB3

+ Lp

D2U p−nijkl

UD3 + Lp

DT 2U p−(nijkl−nijk)

UD3

+ Lp

D1U p−nijk

UD3

+ Lp

D2U p−nijkl

UB3 + Lp

D1U p−nijk

UB3 + Lp

BU p−nij

UB3 + Lp

W U p−nj

UB3

UB2

p−nijklm
UT 2

UT 2 + Lp

KUB2 = Lp
+Lp
KU2 = Lp
+Lp
KUT 2 = Lp
+Lp
KUD3 = Lp
+Lp
KUB3 = Lp
+Lp
KU3 = Lp
KUT 3 = Lp
KUU3 = Lp

DB3U p−(nijklm +nijk)
W U p−nj
BU p−nij
UB2 + Lp
DB3U p−(nijklm +nijk)
U2
SU p−1
U2 ,
+ Lp
D3U
W U p−nj
SU p−1
UT 2,
DD3U p−(nijklm+nijkl)
W U p−nj
BU p−nij
DB3U p−(nijklm +nijk)
SU p−1
UB3,
p−(nijkl +nijk)
DB2U
U3
DT 3U
DU3U p−(nijklm−nijkl )

p−(nijklm−nijk)
UT 3

UD3 + Lp

UD3

UB3

+ Lp

p−(nijkl−nijk )
DT 2U
U3
+ Lp
D2U
D1U p−nijk
+ Lp

+ Lp
UU3 + Lp

p−nijkl
UT 3

+ Lp

BU p−nij
U3 + Lp
p−(nijkl−nijk )
UT 3

W U p−nj
+ Lp
UU3 + Lp

SU p−1
U3 + Lp
U3 ,
BU p−nij
UT 3 + Lp
SU p−1
UU3,

UU3

DT 2U
BU p−nij
The elements of the LU decomposition have to be calculated in the order speciﬁed in (14). In doing this, we must
take into account that a certain element is considered equal to zero if its storage index is less or equal zero, e.g.
if
p = 3 and nj = 5 then the elements with index p and p − 1 are diﬀerent from zero, and the elements with index
p − nj, p − nij , etc are equal to zero. When mixed derivatives are not present we must let all the elements with
index DD3, DB3, DT 3, DU 3, DB2, DT 2, U B2, U T 2, U D3, U B3, U T 3, U U 3 equal to zero. Once obtained the LU
decomposition, the system of equation is solved combining M = LU with (8) to obtain

UU3 + Lp

W U p−nj

(15)

W U p−nj

UT 3 + Lp

SU p−1
UT 3,

and here we set

LU ∆t+1 = Rt,

LΥt = Rt,
U ∆t+1 = Υt,

from which we obtain the solution of our problem by solving two triangular systems. In this iterative method, the
matrix elements of L and U are calculated before the ﬁrst iteration. In other iterations, only the residual R, Υ and
∆ are calculated using the two triangular system mentioned above, i.e.,

Υp = (Rp − Lp
−Lp
−Lp
∆p = Υp − U p

DD3Υp−(nijklm+nijkl ) − Lp

DB3Υp−(nijklm+nijk) − Lp

D3Υp−nijklm − Lp

DT 3Υp−(nijklm−nijk)

DU3Υp−(nijklm−nijkl) − Lp
W Υp−nj − Lp
BΥp−nij − Lp

DB2Υp−(nijkl+nijk) − Lp
SΥp−1)/Lp
P ,

D2Υp−nijkl − Lp

DT 2Υp−(nijkl−nijk) − Lp

D1Υp−nijk

UU3∆p+(nijklm+nijkl ) − U p

UT 3∆p+(nijklm+nijk ) − U p

U3∆p+nijklm − U p

UB3∆p+(nijklm −nijk)

−U p
−U p

UD3∆p+(nijklm −nijkl) − U p
E∆p+nj − U p
T ∆p+nij − U p

UT 2∆p+(nijkl +nijk) − U p
N ∆p+1,

U2∆p+nijkl − U p

UB2∆p+(nijkl−nijk ) − U p

U1∆p+nijk

where

SΨp−1 − Ap

N Ψp+1 − Ap

Rp = Qp − Ap

EΨp+nj − Ap

UB2Ψp+(nijkl−nijk ) − Ap

P Ψp − Ap
D1Ψp−nijk − Ap
UT 2Ψp+(nijkl+nijk ) − Ap
UB3Ψp+(nijklm−nijk) − Ap
UT 3Ψp+(nijklm+nijk ) − Ap
in which, for simplicity, we have omitted the iterative index h.

DB2Ψp−(nijkl+nijk) − Ap
DT 3Ψp−(nijklm−nijk) − Ap
DB3Ψp−(nijklm+nijk) − Ap

−Ap
−Ap
−Ap
−Ap

W Ψp−nj − Ap
DT 2Ψp−(nijkl−nijk) − Ap

T Ψp+nij − Ap
U2Ψp+nijkl − Ap

U1Ψp+nijk

BΨp−nij − Ap
D2Ψp−nijkl
DU3Ψp−(nijklm−nijkl)

UD3Ψp+(nijklm−nijkl) − Ap
U3Ψp+nijklm − Ap
UU3Ψp+(nijklm+nijkl) − Ap

D3Ψp−nijklm

DD3Ψp−(nijklm+nijkl ),

12

(16)

(17)

(18)

13

 8

 7

 6

 5

 4

 3

 2

 1

 0

r
e
t
s
a
F
 
s
e
m
T

i

 2

 3

 4

 5

 6

 7

Number of Grid Nodes (X  )6

FIG. 3: Eﬃciency of our modiﬁed Stone method when compared to the gmres routine of Matlab that handles sparse matrices.
When we increase the number of grid points our method becomes more eﬃcient. The Matlab routine can not handle a number
of grid points greater than 96.

IV. TEST RESULTS AND COMPARISONS WITH OTHER METHODS

As was mentioned in the Introduction, the huge number of nodes needed to solve the Fokker-Planck equation leads
to large amount of data that has to be stored in a matrix, this fact reduces the possible codes for testing the results.
Furthermore, in general, the Fokker-Planck equation (1) is not symmetric, and for that reason other methods can not
be used. In this case, the Generalized Minimal Residual method (GMRES) [16] is the most appropriate choice. The
GMRES method belongs to the class of Krylov based iterative methods [17, 18, 19] and was proposed in order to solve
large, sparse and non Hermitian linear systems. The problem of this method is that the storage of the orthonormal
basis may become prohibitive for some matrices, this storage depends on the value of the restarting parameter.

We shall compare our code based in the LU decomposition (14) with the GMRES algorithm. In particular we used
the gmres routine of Matlab because it can handle sparse matrices. We also used a public GMRES software [20],
this software allows us to choose between diﬀerent kinds of preconditioners and orthogonalization procedures but its
drawback is that can not handle sparse matrices. In addition, we choose as a test equation a stationary Fokker-Planck
equation to compare the time spent for the explicit Euler scheme to reach the solution. The choice of a stationary
equation have been done in order to compare the eﬃciency of diﬀerent methods to reach the solution. Note that in
the non stationary Fokker-Planck equation we can perform a Crank-Nicolson discretization in time, which is also an
implicit procedure, and the method presented in this article can be applied. The stationary Fokker-Planck equation
considered for the test is

v · ∇f + ˙v · ∇vf = −∇vf +

3

1
2

Xi6=j=1

∂2f
∂vi∂vj

+ β

3

Xi=1

∂2f
∂v2
i

,

(19)

p

where ˙v = −∇Φ, Φ = 1/
x2 + y2 + z2 + 12, and β is a constant. The form of Eq. (19) is similar to the equation
found when Rosenbluth potentials [15] are used in a gravitational potential Φ. Note that the collision term has
mixed velocity derivatives and that the resulting coeﬃcient matrix from the discretization is non symmetric. We used
central diﬀerence and a twenty-ﬁve point molecule to perform the discretization of Eq. (19), see also Table I. For an
astrophysical application in two dimensions using Rosenbluth potentials and incomplete LU decomposition, see [21].
Here we shall ﬁnd the solution of the above equation in a six dimensional ‘box’ of length 1.22 units. At the borders
we used a Dirichlet boundary condition of the form f = exp(−x2 − y2 − z2) exp(−v2
x

− v2
y

− v2

z).

We ﬁrst started with coarse grid of four points per variable that leads to a matrix of 40962 elements (in this number
we are not considering the border grid points given by the boundary condition) and β = 1. We found for this case that
our method spent approximately 0.2 seconds to ﬁnd the solution (all the calculations were perform with a Pentium
) < 10−10. The gmres routine and the public GMRES code
IV of 1.8 GHz). We stop the iteration when
[20] spent approximately 0.35 and 3 seconds respectively to solve the system of equations with the same stop criteria,
but it could be more if we choose wrong the restarting parameter. Here we are considering only the time spent to

i=1(∆t+1

P

n

i

Distribution Function

14

 0.8

 0.6

 0.4

 0.2

 0
−0.2

Y

−0.8

−0.6

−0.4

−0.2

 0

X

 0.2

 0.4

 0.6

−0.4

−0.6

 0.8 −0.8

Distribution Function

 0.5
 0.45
 0.4
 0.35
 0.3
 0.25
 0.2

 0.54
 0.52
 0.5
 0.48
 0.46
 0.44
 0.42
 0.4
 0.38
 0.36

−0.8

−0.6

−0.4

−0.2

 0
Vy

 0.2

 0.4

 0.6

−0.4

−0.6

 0.8 −0.8

 0.8

 0.6

 0.4

 0

−0.2

 0.2

Vz

FIG. 4: Numerical solutions of the distribution function of Eq. (19). Top: surface distribution for the case with vx ≈ 0.38,
vy ≈ −0.5, vz ≈ −0.5 and z ≈ 0.16. Bottom: velocity distribution for the case with x ≈ −0.39, y ≈ 0.06, z ≈ −0.17 and
vx ≈ 0.28.

solve the coeﬃcient matrix and not the time due to create the coeﬃcient matrix and upload it into the code. In our
code, we only upload 25 vectors of approximately Nnode.

For a grid of ﬁve points per variable some code compilers can not allow the storage of the coeﬃcient matrix because
is too large 512, approximately 244 millions of elements. This was the case of the public code because it can not
managed sparse matrices. For this number of grid points the modiﬁed Stone method was almost 5 times faster than
the gmres routine. In Fig. 3 we present the eﬃciency of our method compare to the gmres routine. Note that when
we increase the number of grid points the eﬃciency also increases. For a grid of nine points per variable the gmres
routine can not managed to ﬁnd the solution because it has storage problems. For a grid of ten point per variable the
number of elements in the coeﬃcient matrix increases to 1012. Our code can managed this huge amount of data in a
faster and eﬃcient way. The time spent for this case was approximately 91 seconds. This should be the time spent
for each time step in a non stationary problem, which is a great result considering the number of nodes in the grid
and the precision attained with the stop criteria. The variation of α between the accepted limits 0 < α < 1 slightly
alter the time spent in ﬁnding the solution. In Fig. 4, we present two graphs of the distribution function from the
numerical solution of Eq. (19) for a grid of ten grid per variable. One is the surface distribution function on the plane
x − y and the other is the velocity distribution function on the plane vy − vz; they are plotted in diﬀerent points of

15

Ω

B

Ω

Ω

B

Ω

FIG. 5: Application of the incomplete LU decomposition to a general domain Ω with curved boundaries ΩB. The square
structured grid leads three classes of grid points:
interior points (full circles), boundary points (empty circles) and exterior
points (triangles).

the grid.

Note that when we used central diﬀerence for discretization of Eq. (19), the only contribution to the main diagonal
comes from the last right hand term, i.e. the term with β. For some values of β < 1 our code diverge because our
resulting coeﬃcient matrix is not diagonal dominant. For the same value of β, the gmres routine converges. The
break in convergence at these values of β coincide with the appearance of negatives values on the distribution function
solution found by gmres. We know that one of condition to attained a physical solution is that the distribution
(19) our code diverge when physical solutions
function has to be always positive.
are not possible, this could be an indication that we are applying a wrong scheme for discretization or that we are
not describing well the physical phenomena considered. Thus, in our method the convergence is conditioned to the
form of the functions present in (1) and (2), i.e. physical considerations; and to the diﬀerence scheme applied for
discretization, i.e. numerical implementation. For a non stationary schemes the Crank-Nicolson decomposition in
time is suggested because it has implicit character and it is usually more stable than other methods, but strictly
speaking, the stability of the system has to be studied for the particular case considered.

It is remarkable that for Eq.

For test comparison, we solve the stationary diﬀerential equation (19) with the Euler explicit method, which can
handle a ten grid points per variable. To use this method we have to add a temporal term in the left hand side of
equation (19) and used the explicit temporal discretization. When convergence is achieved the temporal term goes to
zero and we obtain the solution of equation (19). Using the bigger time step allowed for convergence to be achieved,
dt ≈ 0.002, the explicit Euler method spend approximately twelve minutes to attained the stationary solution, i.e.
our LU decomposition method is eight times faster in this case.

V. DOMAINS WITH CURVED BOUNDARIES

The LU code was tested in the previous section with a structure-orthogonal grid but this does not mean that it
can not be applied to more general geometries. To handle a non square domain we proceed as follows. First we make
a square structured grid with Nnode = ninjnknlnmnn nodes, then we label them according to the index p deﬁned in
(4). Later, the nodes that laid outside the boundary regions are not considered for the calculations. Now, lets see this
procedure in an example. For didactic purpose we used only the one dimensional case of the Fokker-Planck equation
in which we have two variables (x, vx). In Fig. 5 is depicted in the two dimensional plane (x, vx) a domain region Ω
with boundary ΩB. The domain Ω is ﬁlled with a square structured grid that leads three classes of grid points: the
interior points in which the normal discretization procedure can be done; the boundary points in which special care
have to be taken when Dirichlet, Neumann or mixed boundary conditions are applied; and the exterior points that
have to be neglected for the calculation, see Fig. 5.

The incorporation of the Dirichlet boundary conditions using central diﬀerences for the boundary points of region
Ω can be done using a Taylor expansion around the nearest nodes. For example, in Fig. 6, we take the nearest
boundary points for point 1: the internal node (node 2) and the point at the boundary ΩB (point B); and make two
Taylor expansions around point 1. These expansions give us (our conventions are: partial derivative with respect to
the coordinate x denoted by (, x); ∆x is the discretization interval in the x direction),

16

(20)

(21)

2

E

∆ x

b

∆ x

Ω

B

a

∆ v

∆ v

Ω

B

v

x

v

Ω

B

v

Ω

B

x

N

1

3

x

FIG. 6: Schematic representation of a ﬁve-point molecule for the ﬁnite diﬀerence approximation of the derivatives in the
plane (x, vx) for a boundary point. Below, we see diﬀerent boundary situations that can occur in the numerical computation
depending on the discretization grid and boundary S.

ΨE = Ψ1 + b∆xΨ,x +

Ψ,xx + O[∆x3],

Ψ2 = Ψ1 − ∆xΨ,x +

Ψ,xx + O[∆x3],

(b∆x)2
2!
(∆x)2
2!

eliminating the second order derivative between these equations we can express the partial derivative at a boundary
point as,

Ψ,x =

1
∆x (cid:20)

1
b(1 + b)

ΨE − b

1 + b

Ψ2 − 1 − b
b

Ψ1(cid:21)

+ O[∆x2].

When b = 1 we recover the usual expression for the central derivative. The same procedure can be applied to the
northern boundary, between node 3 and point A, and to the diﬀerent types of boundary nodes in Fig. 6. Also, partial
derivative of higher orders and mixed derivatives can be found in a similar way. Furthermore, it is also possible to
implement Neumann boundary conditions in an irregular boundary using ﬁnite diﬀerence, see for instance [22].

The exterior points of Fig. 5 are strictly necessary to maintain the ordering of the nodes in a domain with curved
boundaries. This ordering is needed by the code to operate normally but they do not enter into the calculations. To
implement this condition, we have to set the values of the elements Lp
[X], Rp, Υp and ∆p of the external
grid point (each exterior point has a position p from the one dimensional storage index) equal to zero.

[X], Lp

P , U p

An application of the LU method in a two dimensional Fokker-Planck equation (x, y, vx, vy) with curved boundaries,
as well as the incomplete LU decomposition for this case can be seen in [21]. Here, the distribution function of a
stationary gravitational thin disk is calculated. Note that to obtain the elements of the LU decomposition for the
two dimensional case we have to start the calculations from the beginning, i.e. we can not used the elements found
in the three dimensional case.

VI. CONCLUDING REMARKS

We have developed a variation of the incomplete LU decomposition proposed by Stone that solves the three
dimensional Fokker-Planck equation with a general collision term. The method presented can manage the large set
of linear equations that appears from the discretization procedure. The convergence of the iterative process is done

in a fast and eﬀective way. Also, this method can be easily adapted to support irregular boundaries with Dirichlet,
Neumann or mixed boundary conditions and can be used to follow the evolution of a distribution function for non
stationary equations. In this case a Crank-Nicolson discretization in time is recommended because it has implicit
character and is more stable than other methods, but strictly speaking, the stability of the system has to be studied
for the particular case considered. The good properties that our method shares and the lack of methods that handle
the large amount of data (given by the Fokker-Planck equation with six independent variables) make the method
presented in this article worthy and advantageous. In general, the algorithm presented in the article can solve the
system of equations that arises from the discretization of the general equation (1) or similar equations (with or without
the mixed derivatives), but we have to keep in mind that its convergence is conditioned to the form of the functions
˙v, A(x, v), B(x, v), C(x, v), D(x, v) and Eij (x, v) that appear in the collision term (2).

17

[1] Reichl, L.E., A modern course in statistical physics, University of Texas Press, 1980.
[2] Huang, K., Statistical mechanics, second ed., John Wiley & Sons, 1987.
[3] M. Hestenes, E. Stiefel, Methods of conjugate gradients for solving linear systems, J. Res. Nat. Bur. Stand. 49 (1952)

409-436.

[4] C.F. Gerald, P.O. Wheatley, Applied Numerical Analysis, ﬁfth ed., Addison-Wesley, 1994.
[5] Binney, J., & Tremaine, S. 1987, Galactic Dynamics, Princeton University Press, 1987.
[6] Jeans, J.H., On the theory of star-streaming and the structure of the universe, MNRAS 76 (1915) 70-84.
[7] R.B. Larson, A method for computing the evolution of star clusters, MNRAS 147 (1970) 323-337.
[8] R.B. Larson, The evolution of star clusters, MNRAS 150 (1970) 93-110.
[9] D. Lynden-Bell, P.P. Eggleton, On the consequences of the gravothermal catastrophe, MNRAS 191 (1980) 483-498.

[10] M. H´enon, Monte Carlo models of star clusters, Astrophys. Space Sci. 13 (1971) 284-299.
[11] M. H´enon, The Monte Carlo method, Astrophys. Space Sci. 14 (1971) 151-167.
[12] H.L. Stone, Iterative solution of implicit approximations of multidimensional partial diﬀerential equation, SIAM J. Num.

[13] G.E. Scheneider, M. Zedan, A modiﬁed strongly implicit procedure for the numerical solution of ﬁeld problems, Num. Heat

[14] H.-J. Leister, M. Peri´c, Vectorized strongly implicit solving procedure for a seven-diagonal coeﬃcient matrix, Int. J. Num.

[15] M.N. Rosenbluth, W.M. MacDonald, D.L. Judd, Fokker-Planck equation for an inverse-square force, Phy. Rev. 107 (1957)

[16] Y. Saad, M.H. Schultz, GMRES: A generalized minimal residual algorithm for solving nonsymmetric linear systems, J.

Anal. 5 (1968) 530-558.

Trans. 4 (1981) 1-19.

Meth. Heat Fluid Flow 4 (1994) 159-172.

1-6.

Comput. Phys. 7 (1986) 856-869.

Res. Nat. Bur. Stand. 45 (1950) 255-282.

(1951) 17-29.

[17] C. Lanczos, An iteration method for the solution of the eigenvalue problem of linear diﬀerential and integral operators, J.

[18] W. Arnoldi, The principle of minimized iterations in the solution of the matrix eigenvalue problem, Quart. Appl. Math. 9

[19] C. Lanczos, Solution of systems of linear equations by minimized iteration, J. Res. Bur. Stand. 49 (1952) 33-53.
[20] V. Frayss, L. Giraud, S. Gratton, J. Langou, A set of GMRES routines for real and complex arithmetics on high performance
computers, CERFACS Technical Report TR/PA/03/3, public domain software available on www.cerfacs.fr/algor/Softs,
2003.

[21] M. Ujevic, P.S. Letelier, Numerical self-consistent stellar models of thin disks, submitted to Astronomy & Astrophysics

[22] See for example: G.E. Forsythe, W.R. Wasow, Finite diﬀerence methods for partial diﬀerential equations, John Wiley &

(2005).

Sons, 1960.

