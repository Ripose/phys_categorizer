Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

1

Java Physics Generator and Analysis Modules

Michael T. Ronan
LBNL, Berkeley, CA 94720, USA

3
0
0
2
 
n
u
J
 
2
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
9
1
0
6
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

A Java software framework allows modules written in diﬀerent languages to be used in a high level Object-
Oriented (OO) environment. Java Native Interfaces (JNI) for Linear Collider (LC) physics event generators
are used in deﬁning a common generator interface package. Portable-JNI for TESLA and Asian JLC detector
simulation modules have been written for performing comparisons to the American LC detector simulation.
Physics and detector Java analysis modules using prototype HEP class libraries provide high level OO study
tools. Complete physics generation, parallel detector simulations and event analysis for full 500 fb−1 simulated
data samples are performed in single-pass batch jobs. Java histogram objects ﬁles are saved for ﬁnal presen-
tation using the Java Analysis Studio (JAS). The software architecture, JNI designs and overall performance
is presented. Comparisons of American, Asian and European detector simulations of Higgsstrahlung events
generated by Pandora, Pythia and Whizard are made.

1. INTRODUCTION

In performing Linear Collider physics and detec-
tor studies, one encounters a number of existing For-
tran77, and new C++ and Fortran95 software mod-
ules for event generation, detector simulation and ana-
lyis. Stand-alone packages exist for Pandora(C++),
Pythia(F77) and Whizard(F95) physics generation,
and in some cases have been integrated into separate
simulation packages for TESLA SimDet(F77), Asian
JLC QuickSim(C++) and American Java Fast Monte
Individual physics analyses
Carlo detector studies.
proceed by adopting one of the generator and detec-
tor simulation packages and often are hard to compare
to similar analyses done in diﬀerent environments.
A Java software framework [1] allows the use of dif-
ferent event generators, detector simulation packages
and analyis modules in the same high level Object-
Oriented (OO) environment. An environment which
provides modern development tools for Java physics
and detector analysis modules using prototype HEP
class libraries [2]. The model allows networked graph-
ical interactive applications, or batch single-pass pro-
cessing of complete physics generation, parallel detec-
tor simulations and event analysis for full 500 fb−1
simulated data samples. Java histogram objects ﬁles
can be saved for ﬁnal presentation using the Java
Analysis Studio (JAS) [3].

In this paper, Java Native Interfaces (JNI) for Pan-
dora, Pythia and Whizard Linear Collider physics
event generators are described and used in deﬁning
a Java framework with a common generator interface
package, Sec. 2. Sections 3 and 4 list the generator
and detector simulation modules, respectively. A sim-
ple comparison of the diﬀerent physics generators is
made for a LC bench mark process in Sec. 5. Detector
simulations using the U.S. Fast Monte Carlo, TESLA
SimDet and Asian QuickSim packages are compared
in Sec. 6. Details of interface implementations for the
generators, and for executing SimDet and QuickSim
detector simulations and accessing simulated quanti-
ties are outlined in Sec. 7. Java software package orga-

THJT005

nization and a brief discussion of the documentation
is left for Sec. 8.

2. JAVA ANALYSIS FRAMEWORK

Several prototype Java interfaces, classes and li-
braries have been written[1] to provide a high level
object-oriented physics generation, detector simula-
tion and analysis environment for e+e− Linear Col-
lider studies.

2.1. Generator interface

A protype Java object model has been developed to
generalize the interface to physics generators such as
Pandora, Pythia and Whizard. The following meth-
ods are implemented through Java Native Interfaces
(JNI) to the underlying C++, Fortran77 or Fortran95
package:

• setup() - Set up generator conﬁguration using

default parameters.

• initialize() - Initialize for selected beams, energy
and physics process with given parameters.

• generateEvent() - Generate an event.

• terminate() - Summarize generated data sample.

One additional method is required to provide infor-
mation about the generator.

• getName() - Return generator name and version

number.

Generator speciﬁc methods have been added such as

• list(int) - List particles in the event.

The useage of the Java generator interface is out-

lined in the following excerpt:

2

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

// Import the Pythia generator classes.
import hep.generator.pythia.*;

The following classes outline the use of detector sim-
ulation and analysis modules:

public class AnlPythiaZHJets implements Driver

// Create a Pythia process.
pythia = new Pythia();

// Set up a "User-defined" Pythia process
// with a String of parameters settings.

pythia.give(parameters);

// Initialize the e+e- Center-of-Mass system.

pythia.init("CMS","e+","e-",Ecm);

// Run Pythia to generate and list events.

for (int n=1; n<=NEvents; n++) {

pythia.generateEvent();
pythia.list(1);

}

Generator processes interfaces have been deﬁned for
classes which dynamically load predeﬁned process set-
tings, such as PythiaProcess for initializing Pythia. A
number of reference process classes have been written,
such as eetoZH for Higgsstrahlung and eetottbar for
Top-pair production processes.

2.2. EventGenerator and analysis
modules

The generator interface described above is used
the
to provide “EventGenerator” modules
American LCD framework[2].
A Java package
hep.lcd.generator is abstracted to introduce diﬀer-
ent generator modules as alternative “EventSource’s”:
• Generator - Deﬁnes a standard HEP physics

for

event generator module.

• GeneratedEvent - Deﬁnes a generated event.
• HEPEvent - Provides a standard /HEPEvt/ im-

plementation of a generated event.

public AnlPythiaZHJets()

add(detectorSimulation);
add(analysis);

or

add(new MCFast());
add(new SimDetModule());
add(new QuickSimModule());
...
add(new PythiaZHJetAnalysis());

class PythiaZHJetAnalysis implements Processor

void process(LCDEvent event)

particles = event.get("MCParticles");
tracks = event.get("SimDet Tracks");
objects = event.get("Energy Flow Objects");
...

Note that the Java Virtual Machine (JVM) allows
multiple detector simulations to run in independent
computer memory space.

2.3. Analysis classes and tools

The utility of Java physics and analysis class li-
braries is illustrated in the following excerpts for the
Particle physics class

int PDGID = particle.getType().getPDGID();
double[] PV = particle.getMomentum();

double pT = Math.sqrt(PV[0]*PV[0]+PV[1]*PV[1]);
double tanTh = pT/PV[2];

and the Histogram analysis class

histogram("Mass").fill(particle.getMass());

The useage of a LCD EventGenerator module is illus-
trated by

// Import the LCD generator classes for Pythia.
import hep.lcd.generator.pythia.*;

// Create a Pythia generator for given process.
generator = new PythiaGenerator(processName);

// Run to generate and dump the first event.

for (int n=1; n<=NEvents; n++) {

event = generator.generateEvent();
if (n==1) event.dump();

}

Java framework applications can be built using
standard HEP analysis tools and run through con-
venient Java packages so that

• gmake - Compiles Java and native code then cre-

ates a shared object library.

• java -mx64M GenWhizard ... - Loads Java and
all shared object libraries, executes Whizard and
writes a xxx.javahist unbinned histogram ﬁle.

After completing several jobs, the Java Analysis Stu-
dio [3] can be used to combine histograms and make
presentation plots.

jas &

Within the LCD Java framework, event processing
and analysis modules are added as “Driver’s” or “Pro-
cessor’s” deﬁned in a hep.lcd.util.driver package.

Open files: xxx.javahist yyy.javahist ...
Overlay and format plots
Save as PostScript files

THJT005

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

3

3. MONTE CARLO EVENT GENERATORS

4.1. LCD Fast Detector Simulation

Three representative LC physics generators have
been used in this development: Pandora V2.2,
Pythia V6.2 and Whizard V1.22. Pythia which has
been extensively tested by many experiments was used
to provide checks on speciﬁc processes. Pandora and
Whizard are new developments which also oﬀer com-
plete event generation capability.

3.1. Pandora Monte Carlo

The Pandora V2.2 [4] Monte Carlo provides sim-
ulations of selected two- and three-body processes
and some illustrative beyond the Standard Model
processes.
Initial state radiation, beam polariza-
tion, and ﬁnal state spin correlations are included for
all processes.
In stand-alone applications Pandora
is used with the Pandora-Pythia V3.2 [5] interface
package to generate ﬁnal state events. A “straight-
forward” interface from the Java language to under-
lying Pandora C++ methods, Sec. 7, is provided in a
hep.generator.pythia Java package, Sec. 8.

3.2. Pythia Monte Carlo

The Pythia V6.2 [6] Monte Carlo program allows
generation of high-energy physics events including
hard and soft interactions, parton distributions, initial
and ﬁnal state parton showers, multiple interactions,
fragmentation and decay. A Java-C-Fortran77 inter-
face described below provides full Pythia functionality
within the Java environment.

3.3. Whizard Monte Carlo

The Whizard V1.22 [7] Monte Carlo system is de-
signed for the eﬃcient calculation of multi-particle
scattering cross sections and simulated event sam-
ples. Tree-level matrix elements are generated au-
tomatically for arbitrary partonic processes by call-
ing external programs (O’MEGA, MADGRAPH and
CompHEP). In this development, Java-C-Fortran95
interfaces to new Whizard procedures for initializa-
tion, phase space integration, event generation and
summary was written to allow easy portability and
compiler independence.

4. DETECTOR SIMULATION MODELS

Models of the expected LC detector response to
500 GeV e+e− annihilation events are being devel-
oped. Preliminary versions used in this study are de-
scribed below, and compared in Sec. 6. The detailed
Java interface implementations are outlined in Sec. 7.

THJT005

The American LCD V1.4 detector simulation in-
cludes charged particle momentum smearing based
on detailed error estimates, gaussian energy smear-
ing for photons and neutral hadrons, and acceptance
and energy threshold requirements. It doesn’t account
for confusion in reconstructing calorimeter energy de-
posits resulting in perfect energy ﬂow separation of
charged and neutral components of jets.

4.2. TESLA SimDet Detector Simulation

The European SimDet V4.0 detector simulation
includes parameterized charged and neutral energy
smearing based on full (Brahms) Monte Carlo sim-
ulations, acceptance requirements, and a realistic en-
ergy ﬂow algorithm.

4.3. JLC QuickSim Detector Simulation

The Asian QuickSim detector simulation includes
the generation of tracker hits followed by track and
vertex reconstruction. Simulated calorimeter cell en-
ergy depositions are formed based on detailed detector
simulations. Detailed cluster ﬁnding and track-cluster
matching are performed before writing out combined
track information..

5. PHYSICS GENERATOR
COMPARISONS

The Pandora, Pythia and Whizard Linear Collider
physics event generators are compared in Fig 1 for
LCD Fast Monte Carlo detector simulations of Hig-
gsstrahlung, e+e−→Z Higgs, events. In these studies
all generators were run at ECM = 500 GeV, and the
Higgs mass was set to 115 GeV. Pythia hadronization
was used following all parton-level event generation
processes. For Pandora, the NLC500 machine param-
eters were selected in simulating the beamstrahlung
energy spectrum. While both Pythia and Whizard
event generators used Circe beamstrahlung simulation
of the TESLA machine. These diﬀerent machine set-
tings are not signiﬁcant in this comparison.

Overall, the generators were found to be in good
agreement. In this study, Whizard V1.22 generated
events did not include the natural Z width as seen
in the jet-jet mass distributions shown in Fig 1d; a
Whizard deﬁciency that has been corrected following
this work.

In related studies [13], the Java framework was used
to compare the simulation of background processes for

4

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

Figure 1: LCD Fast Monte Carlo Particle jet distributions comparing Pandora, Pythia and Whizard generated
Higgstrahlung events: a.) number of “correctly” reconstructed jets, b.) angular distribution (cos(θ)M ax) of jets, c.) jet
ﬁnder ﬁnal “ycut” value, d.) jet-jet mass distributions showing Z and Higgs hadronic decay signals and the
combinatorial background.

W W , ZZ and qq production from Pandora with ex-
plicit ﬁnal state simulations in Whizard. These com-
parisons showed discrepancies due to the more pre-
cise treatment of polarization in Pandora for exclu-
sive processes. The simulation of inclusive, interfer-
ring processes in Whizard was found to be the most
complete, and the Whizard MadGraph amplitude cal-
culation provided handelling of parton color ﬂow in-
formation.

6. DETECTOR COMPARISONS

In a e+e− Linear Collider the Higgs can be recon-
structed through hadronic decays[13] even in multi-
jet ﬁnal states. The jet-jet mass distributions for the
American LCD Fast Monte Carlo (FMC), TESLA
SimDet and JLC QuickSim detector simulations of
Higgstrahlung signal-only events with the Z and Higgs
decaying hadronically are shown in Fig 2.
In these
current simulations, the LCD FMC jet-jet mass reso-
lution is signiﬁcantly better since it assumes “perfect”

energy ﬂow. More-realistic TESLA SimDet and JLC
QuickSim detector simulations give comparable jet en-
ergy resolutions but diﬀerent mean reconstructed jet-
jet masses. Both these simulation models may be im-
proved with the development of new techniques to re-
solve charged and neutral calorimeter clusters, and to
correct for the loss of low energy tracks and clusters.
The overall performance of the Java framework,
event generators, detector simulations and jet analyis
was quite acceptable for full 500 fb−1 production
runs. Each generator was run separately with all
three detector simulations being performed for the
same generated event. The Java framework itself and
event generation and fragmentation typically took
much less than 100 msec per event, with the longest
times for multi-body processes. The detailed native
SimDet and QuickSim detector simulations each took
about 300-500 msec per event, depending on the
type of events. The Java jet-ﬁnding which included
multiple passes to merge jets and the subsequent
analysis took roughly 100 msec per event for each
type of particle jet being found, e.g. for Monte Carlo

THJT005

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

5

Figure 2: Direct reconstruction of Z and Higgs through hadronic decays is shown for Higgsstrahlung signal events only.
Jet-jet mass distributions for U.S. LCD Fast Monte Carlo (FMC), TESLA SimDet and JLC QuickSim detector
simulations are reconstructed for Whizard-MadGraph Monte Carlo events including ISR and Circe beamstrahlung
eﬀects.

particles, for jets found from reconstructable tracks
and clusters, or for Energy Flow object jets. The
typical overall event generation, multiple detector
simulation, and jet analysis took about 1-1.5 seconds
per event.

Batch jobs were labelled by the generator name and
parameters that were set, and histogram folders were
created for the diﬀerent detector simulations. In the
analysis of results, JAS would open separate output
histogram ﬁles in diﬀerent folders and use the folder
names to automatically generate plot legends.

7. JAVA NATIVE INTERFACE (JNI)
IMPLEMENTATIONS

The physics generator, physics event, detector sim-
ulation and software framework implementations1 for
all developed software modules are outlined in Table I.
In generating events through the Pandora-JNI, a
Java-C++ interface is used to allow the setting of
diﬀerent beam conﬁgurations, and to create physics
processes to be added to Pandora’s Box. Pandora
processes parameters, such as the Higgs mass, are

1http://www-lc.lbl.gov/software/docs/

THJT005

required for the Java interface construction. Once
a Pandora process has been created no Java object
to C++ object interface is needed. Pandora gener-
ates primary partons which are accessed through the
HEPEvt-JNI and passed to Pythia for fragmenta-
tion.

The Pythia-JNI allows for independent event gener-
ation and fragmentation processing. The interface can
be used to pass conﬁgurations through pygive or to use
Java classes such as “eetoZH” to conﬁgure Pythia for
simulating the Higgsstrahlung process. The Pythia
interface will be quickly replaced when new C++ ver-
sions of Pythia are made available and tested.

The Whizard interfacing to Fortran95 was sim-
pliﬁed by creating a few simple Fortran95 modules.
Whizard is conﬁgured by reading a “whizard.in” data
ﬁle. Future developments of the Whizard Java inter-
face are planned.

Java interfaces to the HEPEvt data structure and
StdHEP output were written for multi-purpose use.
After a generator ﬁlls HEPEvt, framework modules
read the information and create event objects. These
objects are later downloaded into HEPEvt structures
that are accessed by fragmentation processes or by the
diﬀerent detector simulations. The design allows any
combination of physics generator, fragmentation pro-
cess or detector simulation. User analysis interfaces
have also been written to allow one to use existing
analysis packages.

6

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

An interface to Circe [8] is used to handle the initial-
ization of beamstrahlung simulation parameters from
the Java framework for the Pythia and Whizard gen-
erators. The Tauola [9] τ -decay package was used to
handle polarization eﬀects. A simple Java interface
was written to allow testing of individual Tau decay
modes.

The detector simulation packages have simple in-
terfaces to set up, initialize and execute the simula-
tions. Care was taken to pass events into the packages
through separate HEPEvt interfaces. The simulated
detector responses for SimDet and QuickSim are ac-
cessed from underlying storage into Java track and
cluster classes to form reconstructed objects that are
added to the LCD event for subsequent analysis. The
SimDet and QuickSim interfaces follow a similar de-
sign model which could be generalized for other ap-
plications.

8. JAVA SOFTWARE PACKAGE AND API
ORGANIZATION

The interface software and LCD modules have been
organized into several Java packages or class libraries.
The interfaces to the imported physics generator and
detector simulation modules are in the HEP packages
listed in Table II. The LCD framework modules are
organized in the packages listed in Table III. The LCD
modules provide reference implementations using the
more generic interfaces to the HEP packages.

The LCD event generator and detector simulation
modules are designed for simple use, see Sec. 2.2. The
Generator, Fragmentation and GeneratedEvent inter-
faces allow the design of abstract models for sourcing
events to be based to the diﬀerent detector simulation
modules. Simulated reconstructed objects implement
a basic Particle class allowing the development of ab-
stract analysis methods to reconstruct event quanti-
ties from diﬀerent detector models.

Special utility packages, pandorapythia and
whizardpythia, based on the Pandora-Pythia [5]
software model for handelling the physics interfacing
from Pandora and Whizard generated parton color
ﬂow information to Pythia hadronization, are located
in the hep.lcd.util package.

Software Application Programming Interface (API)
documentation on all Java packages is available on
the web2. Class inheritance and method signiture
documentation is automatically generated.
Some
documentation exists for most classes while comments
on many self-explanatory methods are missing.

In building stand-alone event generation, detector
simulation and physics analysis packages, the Java
classes are compiled according to the following rule

# For a collection of Java source files

JAVAFILES := $(wildcard hep/.../*.java)

# the corresponding class files are obtained

CLASSFILES:= $(patsubst %.java, \

%.class,$(JAVAFILES))

# and compiled with
%.class: %.java

@echo "Compiling" $(*F)
@javac $(JAVACFLAGS) $<

Header ﬁles for the JNI implementations are automat-
ically generated from the Java source code using a
utility

$(HeaderFile): $(JNISource)

@if [ -f $(TargetFile) ]; \

then rm $(TargetFile); fi;

@javah -jni -d $(TargetDir) $(Source)

Shared object libraries and native code are compiled
following

gcc -shared -I$(JavaJDK)/include \

-I$(JavaJDK)/include/linux \
...
-L/usr/lib/gcc-lib/i386-redhat-linux/2.96 -lg2c \
-L/usr/lib -lc \
-o $(SharedLib)

where JavaJDK locates the Java development kit
(JDK), the include ﬁles are used by the JNI imple-
mentations, and the library list usually includes Linux
speciﬁc libraries and general libraries that normally
would be loaded into an executable image. The shared
object library is located by the LD LIBRARY PATH
environment variable and loaded into the JavaVM fol-
lowing

public class Pythia
{

...

/** Static initializer loads Pythia library. */
static {

String libname = "pythia";
System.out.println(" Load lib"+libname+".so");
System.loadLibrary(libname);

}

}

2http://www-lc.lbl.gov/software/java/api/

THJT005

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

7

Acknowledgments

I thank Tony Johnson for many useful discussions
on Java object modeling and for presenting this pa-
per at the conference. Tony provided an initial inter-
face to the HEPEvt data structure. Michael Peskin
and Tim Barklow provided guidance on interfacing to
Pandora and on passing the parton color ﬂow infor-
mation to Pythia for fragmenting high-energy e+e−
jets. The Pythia generator interface was extended to
include pygive & pyinit in consultation w/ Stephen
Mrenna. Tim Barklow, Wolfgang Kilian and Thorsten
Ohl helped in deﬁning the Whizard interface and in
implementing simple Fortran95 procedures. I thank
Heinz-J¨urgen Schreiber and Akiya Miyamoto for re-
viewing the detailed interfacing to the TESLA SimDet
and JLC QuickSim detector simulation packages. The
Java physics generator and detector simulation mod-
ules described in this paper are used within the Java
based software framework under development by the
American LCD software group[1, 2, 3].

Work supported by the U.S. Department of Energy

contract DE-AC03-76SF00098.

References

[1] All modules and tools used in this

study
from http://www.lbl.gov/

available

are

∼ronan/docs/lcstudies.

[2] Norman Graf et al, Proceedings of the Interna-
tional Workshop on Linear Colliders, Jeju Island,
Korea, August 26-30, 2002 and references therein.
[3] Tony Johnson, SLAC, Java Analysis Studio,

http://jas.freehep.org.

[4] PANDORA V2.2,

http://www-sldnt.slac.

stanford.edu/nld/new/Docs/Generators/
PANDORA.htm.
[5] PANDORA-PYTHIA

V3.2,

http://www-sldnt.slac.stanford.edu/nld/new/Docs/
Generators/PANDORA PYTHIA.htm

[6] PYTHIA V6.2,

http://www.thep.lu.se/

∼torbjorn/Pythia.html.

[7] WHIZARD V1.22, http://www-ttp.physik.

uni-karlsruhe.de/Progdata/whizard/.

[8] CIRCE V7.0, http://heplix.ikp.physik.tu-darmstadt.de/lc/beam.h
[9] TAUOLA V2.6, http://hpjmiady.ifj.edu.pl/

programs/node6.html.

[10] SIMDET

V4.0,

http://www-zeuthen.

desy.de/linear collider/.
V2002-1.0,

[11] JSF

http://www-jlc.kek.jp/

subg/oﬄ/jsf/docs/usersguide/html/.

[12] QUICKSIM

is

part

of

LCLIB,

http://www-jlc.kek.jp/subg/oﬄ/lclib/index.html.

[13] Michael T. Ronan, Multi-Jet Higgsstrahlung

Event Analysis”, LCWS 2002, ibid.

THJT005

8

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

Table I Java Native Interface (JNI) Implementations

Java method signature

Native invocation

Create a new beam.
Create a new process.
Add process to Pandora’s box.
Generate an event.

native newBeam(Eb,pol,in,out);
native newProcess(name,param);
native add(PandoraProcess process); Box→add(*P);
native nextEvent();

LEvent LE = Box→getEvent();

C++ → C++
b1 = new ebeam(Eb,pol,in,out);
P = new processName(param);

C → F77

give(String s) { give(s,s.length); }
native give(String s,int len);
native init(String frame, ...);
native exec();

pygive (string,length);
pyinit (frame,b1,b2,&E,i,j,k);
pyexec ();

Read input data ﬁle.
Do phase space integration.
Generate an event.

native readInput();
native integrate();
native event();

Initialize beamstrahlung simulation. native init(double X1M, ...);

Set decay mode of Tau+ or Tau-.

native setDecayMode(int i, int mode); if (i==1) jaki .jak1 = mode;

else if (i==2) jaki .jak2 = mode;

Package
Physics Generators
Pandora

Pythia

Give a parameter list.

Initialize CMS frame.
Generate an event.

Whizard

Circe

Tauola

Physics Events

HEPEvt

StdHEP

Initialize output ﬁle.
Write an event.

Detector Simulations
SimDet

Get momentum vector component. native getPHEP(int i, int j);

native initialize(String outﬁle, ...);
native writeEvt();

Initialize detector model.
Set detector parameters.
Simulate detector response

native init();
native detr();
native exec();

C → F95
whizard read input ();
whizard integrate ();
whizard event ();

C → F77
circes (&x1m, ...);

C → F77

C → F77
return hepevt .phep[i][j];

C → F77
stdhinit (outﬁle,&ngen);
stdhwrit (&nevt);

C → F77
siinit ();
sidetr ();
siexec ();

QuickSim

Create a JSF package. .
Set up QuickSim process.
Set type of generator.

Simulate detector response

Software Frameworks
JSF

Create a new JSF framework.
Add a LCFull process.
Set up defaults:

Set type of generator.
Add an analysis process.
...

THJT005

native newJSF();
native setup();
native setGenerator(type);
native exec();

C++ → C++/F77
jsf = new JSFSteer(...);
sim = new JSFQuickSim(...);
sim→setGenerator(type);
result = jsf→Process(eventNum);

native newJSF();
native addLCFull();
native setup();
native setGenerator(type);
native addAnalysis();

C++ → C++
jsf = new JSFSteer(...);
full = new JSFLCFULL(...);
sim = new JSFQuickSim(...);
sim→setGenerator(type);
anal = new MyAnalysis();

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

9

Table II HEP Java software package

Project
HEP Generator packages
Pandora

Java classes

Pandora, PandorasBox, Beam,
PandoraProcess, eetoee, eetoZHiggs, ...

Java package name
hep.generator
hep.generator.pandora

Pythia, PythiaProcess, eetobbbar,
eetoZH, ...

hep.generator.pythia

Pythia

Whizard

also
Circe

Tauola

Circe

Tauola

hep.generator.whizard

hep.generator.circe

hep.generator.tauola

HEP Event package
HEP

TESLA packages
SimDet detector simulation

JLC
JSF Software framework

HEPEvt, StdHEP

hep.event

SimDet, SimDetCHAPAEntry,
SimDetCLUSEntry, SimDetEFLOWEntry, ...

hep.tesla.simdet

JSFSoftwareFramework, JSFGenerator,
JSFGeneratorParticle, JSFPythiaGenerator

hep.jlc.jsf

QuickSim detector simulation JSFPackage, QuickSim,

hep.jlc.quicksim

QuickSimParticleEntry, QuickSimTrackEntry,
QuickSimCalHitEntry, ...

THJT005

10

Computing in High Energy and Nuclear Physics, La Jolla, California, March 24 - 28, 2003

Table III LCD Java software package organization

Package
Generator packages
Physics generators

Pandora generator

Pythia generator

Whizard generator

Monte Carlo packages

Java classes

Java package name

Generator, Fragmentation
GeneratedEvent, HEPEvent

PandoraGenerator, PandoraEvent,
LCDPandoraEvent

hep.lcd.generator

hep.lcd.generator.pandora

PythiaGenerator, PythiaFragmentation,
PythiaEvent, LCDPythiaEvent

hep.lcd.generator.pythia

WhizardGenerator, WhizardEvent,
LCDWhizardEvent

hep.lcd.generator.whizard

U.S. Fast MC Detector Simulation MCFast, ReconTrack,

hep.lcd.mc.fast

ReconCluster, ...

TESLA SimDet Detector Simulation SimDetModule, SimDetDriver,

hep.lcd.mc.simdet

hep.lcd.mc

JLC QuickSim Detector Simulation QuickSimModule, QuickSimDriver,

hep.lcd.mc.quicksim

SimDetAdapter, SimDetParticle,
SimDetTrackList, SimDetClusterList, ...

QuickSimAdapter, QuickSimParticle,
QuickSimTrackList, QuickSimClusterList, ...

Software framework packages

hep.lcd.framework

JLC Software Framework

JLCSoftwareFrameworkDriver, JSFEventGenerator, hep.lcd.framework.jsf
JSFGeneratorParticle, ...

THJT005

