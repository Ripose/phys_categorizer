5
0
0
2
 
y
a
M
 
9
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
5
6
0
5
0
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

LevelScheme: A level scheme drawing and scientiﬁc ﬁgure preparation
system for Mathematica

M. A. Caprio
Center for Theoretical Physics, Sloane Physics Laboratory,
Yale University, New Haven, Connecticut 06520-8120, USA
(Dated: September 21, 2013)

Abstract

Program Summary

LevelScheme is a scientiﬁc ﬁgure preparation system for Mathematica. The main emphasis is upon the construction
of level schemes, or level energy diagrams, as used in nuclear, atomic, molecular, and hadronic physics. LevelScheme
also provides a general infrastructure for the preparation of publication-quality ﬁgures, including support for multi-
panel and inset plotting, customizable tick mark generation, and various drawing and labeling tasks. Coupled with
Mathematica’s plotting functions and powerful programming language, LevelScheme provides a ﬂexible system for
the creation of ﬁgures combining diagrams, mathematical plots, and data plots.

Title of program: LevelScheme
Catalogue identiﬁer: ADVZ
Program summary URL: http://cpc.cs.qub.ac.uk/summaries/ADVZ
Program available from: CPC Program Library, Queen’s University of Belfast, N. Ireland
Operating systems: Any which supports Mathematica; tested under Microsoft Windows XP, Macintosh OS X, and
Linux
Programming language used: Mathematica 4
Number of bytes in distributed program, including test code and documentation: 3 051 807
Distribution format: tar.gz
Nature of problem: Creation of level scheme diagrams. Creation of publication-quality multipart ﬁgures incorporating
diagrams and plots.
Method of solution: A set of Mathematica packages has been developed, providing a library of level scheme drawing
objects, tools for ﬁgure construction and labeling, and control code for producing the graphics.

PACS: 01.30.Rr

Keywords: level scheme; level energy diagram; drawing; plotting; ﬁgure preparation; Mathematica

1.

INTRODUCTION

LevelScheme is a scientiﬁc ﬁgure preparation sys-
tem for Mathematica [1, 2]. The main focus is upon
the construction of level schemes, or level energy dia-
grams, as used in several areas of physics, including nu-
clear, atomic, molecular, and hadronic physics. How-
ever, convenient preparation of publication-quality ﬁg-
ures requires a variety of capabilities beyond those avail-
able with Mathematica’s built-in graphics display func-
tions. The LevelScheme system thus also provides sup-
port for multipanel and inset plotting, customizable tick
mark generation, and general drawing and labeling tasks.
Coupled with Mathematica’s powerful programming lan-
guage, plotting functions, and mathematical typesetting
capabilities, LevelScheme is a ﬂexible system for the cre-

ation of publication-quality ﬁgures. Figures can combine
data plots, mathematical plots, and graphics generated
by specialized packages (e.g., Ref. [3]) with diagrams con-
structed using LevelScheme’s drawing tools.

LevelScheme automates many of the tedious aspects
of preparing a level scheme, such as positioning transi-
tion arrows between levels or placing text labels along-
side the objects they label. The package allows extensive
manual ﬁne tuning of the drawing appearance, text for-
matting, and object positioning. It also includes special-
ized features for creating several common types of level
schemes encountered in nuclear physics. Note that there
already exist programs for drawing certain speciﬁc types
of level schemes, such as band structure diagrams or de-
cay schemes (e.g., Refs. [4, 5]).

After a discussion of the general

features of the

LevelScheme system (Sec. 2), the major components of
the software are considered in greater depth separately
(Secs. 3–5). Examples of the package’s graphical out-
put are given in Sec. 6. The more technical details
of using the LevelScheme package are addressed in the
documentation provided through the CPC Program Li-
brary, which includes a tutorial discussion, a full refer-
ence guide, and extensive examples of code for producing
ﬁgures with LevelScheme. Updates and further infor-
mation may be obtained through the LevelScheme home
page [6, 7].

2. PRINCIPLES OF IMPLEMENTATION

A few basic principles have guided the design of the
LevelScheme system. One is that it should be possible
for the user to make even major formatting changes to a
level scheme relatively quickly. Objects are attached to
each other (transition arrows are attached to levels, la-
bels are attached to levels or transition arrows, etc.), so
that if one object is moved the rest follow automatically.
Another principle is for objects to have reasonable de-
fault properties, so that an unsophisticated level scheme
can be drawn with minimal attention to formatting fea-
tures. But the user must then be given extensive ﬂex-
ibility in ﬁne tuning formatting details, to accomodate
whatever special cases might arise. This is accomplished
by making the more sophisticated formatting features ac-
cessible through various optional arguments (“options”)
for which the user can specify values. The user can spec-
ify the values of options for individual objects, or the
user can set new default values of options for the whole
scheme to control the formatting of many objects at once.
Finally, attention has been paid to providing a uniform
user interface for all drawing objects, based upon a con-
sistent notation for the speciﬁcation of properties for the
outline, ﬁll, and text labels of objects.

The code for the LevelScheme system consists of essen-
tially three parts. There is a library of functions made
available to the user for drawing the individual objects
within a ﬁgure (Sec. 3). There are tools included to fa-
cilitate the general aspects of ﬁgure preparation and lay-
out, such as construction of panels, axes, and tick marks
(Sec. 4). And underlying these is a general infrastruc-
ture for managing the drawing process (option process-
ing, coordinate system arithmetic, and a layered drawing
system) and the ﬁnal display of the ﬁgure (Sec. 5).

3. DRAWING OBJECT LIBRARY

The drawing object library is the portion of the Level-
Scheme system which is most visible to the user. Some
of the objects in this library are specialized elements of
level scheme diagrams, while others are general purpose
drawing shapes and labels.

The basic drawing objects are as follows:

2

1. An energy level object (Lev), consisting of a line
and several attached labels. This line may have
raised or lowered end segments (“gull wings”) to
allow room for labels, as is customary in certain
types of level schemes. There are also objects
providing an extension line to the side of a level
(ExtensionLine) or a connecting line between lev-
els (Connector). These are shown in Fig. 1(a).

2. A transition arrow object (Trans), the endpoints of
which can be automatically attached to two given
levels or can be free-ﬂoating. This object is quite
versatile. Labels can be attached to the transi-
tion arrow at predeﬁned but adjustable positions,
either aligned along the arrow or oriented as the
user prefers. The arrow can be of several diﬀerent
styles ranging from a simple line to a ﬁlled polygo-
nal arrow shape, with user control of all dimensions.
Examples are shown in Fig. 1(b).

3. Separate label objects. Labels may be free-standing
at coordinates speciﬁed by the user (ManualLabel
and ScaledLabel) or may be positioned in relation
to an existing level (BandLabel and LevelLabel).
See Fig. 1(c).

4. General drawing objects. These are essentially en-
hanced versions of the basic Mathematica drawing
primatives [1]. They diﬀer from the basic prima-
tives in that their drawing properties are controlled
through the LevelScheme option system and in that
they conveniently combine an outline, ﬁll, and text
labels in a single object. The general drawing ob-
jects are an open curve or polyline (SchemeLine), a
closed curve or polygon (SchemePolygon), a rect-
angle (SchemeBox), and a ﬁlled circular or ellip-
tical arc (SchemeCircle). An arrow similar to
Trans, but meant for general drawing and annota-
tion tasks, is also provided (SchemeArrow). These
are illustrated in Fig. 1(d).

The user creates a ﬁgure by providing a list of such ob-
jects to the drawing function Scheme (Sec. 5). Each ob-
ject’s position and appearance is governed by arguments.
The most essential positioning information is indicated
through a small number of mandatory arguments. The
other aspects of the object’s positioning and appearance
are speciﬁed as options, using the standard Mathemat-
ica option→value syntax [1], with extensions described
in Sec. 5.

Each drawing object is built from up to three distinct
parts: an outline, a ﬁlled area, and attached text la-
bels. The labels may contain any Mathematica expres-
sion and can take full advantage of Mathematica’s ex-
tensive typesetting capabilities. Several basic options
controling the appearance of the object’s parts (e.g.,
Thickness, FillColor, and FontSize) are standardized
across all object types, as are options for specifying the
contents and positions of the text labels. Other options,
such as those governing a level’s gull wings or an arrow’s

3

+
21

+
01

HaL

HbL

HcL

HdL

0
0
1

156  Dy
Experiment

105.3
100.1

0+

0.0

2+

0+

2+

0+

+
0
+ Ø
2

e.
c.
+
g

Y

R

A

3.2 h

100 y

NIMIL

E

R

P

Gate

+

7
ÅÅÅÅÅ
2

+

1
ÅÅÅÅÅ
2

ª

GSB

2+
0+

162  Er
3.23

2+

0+

4

.
f
e
R

r

2

1

HeL

3

2

1

L
q
  H

W

0

0

15

30

45

60

q HdegL

75

90

HaL

HcL

HbL

HdL

L

V
e
M

H
 

x
E

2

1

0

y

x

FIG. 1: Drawing objects and ﬁgure components provided by the LevelScheme system. (a) Levels, extension lines, and connectors.
(b) Transition arrows, including arrows with kinks, arrows with multiple shafts, extended shapes with outline and ﬁll, and
split-shading conversion electron transition arrows. (c) Labels, either stand-alone or attached in various ways to existing levels,
making full use of Mathematica’s text-formatting capabilities. (d) Drawing shapes, including polylines, polygons, boxes, ﬁlled
ellipses or arcs, and arrows. (e) Panels and axes, with extensive capability for labeling and tick customization.

shape, are speciﬁc to a given object type. If the user does
not explicitly give a value for an option, its global default
value is used. The user can thus control the style of all
objects of a given type by changing the default setting
of the relevant option, with SetOptions. For instance,
the line thicknesses of the levels in a diagram can all be
changed at once in this fashion, or the labels on these
levels can be relocated from the top to the sides. The
stylistic changes can be applied to the whole diagram or
they can be made midway through, to aﬀect only one
portion of the diagram.

The
Let us consider a brief concrete example.
function used to draw a level object has
syntax
Lev[name,x1,x2,E], where the arguments are, respec-
tively, a name chosen by the user, to be used to identify
the level later so that other objects such as transition
arrows can be attached to it, the left and right endpoint
x coordinates, and the energy or y coordinate. The code
needed to generate the leftmost diagram in Fig. 1(b) is

then

SetOptions[Lev, Thickness -> 2],
Lev[lev0, 0, 1, 0],
Lev[lev1, 0.3, 1.3, 10],
Trans[lev1, lev0, LabR -> 100]

More extensive examples may be found in Appendix A
and the documentation provided through the CPC Pro-
gram Library.

4. FIGURE PREPARATION TOOLS

Mathematica provides a powerful system for generat-
ing graphics, but it does not by itself make available the
ﬁne formatting control necessary for the preparation of
publication-quality ﬁgures. The relevant ﬁgure layout
and tick customization tools provided by LevelScheme
are summarized in this section.

Very often it is necessary to prepare ﬁgures with multi-
ple parts. These range from simple side-by-side diagrams
to more complicated possibilities, such as inset plots or
rectangular arrays of plots with shared axes [Fig. 1(e)].
LevelScheme includes a comprehensive framework for as-
sembling multipart ﬁgures.

The basic element of a multipart ﬁgure is a “panel”.
This is a rectangular region designated as a plotting win-
dow within the full plot. Panels can be arranged within
the ﬁgure as the user pleases, and they can arbitrarily
overlap with each other. Each panel can have its own
ranges deﬁned for the x and y axes, as speciﬁed by the
user. All objects are drawn with respect to these coordi-
nates, as discussed further in Sec. 5. If the user changes
the position or size of the panel as a whole, all its contents
thus move or are rescaled accordingly, without any need
for changes to the arguments of the individual drawing
objects.

A panel can be drawn with any of several ancillary
components: a frame, tick marks, tick labels, axis labels
on the edges of the frame, a panel letter, and a solid
background color. All these characteristics are controlled
by options to the basic panel deﬁnition command Panel.
A panel can also simply be used without these, as an
invisible structure to aid in laying out part of the ﬁgure.
As an alternative to axis ticks on the panel frame, the
object SchemeAxis allows stand-alone axes (including a
line with optional arrow head, tick marks, tick labels,
and an axis label) to be placed wherever needed within
a ﬁgure [Fig. 1(e)].

The most common arrangement of ﬁgure panels is as
a rectangular array [Fig. 1(e)]. The Multipanel tool
greatly simpliﬁes the construction of such an array. The
user speciﬁes a total region to be covered with the pan-
els and the numbers of rows and columns of panels
within this region, rather than calculating the position
for each panel manually. The panels can be contiguous
(shared edges) or separated by gaps, and diﬀerent rows
or columns of panels can have diﬀerent heights or widths.
The axes of the panels can be “linked”, as in many data
plotting packages: The user speciﬁes the y axis range for
each row and x axis range for each column, and all panels
within the row or column use this same range. The user
can also specify the tick marks and axis labels by row
and column. (Tick and axis labels are by default drawn
only along the bottom and left exterior edges of the array
as a whole.) Panels are automatically labeled with panel
letters, formatted as chosen by the user. The user has
the ﬂexibility to override any or all of these automated
settings on a panel by panel basis.

LevelScheme also supports detailed customization of
tick mark placement and formatting. A very general
function is provided to construct sets of tick marks.
These tick marks can be used on panels, on stand-alone
axes, and on the frame of the LevelScheme ﬁgure as a
whole. (The built-in Mathematica plot display function
can generate a default set of tick marks, but it does not
give the user any control over the tick intervals or labels.)

4

Linear, logarithmic, and general nonlinear axes are sup-
ported. For linear axes, the user speciﬁes the start and
end points of the coordinate range to be covered with
tick marks and, optionally, the major tick interval and
minor subdivisions. Options are used to control the ap-
pearance of the tick marks and formatting of the labels,
or to suppress the display of certain tick marks or labels.
Beyond these basic tick mark formatting customiza-
tions, great ﬂexibility is obtained through integration
with the Mathematica functional programming language.
Arbitrary nonlinear axes are obtained by specifying var-
ious transformation functions to be applied to the major
and minor tick mark positions. Although the tick genera-
tion function provides basic ﬁxed-point decimal label for-
matting, the user can instead specify an arbitrary func-
tion to generate the tick label from the tick coordinate.
The resulting label can be any Mathematica text or sym-
bolic expression and can involve complicated typesetting:
for instance, plots of trigonometric functions might have
tick labels written as rational multiples of the symbol
π (see examples in the documentation provided through
the CPC Program Library). For convenience, a prede-
ﬁned function is provided for constructing logarithmic
ticks with labels in the format bn.

5.

INFRASTRUCTURE

Let us now consider the technical framework underly-
ing this LevelScheme ﬁgure construction process. This
includes extensions to the Mathematica option passing
scheme, deﬁnitions for handling a set of overlaid coor-
dinate systems, a layered drawing system, and a mecha-
nism for incorporating externally generated Mathematica
graphics into the ﬁgure.

Options play a major role in LevelScheme’s approach
to providing a simple but ﬂexible drawing system and
are used to control most aspects of the formatting of a
level scheme. Two conceptual extensions to the standard
Mathematica option passing scheme were needed to make
this possible. Under the usual option system [1], default
option values for a function are deﬁned globally in the
list Options[function], and these default values can be
overriden by specifying an argument option→value when
the function is invoked.

The user makes stylistic changes within a level scheme,
aﬀecting the appearance of all drawing objects of a given
type, by setting the default values of relevant options,
as discussed in Sec. 2. However, if such a change were
made to the usual global default value, it would have
collateral eﬀects on all other level schemes drawn in the
same Mathematica session. To remedy this situation,
LevelScheme implements dynamic scoping of default op-
tion value settings. The global default values are saved
before processing of the scheme starts, and these origi-
nal values are restored after processing ﬁnishes, so any
changes made within a level scheme are conﬁned to that
scheme.

Canvas

Hx2, y2L

Hx4, y4L

Region

y

L

User

Hx3, y3L

Hx1, y1L

Lx

FIG. 2: Overlaid coordinate systems maintained by Level-
Scheme: absolute (or physical), canvas, region, and user sys-
tems.

It is also sometimes convenient to have changes to cer-
tain basic stylistic options, such as the font size or line
thickness, aﬀect all objects in a drawing, not just those
of a given type. To facilitate this, the concept of in-
heritance, from object oriented programming, has been
applied to the Mathematica option system. All Level-
Scheme drawing objects are all deﬁned to be child objects
of a common parent object SchemeObject. The values
of the basic outline, ﬁll, and text style options (Sec. 3)
for these objects are by default taken, or inherited, from
values set for SchemeObject. (Further details are given
in Ref. [7].)

Several diﬀerent, complementary coordinate systems
are needed to describe points within a LevelScheme ﬁg-
ure (see Fig. 2). The Mathematica graphics display func-
tions only recognize a single coordinate system, which
runs from user-speciﬁed coordinates (x1, y1) at the lower
left corner of the ﬁgure to (x2, y2) at the upper right
corner. We refer to these coordinates as the “canvas co-
ordinates”. All graphics coordinates must ultimately be
expressed in terms of these for display by Mathematica.
However, many drawing tasks require the calculation
of physical distances as they will appear on the output
page. Angles are not preserved under an unequal rescal-
ing of the horizontal and vertical axes. Thus, for in-
stance, construction of the right angled corners in arrows
[Fig. 1(b)] requires knowledge of physical horizontal and
vertical distances rather than just x and y coordinate
distances. Since the physical dimensions Lx and Ly of
the plotting region are known (Fig. 2), “absolute coordi-
nates” measuring the physical position of a point within

5

the ﬁgure can easily be related to the canvas coordinates.
For constructing multipart ﬁgures (Sec. 4), a smaller
rectangular plotting region is designated within the full
ﬁgure, with new ranges deﬁned for the x and y axes
within this region. The resulting “region coordinates” are
fully determined if the coordinate values of the corners of
the region, (x3, y3) and (x4, y4), are speciﬁed in both the
canvas and region coordinate systems. These region co-
ordinates are the basic coordinates deﬁned within a plot
panel. However, it is also convenient for the user to be
able to arbitrarily shift portions of a diagram collectively,
without individually modifying the coordinates speciﬁed
for all the objects involved. This is accomplished by in-
troducing “user coordinates”, which have a user-deﬁned
oﬀset and scale relative to the region coordinates. (For
instance, the individual diagrams were arranged from left
to right within each panel of Fig. 1 by deﬁning a diﬀerent
horizontal user coordinate oﬀset before drawing the ob-
jects for each one.) The user speciﬁes all coordinates for
LevelScheme objects in the user coordinate system. Ini-
tially, the canvas, region, and user coordinate systems for
a ﬁgure are identical. Each time the user redeﬁnes the co-
ordinates, e.g., by deﬁning a panel or introducing a user
coordinate oﬀset, the aﬃne transformation coeﬃcients
relating the various coordinate systems are recalculated
and stored.

A ﬁnal important component of the drawing infras-
tructure is the layered drawing system. Each drawing
element is assigned to a numbered layer. Those assigned
to lower-numbered layers (background) are rendered be-
fore, and thus might be hidden by, objects assigned to
higher-numbered layers (foreground). The layering sys-
tem is essential for preventing text labels from being hid-
den by other drawing elements in dense level schemes. By
default, outlines and ﬁlls are assigned to layer 1, “white-
out” boxes behind text labels are in layer 2, and the text
itself is in layer 3. With this layering system, white-out
boxes hide any lines or ﬁlls behind them, but they do not
block neighboring text, making possible closely-spaced
transition labels, such as are needed in decay schemes
(see Sec. 6 for examples).

Arbitrary Mathematica graphics, including the output
of the Mathematica plotting routines, can be incorpo-
rated into a LevelScheme ﬁgure. Mathematica represents
graphical output as a Graphics object containing a list
of “primatives” [1], which are either drawing elements
(polylines, polygons, points, etc.) or directives aﬀect-
ing the style in which the following drawing elements are
rendered (color, thickness, dashing). For inclusion in a
LevelScheme ﬁgure, such graphics must be “wrapped” in
a LevelScheme RawGraphics object, which extracts the
primatives from the Graphics object and carries out sev-
eral manipulations on them. It ﬁrst transforms all the co-
ordinates contained in the graphics primatives from user
coordinates to canvas coordinates, thereby moving and
scaling the graphics to appear according to the user’s cur-
rent choice of coordinate system. (The graphics may con-
tain coordinates given in the special Offset and Scaled

FIG. 3: A simple level scheme, typical of those used in presen-
tations, with ﬁlled polygonal transition arrows. Figure from
Ref. [9].

l ê kpn = 10

Davydov

HaL

747
661

6 ps

HbL

GATE

GATE

4+
0+

2+

0+

747
661 t H  02
+L

335

27 ps

TIMING

0

335

27 ps

TIMING

0

3+

4+

2+

4+
0+

2+

0+

6+

4+

2+

0+

0+ 1593

0+ 1658

69 H 04 L W.u.
W . u .

4

0

0

0.0

<

-3
0
1
Lä
5
1
 H
0.4
=
E 0L
2 H
r

L W . u .

H 3

3

1

-3
01
ä

3.0
2 HE 0L<

r

HaL

SU pn

*   H3L

HbL

l ê kpn = 1

6

6+

1.61

6+

35.0

8
0.0

0.39

0.63

1

.

0

2

88.1

6+

5
6.0

6+

3

1.0

0

.

6

1

5+

4+

62.0

0.95

0.89

1.55

5+

64.0

77.1

4+

35.0

1.35

0
.
7

9

0.56

3+

2+

1.79

44.1

1.00

4+

2+

0+

HcL

6+

6
2.0
8
9.0

6+

5+
0.58

4+

1.10

96.0
32.0
21.0
83.0
68.0

97.0

6+
5+

4+

2
4.0

73.0

1.00

0.45

0.83

66.0
14.0

3+
0.73
2+

1.26

93.1

6+

4+

2+

0+

1.54

1.38

1.00

0.69

0
.
8

1

6
1.0

1.61

95.0

0.92

0.89

9

6.1

13.0

0.57

1.36

47.0

1.77

3

4.1

1.00

6+

4+

2+

0+

HdL

6+

6

5.1

4
8.0

6+

0.41

17.0

0
1.0

5+

4+

54.0

7
5.0

1.53

6+

28.1

6+

0.49

8
5.0

0
1
.
0

7
7.0

0.73

9.0
9

5+

1.59

4+

6
4.0
57.1

6
5.0

5
9
0

.

0.95

0.59

1.79

4
1.0

06.0

7
2.0

87.0

34.1

6+

4+

2+

0+

1.73

1.39

1.00

6+

5+

4+

3+

2+

6+

5+

4+

3+

2+

FIG. 6: A multipanel level scheme. Figure from Ref. [11].

FIG. 4: Level scheme illustrating various arrow styles. Figure
from Ref. [9].

5
2

.

3
2

.

.

9
04
4
4
1

4
4
5

6
1

.

1
8
0
1

4
3
1
1

9
2

.

7
5

.

8
9
3

5
9
5

4
5

.

6
4
2
1

9
5

.

4
5

.

4
7
1
1

2
6
8

0
3

.

3
2

.

0
1

.

0
6
0
1

9
1
2
1

8
4
7

4
4

.

2
9
6

.

.

1
2
0
26
0
7
9
3
5

7

.

2
1

8
4
8

2
1

.

9

2

.

.

0
2

8
17
2
4

1
5
6

0
1
8

1603.2
1551.4

1404.6
1332.4
1218.8
1162.7
1065.0
1007.1
897.2
809.9

.

7
4
4

2
1
3

0
0
1

9
5
1

470.5

158.6

0.0

166Hf

H5+L

H2+L

H0+L
3+
6+
2+

4+

2+

0+

3

2
1
0

v = 1

HaL

4

3

2
1
0

v = 0

0.0

HbL

E

-0.2

-0.4

-0.6

-0.8

-1.0

HcL

2
1
0

v = 2

D

I

Q

I

1.0

0.8

0.6

0.4

0.2

0.0

0.12

0.10

0.08

0.06

0.04

0.02

0.00

0.14

HdL

0

10

20

30

40

50

0

10

20

30

40

50

v

v

FIG. 7: A multipanel ﬁgure combining a level scheme diagram
with function and data plots. Figure from Ref. [12].

FIG. 5: A decay scheme in the classic style, created using
the LevelScheme decay scheme generation tools. Figure from
Ref. [10].

7

12.854

4+

2+

107

107

10.107

2+

0+

7.577

x=3

EH5L

6+

8.967

4+

3+

0+

66

5+

2+

255

174

60 61134

217

114 62

3+
551

7

1

2

6+
18

4+
301

2+

4+

0+

43
91
4.0
78

7

t=4

5.169

t=3

3.590

t=2

2.199

t=1

1.000

t=0

0.000

8+

6+

4+

2+

0+

167

167

100

x=1

4+

6.780

2+

124

124

2+

4.800

0+

3.031

75

x=2

321

6.1

FIG. 8: A large reference level scheme, with bent transition arrows and extensive use of annotation labels for families of levels.
Figure from Ref. [9].

156 Hf

158 Hf

160 Hf

162 Hf

164 Hf

166 Hf

168 Hf

154 Yb

156 Yb

158 Yb

160 Yb

162 Yb

164 Yb

166 Yb

152 Er

154 Er

156 Er

158 Er

160 Er

162 Er

164 Er

150 Dy

152 Dy

154 Dy

156 Dy

158 Dy

160 Dy

162 Dy

Z

Z

148 Gd

150 Gd

152 Gd

154 Gd

156 Gd

158 Gd

160 Gd

72

70

68

66

64

62

60

58

90

80

70

60

50

40

30

20

10

0

146 Sm

148 Sm

150 Sm

152 Sm

154 Sm

156 Sm

158 Sm

RuêPd

144 Nd

146 Nd

148 Nd

150 Nd

152 Nd

154 Nd

156 Nd

142 Ce

144 Ce

146 Ce

148 Ce

150 Ce

152 Ce

154 Ce

84

86

88

92

94

96

0

10

20

30

40

50

60

80

90 100 110 120 130 140

90
N

70
N

OsêPt

FIG. 9: Nuclear charts created using LevelScheme drawing objects and the Mathematica chemical elements database (see
text). Right panel adapted from Ref. [13].

notations deﬁned by Mathematica.) It then clips all poly-
lines and polygons to the current plot region, using a
standard algorithm [8]. Finally, it supplies default draw-
ing style primatives and a layer number for the graphics,
for use by the layered drawing system.

The graphical content of a LevelScheme ﬁgure is as-
sembled by the function Scheme. The user provides a
list of LevelScheme drawing objects to Scheme.
Inter-
mixed with these objects may be commands, such as
SetOptions or Panel, which aﬀect the appearance of the
following objects. Scheme also accepts options govern-
ing the overall ﬁgure properties (plot range, dimensions,
frame labels and ticks, etc.) much like the usual Mathe-
matica plotting functions. The ﬁnal output of Scheme is
a Graphics object.

We can now summarize the steps carried out by Scheme
in creating a ﬁgure. The list of objects passed to scheme
is initially “held” in unevaluated form, contrary to the
usual Mathematica symbolic evaluation rules, to prevent
premature evaluation of the coordinate arithmetic ex-
pressions and any SetOptions calls it contains. Scheme
ﬁrst initializes the variables controlling the overlayed co-
ordinate systems, based upon the plot range and image
dimensions speciﬁed by the user. Scheme then evaluates
the list of objects, dynamically scoping the drawing ob-
ject default option values as described above. Evaluation
of the objects relies upon three standardized functions for
generating outlines, ﬁlls, and text labels. These functions
in turn each return a structure containing three parts: a
list of graphics style primatives based upon the Level-
Scheme style option values (Sec. 3), a list of primatives
for the drawing elements, and a layer number. Scheme
sorts the resulting structures in order of ascending layer
number, to insure that drawing elements in foreground
layers are rendered after those in background layers, and
then discards the layer information, extracting just the
graphics primatives. Since many consecutive objects typ-
ically have the same drawing style properties, Scheme
achieves considerably more compact output by stripping
redundant style primatives from the list. Scheme also
constructs frame and axis directives for the whole scheme,
which are combined with the graphics primative list to
make a Mathematica Graphics object.

6. GRAPHICAL OUTPUT EXAMPLES

Several examples of ﬁgures generated using the Level-
Scheme system are shown in this section. These ﬁg-
ures, mainly level scheme diagrams, have been chosen to
demonstrate several of the capabilities discussed in the
earlier sections and to illustrate the variety of drawing
styles possible.

Figs. 3 and 4 are basic level schemes, as might be en-
countered in presentations. Note the various arrow styles
and arrow label positions. The complete code used to
generate Fig. 3 is given in Appendix A.

Fig. 5 is in the classic style for a decay scheme, show-

8

ing γ-ray transitions among nuclear levels populated fol-
lowing α or β decay. LevelScheme provides tools which
automate the positioning of the equally-spaced vertical
transition arrows in such decay schemes. Note the gull
wings on the levels and the white-out boxes behind the
transition labels. The layered drawing system discussed
in Sec. 5 prevents these boxes from obstructing neighbor-
ing labels.

Fig. 6 is an example of a multipanel ﬁgure involving
only level schemes. Fig. 7 combines a level scheme dia-
gram with function and data plots.

Fig. 8 is a larger-scale scheme, involving bent arrows.
Heavy use is made of annotation labels beside or below
levels. In such a scheme, user coordinate oﬀsets simplify
adjustment of the horizontal spacing between the diﬀer-
ent families of levels.

Fig. 9 provides an illustration of the use of Level-
Scheme drawing tools for technical diagrams other than
level schemes. Mathematica’s programming language can
be used to automate the construction of complex dia-
grams containing large numbers of drawing objects. Nu-
clear charts are simple to create using the SchemeBox
drawing object, which provides the outline, ﬁll, and labels
for each cell. The entire array of cells can be constructed
by using a single Mathematica Table construct to iter-
ate over proton and neutron numbers. (Mathematica’s
chemical elements database provides the element symbols
and information on which nuclides are stable.) The re-
sulting chart can be overlaid with a Mathematica contour
plot, as in Fig. 9 (left), where the LevelScheme layered
drawing system has been used to ensure that labels ap-
pear in front of the contour lines. Information read from
external data ﬁles can be superposed as well, in the form
of cell colors, cell text contents, or region boundary lines,
as in Fig. 9 (right).

7. CONCLUSION

The LevelScheme system for Mathematica provides a
ﬂexible system for the construction of level energy dia-
grams, automating many tedious aspects of the prepara-
tion while allowing for extensive manual ﬁne-tuning and
customization. The general ﬁgure preparation tools and
infrastructure developed for this purpose also have broad
applicability to the preparation of publication-quality
multipart ﬁgures with Mathematica, incorporating dia-
grams, mathematical plots, and data plots.

Acknowledgments

Discussions with and feedback from E. A. McCutchan,
M. Babilon, N. V. Zamﬁr, and M. Fetea are gratefully
acknowledged. Fig. 5 was provided by E. A. McCutchan.
This work was supported by the US DOE under grant
DE-FG02-91ER-40608.

APPENDIX A: FIGURE SOURCE CODE

9

This appendix contains the Mathematica code used to generate Fig. 3 with the LevelScheme ﬁgure preparation

system.

Scheme[{

(* set default styles for level scheme objects *)

SetOptions[SchemeObject, FontSize -> 20];
SetOptions[Lev, NudgeL -> 1, NudgeR -> 1, LabR -> Automatic],
SetOptions[Trans, ArrowType -> ShapeArrow, HeadLength -> 9, HeadLip -> 10, Width -> 30,

FontColor -> Blue, OrientationC -> Horizontal, BackgroundC -> Automatic],

SetOptions[LevelLabel, Gap -> 10],

(* draw cascade from 4+ level *)

SetOrigin[0],
ManualLabel[{-.4, 850}, "(a)", Offset -> {-1, 1}],

Lev[lev0, 0, 2, "0", LabL -> LabelJP[0]],
Lev[lev335, 0, 2, "335", LabL -> LabelJP[2]],
LevelLabel[lev335, Right, "27 ps"],
Lev[lev661, 0, 2, "661", LabL -> LabelJP[0]],
Lev[lev747, 0, 2, "747", LabL -> LabelJP[4]],
LevelLabel[lev747, Right, "
Trans[lev335, 1.3, lev0, Automatic, FillColor -> LightGray, LabC -> "TIMING"],
Trans[lev747, .7, lev335, Automatic, FillColor -> White, LabC -> "GATE"],

6 ps", FontColor -> Red],

(* draw cascade from 0+ level *)

SetOrigin[3.5],
ManualLabel[{-.4, 850}, "(b)", Offset -> {-1, 1}],

Lev[lev0, 0, 2, "0", LabL -> LabelJP[0]],
Lev[lev335, 0, 2, "335", LabL -> LabelJP[2]],
LevelLabel[lev335, Right, "27 ps"],
Lev[lev661, 0, 2, "661", LabL -> LabelJP[0]],
LevelLabel[lev661, Right,

RowBox[{"τ (", hspace[-0.2], LabelJiP[0, 2], ")"}],
FontColor -> Red],

Lev[lev747, 0, 2, "747", LabL -> LabelJP[4]],
Trans[lev335, 1.3, lev0, Automatic, FillColor -> LightGray, LabC -> "TIMING"],
Trans[lev661, .9, lev335, Automatic, FillColor -> White, LabC -> "GATE"],

},

PlotRange -> {{-.8, 6.3}, {-100, 900}}, ImageSize -> 72*{8, 4}
];

[1] S. Wolfram, The Mathematica Book, 4th ed. (Wolfram

297.

Media/Cambridge University Press, 1999).

[5] C. L. Dunford and R. R. Kinsey, computer code ENSDAT

[2] Wolfram Research, Inc., Mathematica 4 (Champaign,

(unpublished).

Illinois, 1999).

[3] T. Hahn, Comput. Phys. Commun. 111 (1998) 217.
[4] D. C. Radford, Nucl. Instrum. Methods A 361 (1995)

[6] Updates and further information may be obtained
(http://

through
the LevelScheme
wnsl.physics.yale.edu/levelscheme).

home

page

[7] The BlockOptions, CustomTicks, ForEach, and Inherit-
Options components of the LevelScheme system have pre-
viously been made available through the Mathematica
Information Center’s MathSource code library (http://
library.wolfram.com/infocenter), where further tech-
nical documentation may be found.

[8] I. E. Sutherland and G. W. Hodgman, Commun. ACM

[9] M. A. Caprio, Ph.D. thesis, Yale University (2003),

17 (1974) 132.

arXiv:nucl-ex/0502004.

[10] E. A. McCutchan, N. V. Zamﬁr, R. F. Casten, M. A.
Caprio, H. Ai, H. Amro, C. W. Beausang, A. A. Hecht,
D. A. Meyer, and J. J. Ressler, Phys. Rev. C 71 (2005)
024309.

[11] M. A. Caprio and F. Iachello, Ann. Phys. (N.Y.) (in

press).

[12] M. A. Caprio, J. Phys. A (submitted).
[13] M. A. Caprio, in Nuclei and Mesoscopic Physics, edited
by V. Zelevinsky et al. (AIP, Melville, NY, in press).

10

