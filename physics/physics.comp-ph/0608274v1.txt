6
0
0
2
 
g
u
A
 
8
2
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
4
7
2
8
0
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Pseudospectral Algorithms for Solving
Nonlinear Schr¨odinger Equation in 3D

A. A. Skorupski∗
Department of Theoretical Physics,
So ltan Institute for Nuclear Studies
Ho˙za 69, 00–681, Warsaw, Poland
(Dated: July 25, 2013)

Three pseudospectral algorithms are described (Euler, leapfrog and trapez) for solving numerically
the time dependent nonlinear Schr¨odinger equation in one, two or three dimensions. Numerical
stability regions in the parameter space are determined for the cubic nonlinearity, which can be
easily extended to other nonlinearities. For the ﬁrst two algorithms, maximal timesteps for stability
are calculated in terms of the maximal Fourier harmonics admitted by the spectral method used to
calculate space derivatives. The formulas are directly applicable if the discrete Fourier transform
is used, i.e. for periodic boundary conditions. These formulas were used in the relevant numerical
programs developed in our group.

I.

INTRODUCTION

The nonlinear Schr¨odinger (NLS) equation in one, two
or three dimensions is a commonly used model in various
branches of physics, e.g. in plasma theory [1], optics [2]
or condensed matter theory [3]. In these applications the
cubic form of the nonlinear term is used, and our analysis
will be pertinent to this form. However, the generaliza-
tion to other nonlinearities will usually be straighhtfor-
ward. To make the analysis directly applicable to various
situations we assume the following form of the NLS equa-
tion:

i¯u¯t + A¯u¯x¯x + B ¯u¯y ¯y + C ¯u¯z ¯z + D

¯u
|

2 ¯u + ¯E ¯u = 0 ,
|

(1)

where ¯t denotes time, and ¯x, ¯y, ¯z are space coordinates;
subscripts of ¯u denote partial derivatives. The coeﬃ-
cients A (
= 0) are assumed to be real,
but ¯E can be complex, ¯E = ¯Er + i ¯Ei. The unknown
function will be deﬁned in a box:

= 0), B, C, D (

L¯x ≤

−

¯x

≤

L¯x ,

L¯y ≤

−

¯y

≤

L¯y ,

L¯z ≤

−

¯z

≤

L¯z ,
(2)

L¯x, . . .) =
with periodic boundary conditions:
¯u(L¯x, . . .), etc. These conditions will be fulﬁlled exactly
for solutions periodic in ¯x, ¯y and ¯z but approximatelly
also for solitary solutions, which are exponentially small
at the boundaries. Non-periodic boundary conditions re-
quire special treatment, see the end of Sec. III.

¯u(

−

will be linearly related to each other so as to make the
NLS equation in machine units as simple as possible. As
the Fourier transform of a periodic function with period
P is the simplest for P = 2π, we ﬁrst transform the space
intervals in (2) into the intervals [0, 2π] by putting

x = αx(¯x + L¯x),

αx =

y = αy(¯y + L¯y),

αy =

(3)

z = αz(¯z + L¯z),

αz =

π
L¯x
π
L¯y
π
L¯z

,

,

,

Furthermore we normalize the time and the unknown
function (αt, αu > 0)

t = αt¯t ,

u = αu ¯u .

(4)

With these transformations Eq. (1) becomes

iut +

uxx +

Aα2
x
αt h

2

B
A (cid:16)

L¯x
L¯y (cid:17)

uyy +

2

C
A (cid:16)

L¯x
L¯z (cid:17)

uzz

i

+

D
u
α2
uαt |

2u +
|

¯E
αt

u = 0 .

We can choose αt and αu so that
uαt) = 1, leading to
D
|

/(α2
|

α2
A
|
|

x/αt = 1 and

αt =

α2
x ,
A
|
|

αu = p|

D/A
|
αx

.

II. TRANSFORMATION TO MACHINE UNITS

With this choice Eq. (5) can be written

For the machine variables, which will be used in pro-
gramming, we will drop the bars used in (1) to denote
the original (physical) variables. Both types of variables

where

ut = F [u] ,

∗askor@fuw.edu.pl

F [u] = i

sgn(A)(uxx + cyuyy + czuzz)
2u + Eu
|

(cid:2)
u
+sgn(D)
|

,
(cid:3)

(5)

(6)

(7)

(8)

6
6
cy =

cz =

B
A (cid:16)
C
A (cid:16)

2

L¯x
L¯y (cid:17)
2
L¯x
L¯z (cid:17)

,

,

E = Er + iEi =

¯E
αt

.

This formula deﬁnes a two-point algorithm: u(t + ∆t) is
given in terms of u(t) and u(t + ∆t/2), i.e. at the centre
of the interval [t, t+ ∆t]. Both u(t) and u(t+ ∆t/2) must
be known, and hence the actual evolution interval is ∆t/2
rather than ∆t. Replacing in (17) u(t)
∆t), the
central point will now be at t, and the integration interval
will be 2∆t:

u(t

→

−

(9)

(10)

2

III. NUMERICAL ALGORITHMS

Integrating the evolution equation (7) from some value

of t to a later instant t + ∆t, ∆t > 0, we obtain

u(t + ∆t) = u(t) +

dτ .

(11)

t+∆t

Z
t

F [u](cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

τ

Assuming that ∆t is small, simple numerical algorithms
and their error estimates can be obtained from (11) by
using the parabolic interpolation formula for F [u]

|τ :

F [u]

|τ = F0 + β(τ

−

t) + γ(τ

t)[τ

(t + ∆t)] ,

(12)

−

−

where the quantities β and γ can be expressed in terms
of

F0 = F [u]

|t , F1 = F [u]

|t+∆t , F1/2 = F [u]

|t+∆t/2 ,
(13)

i.e.

β =

F1

F0

−
∆t

,

γ =

2
(∆t)2 [F0

−

2F1/2 + F1] .

(14)

β and γ are nearly independent of ∆t (close to their limits
as ∆t

0).

Inserting (12) into (11) we can ﬁnd two algorithms,

→

an Euler algorithm (ﬁrst order in ∆t):

u(t + ∆t) = u(t) + ∆tF0 + O[(∆t)2] ,

(15)

a Trapez algorithm (second order in ∆t):

u(t + ∆t) = u(t

∆t) + 2∆tF0 + O[(∆t)3] .

(18)

−

−

Here u(t + ∆t) is deﬁned in terms of u(t
∆t) and u(t).
Using the known value u(t), and u(t+∆t) calculated from
(18) we can determine u(t + 2∆t), etc. (the leapfrog pro-
cedure). The only problem is to start this procedure,
which requires two values of u: u(t0) and u(t0 + ∆t),
where t0 is an initial value of t. But if u(t0) is pre-
scribed, the evolution equation (7) (of ﬁrst order in t)
deﬁnes u(t) for any t > t0. In particular, u(t0 + ∆t) is
deﬁned. It can be calculated up to O[(∆t)2] by using the
Euler algorithm (15). Using this approximation to deter-
mine F [u] required for (18), the error in F [u] will also be
O[(∆t)2]. After multiplication by ∆t it will produce an
error comparable with that in (18), O[(∆t)3].

In the pseudospectral method described in [4], the
Discrete Fourier Transform (DFT) with respect to each
space variable is used to calculate the derivatives in (8).
Thus the interval [0, 2π] for x will be divided into Nx
subintervals of length ∆x = 2π/Nx, and similarly for y
and z (Ny subintervals of length ∆y = 2π/Ny and Nz
subintervals of length ∆z = 2π/Nz; the numbers Nx, Ny
and Nz can be either even or odd, Nx = 2Mx or Nx =
2Mx + 1, etc.). The function u deﬁned on the discrete
mesh (xj , ym, zn), xj = j∆x, ym = m∆y, zn = n∆z, can
be transformed to discrete Fourier space for x, y, and z
variables. Thus for each ym and zn we deﬁne the Discrete
Fourier Transform in x:

v(kx) =

u(xj) exp(

ikxxj) .

(19)

−

1
√Nx

Nx−1

Xj=0

u(t + ∆t) = u(t) + ∆t 1

2 (F0 + F1) + O[(∆t)3] .

(16)

The inverse transform is given by

Note that (16) is an implicit algorithm: u(t + ∆t) is de-
ﬁned in terms of u(t) and u(t + ∆t), i.e. equation (16)
must be solved for u(t + ∆t). Usually, this is done by an
iterative procedure, where in the lowest approximation
F1 on the RHS of (16) is replaced by F0. This deﬁnes
the ﬁrst approximation to u(t + ∆t) to be used on the
RHS of (16) to deﬁne second approximation to u(t + ∆t),
etc.

Another simple (explicit) algorithm can be obtained

from (16) if we put τ = t + ∆t/2 in (12):

F1/2 = 1

2 (F0 + F1)

γ(∆t)2/4 ,

−
2 (F0 + F1) calculated from this equation in (16):

and use 1

u(t + ∆t) = u(t) + ∆tF1/2 + O[(∆t)3] .

(17)

Mx

1
√Nx

,

x=xj

(20)

u(xj) =

Xkx=−Mx

v(kx) exp(ikxx)(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
both if Nx = 2Mx or Nx = 2Mx + 1.
In the ﬁrst
case, the summation index in (20) actually ends up with
1. However, as in that case v(kx) exp(ikxxj )
kx = Mx −
is periodic as function of kx with period 2Mx, Eq. (20)
will be correct if only one half of the contributions at
Mx are included in the sum over kx. Replac-
kx =
ing x
m, n everywhere in (19) and (20)
y, z and j
we obtain the formulas for the DFT in y (for each xj
and zn) and in z (for each xj and ym). The essence
of the pseudospectral approach is to calculate the partial
derivatives at the mesh points by diﬀerentiating the inter-
polation formula (20) with respect to x (or its analogues

±
→

→

with respect to y or z). Thus, for example

uxx(xj ) =

(ikx)2v(kx) exp(ikxxj) ,

(21)

1

√Nx Xkx

etc. In our numerical programs, the sums of the type (19)
or (21) were determined by using either the Fast Fourier
Transform (FFT) subroutine in complex domain, given
in [5] (in the early version of the program from 1996), or
more eﬃcient “Multiple 1D FFT subroutines for complex
data”, taken from the NAG Fortran Library (in the later
versions from 1999 and 2004).

The Discrete Fourier Transform as described above is
an eﬃcient tool for numerical diﬀerentiation. The only
problem is that Eq. (20) implies periodicity of the func-
tion u(x) which may not be the case, neither exactly
nor approximately. If that happens, one can follow the
suggestion of P. J. Roach [6] to split the function u(x)
into the periodic component given by (20) and a non-
periodic one in the form of a polynomial. Another ap-
proach could be to replace the DFT by expansion of u(x)
in a non-periodic orthogonal basis, e.g. that of orthogo-
nal polynomials. This type of approach using the Cheby-
shev polynomials has recently been discused in detail and
tested by A. Deloﬀ [7].

IV. NUMERICAL STABILITY

To examine the numerical stability of the algorithms
derived in the previous section, we linearize F [u], Eq. (8),
by replacing

u
|

2u
|

u0

2u,
|

→ |

u0 = const .

(22)

As Eqs. (15), (16) and (18) (without error terms) have
constant coeﬃcients, their solutions can be looked for in
the form of exponential functions of x, y, z and t:

u = κt/∆t exp[i(kxx + kyy + kzz)] .

(23)

Numerical stability of the algorithm in question means
1.
that the solution (23) cannot grow in time, i.e.,

Inserting (23) into (8) we obtain

F [u] = i

w =

u ,
w + iEi
(cid:3)
(cid:2)
x + cyk2
sgn(A)(k2
−
2 + Er ,
u0
+sgn(D)
|
|

y + czk2
z )

κ
|

| ≤

(24)

(25)

i.e.

3

the same sign. Otherwise certain terms in (27) should be
discarded. Nevertheless, in practice the overestimation
given by the RHS of (27) in that case is not large, and if
this formula is used in the expressions for maximal ∆t for
stability given in what follows, the only eﬀect will be the
introduction of a small safety margin. To obtain a precise
max, all terms in (25) should be divided
expression for
|
into two groups, of positive and negative. The contribu-
tion to the RHS of (27) of these two groups should be
compared, and the group of terms with smaller contribu-
tion should be discarded.

w
|

A. Euler algorithm

Using (24) and (26) in (15) we obtain

κ = 1 + i∆t[w + iEi] ,

(28)

i.e.

κ
|

2 = 1
|
= 1

2∆tEi + (∆t)2[E2
∆t[2Ei

∆t(E2

i + w2]
i + w2)] .

−
−

−
2 > 1, i.e. the Euler algo-
Thus if Ei
κ
|
|
rithm is numerically unstable.

0, we obtain

≤

Numerical stability is only possible for Ei > 0 if

(29)

0 < ∆t[2Ei

∆t(E2

i + w2)] < 1 .

−

As in practice
w
max
|
|
the Euler algorithm takes the form

≫ |

Ei

, the stability condition for
|

Ei > 0 and ∆t <

(30)

2Ei
w
i + (
|

E2

max)2 ,
|

where
tion as described above).

max is given by (27) (with a possible modiﬁca-
|

w
|

B.

Implicit algorithm

Using (24) and (26) in (16) we obtain

κ =

1
−
1 + 1

1
2 ∆t(Ei
2 ∆t(Ei

iw)
iw)

,

−
−

(31)

and furthermore

Eq. (25) leads to

u(t + ∆t) = uκ ,

u(t

∆t) = u/κ .

(26)

−

M 2

M 2

≤

w
|

y +

x +

max
|

u0
cy|
|
|
, etc., see Eq. (20). This estimate is
where Mx = max
kx|
|
max if all terms in (25) have
an accurare expression for
|

cz|
|

Er
|

z +

(27)

w
|

,

|

2 +
|

M 2

2 = 1
|

κ
|

−

p ,

p =

2∆tEi
2 ∆tEi)2 + ( 1

2 ∆tw)2 .

(1 + 1

(32)

2 > 1, i.e.
|

Thus if Ei < 0, we obtain
the implicit
κ
|
algorithm is numerically unstable, and for Ei = 0 this
2 = 1). And ﬁnally,
κ
algorithm is marginally stable (
|
|
for Ei > 0, p is positive and should not be greater than
one (again due to expected
), which means
w
|
≫ |
|
numerical stability for any value of ∆t.

max
|

Ei

C. Leapfrog algorithm

Using (24) and (26) in (18) we obtain a quadratic in κ

κ2 + 2∆t(Ei

iw)κ

1 = 0 .

−

−

(33)

Solving Eq. (33) we obtain

κ =

∆t(Ei

iw)

−

−

± p

1 + (∆t)2(Ei

iw)2 .

(34)

−

= 0, the general expressions for the real and imag-
For Ei
inary part of κ are a bit complicated, but in the limit
∆t

0 we easily ﬁnd

→

≃ ±

−

κ

1

∆t(Ei + iw) ,

i.e.

1

2∆tEi . (35)

2
|

κ
|

≃

±

This can always be greater than one, which means insta-
bility.

For Ei = 0, we obtain

Hence if
1 we obtain
marginal stability, whereas for

| ≤

a
|

1, which means

≡

> 1 we get

κ
|
a
|

2
|
|

κ
|

max =
|

a
|

|

+

p

a2

1 >

a
|

|

−

> 1 ,

which means instability. Hence the numerical stability
1. This condition leads to the following
condition is
formula for maximal timestep ∆t for stability:

a
|

| ≤

4

(37)

where 0 < c < 1, and
the possible modiﬁcation).

w
|

max is given by (27) (again with
|

∆t =

c

.

w
|

max
|

Acknowledgments

κ =

ia

−

1
± p

−

a2 ,

a = ∆t w .

(36)

entiﬁc Research (KBN), Grant No KBN 2P03B09722.

This research was supported by the Committee for Sci-

[1] E. Infeld and G. Rowlands, Nonlinear Waves, Solitons and
Chaos (Cambridge University Press, Cambridge, 2000),
ch. 8.

[2] M. Matuszewski, M. Trippenbach, B. A. Malomed, E. In-
feld and A. A. Skorupski, Two-Dimensional Dispersion-
Managed Light Bullets in Kerr Media, Phys. Rev. E 70,
016603 (2004).

[3] E. Infeld and A. Senatorski, Theoretical Conﬁrmation of
Feynman’s Hypothesis on the Creation of Circular Vor-
tices in Bose–Einstein Condensates, J. Phys.: Condens.
Matter 15, 5865 (2003).

[4] B. Fornberg and G. B. Whitham, A Numerical and Theo-
retical Study of Certain Nonlinear Wave Phenomena, Phi-
los. Trans. R. Soc. London 289, 373 (1978).

[5] W. H. Press, B. P. Flannery, S. A. Teukolsky and W. T.
Vetterling, Numerical Recipes. The Art of Scientiﬁc Com-
puting (Cambridge University Press, Cambridge, 1986).
[6] P. J. Roache, A Pseudo-Spectral FFT Technique for Non-

Periodic Problems, J. Comp. Phys. 27, 204 (1978).

[7] A. Deloﬀ, Semi-Spectral Chebyshev Method in Quantum
Mechanics, quant-ph/0606100; Ann. Phys. (NY) in press.

6
