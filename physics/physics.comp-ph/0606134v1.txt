Accurate polynomial interpolations of special functions

Groupe de Physique Nucl´eaire Th´eorique, Universit´e de Mons-Hainaut,

Claude Semay∗

Acad´emie universitaire Wallonie-Bruxelles,

Place du Parc 20, BE-7000 Mons, Belgium

(Dated: November 18, 2013)

Abstract

Provided a special function of one variable and some of its derivatives can be accurately computed

over a ﬁnite range, a method is presented to build a series of polynomial approximations of the

function with a deﬁned relative error over the whole range. This method is easy to implement and

makes possible fast computation of special functions.

6
0
0
2
 
n
u
J
 
5
1
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
4
3
1
6
0
6
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

∗FNRS Research Associate; E-mail: claude.semay@umh.ac.be

Typeset by REVTEX

1

I.

INTRODUCTION

It is often necessary to compute with a high precision special functions of one variable

within a ﬁnite range of values. This task can be very diﬃcult and can require a great

computational time if the function is known, for instance, by an integral representation or

by a very long expansion. Such functions can be evaluated with a very high precision by

symbolic manipulation languages, but this is not a very practical method if you need to

perform calculations in a Fortran code for instance.

The idea of the method presented here is to compute the function considered and some of

its derivatives for a special set of points within the range of interest. This can be performed

by any mean: symbolic manipulation languages or usual computational codes. The relative

accuracy required for the function determines completely the number of points and their

positions within the ﬁnite range. Once this set of points is calculated, the function at any

value within the interval can be computed with the required relative accuracy using only the

information about the function at the point immediately below and the point immediately

above the value. This is possible by computing a polynomial whose values and values of

some of its derivatives are equal to the corresponding values for the function to interpolate,

for the pair of successive points.

II.

INTERPOLATION WITH FIRST DERIVATIVE

Let us assume that we know exactly a function F and its ﬁrst derivative F ′ at two

points x1 and x2. We can easily determine the third degree polynomial P (x) such that
P (x1) = F (x1), P (x2) = F (x2), P ′(x1) = F ′(x1), and P ′(x2) = F ′(x2). The coeﬃcients of

the interpolating polynomial can be determined by solving a Vandermonde-like system [1],

but such a system can be quite ill-conditioned. It is preferable to compute directly P (x)

by a Lagrange-like formula [2]. Actually, the polynomial P (x) which satisﬁes the conditions

above is simply given by

P (x) = F (x1) f

+ F (x2) f

(cid:18)

x
x1
−
x2 −
x1 (cid:19)
F ′(x1) g
(cid:20)

+ (x2 −

x1)

(cid:18)

x
x2
−
x1 −
x2 (cid:19)
F ′(x2) g

x
−
x2 −

(cid:18)

x1
x1 (cid:19) −

x
−
x1 −

(cid:18)

x2
x2 (cid:19)(cid:21)

,

(1)

2

provided the spline polynomials f and g are characterized by the boundary properties given

in Table I. The expressions (A1) of these spline functions are given in the Appendix.

TABLE I: Boundary properties of the spline functions f and g for a third degree interpolating

polynomial.

S(x)

f (x)

g(x)

S(0)

1

0

S(1)

0

0

S′(0)

0

1

S′(1)

0

0

It is possible to estimate the error made by using P (x) instead of F (x) within the interval

[x1, x2]. To simplify calculations, we can perform a translation of the coordinate system in
order to ﬁx x1 = 0 and F (x1) = 0, and a rotation to get F ′(x1) = 1, for instance. If we note
x2 = h, F (x2) = y and F ′(x2) = z, the interpolating polynomial P (x) is given by

P (x) = x +

1
h2 (3y

zh

−

−

1
h3 (

−

2h) x2 +

2y + zh + h) x3.

With the same conventions, the limited Taylor expansion of the function F around x1 = 0

is written

F (x) = x +

F ′′(0)
2

x2 +

F ′′′(0)
6

x3 +

F (4)(0)
24

x4 +

(x5).

O

Computed in x = x2 = h, the expression above and its ﬁrst derivative give

F (h) = y

F ′(h) = z

h2 +

h +

F ′′(0)
2
1 + F ′′(0)h +

F ′′′(0)
6
F ′′′(0)
2

≈

≈

h2 +

h3 +

h4,

F (4)(0)
24
F (4)(0)
6

h3,

if we neglect contributions of higher order terms. We can solve this system to calculate
F ′′(0) and F ′′′(0) as a function of h, y, z and F (4)(0). We can then replace these two values

in Eq. (3). Using Eq. (2), we ﬁnally ﬁnd

F (x)

P (x)

−

F (4)(0)
24

≈

x2 (x

h)2 .

−

The function x2(x

h)2 is represented on Fig. 1 for h = 1. Within the interval [0, h], it

−

presents only one maximum at x = h/2, and decreases monotonically from this maximum

toward zero at x = 0 and x = h. It is then possible to evaluate the maximum error within

the interval [0, h]. Returning to the ﬁrst notations, we ﬁnd

(2)

(3)

(4)

(5)

(6)

max
[x1,x2] |

F (x)

P (x)

−

| ≈

F (4)(x1)
384

|

|

x2)4 ,

(x1 −

3

FIG. 1: Functions x2 (x

1)2 and x3 (x

1)3. In both cases, the extremum appearing within the

interval [0, 1] is located at x = 0.5.

−

−

the maximal error being located near the middle of the interval.

For a given set of points for which F (x), F ′(x) and F (4) are known, it is then possible

to build an interpolating polynomial for each interval and to estimate the error within each

interval. But it is possible to use Eq. (6) in a more clever way. Let us assume that you need

an approximation of a function F within an interval [a, b] with a ﬁxed relative precision ǫ.
If you can compute F (x), F ′(x) and F (4)(x) for arbitrary values x within this range, you

can start from x1 = a to determine a point x2 in such a way that the relative accuracy of

the interpolating polynomial deﬁned by Eq. (1) is around ǫ within [x1, x2]. Then, you can

calculate a point x3 from x2 in a similar way, and so on. The general relation is

xi+1 = xi +

1/4

.

384 ǫ F (xi)
F (4)(xi) (cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(7)

Finally, a point xN +1 ≥
build, using Eq. (1), a polynomial approximation of F on N intervals with N diﬀerent

b is reached. With the N + 1 triplets (xi, F (xi), F ′(xi)), you can

polynomials Pi(x) of the third degree such that

[xi, xi+1] and i = 1, 2, . . . , N.

(8)

If you want to compute F (x) with x within the range [a, b], you have to localize ﬁrst the

interval [xi, xi+1] which contains x. Then the calculation at x of the third degree interpolating

F (x)

Pi(x)

−
F (x)

. ǫ

x

∀

∈

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

4

polynomial Pi(x) within this interval will give the evaluation of F (x) with a relative error

of ǫ. These two operations can be performed very fast [1].

III.

INTERPOLATION WITH FIRST AND SECOND DERIVATIVES

If you can compute higher order derivatives of the function F , you can build better

polynomial approximations. The ﬁfth degree polynomial P (x) such that P (x1) = F (x1),
P (x2) = F (x2), P ′(x1) = F ′(x1), P ′(x2) = F ′(x2), P ′′(x1) = F ′′(x1), and P ′′(x2) = F ′′(x2)

is given by

P (x) = F (x1) f

+ F (x2) f

(cid:18)

x
x1
−
x2 −
x1 (cid:19)
F ′(x1) g
(cid:20)

(cid:18)

x
x2
−
x1 −
x2 (cid:19)
F ′(x2) g

x1)

+ (x2 −

x
−
x2 −
x
−
x2 −
provided the spline polynomials f , g and k are characterized by the boundary properties

x2
x2 (cid:19)(cid:21)
x2
x2 (cid:19)(cid:21)

x
−
x1 −
x
−
x1 −

x1
x1 (cid:19) −
x1
x1 (cid:19)

+ F ′′(x2) k

+ (x2 −

F ′′(x1) k

x1)2

(9)

(cid:18)

(cid:18)

(cid:18)

(cid:18)

(cid:20)

,

given in Table II. The expressions (A2) of these spline functions are given in the Appendix.

TABLE II: Boundary properties of the spline functions f , g and k for a ﬁfth degree interpolating

S(0)

S(1)

S′(0)

S′(1)

S′′(0)

S′′(1)

polynomial.

S(x)

f (x)

g(x)

k(x)

1

0

0

0

0

0

0

0

0

0

0

1

Using the same procedure as in the previous section, the error between the function and

the interpolating polynomial (9) within the interval [0, h] is estimated at

F (x)

P (x)

−

F (6)(0)
720

≈

x3 (x

h)3 .

−

The function x3(x

h)3 is represented on Fig. 1 for h = 1. Within the interval [0, h], it

−

also presents only one extremum at x = h/2, and tends monotonically from this extremum

toward zero at x = 0 and x = h. With the most general notations, we ﬁnd

max
[x1,x2] |

F (x)

P (x)

−

| ≈

F (6)(x1)
46080

|

|

x2)6 ,

(x1 −

0

0

0

(10)

(11)

0

1

0

5

the maximal error being located near the middle of the interval. If you need an approxima-

tion of a function F with a relative precision ǫ over a ﬁxed range, and if you can compute
F (x), F ′(x), F ′′(x) and F (6)(x) for arbitrary values x within this range, you can deﬁne a

series of points with the following relation

xi+1 = xi +

46080 ǫ F (xi)
F (6)(xi)

1/6

,

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(12)

in such a way that the ﬁfth degree polynomials built with Eq. (9) for each interval are an

approximation of F with the relative accuracy ǫ.

It is possible to deﬁne better and better polynomial approximations by using higher order

derivatives of the function under study. But very good results can already be obtained with

the use of the ﬁrst and second derivatives only.

IV. APPLICATION AND CONCLUDING REMARKS

These techniques are used here to compute an approximation of the modiﬁed Bessel

function of integer order K0(x) [1]. For a ﬁxed range, the number of points decreases if

the second derivative is used to compute the approximation, in supplement of the ﬁrst

derivative only. It is also possible to reduce the number of points by smoothing the function

to compute. For instance, we have

K0(x)

π
2

exp(

x)

−
√x

,

≈ r

(13)

for large values of x. If we remove the rapidly varying exponential part of K0(x) by comput-

ing exp(x) K0(x), we can reduce strongly the number of intervals. The gain is even better by

computing an approximation of √x exp(x) K0(x). These results are illustrated in Table III.

In order to remove divergent or rapidly varying behaviors, it is sometimes interesting to

multiply the function F to approximate by a function G known with a very weak relative

error. An approximation of F (x) G(x) is then computed. The relative precision of the

approximation of F is not spoiled by dividing the interpolating polynomial by the function

G, since the relative error on a quotient is the sum of the relative errors of the factors. So,

if the relative precision for G(x) is very good, the relative error on F (x) is controlled by the

relative error on F (x) G(x).

The number of points necessary to reach a ﬁxed precision obviously increases with the

required accuracy. It depends also strongly on the range of values. This is shown in Table IV.

6

TABLE III: Number of points necessary to reach a relative precision of 10−10 for the function F (x)

with x within the interval [2, 6] (K0(x) is a modiﬁed Bessel function).

With ﬁrst derivative

With ﬁrst and

second derivatives

41

21

15

F (x)

K0(x)

exp(x) K0(x)

√x exp(x) K0(x)

function).

ǫ

[2, 6]

[6, 10]

•

•

TABLE IV: Number of points necessary to reach a relative precision ǫ with ﬁrst and second

derivatives for the function √x exp(x) K0(x) within two intervals (K0(x) is a modiﬁed Bessel

10−10

15

7

10−11

21

10

10−12

30

14

10−13

43

19

10−14

62

28

The method used here to compute an approximation of a function F over a ﬁnite range

with a deﬁnite precision is useful mainly in two cases:

You need a code to compute the function F in an usual programming language, but

the computation with a high accuracy of the function and some of its derivatives is

only possible in a symbolic manipulation language.

You can compute the function F and some of its derivatives in an usual programming

language, but the calculation time is prohibitive. This can be the case if F is known

by an integral representation or by a very long expansion, for instance.

In both cases, it is interesting to compute and store the numbers xi, F (xi), F ′(xi), etc. to

build a polynomial approximation of F . A demo program is available via anonymous FTP

on: ftp://ftp.umh.ac.be/pub/ftp pnt/interp/.

Acknowledgments

The author thanks the FNRS Belgium for ﬁnancial support.

342

121

68

7

APPENDIX A: SPLINE FUNCTIONS

We give here the spline functions to deﬁne the two kinds of interpolating polynomials

considered in this paper. A third degree interpolating polynomial is deﬁned with the two

polynomial spline functions

f (x) = 2x3

g(x) = x3

3x2 + 1,

−
2x2 + x.

−

Their boundary properties are given in Table I. A ﬁfth degree interpolating polynomial is

deﬁned with the three polynomial spline functions

f (x) =

6x5 + 15x4

10x3 + 1,

g(x) =

3x5 + 8x4

k(x) =

−
x5 + 3x4

−

−
1
2

−

(cid:0)

−
6x3 + x,

3x3 + x2

.

−

(cid:1)

Their boundary properties are given in Table II.

(A1)

(A2)

[1] William H. Press, Saul A. Teukolsky, William T. Vetterling, and Brain P. Flannerey, Numerical

Recipes in Fortran, Cambridge University Press, 1992.

[2] J. Borysowicz and J. H. Hetherington, Errors on Charge Densities Determined from Electron

Scattering, Phys. Rev. C 7 (1973) 2293-2303.

8

