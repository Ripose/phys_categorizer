3
0
0
2
 
l
u
J
 
5
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
6
3
0
7
0
3
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Interface Conditions for Wave Propagation
Through Mesh Reﬁnement Boundaries

Dae-Il Choi a,b, J. David Brown a,c,1, Breno Imbiriba a,d,
Joan Centrella a, Peter MacNeice e

aLaboratory for High Energy Astrophysics, NASA/Goddard Space Flight Center,
Greenbelt, MD 20771 USA
bUniversities Space Research Association, 7501 Forbes Boulevard, #206, Seabrook,
MD 20706 USA
cDepartment of Physics, North Carolina State University, Raleigh, NC 27695 USA
dDepartment of Physics, University of Maryland, College Park, MD 20742 USA
eDepartment of Physics, Drexel University, Philadelphia, PA 19104 USA

Abstract

We study the propagation of waves across ﬁxed mesh reﬁnement boundaries in linear
and nonlinear model equations in 1–D and 2–D, and in the 3–D Einstein equations of
general relativity. We demonstrate that using linear interpolation to set the data in
guard cells leads to the production of reﬂected waves at the reﬁnement boundaries.
Implementing quadratic interpolation to ﬁll the guard cells suppresses these spurious
signals.

Key words: Partial diﬀerential equations, Computational techniques, Finite
diﬀerence methods, Mesh generation and reﬁnement, Numerical relativity,
Gravitational waves
PACS: 02.70.-c, 02.70.Bf, 04.25.Dm, 04.30.-w, 04.30.Db

Email addresses: choi@milkyway.gsfc.nasa.gov (Dae-Il Choi),

david brown@ncsu.edu (J. David Brown), imbiriba@milkyway.gsfc.nasa.gov
(Breno Imbiriba), jcentrel@milkyway.gsfc.nasa.gov (Joan Centrella),
macneice@alfven.gsfc.nasa.gov (Peter MacNeice).
1 Senior NRC Associate

Preprint submitted to Elsevier Science

6 December 2013

1 Introduction

Wave propagation is an important phenomenon throughout all areas of physics,
with applications typically involving multiple spatial and temporal scales. In
numerical modeling of such problems, one strategy for dealing with the dis-
parity in spatial and temporal scales is the use of a nonuniform or adaptive
computational mesh. In this case waves can cross mesh reﬁnement boundaries
as they propagate through the computational domain. This paper focuses on
interface conditions that will allow waves to travel smoothly across ﬁxed re-
ﬁnement boundaries, minimizing spurious reﬂections.

The speciﬁc application that motivated this study is modeling the emission of
gravitational waves from astrophysical sources such as binary black hole and
neutron star coalescences. Such systems are among the most important sources
for ground-based gravitational wave detectors such as LIGO and VIRGO [1,2],
as well as the planned space-based LISA mission [3]. The gravitational waves
100 times the scales of their
produced typically have wavelengths
∼
sources Numerical simulations of such systems must therefore allow the signals
to propagate from ﬁnely resolved regions around the sources into more coarsely
resolved regions in the wave zones. Since the waveforms must be computed at
large distances from their sources (i.e., eﬀectivelly at inﬁnity) for comparison
with observations from gravitational wave detectors, the simulation domains
must be made as large as possible. This can be achieved by incorporating
several levels of successively coarser grids.

10

−

The propagation of gravitational waves is governed by the Einstein equations,
which are a coupled set of nonlinear partial diﬀerential equations [4]. These
equations can be written in a variety of ways, but current practice in nu-
merical relativity favors the use of the so–called BSSN formalism [5,6]. In this
formalism, the Einstein equations are written as a system of quasi-linear equa-
tions with ﬁrst–order time derivatives and second–order spatial derivatives. In
this paper we restrict our analysis to the “iterated Crank–Nicholson” update
scheme, which is a second order accurate, explicit ﬁnite diﬀerence method that
is currently in widespread use in the relativity community. It should also be
noted that we consider mesh reﬁnement only in space, not in time. In par-
ticular, for our present analysis we use a common timestep across the entire
computational domain.

Adaptive mesh reﬁnement (AMR) was ﬁrst applied in numerical relativity to
study critical phenomena in the 1–D collapse of a scalar ﬁeld to form a black
hole [7]. An early 3–D application focussed on evolving a single black hole
[8]; this was followed by the use of ﬁxed mesh reﬁnement (FMR) to evolve
a short part of a binary black hole evolution [9]. AMR was also employed to
follow the propagation of gravitational waves through spacetime, ﬁrst using

2

a single model equation that describes perturbations of a non-rotating black
hole [10] and later in the 3–D Einstein equations [11], and to study inhomo-
geneous cosmological models [12]. In these AMR studies the reﬁnement and
dereﬁnement conditions were generally tuned so that the gravitational waves
remained within the ﬁnely resolved regions.

In this paper, we address the challenge of evolving gravitational wave signals
across mesh reﬁnement boundaries using FMR. Success in this endeavor is an
essential component of gravitational wave source modeling, due to the large
disparity in the scales of the sources and the waves. Our challenge amounts
to choosing a prescription for coupling adjacent grid blocks when the blocks
have diﬀerent resolutions. Grid blocks are coupled through their guard cells,
which must be ﬁlled using data from the blocks’ interior cells. In hydrody-
namics codes it is common practice to use a linear interpolation scheme for
guard cell ﬁlling, with a possible adjustment for ﬂux conservation across the
interface between blocks [13,14,15]. We have found that this prescription is not
adequate for the BSSN formulation of the Einstein equations. In particular,
linear guard cell ﬁlling leads to unacceptably large reﬂections and distortions
of the gravitational waves as they propagate from ﬁne grid blocks to coarse grid
blocks. Our solution to this problem is to use a guard cell ﬁlling procedure
with quadratic–order accuracy orthogonal to the coarse–ﬁne grid interface.
The need for quadratic order guard cell ﬁlling has been previously demon-
strated for elliptic boundary value problems with second order derivatives in
[16,17]. With this prescription spurious wave reﬂections and distortions are
reduced dramatically.

Given the complexity of the full system of Einstein equations, we have chosen
to analyze ﬁrst a set of model wave equations in 1-D and 2-D that mimic some
of the properties of the Einstein equations, as expressed in BSSN form.These
simpliﬁed test beds have proved essential to understanding and correcting
the problems that arise in the propagation of waves across mesh reﬁnement
boundaries. Since the solution we uncovered using these model equations has
proved eﬀective in curing the diﬃculties encountered in the Einstein equa-
tions, we expect this work to be useful across a broad range of related wave
propagation problems.

2 Linear Wave Equation in 1-D: Evolution on a Uniform Grid

The linear wave equation in 1-D is generally written in the form

∂2φ
∂t2 =

∂2φ
∂x2 ,

(1)

3

where φ = φ(x, t). Introducing the auxiliary variable Π(x, t), we can cast
Eq. (1) in a form that uses only ﬁrst time derivatives:

∂φ
∂t

∂Π
∂t

= Π

=

∂2φ
∂x2 .

2.1 Discretization

In this section we examine the system of equations (2)–(3) to understand
the interface conditions needed for smooth propagation of waves across mesh
reﬁnement boundaries. In later sections, these conditions are applied to non-
linear and multidimensional wave equations.

For the spatial discretization of equations (2)–(3), we take the data to be de-
ﬁned at the centers of the spatial grid cells and use standard O(∆x)2 centered
spatial diﬀerences [18]. To advance this system of ordinary diﬀerential equa-
tions in time we use an O(∆t)2 iterative method ﬁrst suggested by M. Chop-
tuik (see Ref. [19]). In the numerical relativity literature, this explicit update
scheme is refered to as “iterated Crank–Nicholson”. Each iteration has the
form

i = φn
φn+1

i + ∆t Πi

Πn+1

i = Πn

i +

2φi + φi−1)

∆t
(∆x)2 (φi+1 −
∆t
(∆x)2 F (φ),

= Πn

i +

where we use i to label the spatial grid, n to label the time steps, and φi, Πi
to indicate intermediate values calculated during the iteration process. Note
that the familiar Crank–Nicholson algorithm is obtained by setting φi and Πi
equal to their time averages, (φn+1
i )/2, respectively.

i )/2 and (Πn+1

i + Πn

i + φn

For two iterations, the speciﬁc steps are as follows. Begin by applying the
discretization (4)–(5) with φ = φn, Π = Πn to calculate a ﬁrst approximation
to φn+1 and Πn+1:

(1)φn+1

i = φn

i + ∆t Πn
i

4

(2)

(3)

(4)

(5)

(6)

Average these new values with those at the starting time level n to get new
values for φ and Π:

Now perform a second iteration. Again applying (4)–(5) we ﬁnd a second
approximation to φn+1 and Πn+1:

(1)Πn+1

i = Πn

i +

∆t
(∆x)2 F (φn).

(1)φi = 1

2((1)φn+1

i + φn
i )

(1)Πi = 1

2((1)Πn+1

i + Πn

i ).

(2)φn+1

i = φn

i + ∆t (1)Πi

(2)Πn+1

i = Πn

i +

∆t
(∆x)2 F ((1)φ).

(2)φi = 1

2((2)φn+1

i + φn
i )

(2)Πi = 1

2((2)Πn+1

i + Πn

i ).

i = φn
φn+1

i + ∆t (2)Πi

Πn+1

i = Πn

i +

∆t
∆x2 F ((2)φ).

Averaging again with the values at level n yields

A ﬁnal update is carried out using these twice-iterated values:

(7)

(8)

(9)

(10)

(11)

(12)

(13)

(14)

(15)

Clearly this algorithm can be carried out for any number of iterations. In the
formal limit of an inﬁnite number of iterations, it yields the usual Crank–
Nicholson scheme. However, a von Neumann stability analysis shows that this
iterative scheme is stable only when the number of iterations equals 2, 3, 6, 7,
10, 11, etc, and the Courant condition ∆t
∆x is satisﬁed. This was shown
by Teukolsky [19] for the advection equation, but the conclusion holds as well
for the wave equation in the form (2)–(3). Furthermore, the accuracy of the
iterative scheme is second order for any number of iterations. We must carry
out at least two iterations for stability, but continuing beyond two iterations
does not reduce the truncation error. In this paper we follow the common
current practice in numerical relativity and carry out precisely two iterations
for our tests.

≤

5

2.2 Evolutions on a Uniform Grid

We ﬁrst carried out uniform grid, or unigrid, evolutions of the discretized wave
equation to provide a basis for comparison with mesh reﬁnement runs. The
initial data for φ is taken to be a Gaussian wavepacket,

φ(x, t = 0) = A e−x2/σ2

,

Π(x, t = 0) = 0,

(16)

with A = 1 and σ = 0.25. The spatial domain extends from x =
4 to
x = +4. Time evolution of this data produces two packets traveling with
velocity v =
1, each having amplitude A = 0.5 and the same value of σ
as the original packet. Here we will consider only the packet traveling to the
right, in the region 0

±

−

4.

x

≤

≤

∼

Figure 1 shows the evolution of this packet for two diﬀerent resolutions. The
coarser resolution is given by H = ∆x = 0.045 (dotted line), which has
10
zones across the width of the packet at half its maximum amplitude. The
solid line shows resolution h = H/2 = 0.0225. The time step is chosen to
be ∆t = ∆x/4 for a given spatial resolution, ∆x. In the last few panels
of Fig. 1 one can see a slight separation between the two curves. This is
primarily due to numerical dispersion, which causes the phase velocities to
deviate from unity. The phase velocity for a monochromatic wave propogating
on a discrete, uniform grid is calculated in the Appendix, with the result
displayed in Eq. (A.11). According to this formula we expect the pulse (which
0.999 on the ﬁne grid and
has wavelength
0.996 on the coarse grid. This translates into a separation between the
speed
two pulses of about 0.01 at time t = 3.37, which is the approximate separation
seen in the last panel of Fig. 1.

1) to propagate with speed

∼

∼

∼

≡ |

φanalytic −

The time evolution of the absolute errors ǫ
is shown
in Fig. 2. The dotted line shows the errors ǫH for the coarse resolution H,
ǫh. Inspection of Fig. 2 shows that the two curves are
and the solid line is 4
nearly identical, demonstrating the second–order convergence of these runs.
Note that the errors are approximately antisymmetric about the location of
the pulse center. This is because the dominant source of numerical error is
dispersion, which has the principle eﬀect of shifting each wave pulse relative
to the exact solution.

φnumerical|

×

3 Implementation of Mesh Reﬁnement

We use the Paramesh package [20] to implement the mesh reﬁnement and
parallelization in our codes. All of our codes use cell–centered data. Paramesh

6

works on logically Cartesian, or structured, grids and carries out mesh reﬁne-
ment on grid blocks. The underlying mesh reﬁnement technique is similar to
that of Ref. [21], in which grid blocks are bisected in each coordinate direction
when reﬁnement is needed. The grid blocks all have the same logical struc-
ture, with nxb zones in the x
direction, and similarly for nyb and nzb. Thus,
reﬁnement of a block in 1-D yields two child blocks, each having nxb zones
but with zone sizes a factor of two smaller than in the parent block. When
needed, reﬁnement can continue on the child blocks, with the restriction that
the grid spacing can change only by a factor of two, or one reﬁnement level,
at any location in the spatial domain. Each grid block is surrounded by a
number of guard cell layers that are used in computing ﬁnite diﬀerence spatial
derivatives near the block’s boundary. These guard cells must be ﬁlled using
data from the interior cells of the given block and the adjacent block.

−

Figure 3 shows a section of a 1-D grid in the vicinity of an interlevel boundary
between two neighboring grid blocks. The ﬁne grid covers the left half of
3/2, etc. The
the 1-D space, with cell–centered grid points labeled
coarse grid covers the right half with cell–centered grid points labeled 1/2,
3/2, etc. The ﬁne and coarse blocks are oﬀset from one another for clarity of
presentation. One layer of guard cells is shown, with “G” marking the coarse
grid guard cell and “g” the ﬁne grid guard cell. These guard cells are ﬁlled
with data from neighboring blocks or, if the block forms part of the edge of
the computational domain, from appropriate outer boundary conditions.

1/2,

−

−

Paramesh can be used in applications requiring AMR, FMR, or a combina-
tion of these. It handles the creation of grid blocks, and builds and maintains
the data structures needed to track the spatial relationships between blocks.
It takes care of all inter-block communications and keeps track of physical
boundaries on which particular conditions are set, guaranteeing that the child
blocks inherit this information from the parent blocks. In a parallel envi-
ronment, Paramesh distributes the blocks among the available processors to
achieve load balance, maximize block locality, and minimize inter-processor
communications.

For the work described in this paper, we are using FMR. For simplicity, we
use the same timestep, chosen for stability on the ﬁnest grid, over the entire
computational domain. At the mesh reﬁnement boundaries, we use a single
layer of guard cells as shown in Fig. 3; special attention is paid to the restriction
(transfer of data from ﬁne to coarse grids) and prolongation (coarse to ﬁne)
operations used to set the data in these guard cells, as discussed in the next
subsection.

7

4 Linear Wave Equation in 1-D: Evolutions with Fixed Mesh Re-

ﬁnement

We now carry out evolutions of 1-D linear waves that encounter a change in the
grid resolution at a ﬁxed location. For the gravitational wave applications in
which we are interested, waves will be generated in a ﬁnely resolved region and
then travel out into more coarsely resolved regions. We thus start our initial
wave packet, given by Eq. (16), in a region of ﬁne resolution h = 0.0225 around
the origin. The spatial domain is again
4. As before, the initial
wave packet splits into two identical packets traveling in opposite directions.
Each of these packets then encounters a ﬁxed reﬁnement boundary, located
at x =
2.1, and crosses into a region of coarser resolution H = 2h. In the
following discussions, we focus only on the region x

4
−

±

≤

≤

0.

x

≥

We ﬁrst use the default Paramesh linear interpolation to set the value of the
data in the guard cells on both the coarse and ﬁne grids. With this prescription
for guard cell ﬁlling, the coarse grid guard cell value of any function f is given
by linear interpolation,

fG =

(f−3/2 + f−1/2).

The value of f in the ﬁne grid guard cell “g” is then given by a linear interpo-
lation using coarse grid values, fg = (fG + 3f1/2)/4. Combined with Eq. (17),
this gives

fg =

(f−3/2 + f−1/2 + 6f1/2).

(17)

(18)

1
2

1
8

Note that this guard cell ﬁlling (GCF) procedure uses the points fG and f1/2
on the coarse grid to obtain fg; this is in contrast to the direct approach, which
uses the nearest points f−1/2 and f1/2 (cf. Eq. (23)). The prescription (17)–
(18) for GCF has errors of order h2 and is the default linear GCF method
in Paramesh. We will refer to this procedure as linear GCF in this paper.
The results of using linear GCF are displayed in Fig. 4, which shows the time
evolution of the absolute errors ǫ. The dotted line shows the run with linear in-
terpolation at the interface boundary, and the solid line the results of a unigrid
run at the ﬁne grid resolution. As the packet passes through this boundary,
a reﬂected wave is generated propagating to the left. The transmitted wave
continues traveling to the right into the coarse grid region.

In large scale simulations of the Einstein equations with several levels of re-
ﬁnement, such spurious reﬂected waves can seriously degrade the quality of
the results. Globally increasing the resolution until the reﬂected waves reach

8

(19)

(20)

(21)

acceptably small amplitudes is generally not possible in 3-D. We thus need a
better way to control the behavior of the signals crossing the interfaces.

To this end, we implemented direct quadratic interpolation (i.e., using the
nearest 3 data points) to set the data in the coarse and ﬁne grid guard cells.
Refer again to Fig. 3. For the ﬁne grid guardcell “g”, quadratic interpolation
yields [18]

fg =

3f−3/2 + 10f−1/2 + 8f1/2).

1
15

(

−

The coarse grid guard cell “G” is ﬁlled by matching ﬁrst derivatives across
the interface,

f1/2 −
H

fG

=

f−1/2
fg −
h

,

where H = 2h. This step, which ensures that the solution is smooth across
the interface, can be viewed as “ﬂux matching” where the gradient of f plays
the role of the ﬂux. By combining the derivative matching condition with the
formula for fg we ﬁnd

fG =

1
15

(6f−3/2 + 10f−1/2 −

f1/2).

This same result for fG can be obtained by direct quadratic interpolation.
These formulae for GCF have errors of order h3.

The absolute errors obtained when using quadratic interpolation are shown as
the dashed line in Fig. 4. Note that the reﬂected wave has been greatly reduced.
Additional simulations, in which the size of the zones is everywhere decreased
by successive factors of two, show that with quadratic GCF the code is second–
order convergent. On the other hand, with linear GCF, the reﬂected pulse is
ﬁrst–order convergent. The transmitted pulse also aquires ﬁrst–order errors at
the interface with linear GCF. As the transmitted wave propagates through
the coarse grid region, second–order errors due to dispersion and dissipation
eventually dominate over the ﬁrst–order errors introduced at the interface. At
that point, the transmitted pulse can appear second–order convergent.

We also conducted tests using a one–dimensional periodic domain consisting of
20% ﬁne grid and 80% coarse grid. A wave pulse was allowed to cycle through
the domain multiple times. These tests clearly show that with quadratic guard
cell ﬁlling, but not with linear guard cell ﬁlling, the code is second–order
convergent. We also used this test code to check the stability of the interface
conditions. After thousands of cycles of the wave pulse through the reﬁned

9

region, there were no signs of instability with either linear or quadratic guard
cell ﬁlling.

In the appendix we present a detailed analytic treatment of wave propagation
across mesh reﬁnement boundaries that complements our numerical experi-
ments. There we compute the reﬂection coeﬃcient R and transmission coeﬃ-
cient T for a monochromatic (single frequency) wave traveling on a grid with
ﬁxed mesh reﬁnement, for various methods of GCF. The wave travels from a
ﬁne grid region with resolution h into a coarse grid region with resolution 2h.
Figure 5 shows the absolute value of the reﬂection coeﬃcient
for linear
GCF (17)–(18) (dashed curve) and quadratic GCF (21)–(19) (solid curve).
The dotted curve shows the results for direct linear interpolation, deﬁned by

R

|

|

fG =

(f−3/2 + f−1/2).

for the coarse grid guard cell and

fg =

(f−1/2 + 2f1/2).

1
2

1
3

(22)

(23)

for the ﬁne grid guard cell. Direct linear interpolation, like the default linear
GCF in Paramesh, has errors of order h2. The curves of Fig. 5 are plotted as
functions of the wavelength in the ﬁne grid region divided by the ﬁne grid cell
size h. Equivalently, we can interpret the horizontal–axis values as the number
of ﬁne grid points per wavelength.

∼

For our 1-D wave equation tests, the Gaussian packet behaves roughly like
1. With h = 0.0225, this corresponds to about
a wave of wavelength λ
λ/h = 44 ﬁne grid points per wavelength. From Fig. 5 we see that the reﬂection
R
= 0.02 while that for quadratic
coeﬃcient for linear interpolation is about
|
= 0.0003. With an incident pulse amplitude of 0.5, we expect a
GCF is
reﬂected wave amplitude of about 0.01 for linear GCF and less than 0.0002
for quadratic GCF. This reﬂected pulse for the linear case is clearly seen in
Fig. 4.

R

|

|

|

The importance of minimizing spurious reﬂections from grid interfaces has
been emphasized above. It is equally important to minimize the distortion of
waves that pass through a grid interface. The errors in the transmitted wave
pulse for linear and quadratic GCF are shown in the region x > 2.1 of the last
few panels of Fig. 4. Note that the errors for quadratic GCF are actually larger
than the errors for linear GCF. This surprising result is explained as follows.
Observe that the errors for the two ﬁxed mesh reﬁnement simulations, as well
as for the unigrid run (solid curve), are approximately antisymmetric about
the pulse center. The errors in each case, as in the unigrid tests discussed in

10

Section 2, are primarily due to dispersion. Dispersion causes the wave pulses
to fall behind the exact solution during propagation, giving rise to the errors
shown in Fig. 4. This eﬀect is greater for the two runs with ﬁxed mesh re-
ﬁnement because, beyond x = 2.1, the grid resolution is lower than for the
unigrid run. However, with mesh reﬁnement, the transmitted pulse will also
suﬀer a phase error which has the eﬀect of artiﬁcially shifting the pulse along
the x–axis. In the case of linear GCF, there is a relatively large positive phase
error in the transmitted wave. This phase shift partially compensates for the
negative shift caused by dispersion. As a result the size of the largest peaks
in the error for the transmitted wave, for the particular test shown in Fig. 4,
is smaller with linear GCF than with quadratic GCF.

|

ℑ

ℜ

(T)/

T
Figures 6 and 7 show the absolute value of the transmission coeﬃcient
|
(T)) for a
and the phase of the transmission coeﬃcient ϕ = arctan(
monochromatic wave, for linear, quadratic, and direct linear interpolation.
These graphs are obtained from the analysis in the Appendix. From Fig. 6
it is clear that at any wavelength (any resolution) the error in amplitude for
the transmitted wave is smaller for quadratic GCF than for linear GCF. 2
The dominant source of error for the transmitted wave is actually phase error,
shown in Fig. 7. The magnitude of this error for quadratic GCF is much
smaller than that for linear GCF. For a wavelength of λ
1, the linear guard
cell ﬁlling produces a phase shift of about ϕ = 0.024, while quadratic GCF
gives a phase shift of about ϕ =
0.00028. For the tests shown in Fig. 4, the
positive phase for linear GCF translates into a shift along the positive x–axis
0.004. With quadratic GCF, the pulse is shifted in
of about δx = λϕ/(2π)
the negative direction, but by a much smaller amount δx
0.00004. Close
inspection of the data for the two transmitted pulses shows that they indeed
0.004. For linear GCF, this phase shift pushes
have a separation of δx
the wave pulse forward and artiﬁcially compensates for the phase lag caused
by dispersion. In general, there is no reason to expect the cumulative phase
lag due to dispersion to be close in magnitude (but opposite in sign) to the
phase advance caused by transmission through various grid interfaces. Thus,
the relatively small transmission error seen in Fig. 4 for linear GCF should be
viewed as an accident of the particular example, not a generic result.

≈ −

≈

≈

−

∼

2 At low resolution, that is, for wavelengths less than about 28h, direct linear GCF
has the smallest error for the transmitted wave amplitude. However, as discussed
in the Appendix, as the resolution is increased
is much closer to 1 for quadratic
GCF. Also note from Fig. 7 that direct linear GCF has large phase errors for the
transmitted wave.

T
|

|

11

5 Nonlinear Wave Equation in 1-D

The next step in developing model equations to test these interface conditions
is to add nonlinear terms similar to those found in the Einstein equations.
This produces the following nonlinear wave equation

∂2φ
∂t2 =

∂2φ
∂x2 + d

∂φ
∂t !

 

2

+ e

2

,

∂φ
∂x !

 

where d and e are arbitrary contants. Again introducing the auxiliary variable
Π(x, t), we get the ﬁrst order system

= Π

∂φ
∂t

∂Π
∂t

=

∂2φ
∂x2 + d Π2 + e

2

.

∂φ
∂x !

 

Using the discretization introduced in

2.1, we have

§

i = φn
φn+1

i + (∆t)Πi

Πn+1

i = Πn

i +

2φi + φi−1) + d(∆t)(Πi)2

∆t
(∆x)2 (φi+1 −
φi−1
φi+1 −
2∆x

 

2

.

!

+e(∆t)

(24)

(25)

(26)

(27)

(28)

Equations (27) and (28) are updated following the steps given in (6)–(15).

−

We consider the case d =
e = 1 and set up an initial Gaussian wave packet
centered on the origin using the prescription given by Eq. (16), with Π(x, t =
0) = 0. This splits into two identical packets traveling in opposite directions,
each having amplitude A = 0.38 and width σ = 0.25. We use the spatial
2.1. The
domain
ﬁne grid around the origin has resolution h = 0.0225 and the coarse grid
regions have resolution H = 2h. We focus on the region x

4 and set ﬁxed reﬁnement boundaries at x =

4
−

≤

≤

±

0.

x

≥

The results are shown in Figure 8. Since we do not have an analytic solution for
Eq. (24), we display the actual solution and use unigrid runs for comparison.
In addition, the vertical scale is chosen to zoom in on the region around the
base of the packet (i.e., near φ = 0), where the diﬀerences between the runs are
the most apparent. The thin solid line shows the solution for a unigrid run at

12

the coarse resolution H, and the thick solid line shows a unigrid run at the ﬁne
resolution h. Runs in which the packet encounters a reﬁnement boundary are
shown using a dotted line (linear GCF) and a dashed line (quadratic GCF).
As we saw before, a reﬂected wave is generated when the packet crosses the
reﬁnement boundary using linear GCF; these eﬀects are much less noticeable
when using quadratic GCF. As in the case of the linear wave equation, the
code is second–order convergent when using quadratic GCF.

6 Wave Equation in 2–D

As a next step, we consider the wave equation in 2–D. The evolution of cylin-
drically symmetric waves on a 2–D Cartesian mesh provides an ideal test
problem in which the signals cross mesh reﬁnement boundaries that are, in
general, not perpendicular to their directions of propagation.

The 2–D model wave equation takes the form

∂2φ
∂t2 =

∂2φ
∂x2 +

∂2φ
∂y2 + d

∂φ
∂t !

 

2

+ e1

2

∂φ
∂x !

 

+ e2

2

,

∂φ
∂y !

 

where d, e1, e2 are contants. With the auxiliary variable Π(x, y, t), we can write
this in a form using only ﬁrst–order time derivatives:

= Π

∂φ
∂t

∂Π
∂t

=

∂2φ
∂x2 +

∂2φ
∂y2 + d (Π)2 + e1

∂φ
∂x !

 

2

+ e2

2

.

∂φ
∂y !

 

Using the discretization introduced in

2.1, we have

§

φn+1
ij = φn

ij + (∆t)Πij

Πn+1

ij = Πn

ij +

∆t
(∆x)2 (φi+1,j −
∆t
(∆y)2 (φi,j+1 −

+

2φij + φi−1,j)

2φij + φi,j−1)

+ d(∆t)(Πij)2 + e1(∆t)

φi+1,j −
2∆x

 

φi−1,j

2

!

13

(29)

(30)

(31)

(32)

+ e2(∆t)

φi,j+1 −
2∆y

 

φi,j−1

2

.

!

(33)

As before, Eqs. (32) and (33) are updated following the steps given in Eqs. (6)–
(15).

In this section we consider two types of GCF, the default Paramesh linear order
GCF and a quadratic GCF scheme. The linear GCF is depicted in Fig. 9. First,
each coarse grid guard cell (open diamond) is ﬁlled as a linear combination of
the surrounding ﬁne grid points (solid circles). The ﬁne grid guard cells (open
circles) are then ﬁlled using a linear combination of the surrounding coarse
grid points (open and solid diamonds).

Quadratic GCF is depicted in Fig. 10. As a ﬁrst step, the coarse grid guard
cells are ﬁlled from a linear combination of the four surrounding ﬁne grid
guard cells. These values are only used at ﬁne grid corners, and will soon
be overwritten. Linear interpolation of the coarse grid cells (solid diamonds)
parallel to the coarse–ﬁne interface is used to compute intermediate values
marked with open boxes in Fig. 10. These intermediate values, along with the
two ﬁne grid cells (solid circles) directly across the interface, are then used to
obtain a quadratic ﬁt for the ﬁne grid guard cells marked with open circles.

Finally, as in the 1-D case, the coarse grid guard cells are ﬁlled by “ﬂux
matching”, that is, matching derivatives across the interface. Speciﬁcally, we
consider the ﬁrst derivative at the midpoint of Fig. 10, that is, at the point
midway between the coarse grid guard cell (open diamond) and the interior cell
directly across the interface (closed diamond). Derivative matching consists in
equating the ﬁrst derivative computed from these coarse grid cells with the
second–order accurate ﬁrst derivative obtained from the four ﬁne grid cells
(open and closed circles) that surround the midpoint.

The algorithm described here for quadratic GCF is similar to the one de-
scribed by Martin and Cartwright [23]. The main diﬀerence is that we use
linear interpolation of coarse grid values parallel to the interface to obtain in-
termediate values (the open boxes in Fig. 10), whereas Martin and Cartwright
use quadratic interpolation. Also note that our algorithm can be applied with-
out modiﬁcation at ﬁne grid corners, where the corner of a coarse grid block
is surrounded by ﬁne grid blocks. Recall that in the ﬁrst step, coarse grid
guard cells are ﬁlled by linear restriction from the ﬁne grid. This allows the
interpolation parallel to the interfaces to be carried out without the use of
one–sided extrapolation. Finally, we point out that GCF at ﬁne grid corners
is ambiguous, since there are diﬀerent ways to deal with them; either of the
two coarse–ﬁne interfaces that intersect at the corner can be used or intepola-
tion using a stencil diagonal to the interfaces can also be used. Note that only
mixed derivatives are aﬀected by the corners when using centered diﬀerencing.

14

In our code we do not treat the corners as special. At a corner our code nat-
urally selects one of the two interfaces and carries out a linear interpolation
parallel to that face to obtain intermediate values.

The initial data for our tests is taken to be a cylindrically symmetric wavepacket
centered on the origin, with

φ(x, y, t = 0) = Ae−(x2+y2)/σ2

(34)

and Π(x, y, t = 0) = 0. We choose the amplitude A = 1, and the width of the
pulse by σ = 0.25. Quadrant symmetry is imposed by using mirror-symmetry
boundary conditions along x = 0 and y = 0. The computational domain then
4.3125. This packet is initially
covers the region 0
conﬁned to a ﬁne grid region of resolution h = 0.0225. As the packet expands,
the wavefront crosses a ﬁxed mesh reﬁnement boundary into a region of coarser
resolution H = 2h.

4.3125 and 0

≤

≤

≤

≤

x

y

Setting d = e1 = e2 = 0 in Eqs. (30) and (31) allows this packet to evolve
under a linear equation. Figure 11 shows the results of using quadratic GCF
to set the values of the guard cell data. Here, φ is shown at four consecutive
times. The expanding wavefront encounters mesh reﬁnement boundaries at
x = 2.1 along the x
axis. Note that the wave
passes smoothly across the interface.

axis and at y = 2.1 along the y

−

−

A comparison of unigrid and ﬁxed reﬁnement runs is shown in Fig. 12. Here,
φ is plotted along a portion of the x
axis at a ﬁxed time. The unigrid run
−
(solid line) at the ﬁne grid resolution shows the extended “tail” of the out-
going cylindrical wave front. The run with linear GCF (dotted line) shows
a reﬂected wave traveling back into the ﬁne grid region as the wave passes
through the reﬁnement boundary. In the run with quadratic GCF (dashed
line), this spurious signal has been nearly eliminated.

e1 =

Similar results are achieved when this wave packet is evolved according to a
nonlinear equation, d =
e2 = 1. The structure of the grid and loca-
tion of the reﬁnement boundary are the same as for the 2-D linear equation.
Figure 13 displays the results of φ along the x
axis at a ﬁxed time. Notice
that the run with linear GCF (dotted line) shows a signiﬁcant reﬂected wave.
In contrast, the run with quadratic GCF (dashed line) is close to the one with
a uniform grid (solid line).

−

−

−

15

7 The Einstein Equations in 3–D

We are now ready to apply the techniques developed in our model equations
to the propagation of gravitational waves in 3–D, which is governed by the
vacuum (or source–free) Einstein equations. We write these equations in terms
of the “3 + 1” spacetime split [4], in which the initial data is speciﬁed on some
3–D spacelike slice and then evolved forward in time. Within this framework,
the metric takes the form

ds2 =

α2dt2 + gij(dxi + βidt)(dxj + βjdt).

−

(35)

We use units in which both the speed of light c = 1 and the gravitational
constant G = 1. Lowercase Latin letters are used to denote spatial indices, so
that i, j = 1, 2, 3. To simplify the notation throughout this section, we use the
summation convention: if any expression has one index as a superscript and
the same index as a subscript, summation over all values that index can take
is implied [22]. The geometry of the given spacelike slice is described by the
3–metric gij. The lapse function α governs the advance of proper time across
the surface, and the shift vector βi the motion of the spatial coordinates within
the hypersurface as the data is evolved forward in time. Both α and βi are
freely–speciﬁable functions of space and time; for the rest of this section, we
use the choice α = 1 and βi = 0.

In the standard ADM spacetime split [4], the Einstein equations can be written
in terms of gij and the extrinsic curvature of the hypersurface Kij, where

Following current practice in numerical relativity, we use the BSSN formalism
[5,6] in which the Einstein equations are written in terms of conformal variables
ψ, K, ˜gij, ˜Aij, ˜Γi

deﬁned as follows:

{

Kij =

1
2

∂gij
∂t

.

−

}
det(gij)1/3

e−4ψgij

gijKij

e4ψ

≡
˜gij ≡
K

≡
˜Aij ≡
˜Γi

e−4ψ(Kij −

1
3

gijK)

∂j ˜gij .

≡ −

16

(36)

(37)

(38)

(39)

(40)

(41)

Here ˜gij is the inverse of the conformal metric ˜gij. We use the notation ∂j ≡
∂/∂xj for spatial derivatives.

In terms of these conformal variables, with the gauge choices α = 1 and βi = 0,
the vacuum Einstein equations become

∂ψ
∂t

=

1
6

−

αK

2 ˜Aij

=

−

=

K 2 + ˜Aij ˜Aij

1
3

∂˜gij
∂t

∂K
∂t

∂ ˜Aij
∂t

∂ ˜Γi
∂t

= RTF

ij + ˜AijK

2 ˜Ail ˜Al

j

−

= 2(˜Γi

jk ˜Akj

˜gij∂jK + 6 ˜Aij∂jψ).

2
3

−

˜Γk

ji =

1
2

˜gmk(∂i˜gmj + ∂j ˜gmi −

∂m˜gji),

and

˜Aij = ˜gil˜gjk ˜Alk,

˜Al

j = ˜gli ˜Aij.

Here, ˜Γi

jk are the connection coeﬃcients associated with ˜gij, deﬁned by

ij =
gijR/3, where R = gmkRmk. The Ricci curvature tensor Rij is deﬁned

The superscript “TF” denotes the trace-free part of a tensor, so that RTF
Rij −
by

Rij = ∂kΓk

∂jΓk

ik + Γk

mkΓm

Γk

mjΓm

ik.

ij −

ij −

Although the set of equations (42)–(46) is considerably more complicated than
our model equations, there are notable similarities. In particular, the conformal
metric ˜gij plays the role of the function φ, while Aij takes the role of Π. Looking
at (47) and (49), we also see that the RTF
term in Eq. (45) contains second
ij
spatial derivatives of ˜gij.

The lessons learned from the model equations in 1–D and 2–D can be applied
successfully to the Einstein equations in 3–D, as we demonstrate by evolving a
weak gravitational wave. We use the analytic solution to the linearized Einstein

17

(42)

(43)

(44)

(45)

(46)

(47)

(48)

(49)

equations found by Teukolsky [24]; since this is given in closed form, we can
then compare the numerical results directly with this analytic solution. We
choose the even parity, L = 2, M = 0 solution, which is given by

ds2 =

dt2 + (1 + Afrr)dr2 + (2Bfrθ)rdrdθ

−
+(2Bfrφ)r sin θdrdφ + (1 + Cf (1)
+[2(A
+(1 + Cf (1)

2C)fθφ]r2 sin θdθdφ
φφ + Af (2)

φφ )r2 sin2 θdφ2.

−

θθ + Af (2)

θθ )r2dθ2

Here,

A = 3

"

B =

C =

− "
1
4 "

F (2)
r3 +
F (3)
r4 +
F (4)
r

+

3F (1)
r4 +
3F (2)
r3 +
2F (3)
r2 +

3F
r5 #
6F (1)
r4 +
9F (2)
r3 +
dnF (x)

F = F (t

r),

F (n)

−

≡ "

dxn #x=t−r

,

6F
r5 #
21F (1)

r4 +

21F
r5 #

where F is a generating function. We use the form

with two free parameters, A and ω. Here we have speciﬁed an outgoing wave
solution F = F (t
r); an ingoing wave solution can be obtained by using
F = F (t + r).

−

For this even-parity, M = 0 case, the angular functions fij are:

F (x) =

Ax

ω2 e−x2/ω2

,

3 sin2 θ
−
3 sin θ cos θ

frr = 2
frθ =
−
frφ = 0
f (1)
θθ = 3 sin2 θ
f (2)
1
θθ =
−
fθφ = 0
f (1)
f (1)
φφ =
θθ
−
f (2)
φφ = 3 sin2 θ

1.

−

18

(50)

(51)

(52)

(53)

(54)

(55)

(56)
(57)
(58)

(59)

(60)
(61)

(62)

(63)

We present results for a gravitational wave crossing two ﬁxed mesh reﬁnement
boundaries into regions with successively coarser resolution. We start with a
wave packet composed of a linear combination of one initially ingoing and one
outgoing wave, each having amplitude A = 10−6 and width ω = 1. This packet
is centered on the origin in a ﬁne grid region of resolution h = 0.0416667.
The successively coarser regions have resolutions 2h and 4h, with the ﬁrst
reﬁnement boundary at r = √x2 + y2 + z2 = 4.5 and the second at r = 9.0.
To complete the initial data we take Kij = 0 so that K = 0 and ˜Aij = 0.
Octant symmetry is imposed by using mirror-symmetry boundary conditions
along x = 0, y = 0, and z = 0. The computational domain covers the regions
0

12 and similarly for y and z.

x

≤

≤

As the evolution proceeds, the outgoing waves travel directly toward the outer
boundary of the grid. The initially ingoing waves ﬁrst travel toward the origin,
then reﬂect and move outward. As the overall signal propagates outward, it
leaves ﬂat spacetime behind.

Figure 14 shows the evolution of these waves when linear GCF is used. The
1 is plotted as a function of x and y in the z = 0 plane at 4
function gzz −
successive times. Note the presence of spurious reﬂected signals as the waves
pass through the ﬁxed mesh boundaries. These problems are greatly reduced
when quadratic GCF is used, as shown in Fig. 15. A comparison of runs with
linear (dotted line) and quadratic (dashed line) GCF and the analytic solution
(solid line) is shown in Fig. 16. The reﬂected waves are essentially eliminated
by the use of quadratic GCF.

Finally, Fig. 17 demonstrates the second–order convergence of the code by
comparing the results of the run in Fig. 15 with a run that diﬀers only by
having the size of the grid zones a factor of 2 larger throughout. Both runs
use quadratic GCF. The L2 norm of the absolute error ǫ is calculated over
each simulation domain, and plotted as a function of time. The solid triangles
connected by the solid line show ǫ for the run in Fig. 15, and the ﬁlled boxes
connected by the dotted line show the errors for the lower resolution run
multiplied by 4.

8 Summary

We have examined the propagation of waves across ﬁxed mesh reﬁnement
boundaries, starting with simpliﬁed linear and nonlinear model equations in
1–D and 2–D, and progressing to the 3–D Einstein equations of general rela-
tivity. The numerical evolutions were carried out using centered spatial diﬀer-
ences and the explicit iterated Crank-Nicholson time update method, giving
second–order accuracy. Our results show that using linear GCF produces spu-

19

rious reﬂected waves as the signals cross reﬁnement boundaries, and that these
are greatly suppressed by using quadratic GCF. In particular, quadratic GCF
preserves the second–order convergence of the numerical evolutions. Our nu-
merical results are complemented by a detailed analytic treatment of waves
crosing reﬁnement boundaries in 1–D in the Appendix.

While quadratic GCF is straightforward to describe and implement in 1–D, the
situation becomes more complicated in 2–D. In particular, intermediate values
parallel to the mesh reﬁnement interface must be calculated in the 2–D case.
We have found that using linear interpolation to obtain these intermediate
values, combined with quadratic interpolation for the ﬁnal values, maintains
the second–order convergence. The procedure used for quadratic GCF in 2–D
generalizes in a straightforward manner to the 3–D case.

The techniques presented here appear to be robust in the sense that they con-
tinue to produce excellent results as our test problems increase in complexity.
Quadratic GCF successfully eliminates most of the spurious reﬂected waves in
both linear and nonlinear model equations in 1–D and 2–D. The 3–D Einstein
equations present a much larger and more complex system of equations. In the
test case presented here, the evolution of a weak gravitational wave, quadratic
GCF continues to perform well, even as the signals cross two successive mesh
reﬁnement boundaries. We fully expect that these techniques will also yield
excellent results for strong gravitational waves, which activate the nonlinear
terms in the Einstein equations. Such evolutions require various technical dif-
ferences in the gauge choices (α and βi) as well as in the formulation of the
initial data. We are currently working on such models, and will report on them
elsewhere.

Acknowledgements

It is a pleasure to thank John Baker, Phillip Colella, Kevin Olson, and Steve
Zalesak for helpful and stimulating discussions. The work was supported in
part by NSF grant PHY-0070892.

A Appendix: Analysis of Numerical Wave Propagation in 1-D

In this appendix, we present a more detailed analysis of the propagation of
linear waves in 1-D with the discretization described in Sec. 2. We begin by
deriving some basic results for uniform grids (Sec. A.1) and follow with a study
of wave propagation across a ﬁxed mesh reﬁnement boundary (Sec. A.2). Here,
we do not address the issue of instabilities that might arise due to coupling

20

between ﬁne and coarse meshes [25]. However, as noted in Sec. 4, our numerical
tests show no signs of instability.

A.1 Wave Propagation on a Uniform Mesh

We will employ matrix notation to facilitate the analysis in this Appendix.
First, we collect the ﬁeld variables φ, Π into the column vector

V =

φ
Π (cid:19)

(cid:18)

.

Equations (2)–(3) can now be written as

∂V
∂t

0
∂2/∂x2

=

(cid:18)

1
0 (cid:19)

V .

As usual V n
point j.

j will denote the vector of grid functions at timestep n and grid

The iterated Crank–Nicholson method described in Sec. 2.1 is built from suc-
cessive applications of the basic operator

Q =

0
∂2

(cid:18)

1
0 (cid:19)

,

where ∂2V n
the variables V n

j ≡

2V n

(V n
j by one full timestep is accomplished by the operator

j−1)/∆x2. With two iterations, the update of

j + V n

j+1 −

M = I + ∆t Q

I +

Q

I +

∆t
2

(cid:20)

(cid:18)

∆t
2

Q

.

(cid:19)(cid:21)

The stability, dissipation, and dispersion properties are obtained by consider-
ing discrete plane wave solutions,

j = W eiωn∆te−ikj∆x ,
V n

where W is a constant vector (independent of n and j). Inserting this ansatz
into the update equation V n+1

= MV n

j , we ﬁnd

j

eiω∆tW =

2Λ2

1
−
4Λ2(1

Λ2)/∆t

(cid:18)

−

−

Λ2)

−
2Λ2

∆t(1
1

−

(cid:19)

W ,

21

(A.1)

(A.2)

(A.3)

(A.4)

(A.5)

(A.6)

where

Λ

≡

∆t
∆x

sin(k∆x/2) .

−

2Λ2

2iΛ(1

Thus, W is an eigenvector with eigenvalue eiω∆t for the matrix that appears
in Eq. (A.6). The eigenvalues are obtained in the usual way with the result
eiω∆t = 1
Λ2). This is the dispersion relation giving the
complex frequency ω as a function of wave number k. We can, without loss
of generality, consider only plane wave solutions (A.5) with positive frequency
ξ > 0, where ξ =
sign in the dispersion
relation must be set equal to the sign of the wave number k. The dispersion
relation then becomes

(ω) is the real part of ω. Then the

±

−

±

ℜ

eiω∆t = 1

2Λ2 + 2i
|

Λ

(1

|

−

−

Λ2)

(ω) is positive. The eigenvectors W corresponding to these eigen-
and ξ =
values are straightforward to compute. Choosing the ﬁrst component of W to
be unity, we ﬁnd

ℜ

W =

1
/∆t (cid:19)
Λ

|

.

(cid:18)

2i
|

We note for later reference that W e−ikj∆x is an eigenvector of the basic oper-
ator Q with eigenvalue 2i
|

/∆t.

Λ

|

eiω∆t

The ﬁnite diﬀerence scheme is unstable if the magnitude of the ampliﬁcation
, is greater than unity. From Eq. (A.8) we ﬁnd that
factor,
1
implies Λ2
1. This inequality will be satisﬁed for all wave numbers k only if
∆x. This is the Courant limitation on the timestep for the wave equation
∆t
(2)–(3) discretized with twice–iterated Crank–Nicholson.

|
≤

eiω∆t

≤

≤

|

|

|

2

The phase velocity is found from the real part of the frequency ξ =
From the dispersion relation (A.8), we ﬁnd

(ω).

ℜ

(A.7)

(A.8)

(A.9)

(A.10)

(A.11)

ξ∆t = arcsin

2

Λ

(1

Λ2)

|
−
4Λ4(1

|

−

Λ2) 


−

.





1
q

The phase velocity is then

c(λ) =

=

ξ
k

ξ∆t
2πα

λ
∆x

,

22

≡

where α
dissipation is found from the imaginary part of the frequency, η =
the wave amplitude varies like φ
by a factor

∆t/∆x is the Courant factor and λ = 2π/k is the wavelength. The
(ω). Since
e−ηn∆t, we see that the amplitude drops

∼

ℑ

e−η∆t =

eiω∆t

=

|

|

1
q

−

4Λ4(1

Λ2) .

−

(A.12)

for each timestep.

A.2 Wave Propagation with FMR

Now consider a two–level reﬁned mesh, with ﬁne grid ∆xf on the left and
coarse grid ∆xc on the right. We will assume that the reﬁnement jumps by a
factor of 2, that is, ∆xc = 2∆xf . The mesh will be labeled as shown in Fig. 3.
Thus, V n
−1/2, V n
3/2, etc. are the
coarse grid functions.

−3/2, etc. are the ﬁne grid functions and V n

1/2, V n

As a ﬁrst step towards analyzing the wave reﬂection and transmission at the
interface, we relate the wave numbers in the coarse and ﬁne grid regions.
eiξn∆t across the
Consider a monochromatic solution that varies like φ
entire mesh. Speciﬁcally, we assume that the coarse and ﬁne grid frequencies
are the same, ξc = ξf , and that the coarse and ﬁne grid time steps are the
same, ∆tc = ∆tf . From the dispersion relation, Eq. (A.8), we can compute
tan(ξ∆t) in the coarse and ﬁne grid regions and equate the results:

∼

Λ2
c)

=

2

|

(1

Λc|
1
−

−
2Λ2
c

Λ2
f )

.

2

|

(1

Λf |
1
−

−
2Λ2
f

Here, Λc = (∆t/∆xc) sin(kc∆xc/2) and similarly for Λf . This relation has the
form f (
vary between 0 and 1. It is easy to
Λc|
Λf |
|
show that the function f (
) is monotonic and therefore invertible. It follows
that the only solution of Eq. (A.13) is

) where
Λ

) = f (

Λf |

Λc|

and

|

|

|

|

|

Λc|

|

=

.

Λf |

|

This equation shows that the coarse and ﬁne grid wave numbers kc and kf are
related by

(A.13)

(A.14)

(A.15)

kc =

2
∆xc

±

arcsin

∆xc
∆xf

"

sin(kf ∆xf /2)
#

.

23

sign indicate that the wave propagation
The two cases corresponding to the
direction on the coarse and ﬁne sides of the interface need not match. Thus,
we can have a right moving wave in the coarse grid region connected to both
right moving and left moving waves in the ﬁne grid region.

±

From the result (A.14) we see that the rate of dissipation (A.12) of a wave,
governed by η =
(ω), is the same in the coarse and ﬁne grid regions. We also
see that the relative phase between the two components φ and Π of the wave,
Eq. (A.9), is the same in coarse and ﬁne regions. The phase velocity (A.11),
and hence the amount of dispersion, diﬀer in the coarse and ﬁne grid regions,
since the wave numbers kc and kf are not equal.

ℑ

π/3, that is, for λf /∆xf ≥
According to Eq. (A.15) kc is real only for kf ∆xf ≤
6. If λf /∆xf < 6, then kc is complex and the plane wave solution (A.5) will
contain a spatial dependence in the coarse grid region that is either expo-
nentially damped or grows exponentially. Note that, although kc might be
complex, Λc is real (assuming kf is real) and equal to
Λf . It follows that,
eiω∆t
whether kc is real or complex, the Courant stability condition
1 is
≤
satisﬁed in the coarse grid region if it is satisﬁed in the ﬁne grid region.

±

|

|

2

For the remainder of this appendix we will focus on the case of practical
6 and kc is real. The plots in Figures 5, 6, and 7
interest, where λf /∆xf ≥
have been restricted to λf /∆xf ≥
10 for clarity of presentation. Each of the
curves in those plots reaches a ﬁnite value at λf /∆xf = 6.

A.2.1 Matching solutions

At this point we have shown that waves of frequency ξ have wave number kc
on a coarse grid, wave number kf on a ﬁne grid, and that these values are
related as in Eq. (A.15). We will now construct a solution with frequency ξ
that spans the entire non-uniform grid. To begin, consider the vector

Vj =

W

W

e−ikf j∆xf + Reikf j∆xf
Te−ikcj∆xc

,

(cid:17)

,

j < 0 ;

j > 0 .






(cid:16)

(cid:16)

(cid:17)

(A.16)

We will show that for an appropriate choice of the coeﬃcients R and T the
vector Vj is an eigenvector of the basic operator Q with eigenvalue 2i
/∆t.
|
3/2 and j
For points away from the interface, namely, the points j
≥
3/2, this conclusion follows from our earlier observation that on a uniform
grid W e±ikj∆x is an eigenvector of Q with eigenvalue 2i
/∆t. The same
|
argument cannot be applied to the points 1/2 and
1/2 surrounding the
interface because the stencil for the discrete derivative operator ∂2 appearing
in Q extends across the interface. Thus, when computing ∂2Vj for j =
1/2,
we must use guard cell information.

≤ −

−

±

Λ

Λ

|

|

24

In the main text we discussed various choices for guard cell ﬁlling, such as the
Paramesh linear GCF of Eqs. (17)–(18) and the quadratic GCF of Eqs. (19)–
(21). For the purpose of presenting the analysis, we will focus instead on the
direct linear GCF of Eqs. (22)–(23). In the present notation, these relations
are

V n
G =

(V n

−3/2 + V n

−1/2),

V n
g =

(V n

−1/2 + 2V n

1/2)

(A.17)

1
2

1
3

Now, for grid points that are not adjacent to the interface, the operator ∂2
takes the usual form,

∂2V n

j =

(V n
(V n

j+1 −
j+1 −

(cid:26)

2V n
2V n

j + V n
j + V n

j−1)/∆x2
j−1)/∆x2

f ,
c ,

j
≤ −
j
≥

3/2 ,
3/2 .

But for grid points adjacent to the interface, ∂2 must use guard cell values
given by (A.17). Consequently, we ﬁnd

(A.18)

(A.19)

∂2V n

−1/2 = (V n
g −
= (2V n
1/2 −

2V n

−1/2 + V n
5V n

−1/2 + 3V n

−3/2)/∆x2
f
−3/2)/(3∆x2
f )

and

∂2V n

1/2 = (V n
= (2V n

3/2 −
3/2 −

1/2 + V n
2V n
4V n
1/2 + V n

G )/∆x2
c
−1/2 + V n

for ∂2 acting at grid points j =

1/2.

±

−3/2)/(2∆x2

c) .

(A.20)

We now impose the requirement that the vector Vj of Eq. (A.16) is an eigenvec-
1/2 adjacent to the in-
tor of Q with eigenvalue 2i
|
terface. Using the discretization (A.19) the relation QV−1/2 = (2i
/∆t)V−1/2
Λ
|
yields

/∆t at the points j =

±

Λ

|

|

1
3

(2φ1/2 −

2

2i
Λ
|
|
αf !

 

5φ−1/2 + 3φ−3/2) =

φ−1/2 .

(A.21)

Here, φj is the ﬁrst component of the ansatz vector Vj. Similarly, with the
discrete operator (A.20), we ﬁnd that QV1/2 = (2i
|

/∆t)V1/2 implies

Λ

|

1
2

(2φ3/2 −

4φ1/2 + φ−1/2 + φ−3/2) =

2

2i
Λ
|
|
αc !

 

φ1/2 .

(A.22)

25

These two equations can be solved for the two coeﬃcients R and T. The result
is

(A.23)

(A.24)

(A.25)

E2

R =

c E4

f −
c E2

E4
f −
f + E2

c E2
3E2
1 + E2
Ec(3 + 2E2
1 + E2

f −
2E6
f −
c E2
f −
where the shorthand notation

f −
f + E2

T =

f −
3E2

,

E6
f
c E4
f
3E8
f )/(2Ef )
c E4
3E2
f

,

eikc∆xc/2 ,

Ec ≡

eikf ∆xf /2

Ef ≡

has been used.

At this point we have succeeded in showing that the vector Vj of Eq. (A.16),
with R and T chosen as in Eqs. (A.23), is an eigenvector of Q on the non–
/∆t. A short calculation
uniform grid. The corresponding eigenvalue is 2i
|
shows that Vj is also an eigenvector for M, Eq. (A.4), with eigenvalue 1
2Λ2 + 2i
|
see that

−
Λ2). Since M evolves the discrete system by one time step, we

(1

−

Λ

Λ

|

|

V n
j =

W eiωn∆t
W eiωn∆t

e−ikf j∆xf + Reikf j∆xf
Te−ikcj∆xc

,

(cid:17)

,

j < 0 ;

j > 0 .

(cid:16)

(cid:16)

(cid:17)






is a solution of the ﬁnite diﬀerence equations V n+1
j across the entire
grid. Here, the complex frequency ω is given by the dispersion relation (A.8).
The solution (A.25) represents a wave that travels from the ﬁne grid region to
the coarse grid region. At the interface it splits into reﬂected and transmitted
pieces. The coeﬃcient R is the reﬂection coeﬃcient, and T is the transmission
coeﬃcient.

= MV n

j

The results of this analysis can be checked numerically. For example, in Fig. A.1
the solid lines show the magnitude of the reﬂection coeﬃcient calculated from
Eq. (A.23). The squares and triangles display the results of a numerical test,
in which we modeled the propagation of a sine wave contained in a broad
Gaussian envelope,

φ(x, t) = Ae−(x−x0−t)2/w2

sin k(x

t) .

−

(A.26)

The initial data were obtained by discretizing φ and dφ/dt at t = 0. The
constant x0 was chosen so that initially the wave packet was situated in the
ﬁne grid region, far from the interface. We set the Gaussian half–width to
w = 63∆x, signiﬁcantly larger than the longest wavelength shown in the

26

ﬁgures. The magnitude of R was obtained by evolving the wave packet past
its interaction with the interface, typically about 1000 time steps, and then
extracting from the numerical data the largest value of
in the reﬂected
pulse. The Courant factor for these numerical runs was ∆t/∆xf = 0.4.

φ

|

|

The squares show raw numerical data. The deviation of these data from the
analytical curves is due to dissipation and dispersion of the wave pulse. Dissi-
pation can be accounted for rather easily, using the analytical result given in
Eq. (A.12). The triangles show the numerical data with correction for dissi-
pation. The numerical and analytical results for the reﬂection coeﬃcient are
in excellent agreement, as seen in Fig. (A.1).

The above analysis can be repeated for other choices of GCF. In particu-
lar, for the quadratic GCF of Eqs. (19)–(21), the reﬂection and transmission
coeﬃcients are

R =

T =

E2
f (

1 + 6E2
−
3 + 6E2
2Ec(
3
−
3 + 6E2
f −

f + E2
f + 3E4
c (
−
E4
E2
c (3
f −
−
f + 3E8
f + 2E6
2E2
10E2
E2
c (3

15 + 10E2
10E2
f )/Ef
f + 15E4
f )

f −
−
E4

f −

−

,

3E4
f −
f + 15E4
f )

f ))

,

(A.27)

with Ec and Ef deﬁned as before. Figures (5)–(7) compare the reﬂection and
transmission coeﬃcients for linear, direct linear, and quadratic GCF. From
Fig. 5 we see that quadratic GCF produces a much smaller reﬂected wave
than either linear or direct linear GCF. For example, at 20 ﬁne grid points
per wavelength, linear (direct linear) GCF produces a reﬂected wave with
amplitude about 5.6% (4.3%) that of the incident wave. With quadratic GCF
the reﬂected wave amplitude is only about 0.31% that of the incident wave.
For the transmitted wave, Fig. 7 shows that the phase error at 20 ﬁne grid
points per wavelength is smaller in magnitude by more than a factor of 10
with quadratic GCF compared to linear or direct linear GCF. Figure 6 shows,
perhaps surprisingly, that direct linear GCF does the best job of keeping the
magnitude of T close to 1 at wavelengths less than about 28∆xf . For longer
wavelengths, λ > 28∆xf , quadratic GCF is best. Note, however, that with
any of these choices of GCF, the deviation of
away from unity is relatively
small. Over the entire range shown in the graphs, λ > 10∆xf , the maximum
error for quadratic GCF is less than 1%. For the reﬂection coeﬃcient, on
the other hand, the maximum error for direct linear GCF is about 11%. For
most situations the problem of spurious reﬂections at an interface will be more
severe than the problem of inaccurate wave transmission through the interface.

T

|

|

27

A.2.2 Discussion of guard cell ﬁlling

The results thus far indicate that quadratic GCF is generally better than
either linear or direct linear GCF at keeping the reﬂection coeﬃcient small
and the transmission coeﬃcient close to unity. The question naturally arises:
can one do better than quadratic GCF? We will restrict our attention to rules
for GCF that use a three–point stencil. That is, the ﬁne and coarse grid guard
cell values V n
G are obtained from linear combinations of three grid
points,

g and V n

G = c1V n
V n

1/2 + c2V n

−1/2 + c3V n

−3/2 ,

g = f1V n
V n

1/2 + f2V n

−1/2 + f3V n

−3/2 ,

where c1, f1, etc. are constants.

The analysis of Sec. A.2.1 can be repeated with the guard cells deﬁned as
above. The resulting reﬂection and transmission coeﬃcients are functions of
the constants c1, f1, etc. Although there are certain combinations of the con-
stants that outperform quadratic GCF at low resolution, quadratic GCF is
unique in the following sense. If we consider the high resolution limit, in which
kf ∆xf is small, quadratic GCF yields

R =

i(kf ∆xf )3 + O(kf ∆xf )4 ,

T = 1

i(kf ∆xf )3 + O(kf ∆xf )4 .

3
32

3
32

−

|

= O(kf ∆xf )3 and

The magnitudes of the reﬂection and transmission coeﬃcients behave like
= 1 + O(kf ∆xf )4. For any other choice of con-
R
|
stants c1, f1, etc., the reﬂection and transmission coeﬃcients approach 0 and
1, respectively, more slowly (if at all) than for quadratic GCF. For example,
for direct linear GCF, we have

T

|

|

R =

i(kf ∆xf ) + O(kf ∆xf )2 ,

T = 1 +

i(kf ∆xf ) + O(kf ∆xf )2 .

1
8

1
8

Thus, for high resolution, quadratic GCF is the best possible choice given the
three–point stencil (A.28)– (A.29). Because R and T approach 0 and 1 rapidly,
as the third power of kf ∆xf , quadratic GCF performs well at all resolutions.

28

(A.28)

(A.29)

(A.30)

(A.31)

(A.32)

(A.33)

References

[1] B. Barish, First Generation Interferometers, in: J. Centrella, ed., Astropohysical
Sources for Ground-Based Gravitational Wave Detectors (AIP, Melville, NW,
2001), 3

[2] P. Fritschel, The Second Generation LIGO Interferometers, in: J. Centrella, ed.,
Astropohysical Sources for Ground-Based Gravitational Wave Detectors (AIP,
Melville, NW, 2001), 15

[3] P. Bender, et al., LISA, Pre-Phase A Report, 2nd. edition (1998), unpublished

(available online at: http://lisa.jpl.nasa.gov/documents/ppa2-09.pdf)

[4] C. Misner, K. Thorne, and J. Wheeler, Gravitation (W. H. Freeman, New York,

1973)

[5] M. Shibata and T. Nakamura, Evolution of three-dimensional gravitational

waves: Harmonic slicing case, Phys. Rev. D52, 5428 (1995).

[6] T. Baumgarte and S. Shapiro, Numerical
equations, Phys. Rev. D59, 024007 (1998).

integration of Einstein’s ﬁeld

[7] M. Choptuik, Universality and scaling in gravitational collapse of a massless

scalar ﬁeld, Phys. Rev. Lett. 70, 9 (1993).

[8] B. Br¨ugmann, Adaptive mesh and geodesically sliced Schwarzschild spacetime

in 3+1 dimensions, Phys. Rev. D54, 7361 (1996).

[9] B. Br¨ugmann, Binary Black Hole Mergers in 3d Numerical Relativity, Int. J.

Mod. Phys. D8, 85 (1999).

[10] P. Papadopoulos, E. Seidel, and L. Wild, Adaptive computation of gravitational

waves from black hole interactions, Phys. Rev. D58, 084002 (1998).

[11] K. New, D. Choi, J. Centrella, P. MacNeice, M. Huq, and K. Olson, Three-
dimensional adaptive evolution of gravitational waves in numerical relativity,
Phys. Rev. D62, 084039 (2000).

[12] S. Hern, Numerical Relativity and Inhomogeneous Cosmologies,

(Ph.D.
Thesis, Dept. Applied Maths. and Theoretical Physics, Cambridge University,
Cambridge, UK, 2000) (http://arxiv.org/abs/gr-qc/0001070).

[13] M.J. Berger and J. Oliger, Adaptive mesh reﬁnement for hyperbolic partial

diﬀerential equations, J. Computat. Phys. 53, 484 (1984).

[14] M.J. Berger and P. Colella, Local adaptive mesh reﬁnement for shock

hydrodynamics, J. Comput. Phys. 82, 64 (1989).

[15] M. J. Berger, On conservation at grid interfaces, SIAM J. Numer. Anal. 24,

967 (1987).

[16] G. Chesshire and W. D. Henshaw, J. Comput. Phys. 90, 1-64 (1990).

29

[17] W. D. Henshaw and D. W. Schwendeman, submitted to J. Comput. Phys.

(2003).

[18] W. Press, S. Teukolsky, W. Vetterling, and B. Flannery, Numerical Recipies

(2nd edition) (Cambridge University Press, New York, 1994).

[19] S. Teukolsky, On the stability of the iterated Crank-Nicholson method in

numerical relativity, Phys. Rev. D61, 087501 (2000).

[20] P. MacNeice, K. Olson, C. Mobarry, R. de Fainchtein, and C. Packer,
PARAMESH: A parallel adaptive mesh reﬁnement community toolkit,
Computer Physics Comm. 126, 330 (2000).

[21] D. DeZeeuw and K. Powell, An Adaptively Reﬁned Cartesian Mesh Solver for

the Euler Equations, J. Computat. Phys. 104, 56 (1993).

[22] B. Schutz, A ﬁrst course in general relativity (Cambridge University Press, New

York, 1985).

[23] D. Martin and K. Cartwright, Solving Poisson’s Equation using Adaptive Mesh

Reﬁnement, unpublished notes (1996).

[24] S. Teukolsky, Linearized quadrupole waves in general relativity and the motion
of test particles Equation using Adaptive Mesh Reﬁnement, Phys. Rev. D26,
745 (1982).

[25] F. Olsson and N. Anders Petersson, Stability of interpolation on overlapping

grids, Comput. Fluids 25, 583 (1996).

30

Fig. 1. The evolution of a Gaussian wavepacket on a uniform grid according to the
linear 1–D wave equation is shown for two diﬀerent resolutions: H = ∆x = 0.045
(dotted line) and h = H/2 (solid line).

31

Fig. 2. The evolution of the absolute errors ǫ for the two runs in Fig. 1 is shown.
The dotted line shows ǫH and the solid line 4

ǫh.

×

−5/2

−3/2

−1/2

g

G

1/2

3/2

Fig. 3. An interlevel boundary between a coarse and ﬁne grid in 1-D is shown. The
coarse grid data points are marked with ﬁlled diamonds and positive half integers,
the ﬁne grid data points are marked with ﬁlled circles and negative half integers.
The coarse and ﬁne guard cells are marked with the corresponding open symbols
and are denoted by “G” and “g,” respectively.

32

Fig. 4. The evolution of the absolute errors ǫ is shown for a Gaussian packet crossing
a ﬁxed reﬁnement boundary at x = 2.1 with linear (dotted line) and quadratic
(dashed line) GCF. The solid line shows ǫ for a unigrid run at the ﬁne grid resolution.

33

0.1

0.075

|

R

|

0.05

0.025

0
10

20

40

50

30
/h

λ

for linear (dashed curve),
Fig. 5. Absolute values of the reﬂection coeﬃcient
quadratic (solid curve), and direct linear (dotted curve) GCF for a wave with wave-
length λ crossing a single ﬁxed mesh boundary. The resolution of the ﬁne grid is
h.

R
|
|

34

1.01

1.009

1.008

1.007

1.006

|

T

|

1.005

1.004

1.003

1.002

1.001

1

0.999

10

20

40

50

30
/h

λ

Fig. 6. Absolute values of the transmission coeﬃcients for linear (dashed line),
quadratic (solid line), and direct linear (dotted) GCF.

35

e
s
a
h
p

0.08

0.06

0.04

0.02

0

-0.02

-0.04

10

20

40

50

30
/h

λ

Fig. 7. The phase of the transmission coeﬃcients for linear (dashed line), quadratic
(solid line), and direct linear (dotted) GCF.

36

Fig. 8. The time evolution of the solution φ to the nonlinear 1-D wave equation
is shown. Unigrid runs are shown at the coarse resolution H (thin solid line) and
the ﬁne resolution h = H/2 (thick solid line). Runs in which the packet encounters
a mesh reﬁnement boundary at x = 2.1 are shown for linear interpolation (dotted
line) and quadratic (dashed line) GCF.

37

Fig. 9. Paramesh default linear GCF in 2-D. Points on the coarse grid are denoted
by diamonds, and points on the ﬁne grid by circles. First, the coarse grid guard cells
(open diamonds) are ﬁlled by averaging the surrounding ﬁne grid points. Then the
ﬁne grid guard cells (open circles) are ﬁlled by taking linear combinations of the
four surrounding coarse grid points.

Fig. 10. Quadratic GCF in 2-D. Coarse grid guard cells (open diamonds) are tem-
porarily ﬁlled by averaging the surrounding ﬁne grid points. Intermediate values
(open boxes) are obtained by linear interpolation of coarse grid values (solid dia-
monds) parallel to the interface. Fine grid guard cells (open circles) are then ﬁlled
from a quadratic ﬁt using two ﬁne grid points and one intermediate value. Finally,
the coarse grid guard cells are ﬁlled by matching the coarse and ﬁne grid ﬁrst
derivatives across the interface.

38

Fig. 11. The evolution of φ with a linear 2-D wave equation is shown at 4 consecutive
times for a run using quadratic GCF to set the data in the guard cells. Each of the
grid blocks shown has 8

8 zones.

×

39

Fig. 12. φ is shown along a portion of the x
axis for the 2-D linear wave equation.
The solid line shows the results of a unigrid run at the ﬁne grid resolution h = 0.0225,
the dotted line the results of a run with linear GCF, and the dashed line a run with
quadratic GCF.

−

40

Fig. 13. Same as Fig. 12 except that the 2-D nonlinear wave equation is solved.

41

Fig. 14. Evolution of gravitational waves in the 3–D Einstein equations using linear
1 is plotted 1n the z = 0 plane. Three levels of resolution (h,2h,4h) are
GCF. gzz −
used, with h = 0.0416667. Each of the grid blocks shown has 6

6 zones.

6

×

×

42

Fig. 15. Same as Fig. 14 except that quadratic GCF is used.

43

1 is shown along the y-axis for the 3–D Einstein
Fig. 16. The evolution of gzz −
equations. The analytic solution (solid line) and numerical solutions using linear
(dotted line) and quadratic (dashed line) GCF are shown. The resolution levels are
given by (h,2h,4h) with h = 0.0416667.

44

Fig. 17. The L2 norm of the absolute error ǫ is shown for two gravitational wave
runs diﬀering in resolution by a factor of 2 throughout. Both runs have 2 reﬁnement
boundaries and use quadratic GCF. The solid triangles connected by the solid line
show ǫ for the run at higher overall resolution, and the solid boxes connected by the
ǫ for the run with lower overall resolution.
dotted line show 4

×

45

|

R

|

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

5

10

15

20

λ
/h

Fig. A.1. Absolute value of the reﬂection coeﬃcient for direct linear guard cell
ﬁlling. The raw numerical data are shown as boxes, while the triangles show the
data corrected for dissipation.

46

