where

5
0
0
2
 
p
e
S
 
7
2
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
9
2
2
9
0
5
0
/
s
c
i
s
y
h
p
:
v
i
X
r
a

Gradient Symplectic Algorithms for Solving the Radial Schr¨odinger Equation

Siu A. Chin and Petr Anisimov
Department of Physics, Texas A&M University, College Station, TX 77843, USA

The radial Schr¨odinger equation for a spherically symmetric potential can be regarded as a one
dimensional classical harmonic oscillator with a time-dependent spring constant. For solving classical
dynamics problems, symplectic integrators are well known for their excellent conservation properties.
The class of gradient symplectic algorithms is particularly suited for solving harmonic oscillator
dynamics. By use of Suzuki’s rule for decomposing time-ordered operators, these algorithms can
be easily applied to the Schr¨odinger equation. We demonstrate the power of this class of gradient
algorithms by solving the spectrum of highly singular radial potentials using Killingbeck’s method
of backward Newton-Ralphson iterations.

Because of its physical importance, an immense literature exists for solving the radial Schr¨odinger equation,

(1.1)

(1.2)

(1.3)

(1.4)

I.

INTRODUCTION

d2u(r)
dr2 = f (r, E) u(r),

f (r, E) = 2V (r)

2E +

−

ℓ(ℓ + 1)
r2

.

d2q(t)
dt2 =

−

k(t, E) q(t).

H =

p2 +

k(t, E) q2.

1
2

1
2

This is usually solved by ﬁnite diﬀerence methods, such as the well known fourth-order Numerov1 algorithm, or
further improved schemes2. Recent devlopments3,4,5 have resulted in many exponentially ﬁtted algorithms which seek
to integrate (1.1) exactly when f is a constant. As we will see, because f can vary rapidly with V (r), specially in the
case of singular potentials, these algorithms do not in general perform better than non-ﬁtted algorithms.

If we relabel the variables r

t and u

q, (1.1) is just a 1D harmonic oscillator with a time-dependent spring

constant k(t, E) =

f (t, E),

−

→

→

The novel aspect of the problem is that k(t, E) can change sign with time and become repulsive beyond the turning-
point. The dynamics of (1.3) corresponds to a Hamiltonian with an explicit time-dependent potential,

Thus any algorithm that can solve the classical time-dependent force problem can be used to solve the radial
Schr¨odinger equation. For example, one can use Runge-Kutta type algorithms6. However, for solving classical
dynamics, symplectic integrators7,8,9,10 are algorithms of choice because they conserve all Poincar´e invariants and
are deeply rooted in the Poisson formulation of classical mechanics. For oscillatory problems, symplectic algorithms
are known to conserve energy and reduce phase error much better than Runge-Kutta type algorithms11,12,13,14,15.
The diﬃculty here is that, in order to derive an algorithm for solving time-dependent dynamics, one must solve the
problem of time-ordered exponential. Liu et al.16 have recognized the time-dependent Hamiltonain structure of the
Schr¨odinger equation, but were able to solve the time-dependent exponential, and devised a symplectic algorithm,
only to second order. Kalogiratou, Monovasilis and Simos17 have proposed a third order symplectic algorithm by
expanding out the exponential to third order. Such a brute force approach cannot be extended to higher orders.
A more systematic way of dealing with the time-ordered exponential is via the Magnus expansion18,19,20, but the
Magnus expansion requires explicit time integration in addition to evaluating higher order commutators. A more ele-
gant solution is Suzuki’s21 reinterpretation of the time-order exponential as reviewed in Ref.22. By adapting Suzuki’s
rule, any factorized symplectic algorithms can be used to solve problems with an explicit time-dependent potential22,
including the disguised radial Schr¨odinger equation (1.3).

In order to devise eﬃcient algorithms for solving the radial Schr¨odinger equation (1.1), one must take advantage
of its harmonic oscillator character (1.3). Most algorithms, even factorized symplectic ones, are general purpose
algorithms and are not specially adapted for solving the time-dependent harmonic oscillator. However, the recent

class of gradient symplectic algorithms12,13,14,15,22,23,24, while general, seem tailor-made for solving harmonic type
dynamics. This is because these algorithms require computing the force gradient in addition to the force. While the
force gradient is not diﬃcult to compute, it is especially trivial in the case of the harmonic oscillator. This class of
gradient (or more speciﬁcally, forward) integrators, has been shown to be eﬃcient in solving both classical12,13,14,15,23,24
and quantum19,20,22,25,26 dynamical problems. In this work, we will show they are also ideally suited for solving the
radial Schr¨odinger equation.

In the next section, we brieﬂy summarize the Lie-Poisson operator formulation of symplectic integrators and Suzuki’s
rule for factorizing time-ordered exponentials. In Section III, we describe forward, gradient based symplectic algo-
rithms.
In Section V, we
compare results on the Coulomb and other singular radial potentials. In Section VI, we discuss the applicability of
sixth-order algorithms and draw some conclusions in Section VII.

In Section IV we review Killingbeck’s method27 of eigenvalue-function determination.

II. TIME-DEPENDENT SYMPLECTIC ALGORITHMS

The Poisson bracket for evolving any dynamical variable W (q, p) can be regarded as an operator equation

with formal solution

For the standard Hamiltonian,

d
dt

W (q, p) =

W, H

{

} ≡ (cid:16)

∂H
∂p

∂
∂q −

∂H
∂q

∂
∂p (cid:17)

W,

W (t + ε) = eε(T +V )W (t).

H(p, q) =

p2 + V (q),

1
2

the operators T and V are ﬁrst order diﬀerential operators

T =

∂H
∂p

∂
∂q

= p

∂
∂q

,

V =

∂U
∂q

∂
∂p

−

= F (q)

∂
∂p

.

The Lie transforms7 eεT and eεV , are then displacement operators which displace q and p forward in time via

q + εp

and

q

→

p + εF.

p

→

Each factorization of eε(T +V ) into products of eεT , eεV (and exponentials of commutators of T and V ) gives rise
to a symplectic algorithm, which is a sequence of successive displacements (2.5) for evolving the system forward in
time. This is the fundamental Lie-Poisson theory of symplectic integrators which has been studied extensively in the
literature7,8,9,10.

For a time-dependent Hamiltonian

the solution is given by the time-order exponential

where V (t) is now the explicitly time-dependent operator

Suzuki proved21 that

H(t) =

p2 + V (q, t),

1
2

W (t + ε) = T exp

[ T + V (s) ]ds

W (t),

t+ε

(cid:16)Z
t

V (t) =

∂U (q, t)
∂q

∂
∂p

−

= F (q, t)

(cid:17)

∂
∂p

.

t+ε

T exp

(cid:16)Z
t

[ T + V (s) ]ds

= eε(T +V (t)+D),

(cid:17)

2

(2.1)

(2.2)

(2.3)

(2.4)

(2.5)

(2.6)

(2.7)

(2.8)

(2.9)

where D is the forward time derivative operator

D =

←∂
∂t

T = T + D

e

such that for any two time-dependent functions F (t) and G(t),

F (t)eεDG(t) = F (t + ε)G(t).

Thus symplectic algorithms for solving explicitly time-dependent problems of the form (2.6) can be obtained by
factorizing the three-operator exponential of (2.9). Since D commutes with T , one can ﬁrst group

e

T and V (t) as in the time-independent case. The diﬀerence between time-dependent and time-
and factorize
T in place of T . This makes it extremely easy to analyze and
independent algorithms resides solely in the use of
devise time-dependent algorithms. Once factorized in terms of eε
T = eεT eεD, the operator eεD then shifts the time
at which all the time-dependent potential to its LEFT must be evaluated. This results in Suzuki’s rule for solving
time-dependent Hamiltonian (2.6): the time-dependent potential must be evaluated at an incremental time from the
start of the algorithm equal to the sum of time steps of all the T operators to its right. We will illustrate how this is
applied in the next section. For more detailed discussions and examples, see Refs.14,22.

e

e

III. FORWARD FOURTH-ORDER ALGORITHMS

In order to solve the radial Schr¨odinger equation (1.1) eﬃciently, one must take advantage of its harmonic oscillator
character (1.3). This can be done easily for factorized algorithms because their error terms have a well-deﬁned
analytical structure. Consider the second order factorization,

1

1

2 εT eεV e

2 εT = exp ε

e

(T + V ) +
h

1
24

ε2([T, [V, T ]]

2[V, [T, V ]]) + O(ε4)

−

.

i

This is just a general operator equality which follows from the Baker-Campbell-Hausdorﬀ (BCH) formula. In the
present context, this equlity tells us that the second-order factorization on the LHS deviates from the exact evolution
operator expε(T +V ) by error terms which are the double commutators on the RHS. However, for the ordinary harmonic
oscillator Hamiltonian (1.4) with a constant spring constant k = ω2, one can easily verify that

[V, [T, V ]] =

2ω2V,

[T, [V, T ]] =

2ω2T.

−

−

Thus the error terms can be re-expressed in terms of the original operator T and V and be moved back to the LHS
to yield,

2 + 1

24 ω2ε2

eε( 1

)T eε(1

−

1

6 ω2ε2

)V eε( 1

2 + 1

24 ω2ε2

)T = eε(T +V +O(ε4

)).

This means that the LHS is now a fourth-order algorithm for solving the harmonic oscillator. Because of the funda-
mental identities (3.2) and (3.3), all higher order commutators for the harmonic oscillator can be subsummed back to
T and V yielding the exact factorization26

where the “edge” coeﬃceint CE and the “middle” coeﬃcient CM are given by

eεCE T eεCM V eεCE T = eε(T +V ),

CE =

1
cos(ωε)
−
ωε sin(ωε)

and CM =

sin(ωε)
ωε

.

eε(T +V ) = eεCE V eεCM T eεCE V .

↔

The above discussion only depends on the abstract commutator relations (3.2) and (3.3), and is independent of the
speciﬁc form of the operator T and V . Thus by interchanging T

V , we can also factorize exactly,

3

(2.10)

(2.11)

(2.12)

(3.1)

(3.2)

(3.3)

(3.4)

(3.5)

(3.6)

(3.7)

To solve the time-dependent harmonic oscillator, one has to replace T

T everywhere. It is easy to verify that for

any two time-dependent functions W (t) and V (t),

→

e

[V (t), [D, W (t)]] = 0.

Hence, the commuatator (3.2)

remains proportional to V . However,

e

[V, [

T , V ]] = [V, [T, V ]] = 2f (t, E)V

T , [V,
[

T ]] = 2f (t, E)T + 2[T,

V ]

∂
∂t

∂2
∂t2 V

−

e

e

T . This means that one can still retain the commutator [V, [

T , V ]] = [V, [T, V ]] and
bears no simple relationship to
move it back to the LHS, but in order to have a fourth-order algorithm, one must eliminate the commutator [
T ]]
by more elaborated factorization schemes. This coincides precisely with the way forward symplectic algorithms are
e
derived12,14,28. For example, the simplest fourth-order forward factorization scheme12,28 4B for evolving the system
forward for time ε is

T , [V,

e

e

e

where a = 1

2 (1

1
√3

), b = 1
√3

, a′ = a + b = 1

2 (1 + 1
√3

−

), and the eﬀective potential operator is given by

This results in the use of an eﬀective time-dependent force

which is no more diﬃcult to evaluate than the original. Factorization scheme (3.11) translates into the following
fourth-order algorithm for solving the time-dependent harmonic oscillator:

(4)

B (ε) = eaε
T

T eε 1
= eaεT eε 1
e

2 V ∗

2 V ∗

2 V ∗
T eε 1
T ,
eaε
ebε
2 V ∗
(t+a′ε)ebεT eε 1
e
e

(t+aε)eaεT ,

V ∗(t) = V (t) +

(2

√3)ε2[V (t), [

T , V (t)]]

1
24

(2

1
12

=

1 +
h

−
√3)ε2f (t, E)
i

−

e
V (t).

F ∗(t, E) = [1 +

1
12

(2

√3)ε2f (t, E)
f (t, E)q,
i

−

q1 = q0 + aε p0

p1 = p0 +

εF ∗(t + aε)q1

q2 = q1 + bε p1

p2 = p1 +

εF ∗(t + a′ε)q2

q3 = q2 + aε p2

1
2

1
2

The last numbered p and q are the updated values. In the present context, since q is the wave function and p is
only an ancillary variable, we will be interested only in algorithms that begins and ends with q. These position-type
algorithms make full use of force evaluations at intermediate time to update the ﬁnal position. As will be discuss in
the next Section, this point is important for Killingbeck’s method of iterating the last position q(0, E) to zero.

In general, the commutator

[V, [T, V ]] = 2Fj

∂Fi
∂qj

∂
∂pi

=

F
2)
i(
|
|

∇

∂
∂pi

produces a force which is the gradient of the square of the original force. For the 1D harmonic oscillator, this is simply
∂(f q)2/∂q = 2f 2q. By incorporating the force gradient, algorithm 4B (3.14) is fourth-order with only two evaluations
of the eﬀective force (3.13).

For three force evaluations, one can use algorithm 4C12:

(4)
C (ε)
T

≡

1

6 εT e

e

3

8 εV +α 1

192 ε3U e

1

3 εT e

1
4 εV +(1

2α) 1

192 ε3U e

1

3 εT e

3

8 εV +α 1

192 ε3U e

1

6 εT ,

−

(3.16)

4

(3.8)

(3.9)

(3.10)

(3.11)

(3.12)

(3.13)

(3.14)

(3.15)

≡

where U
[V, [T, V ]]. One is free to distribute the commutator term symmetrically via α without aﬀecting its
fourth-order convergence. The three obvious choices are α = 0, 3/8, 1/2. The ﬁrst and the last case concentrate the
gradient term at the center and at the two sides respectively. The second case distributes the gradient term in the
same proportion as the original force so that the same eﬀective force

F ∗(t, E) = [1 +

1
96

ε2f (t, E)
f (t, E)q,
i

is evaluated at three diﬀerent times. This is a direct generalization of algorithm 4B. We shall refer to these three
variants as 4C, 4C ′ and 4C ′′. For any speciﬁc application, one can ﬁne-tune α to minimize, or even eliminate, the
algorithm’s fourth-order step-size error. We shall refer to this optimized case as 4Copt. Other forward, or just gradient
based algorithms, can be found in12,14,22,23,24.

IV. KILLINGBECK’S BACKWARD ITERATION

Killingbeck’s method27 for solving the eigenvalue-function pair requires no wave function matching and can be highly
automated. It consists of two key steps: 1) backward integration to ensure numerical stability, and 2) quadratic energy
convergence via Newton-Ralphson iterations. One begins with an initial guess of the eigenvalue E(0) and chooses a
large time value T (large R in the original problem) to set q(T ) = 0 and p(T ) = p
is an arbitrary, but
small number. One then iterates the algorithm, such as (3.14), backward in time to t = 0. (In practice, it may be
simpler to run the algorithm forward in time and change the potential from V (t) to V (T
t).) If E is a correct
eigenvalue, then it must satisfy the eigencondition

, where p

−

∞

∞

Thus the eigenvalue E is a root of the above equation and can be solved by Newton-Ralphson iterations:

Killingbeck suggested that the derivative q ′(0, E) = ∂q(0, E)/∂E, which obeys,

q(0, E) = 0.

E(n+1) = E(n)

q(0, E(n))
q ′(0, E(n))

.

−

d2q ′(t)
dt2 = f (t, E) q ′(t)

−

2q(t),

can be solved simultaneously with q(t), i.e., diﬀerentiating any algorithm, such as (3.14), line by line with respect to
E. The resulting algorithm can be iterated at the same time to determine both q(0, E) and q ′(0, E) simultaneously
so that (4.2) can be updated directly. By re-running the algorithm with the updated energy, the procedure can be
repeated until convergence. The convergence is quadratic in the number of iterations. The converged eigenvalue
(and eigenfunction) will deviate from the exact value in powers of εn depending on the order of the algorithm used.
In solving the radial Schr¨odinger equation, t = 0 (i.e., r = 0) is the absolute boundary and f (t, E) is not deﬁned
for t < 0. Thus in applying Killingbeck’s method, one must not use any algorithm which evaluate the force at an
intermediate time greater than t + ε.

V. RESULTS FOR SINGULAR POTENTIALS

One important application of solving the radial Schr¨odinger equation is in atomic (e.g., density functional) calcu-

lations, where the dominant interaction is the Coulomb potential

V (r) =

1
r

.

−

As a prototype test case, we show the convergence of various algorithms in solving for the ground state of (5.1) in
12. For an
Figure 1. We use T = 26 (R = 26); beyond T = 25, there is no change in the eigenvalue on the order of 10−
initial guess of E(0) =
0.6, the Killingbeck iteration converges to 12 decimal places in 9 iterations or less. In most
cases, once a good guess is found, only a few iterations are necessary.

−

It is well known that when the Numerov (N) algorithm1 is used in Killingbeck’s method, the Coubomb ground
state only converges quadratically29. While the reason for this is understood30 and a simple remedy is available31,

5

(3.17)

(4.1)

(4.2)

(4.3)

(5.1)

6

most of the self-starting fourth-order algorithms used here suﬀered no such order reduction. Most can be well-ﬁtted
E0 = cε4. RKN and RK are the three and four force-evaluation Runge-Kutta-Nystrom
by the power law E(ε)
and Runge-Kutta algorithms6, respectively. FR is the Forest-Ruth32 symplectic algorithm which uses three force-
evaluations. This is the ﬁrst fourth-order symplectic algorithm found and is well known for its relative large error.
M is McLachlan’s improved fourth-order algorithm33 which uses four force-evaluations. BM is Blanes and Moan’s
latest34 reﬁned fourth-order algorithm which uses six force-evaluations.

−

FR, M and BM are examples of conventional symplectic algorithms which have negative intermendiate time-steps.
As shown in Figure 1, algorithm 4B, which use only two evaluations of the eﬀective force, outperforms all the
aforementioned algorithms except BM regardless the number of force-evaluation. OMF18, OMF29, and OMF36 are
Omelyan, Mryglod and Folk’s listed24 fourth-order algorithms 18, 29 and 36. These are gradient algorithms, similar
to 4B and 4C ′, which use three, four, and ﬁve eﬀective force evaluations, respectively. As α is varied from 0 to 0.5,
the error of the general 4C algorithm changes from negative to positive. At α = 0.49, the error curve resembles that of
BM. At the optimal value of α = 0.41, the fourth-order error should have been nearly eliminated with the algorithm
showing sixth-order convergence. The fact that it does not will be discussed in the next section. We ﬁtted all the
E0 = cεn to verify their order of convergence. All can be
results in Figure 1 via a power-law of the form E(ε)
4.5. Why algorithm 4B
well-ﬁtted with n = 4 except 4B and 4Copt at α = 0.41. For 4B, n
should suﬀer such an order reduction is not understood. It is possible that for 4B, its power-law behavior only sets
in at smaller ε. The case of 4Copt will be discuss in the next section.

3.5 and for 4Copt, n

≈

≈

−

Since algorithm OMF29 uses four eﬀective force evaluations, one can run algorithm 4B twice at the half the
time step size. Thus one should compare OMF29 with 4B(ε/2), or OMF29(2 ε) with 4B(ε). Thus relative to the
computational eﬀort of 4B(ε), one should compare 4C ′(1.5 ε), OMF18(1.5 ε), OMF29(2 ε), OMF36(2.5 ε) and BM(3 ε).
This comparison is shown in Figure 2. In this equal eﬀort comparison, algorithm 4B’s fourth order error is as small,
if not smaller than all the other gradient algorithm’s error. This illustrates the case that eﬃciency is not necessarily
enhanced by increasing the number of force evaluations. Also, all gradient algorithms have errors smaller than that
of BM despite fewer force evaluations. We conclude that in solving the Coulomb ground state, the eﬃciency of
algorithms 4B and 4C ′ is unsurpassed by any other algorithms except by the tunable 4C algorithm.

In the ﬁrst column of Table I, we list the energy obtained by all the algorithms at ε = 0.01 weighted by their number
of force evaluations. Algorithm 4B and 4C ′ indeed turn in the best result and are outperformed only by 4Copt at
α = 0.41. For more accurate results, one can just reduce ε.

As a more stringent test of our algorithms and Killingbeck’s method, we next consider the spiked harmonic oscillator

(SHO) with potential

V (r) =

1
2 (cid:18)

r2 +

λ
rM (cid:19)

.

(5.2)

For extensive references and discussion on SHO, see Refs.35,36,37,38. Figure 3 shows the convergence of the ground
state energy for the well studied case36,37,38 of M = 6 with λ = 0.001. For T = 10 and a reasonable initial guess of
E(0) = 1.5, only ﬁve or less iterations are needed for the energy to converge to 12 decimal places. For such a singular
potential, the convergent step size has to be much smaller, but surprisingly, only a magnitude smaller. Despite the
high degree of singularity, nearly all algorithms remained fourth order and none is down graded to lower order. At
a glance, all gradient based algorithms converge better than non-gradient algorithms. Even BM is no better than
algorithm 4C ′. Since 4C and 4C ′′ have errors of opposite sign, one can again vary α to minimize the fourth order
error. The optimized algorithm at α = 0.22 converges better than all other algorithms regardless of the number of
force evaluations and can be best ﬁtted by a ﬁfth order power law.

To compare the eﬃciency of gradient algorithms, we again normalize each algorithm to the computation eﬀort
of 4B. In Figure4, we plot the convergence curve of 4B(ε), 4C ′(1.5 ε), OMF29(2 ε) and OMF36 (2.5 ε). The solid
E0 = cε4 which goes through 4C ′’s result with c = 16.7. The other three
line is the fourth order monomial E(ε)
algorithms can be ﬁtted with the dotted line with c = 20.0. Thus all gradient algorithms are essentially similar, with
4C ′ marginally better. Again, algorithms OME29 and OME36, which use four and ﬁve eﬀective force evaluations
with complex numeric coeﬃcients, are not more eﬃcient than the simpler algorithms 4B and 4C ′ with analytical
coeﬃcients.

−

At ε = 0.001, the weighted result of each algorithm is given in the second column of Table I. All are in excellent
agreement with the value found in the literature36,37,38. At this step size, only gradient algorithms are accurate to 10
or more decimal places. For even greater accuracy, one can simply reduce ε.

The algorithms are equally eﬀective in the case of M = 4 and λ = 0.001. This is shown in Figure 5. All algorithms
showed fourth order convergence, except for 4Copt, which can be better ﬁtted with a ﬁfth order power-law. Their
energy values at ε = 0.001 are listed in the third column of Table I. The optimized 4C algorithm is accurate to 9
decimal places. Note that once algorithm 4C is optimize for M = 6, it can also be used for M = 4. The change in
α’s value is slight.

7

(6.1)

(6.2)

In the most diﬃcult, “supersingular” case of M = 5/2, with λ remained small at 0.001, the power-law behavior
5. This is shown in Figure 6. (If λ were not too small, such as 0.1 or 0.01, the power-law
seems to require ε < 10−
behavior would remain observable in the range of ε considered.) The energy obtained at ε = 0.0002 is listed in the
fourth column of Table I. The variable 4C algorithm uses α = 0.23 inherited from the M = 4 case. All algorithms are
less eﬃcient in dealing with this “supersingular” case, but gradient algorithms can still maintain an 8-digit accuracy.

In general, if

A is a left-right symmetric approximation of the short time evolution operator e ε(T +V ),
T

VI. HIGHER ORDER ALGORITHMS

A =

T

N

Yi=1

etiεT eviεV = e εHA ,

such that

N
i ti = 1 and

N
i vi = 1, then the approximate Hamiltonian operator is of the form

P

P
HA = T + V + ε2

eT T V [T 2 V ] + eV T V [V T V ]

+ ε4

eT T T T V [T T 3 V ] + eV T T T V [V T 3 V ]

(cid:0)

(cid:1)

(cid:16)
+ eT T V T V [T T V T V ] + eV T V T V [V T V T V ]

+ . . . ,

(cid:17)

≡

where eT T V , eV T T T V etc., are coeﬃcients speciﬁc to a particular algorithm and where we have used the condensed
commutator notation [T 2V ]
[T, [T, V ]], etc.. Symmetric factorizations give rise to time-reversible algorithms and
have only even-order error terms. For a constant k = ω2, the fundamental identity (3.3) implies that [T T 3V ] = 0
and [V T 3V ] = 0. This crucial simpliﬁcation is no longer true in the time-dependent case when T is replaced by
T . From this perspective, one can understand why the ability to integrate the time-independent harmonic oscillator
exactly does not help in solving the time-dependent case. Exponentially or sinusoidally ﬁtted algorithms are therefore
e
In the time-dependent case, the problem is fundamentally diﬀerent because some
not necessarily more eﬃcient.
commutators no longer vanish. Note that the commutators

[V

T V

T V ] = 4f 2(t)V

(6.3)

can be moved back to the LHS. However the saving here is marginal since this error term can be easily eliminated by
incorporating more gradient terms [V T V ] in the factorization process.

It has been shown39 that in order to derived a general sixth-order forward algorithm, one must retain both [V T V ]
and [V T 3V ] in the factorization process. Unfortunately, since [V T 3V ] cannot be evaluated easily, there is currently no
practical sixth-order forward algorithm. However, Omelyan, Mryglod and Folk24 have derived a number sixth-order
gradient based, but non-forward, algorithms of the form

e

e

(6)
B (ε)
T

≡ · · ·

eε(v0V +ε2u0U)eεt1T eε(v1V +ε2u1U)eεt2T eε(v2V +ε2u2U)eεt3T .

(6.4)

Since the factorization is left-right symmetric, we only list the operators from the center to the right. These sixth-order
algorithms all require a mixture of ﬁve force or eﬀective force evaluations. Figure 7 shows the convergence of four of
their position-type, six-order algorithms OMF40, OMF41, OMF43 and OMF45 when solving the Coulomb potential.
None exhibited sixth order convergence. The best is OMF45, which converges with power 4.5, same as the optimized,
supposedly sixth-order algorithm 4Copt with α = 0.41. Why these sixth-order algorithms are so down-graded in the
Coulomb case is not understood.

In Figure 8, we compare all algorithms on an equal eﬀort basis as discussed earlier. In this case, the optimized

fourth-order 4C algorithm has the smallest error, even when compared with OMF’s sixth-order algorithms.

In Figure 9, we show the convergence of these four sixth-order algorithms in solving for the ground state energy
of the spiked harmonic oscillator with M = 6 and λ = 0.001. All OMF algorithms can now be well-ﬁtted with sixth
order power-laws as indicated by solid lines.
In the case of OMF40 and OMF41, the “glitch” in the convergence
curve near ε = 0.011 is real. The convergence curve for these two algorithms contains a singular term of the form
0.011. Why only algorithms OMF40 and OMF41 exhibit such a singular

0.011), which blows up near ε

1/(ε

≈
behavior is also not understood.

−

≈

In Figure 10, we compare these gradient algorithms in an equal eﬀort basis. The convergence range of sixth-order
algorithms are not longer than those of fourth-order algorithms. For ε >
0.002, the optimized fourth-order algorithm
∼
4C with α = 0.22 has smaller errors than all the sixth-order algorithms. However, for very high accuracy, sixth order
algorithms are better when ε is very small.

VII. CONCLUSIONS

8

In this work, by regarding the radial Schr¨odinger equation as a classical time-dependent force problem, we have
shown that the entire literature of symplectic integrators can be used to ﬁnd its solution. Among symplectic inte-
grators, factorized algorithms are favored because Suzuki’s rule can be applied easily to solve the time-dependent
force problem. Among factorized algorithms, gradient or forward algorithms are particularly suited because they
take advantage of the harmonic character of the Schr¨odinger equation. We demonstrated the unique eﬀectiveness
of fourth-order gradient symplectic algorithms in solving the radial Schr¨odinger equation via Killingbeck’s backward
iteration. Even for very singular potentials, these algorithms are highly eﬀective in computing the eigenvalue-function
pair. There is also no diﬃculty in obtaining excited states. These gradient algorithms can form the core basis for
solving non-linear Schr¨odinger equations such the Hartree-Fock and the Kohn-Sham equation. However, due to the
unique identiﬁcation of the one-dimensional spatial coordinate as time, the current method does not appear to be
generalizable to higher dimension for solving the general Schr¨odinger equation in two- or three-dimension.

Among gradient algorithms, algorithm 4C with a tunable parameter α is most eﬃcient in solving a variety of
diﬀerent potentials. Despite the fact that there are more complex fourth or sixth-order algorithms which use more
eﬀective force evaluations, none are really better than 4C. More force evaluation does not necessarily enhance the
eﬃciency of an algorithm, specially in solving the radial Schr¨odinger equation.

In solving the Coulomb potential, some gradient algorithms are down-graded to lower order while others are not.
Even more surprising is the fact that none of the sixth-order algorithm exhibited sixth-order convergence in the range
of ε considered. These ﬁndings are not understood and should be studied further.

By regarding the radial Schr¨odinger equation as a classical dynamical problem, one can now use the same set of

symplectic algorithms for solving both classical and quantum mechanical problems.

This work was supported in part, by a National Science Foundation grant (to SAC) No. DMS-0310580 and ONR

grant No. N00014-04-1-0336 to Marlan Scully.

Acknowledgments

REFERENCES

1 D. R. Hartree, The Calculation of Atomic Structures, Pergamon, London, New York, 1957.
2 R. Chen, Z. Xu, and Lan Sun, Phys. Rev. E 47, 3799 (1993).
3 A. Raptis and A. C. Allison, Comp. Phys. Comm. 14, 1 (1978).
4 T. E. Simos, IMA J. Numer. Anal. 21, 919 (2001).
5 H. Van de Vyver, Comp. Phys. Comm. 166, 109 (2005).
6 R. H. Battin An Introduction to the Mathematics and Methods of Astrodynamics, Reviesed Edition, AIAA, 1999.
7 A. J. Dragt and J. M. Finn, J. Math. Phys. 17, 2215 (1976)
8 H. Yoshida, Celest. Mech. 56, 27 (1993).
9 R. I. McLachlan and G. R. W. Quispel, Acta Numerica, 11, 241 (2002).
10 E. Hairer, C. Lubich, and G. Wanner, Geometric Numerical Integration, Springer-Verlag, Berlin-New York, 2002.
11 B. Gladman, M. Duncan, and J. Candy, Celest. Mech. Dyn. Astron. 52, 221 (1991).
12 S. A. Chin, Phys. Lett. A 226, 344 (1997).
13 S. A. Chin and D. W. Kidwell, Phys. Rev. E 62, 8746 (2000).
14 S. A. Chin, and C. R. Chen, Cele. Mech. and Dyn. Astron. 91, 301 (2005)
15 S. Scuro and S. A. Chin, Phys. Rev. E 71, 056703 (2005).
16 X.S. Liu, X.Y. Liu, Z.Y. Zhou, P.Z. Ding and S.F. Pan, Int. J. Quant. Chem 79, 343 (2000).
17 Z. Kalogiratou, Th. Monovasilis and T.E. Simos, J. Comput. Appl. Math. 158, 83 (2003).
18 J. Wench, M. D¨ane, W. Hergert and A. Ernst, Comp. Phys. Comm. 160, 129 (2004).
19 D. Baye, G. Goldstein and P. Capel, Phys. Lett. A 317, 337 (2003)
20 G. Goldstein and D. Baye, Phys. Rev. E 70, 056703 (2004).
21 M. Suzuki, Proc. Japan Acad. Ser. B, 69, 161 (1993).
22 S. A. Chin and C. R. Chen, J. Chem. Phys. 117, 1409 (2002).
23 I. P. Omelyan, I. M. Mryglod and R. Folk, Phys. Rev. E 66, 026701 (2002).
24 I. P. Omelyan, I. M. Mryglod and R. Folk, Comput. Phys. Commun. 151, 272 (2003)

9

TABLE I: Equal computational eﬀort comparison of all fourth order algorithms.

′

Coulomb
ε = 0.01

SHO(M=4)
ε = 0.001

SHO(M=6)
ε = 0.001
-0.49999999968 1.63992791294 1.53438158386
-0.49999973551 1.63992789976 1.53438108257
-0.50000000543 1.63992791316 1.53438159696
-0.50000000020 1.63992791294 1.53438158417
-0.50000000005 1.63992791296 1.53438158529
-0.49999999943 1.63992791294 1.53438158351
-0.49999996158 1.63992790762 1.53438117625
-0.50000000924 1.63992791131 1.53438145329
-0.49999999952 1.63992791294 1.53438158387
-0.49999999967 1.63992791294 1.53438158389
-0.49999999791 1.63992791269 1.53438156400
“Exact”36,37,38 -0.50000000000 1.63992791296 1.53438158545

4B( ε)
FR(1.5 ε)
RKN(1.5 ε)
4C
(1.5 ε)
4Copt(1.5 ε)
OMF18(1.5 ε)
RK(2 ε)
M(2 ε)
OMF29(2 ε)
OMF36(2.5 ε)
BM(3 ε)

SHO(M=5/2)
ε = 0.0002
1.502005640
1.502005464
1.502005154
1.502005637
1.502005613
1.502005644
1.502004936
1.502005456
1.502005640
1.502005579
1.502005496

1.502005626

25 S. A. Chin, and C. R. Chen, J. Chem. Phys. 114, 7338 (2001).
26 S. A. Chin and E. Krotscheck, Phys. Rev. E 72, 036705 (2005).
27 J. Killingbeck, J. Phys. A 18, 245 (1985).
28 M. Suzuki, Computer Simulation Studies in Condensed Matter Physics VIII, eds, D. Landau, K. Mon and H. Shuttler

(Springler, Berlin, 1996).

29 H.W. Crater and G.W. Redden, J. Compt. Phys. 19, 236 (1975).
30 B. R. Johnson, J. Chem. Phys. 69, 4676 (1978).
31 E. Buendia and R. Guardiola, J. Compt. Phys. 60, 561 (1985).
32 E. Forest and R. D. Ruth, Physica D 43, 105 (1990).
33 R. I. McLachlan, SIAM J. Sci. Comput. 16, 151 (1995).
34 S. Blanes and P.C. Moan, as quoted in Ref.9, P.407, algorithm 1(a).
35 J. P. Killingbeck, G. Jolicard and A. Grosjean, J. Phys. A 34, L367 (2001).
36 A. K. Roy, Phys. Lett. A 321, 231 (2004).
37 V. C. Aguilera-Navarro, G. A. Est´evez and R Guardiola, J. Math. Phys. 31, 99 (1990).
38 E. Buend´ia, F. J. G´alvez and A Puertas, J. Phys. A 28, 6731 (1995).
39 S. A. Chin, Phys. Rev. E 71, 016703 (2005).

10

-0.499992

N

FR

-0.499996

OMF29

4B

OMF18

RK

4C’’

OMF36

α=0.49

BM

4C

α=0.41

M

RKN

4C’

 0.15
ε

 0.00

 0.05

 0.10

 0.20

 0.25

 0.30

0
E

-0.500000

-0.500004

-0.500008

FIG. 1: The convergence of various fourth order algorithms in solving for the ground state energy of the Coulomb potential.
Solid lines only connect data points to guide the eye. See text for identiﬁcation of each algorithm.

11

 3E-7

 2E-7

 1E-7

|

0
E

-
)
ε
(
E

|

4B

4C’

BM

OMF18

OMF29

OMF36

 0
 0.00

 0.01

 0.02

 0.03

 0.05

 0.06

 0.07

 0.08

 0.04
ε

FIG. 2: Equal computational eﬀort comparison of selected algorithms in solving for the Coulomb ground state energy. See text
for discussion.

12

 1.6399280

0
E

 1.6399279

RKN

4C

FR

M

4B

RK

α=0.22

4C’
BM

OMF36

OMF29

4C’’

OMF18

 0.010
ε

 1.6399278

 0

 0.005

 0.015

 0.020

FIG. 3: The convergence of various fourth-order algorithms in solving for the ground state energy of the spiked harmonic
oscillation (5.2) with M = 6 and λ = 0.001. Same plotting symbols are used to designate the same algorithm compared in
Figure 1.

13

 1.6399280

 1.6399279

0
E

 1.6399278

4B

4C’

OMF29

OMF36

 1.6399277

 0

 0.002

 0.004

 0.006

 0.008

 0.010

ε

FIG. 4: Equal eﬀort comparison of various fourth-order gradient symplectic algorithms in solving for the ground state energy
of the spiked harmonic oscillator of Figure 3.

14

 1.5343817

 1.5343816

0
E

RKN

α=0.23

OMF36

4C’

OMF29

4B

OMF18

BM

 1.5343815

FR

RK

M

 1.5343814

 0

 0.001

 0.002

 0.004

 0.005

 0.006

 0.003
ε

FIG. 5: The convergence of various fourth-order algorithms in solving for the ground state energy of the spiked harmonic
oscillation (5.2) with M = 4 and λ = 0.001.

15

 1.5020056

4C’

OMF18

OMF29

4B

M

0
E

 1.5020054

α=0.23

OMF36

FR

BM

RK

RKN

 1.5020058

 1.5020052

 1.5020050

 0

0.00005

 0.00010

 0.00020

 0.00025

 0.00030

 0.00015
ε

FIG. 6: The convergence of various fourth-order algorithms in solving for the ground state energy of the spiked harmonic
oscillation (5.2) with M = 5/2 and λ = 0.001. In this “supersingular” case, the power-law behavior is not observed within the
range of ε considered.

16

 

4B

OMF45

OMF41
OMF40

 

-0.499992

-0.499996

0

E

-0.500000

-0.500004

-0.500008

OMF43

4C

α=0.41

0.00

0.05

0.10

0.20

0.25

0.30

0.15
ε

FIG. 7: The convergence of various fourth and sixth order gradient algorithms in solving for the ground state energy of the
Coulomb potential. The solid lines here are ﬁtted power-laws of power 3.5 (4B), 4 (4C, OMF40, OMF41, OMF43), and 4.5
(4C with α = 0.41, OMF45). None is showing sixth order convergence.

17

-0.499998

-0.499999

0

E

-0.500000

-0.500001

-0.500002

OMF45

OMF41
OMF40

4B

 

α=0.41

 

ε

OMF43

4C

0.00

0.02

0.04

0.06

0.08

0.10

FIG. 8: Equal eﬀort comparison in solving for the ground state energy of the Coulomb potential. The OMF algorithms are
nominally sixth-order algorithms. However, their convergence is no better than that of algorithm 4C with α = 0.41.

18

1.6399280

0

E

1.6399279

4C

OMF45

OMF43

α=0.22

 

OMF41
OMF40

 

4B

ε

1.6399278

0.000

0.003

0.006

0.009

0.012

0.015

FIG. 9: The convergence of various fourth and sixth-order algorithms in solving for the ground state energy of the spiked
harmonic oscillator (5.2) with M = 6 and λ = 0.001. The solid lines are ﬁtted power-laws of power 4 (4B, 4C), 5 (4C with
α = 0.22), and 6 (all OMF algorithms).

1.6399280

1.6399279

0

E

19

OMF45

4C

OMF43

α=0.22

 

4B

 

ε

1.6399278

0.000

0.001

0.002

0.003

0.004

0.005

0.006

0.007

OMF41, OMF40

FIG. 10: Equal eﬀort comparison of various fourth and sixth-order gradient symplectic algorithms in solving for the ground
state energy of the spiked harmonic oscillator of Figure 9. The optimized algorithm 4C with α = 0.22 has the smallest error
for ε >∼ 0.002.

