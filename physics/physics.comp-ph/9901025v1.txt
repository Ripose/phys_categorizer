9
9
9
1
 
n
a
J
 
8
1
 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 
1
v
5
2
0
1
0
9
9
/
s
c
i
s
y
h
p
:
v
i
X
r
a

A new leapfrog integrator of rotational motion.

The revised angular-momentum approach

Igor P. Omelyan

Institute for Condensed Matter Physics, National Ukrainian Academy of Sciences,

1 Svientsitsky st., UA-290011 Lviv, Ukraine. E-mail: nep@icmp.lviv.ua

Abstract

A new algorithm is introduced to integrate the equations of rotational

motion. The algorithm is derived within a leapfrog framework and the

quantities involved into the integration are mid-step angular momenta

and on-step orientational positions. Contrary to the standard implicit

method by Fincham [Mol. Simul., 8, 165 (1992)], the revised angular

momentum approach presented corresponds completely to the leapfrog

idea on interpolation of dynamical variables without using any extrap-

olations. The proposed scheme intrinsically preserves rigid molecular

structures and considerably improves stability properties and energy

conservation. As is demonstrated on the basis of simulations for wa-

ter, it allows to reproduce correct results with extra large step sizes of

order 5 fs and 10 fs in the cases of energy- and temperature-conserving

dynamics, respectively. We show also that iterative solutions can be

avoided within our implicit scheme shifting from quaternions to the

entire rotation-matrix representation.

Keywords: Numerical algorithms; Long-term integration; Motion of rigid bod-

ies; Polyatomic molecules

1

I. INTRODUCTION

Computer experiment by the method of molecular dynamics (MD) is intensively

exploited in solving various tasks of chemical physics [1], biochemistry [2] and bi-

ology [3]. Among these are investigations of structure and dynamical properties

of molecular liquids which normally are treated as collections of rigid bodies. De-

spite the long prehistory of MD simulation, the development of eﬃcient and stable

algorithms for the integration of motion for such systems still remains an actual

problem.

Usually, molecular movements are simulated using constrained dynamics [4–7]

in which the phase trajectory of each atom is evaluated by Newton’s equations,

while the molecular structures are maintained by holonomic constraints to keep

intramolecular bond distances. Although the atomic-constraint technique can be

applied, in principle, to arbitrary polyatomics regardless of its chemical structure

and size, it appears to be very sophisticated to implement for some particular models.

For example, when there are more than two, three or four interaction sites per

molecule for linear, planar and three-dimensional bodies, bond lengths and angles

cannot be ﬁxed uniquely [5]. Systems of point molecules with embedded multipoles

present additional complexities too, because then the intermolecular forces cannot

easily be decomposed into direct site-site interactions. The limitation of constrained

dynamics is also caused by the fact that constraint forces are calculated at each time

step of the produced trajectory to balance all other potential forces in the system.

As the number of atoms in each molecule is increased, the number of constraints

raises dramatically, resulting in a decreased speed of computations. Moreover, to

reproduce the rigid molecular structure, cumbersome systems of nonlinear equations

must be solved iteratively. This can lead to a problem for molecules with light

hydrogen atoms or with linear or planar fragments.

In this case, the algorithm

converges rather slowly [8] already at relative small step sizes and, thus, it requires

a considerably portion of the computational time. Recently, it was shown that a

non-iterative calculation of constraint forces is possible [9], but this is practical only

for simple models in which the problem can be reduced to inversion of a banded

2

matrix [10, 11].

Some of the limitations just mentioned are absent in the molecular approach,

when the displacements of rigid bodies are analyzed in view of translational and

rotational motions. The translational dynamics is deﬁned by motion of molecular

centres of masses, whereas the orientations typically are expressed in terms of quater-

nions [12–14] or principal-axis vectors [13]. The straightforward parameterization

of orientational degrees of freedom, Euler angles, is very ineﬃcient for numerical

calculations because of singularities inherent in the description [12, 15, 16]. Mul-

tistep predictor-corrector methods were applied to integrate rotational motion in

early investigations [17–20]. As was soon established, the extra order obtained in

these methods is not relevant, because the forces existing in a real system are not

suﬃciently smooth. As a result, high-order schemes appear to be less accurate at

normal step sizes than low-order integrators, such as Verlet [21], velocity Verlet [22]

and leapfrog [23] ones. The last algorithms are also the most eﬃcient in view of

cost measured in terms of force evaluations. That is why, they are widely used in

diﬀerent approaches, for instance, in the atomic-constraint technique, to integrate

translational motion. These traditional algorithms were derived, however, assum-

ing that velocities and forces are coordinate- and velocity-independent, respectively.

In general, the time derivatives of orientational positions may depend not only on

angular velocities but also on these positions themselves resulting in the explicit

velocity-dependence of angular accelerations. Therefore, additional revisions are

necessary to apply the standard integrators to rotational motion.

In the atomic approach, the problem with the coordinate and velocity depen-

dencies is circumvented by involving fundamental variables, namely, the individual

Cartesian coordinates of atomic sites. Similarly, this problem can be solved within

the molecular approach choosing appropriate generalized coordinates in orientational

space. Ahlrichs and Brode proposed a method [24] in which the principal axes of

molecules are treated as pseudo particles and constraint forces are introduced to
maintain their orthonormality. Kol et al. considered the entire rotation matrix and

the corresponding conjugate momentum as dynamical variables [25]. The rotation

matrices can be evaluated within the usual Verlet or leapfrog frameworks, using

3

either recursive [24] or iterative [25] procedures, respectively. The recursive method

behaves relatively poor with respect to long-term stability of energy, whereas the

iterative procedure requires again, as in the case of constrained dynamics, to ﬁnd

solutions for systems of highly nonlinear equations. In general, the convergence of

iterations is not guaranteed and looping becomes possible even at not very large

step times. Examples for not so well behaved cases are models with almost linear or

planar molecules, when the diagonal mass matrices are hard to numerical inversion

since they have one or two elements which are very close to zero. The extension of

the atomic and pseudo-particle approaches to temperature-conserving dynamics is

also a diﬃcult problem, given that the rigid-reactions and temperature-constraint

forces are coupled between themselves in a very complicated manner.

A viable alternative to integrate the rigid-body motion has been provided by

explicit and implicit angular-momentum algorithms of Fincham [26–27]. This was

the ﬁrst attempt to adopt the leapfrog framework to rotational motion in its purely

classical treatment. The chief advantage of these rotational leapfrog algorithms is

the possibility to perform thermostatted simulations. However, even in the case of

a more stable implicit algorithm, the total energy ﬂuctuations in energy-conserving

simulations are too big with respect to those identiﬁed in the atomic-constraint

technique. Moreover, despite the fact that no constraint forces are necessary in

the rotation dynamics, the rigidness of molecules is not satisﬁed automatically, be-

cause the equations of motion are not solved exactly. Usually, the artiﬁcial rescaling

method [19, 27] is used to preserve the unit norm of quaternions and, as a conse-

quence, to ensure the molecular rigidity. Recently [28], it has been shown that the

crude renormalization can be replaced by a more rigorous procedure introducing

so-called numerical constraints. As a result, quaternion [28] and principal-axis [29]

algorithms were devised within the velocity Verlet framework. It was demonstrated

[29, 30] that these algorithms conserve the total energy better than the implicit

leapfrog integrator [27], but worse with respect to the atomic-constraint method,

especially in the case of long-duration simulations with large step sizes.

Quite recently, to improve the stability, a new angular-velocity leapfrog algorithm

for rigid-body simulations has been introduced [30]. The automatic preservation of

4

rigid structures and good stability properties can be related to its main advan-

tages. But a common drawback, existing in all long-term stable integrators on rigid

polyatomics, still remained here, namely, the necessity to solve by iteration the sys-

tems of nonlinear equations. Although such equations are much simpler than those

arising in the atomic and pseudo-particle approaches, the iterative solution should

be considered as a negative feature. Moreover, since the nonlinear equations are

with respect to velocities, it is not so simple matter to extend the angular-velocity

algorithm to a thermostatted version.

This study presents a modiﬁed formulation of the angular-momentum approach

within the leapfrog framework. Unlike the standard approach by Fincham [27], the

new formulation is based on more natural interpolations of dynamical variables and

it uses no extrapolation. The algorithm derived appears to be free of all the draw-

backs inherent in previous descriptions. It can easily be implemented to arbitrary

rigid bodies and applied to temperature-conserving dynamics. The integrator ex-

hibits an excellent energy conservation, intrinsically reproduces rigid structures and

allows to avoid any iterative procedures at all.

II. BASIC EQUATIONS OF MOTION

Let us consider a system of N interacting rigid bodies. According to the classical

approach, any movements of a body can be presented as the sum of two motions,

namely, a translational displacement of the centre of mass and a rotation about

this centre. The translational displacements in the system are expressed in terms

of the centre-of-mass positions ri and velocities vi, where i = 1, . . . , N, given in a

space-ﬁxed laboratory frame. The time evolution of such quantities can described by

writing Newton’s law in the form of two per particle three-dimensional diﬀerential

equations of ﬁrst order,

mi

= fi ,

= vi ,

dvi
dt

dri
dt

5

(1)

where fi is the total force acting on body i due to the interactions with all the rest

of particles and mi denotes the mass of the body.

A. Diﬀerent forms of the equations for rotational motion

To determine the rotational motion, one needs to use frames attached to each

body together with the laboratory system of coordinates. It is more convenient for

further consideration to direct the body-ﬁxed-frame axes along the principal axes of

the particle, which pass through its centre of mass. Then the matrix Ji of moments

of inertia will be diagonal and time-independent in the body-ﬁxed frame. We will use

the convention that small letters stand for the representation of variables in the ﬁxed

laboratory frame, whereas their counterparts in the body frame will be designated
by capital letters. The transitions E = Aie and e = A−1

i E between these both

representations of vectors e and E in the laboratory and body frames, respectively,

can be deﬁned by the 3

×
must satisfy the orthogonormality condition A+

3 time-dependent rotation matrix Ai(t). Such a matrix
i Ai = I = AiA+

i , or in other words
i , to ensure the invariance E+E = e+e of quadratic norms for vectors e
and E. In our notations A−1 and A+ are the matrices inversed and transposed to

i = A+

A−1

A, correspondingly, and I denotes the unit matrix.

Let ∆i be an arbitrary vector ﬁxed in the body. By deﬁnition, such a vector

does not change in time in the body-ﬁxed frame, d∆i/dt = 0. The angular velocity
ωi is introduced diﬀerentiating its counterpart δi(t) = A+
i (t)∆i in the laboratory
frame over time, dδi/dt = ωi×δi. Then, using the equality ωi×δi = W+(ωi)δi

and the orthonormality of Ai, the rate of change in time of the orientational matrix

can be expressed in terms of either laboratory ωi or principal Ωi = Aiωi angular

velocity as

where

dAi
dt

= AiW(ωi) = W(Ωi)Ai ,

W(Ωi) =

Ωi

Ωi
Y

Z −
Ωi
0
X

Ωi
X

0

Y −










0

Ωi
Z

−
Ωi










6

(2)

(3)

is a skewsymmetric matrix, i.e., W+(Ωi) =

W(Ωi), and Ωi

X, Ωi

Y and Ωi

Z are

−

components of vector Ωi.

From the orthogonormality condition it follows that maximum three indepen-

dent parameters are really necessary to describe orientations of a rigid body and to

evaluate the nine elements of the rotation matrix. However, the well-known param-

eterization of Ai in terms of three Eulerian angles [12] is unsuitable for numerical

calculations because of the singularities. In the body-vector representation [13, 24,

25, 29], all the elements of the rotation matrix Ai are considered as dynamical vari-

ables. These variables present, in fact, Cartesian coordinates of three principal axes

XY Z of the body in the laboratory frame. The alternative approach applies the

quaternion parameterization [4, 9] of rotation matrices,

A(qi) =










−

i + χ2
ζ 2
i

i + η2
ξ2

i −
2(ξiηi + ζiχi)
−
2(ηiζi −

ξiχi)

2(ζiχi −
ξiηi)
i + χ2
ζ 2
η2
ξ2
i
i −
i −

2(ξiζi + ηiχi)

2(ηiζi + ξiχi)
2(ηiχi −
i + ζ 2
η2
ξ2
i −

ξiζi)
i + χ2
i










−

,

(4)

(ξi, ηi, ζi, χi)+ is a vector-column consisting of four quaternion compo-

where qi ≡
nents. Using the normalization condition q+

i qi = ξ2

i + η2

i + ζ 2

i + χ2

i = 1, which

ensures the orthonormality of Ai(t)

A[qi(t)], the time derivatives of quaternions

−

≡

can be cast [13, 27, 30] in the form

dqi
dt

=

1
2

Ωi
Y

Ωi

Ωi

0

X −
Y Ωi
X
Ωi
Z

Z −
0

−













0

Ωi

−
Ωi

Ωi
Z
X Ωi
Y
Ωi

Y −

Ωi

Ωi
Z

X −

0

























ξi

ηi

ζi

χi













Q(Ωi)qi ,

≡

(5)

where Q(Ωi) is a skewsymmetric matrix again.

Expressions (2) and (5) are rotation-motion analogues of the second line of

Eq. (1) in the case of body-vector and quaternion representations, respectively.

They must be complemented by equations deﬁning the time evolution of angular

velocities. The simplest form of these equation is obtained for the angular momenta

li = A+

i Li of bodies in the laboratory frame, where Li = JiΩi are principal angular

momenta. The result is

dli
dt

= ki ,

7

(6)

where ki is the torque exerted on body i with respect to its centre of mass. The angu-

lar velocities in the body- or space-ﬁxed frames can easily be reproduced, whenever
they are needed, using the relations Ωi = J−1
ji = A+

i JiAi is the time-dependent matrix of moments of inertia in the labora-

i Aili and ωi = A+

i Ωi = j−1
i

li, where

tory frame. Another way lies in involving explicit equations for principal angular

velocities. Such equations, known also as Euler’s ones, can be derived substitut-

ing li = A+

i JiΩi into Eq. (6) and using equations of motion (2) for orientational

matrices. As a result, one obtains

dΩi
dt

= J−1
i

[Ki + W(Ωi)JiΩi] ,

(7)

where Ki = Aiki are the principal torques. Formally replacing the quantities Ωi, Ki

and Ji by ωi, ki and ji yields quite similar equations of motion for angular velocities

ωi in the laboratory frame.

It is worth remarking that the body-vector (Eq. (2)) and quaternion (Eq. (5))

representations as well as the angular-momentum (Eq. (6)) and angular-velocity

(Eq. (7)) approaches are completely equivalent between themselves from the math-

ematical point of view. For numerical evaluations, the preference must be given to

equations which allow to be integrated in the simplest manner with the greatest

precision and the best stability. In the present study we shall deal with more simple

equations of motion (6) for angular momenta in the laboratory frame rather than

with equations (7) for principal angular velocities. In such a way, diﬃculties with

the velocity-dependence of angular accelerations are excluded automatically. More-

over, we shall show that the angular-momentum approach allows to obviate iterative

solutions within a leapfrog framework choosing the entire-rotation-matrix elements,

instead of quaternions, as orientational variables. Thus, the body-vector represen-

tation should be considered as a more preferable method for such calculations.

III. THE REVISED ANGULAR-MOMENTUM APPROACH

In the case of translational motion, equations (1) can readily be integrated with

the help of the usual [23] leapfrog algorithm:

8

vi(t + h

2 ) = vi(t

h
2 ) + h fi(t)/m +

(h3) ,

−

ri(t + h) = ri(t) + h vi(t + h

O
(h3) ,

2 ) +

O

where h is the time increment, and forces fi(t) are evaluated using known spatial

coordinates ri(t) and Ai(t). The truncation local errors, appearing during such an

integration, are of order h3 in both coordinates and velocities. If an estimator of

vi(t) is required, for example to evaluate the total energy, the usual choice is

vi(t) =

1
2 hvi(t

h

2 ) + vi(t + h

2 )i +

(h2) ,

O

−

O

where interpolation uncertainties

(h2) are in the self-consistency with the second

order of global errors (one order lower than that for local errors) of the leapfrog

integrator (8).

A. Standard rotational leapfrog algorithm

For the rotational motion the time derivatives of orientational positions (Eqs. (2)

and (5)) depend not only on angular velocities but also on these positions them-

selves. This diﬃculty cannot be handled with a simple leapfrog scheme in which the

positions and velocities are known at diﬀerent times. Relatively recently, Fincham

[27] has proposed a solution to the problem by introducing an implicit leapfrog-like

algorithm. His method can brieﬂy be described as follows.

First, quite analogously to the case of translational-velocity evaluations (ﬁst line

of Eq. (8)), angular-momentum equations (6) are integrated as

li(t + h

2 ) = li(t

h
2 ) + h ki(t) +

−

(h3) .

O

At this stage the principal angular velocities Ωi(t) can be calculated using the rela-

tion

and the propagation

Ωi(t) = J−1

i Ai(t)li(t)

li(t) =

1
2 hli(t

−

h

2 ) + li(t + h

2 )i = li(t

h

2 ) + h

2 ki(t) +

−

(h2)

O

9

(8)

(9)

(10)

(11)

(12)

of angular momenta to on-step level of time.

Further, according to the leapfrog framework, the evaluation of orientational

coordinates must be performed as

Si(t + h) = Si(t) + h ˙Si(t + h

2 ) +

O

(h3) ,

(13)

where ˙Si ≡
H
≡

dSi/dt = H(Ωi)Si, and either Si ≡

Ai and H

W or Si ≡

≡

qi and

Q in the case of either entire-matrix or quaternion space, respectively. Note

that in the quaternion representation the orientational matrices Ai(t)

Ai[qi(t)]

≡

appear implicitly, and they are computed via relation (4) using quaternion values

qi(t). As far as the quantities Si and Ωi are not known at mid-step level t + h
2 ,
it was assumed to propagate the time derivatives of Si by means of the relation
˙Si(t + h

2 [ ˙Si(t) + ˙Si(t + h)] +

(h2), i.e.,

2 ) = 1

O

˙Si(t + h

2 ) =

1
2 hH(Ωi(t))Si(t) + H( ˜Ωi(t + h))Si(t + h)i +

O

(h2) ,

where

˜Ωi(t + h) = J−1

i Ai(t + h)˜li(t + h) .

Propagation (14) requires in its turn the knowledge of advanced angular momenta
˜li(t + h) which were predicted by writing

(14)

(15)

(16)

˜li(t + h) = li(t + h

2 ) + h

2 ki(t) +

(h2) .

O

In view of (14) and (15), relation (13) is an implicit system of equations with

respect to elements of Si(t + h), deﬁned through the auxiliary parameters li(t) and
˜li(t + h) which are not stored, but used to calculate the angular velocities Ωi(t)
and ˜Ωi(t + h) in the body frame. The system can be solved by iteration taking
S(0)
i (t + h) = Si(t) + hH(Ωi(t))Si(t) as the initial guess.

A thermostatted version is based on interpolations (9) and (12) of on-step trans-

lational velocities and angular momenta. Such interpolations are used in micro-

canonical simulations to evaluate the kinetic temperature T (t) = T (

vi(t), Ωi(t)

) =

1

N
i=1[mvi

2(t) +

lN kB P
ments of matrix Ji, kB is the Boltzmann’s constant and l = 6 denotes the number

P

X,Y,Z
α

2(t)], where J i
ααΩi
J i
α

XX, J i

Y Y and J i

ZZ are nonzero ele-

{

}

10

of degrees of freedom per particle (for linear bodies l = 5). This allows to syn-

chronize in time the temperature with the potential energy U(t)

and, therefore, to calculate the total energy E(t) = lN kB

}
{
2 T (t) + U(t) of the sys-
tem. In the temperature-conserving dynamics, on-step velocities and angular mo-

ri(t), Si(t)

U(

≡

)

menta are modiﬁed as v′

i(t) = β(t)vi(t) and l′

i(t) = β(t)li(t) using the scaling factor

β(t) = qT0/T (t), where T0 is the required constant temperature [27, 31]. The
velocity integration is completed by

v′
i(t + h

2 ) = [2

β−1(t)]v′

i(t) + h

2 fi(t)/m ,

l′
i(t + h

2 ) = [2

β−1(t)]l′

i(t) + h

2 ki(t)

−

−

(17)

(18)

h

which satisfy the interpolations v′
i(t + h
2 ) + l′
i(t) = J−1
Ω′

2 ) + v′
2 )] and the constant-temperature condition T (
i Ai(t)l′

i(t) = 1

2[vi(t

−

{

h

updated according to the same equations replacing vi(t+ h

i(t). Finally, the translational and orientational positions are
2 ) and li(t+ h
2 )

2 ) by v′

i(t+ h

i(t + h
i(t), Ω′
v′

2 )], l′
i(t)

2[li(t

i(t) = 1
−
) = T0, where

}

by l′

i(t + h

2 ).

B. Revised leapfrog algorithm

As has been established [29, 30], the rotational leapfrog algorithm, described in

the preceding subsection, exhibits rather poor long-term stability of energy with

respect to atomic-constraint integrators [4–7], for example. Moreover, it requires it-

erative solutions and does not conserve the unit norm and orthonormality of quater-

nions and orientational matrices. For this reason, a question arises how about the

existence of a revised scheme which is free of all these drawbacks and which has all

advantages of the standard approach. We shall show now that such a scheme really

exists.

First of all, one points out some factors which can explain bad stability properties

of the standard scheme. When calculating orientational variables, the Fincham’s

algorithm uses up three additional estimators, namely, the propagations for on-step
angular momentum li(t) (Eq. (12)) and mid-step time derivative ˙Si(t + h
2 ) (Eq. (14))
as well as the prediction (Eq. (16)) of angular momentum ˜li(t+h). Among these only

11

the ﬁrst two evaluations can be classiﬁed as interpolations which correspond to a

simple averaging over the two nearest neighbouring values. At the same time, the last

prediction (16) presents, in fact, an extrapolation that is, strictly speaking, beyond

the leapfrog framework.

Indeed, applying equation (12) for the next step time

t + h yields the following interpolated values li(t + h) = li(t + h
t
≡
angular momenta, which diﬀer from previously predicted ones, i.e., ˜li(t+h)
and, as a consequence, ˜Ωi(t + h)

2 ) + h

= Ωi(t + h). Extrapolations are commonly used in

2 ki(t + h) for
= li(t+h)

low-precision explicit schemes and they should be absent in more accurate implicit

integrators.

The main idea of the revised approach is to derive an implicit equation for

Si(t+h) reducing the number of auxiliary interpolations to a minimum and involving

no extrapolations. This can be realized starting from the same evaluation (10) for
mid-step angular momenta, but treating the time derivatives ˙Si(t + h
2 ) = H(Ωi(t +
h
2 ))Si(t + h
2 ) in a somewhat other way. As was mentioned earlier, these derivatives
are necessary to evaluate orientational positions (Eq. (13)), and they require the

knowledge of two per body quantities, namely, Ωi(t + h
to remark that since the advanced angular momenta li(t + h

2 ). It is crucial
2 ) are already known,
such two quantities are not independent but connected between themselves by the

2 ) and Si(t + h

relation

by writing

Ωi(t + h

2 ) = J−1

i Ai(t + h

2 )li(t + h

2 ) .

Then, as can be seen easily, the calculation of ˙Si(t+ h
one variable only, namely, Si(t+ h

2 ) is reduced to a propagation of
2 ). It is quite naturally to perform this propagation

Si(t + h

2 ) =

1
2 hSi(t) + Si(t + h)i +

O

(h2)

and the algorithm proceeds as follows

Si(t + h) = Si(t) + h H(Ωi(t + h

2 )) Si(t + h

2 ) +

(h3) .

O

Taking into account expressions (19) and (20), matrix equation (21) constitutes

an implicit system for unknown elements of Si(t + h). As for the usual scheme,

12

(19)

(20)

(21)

6
6
the system can be solved iteratively, putting initially S(0)

i (t + h) for Si(t + h) in all

nonlinear terms collected in the right-hand side of (21). Then the obtained values for

Si(t + h) in the left-hand side are considered as initial guesses for the next iteration.

The convergence of iterations is justiﬁed by the smallness of nonlinear terms which

are proportional to the step size h.

In such a way, we have derived a new leapfrog algorithm to integrate orienta-

tional degrees of freedom. It involves only one auxiliary interpolation (20) which

is completely in the spirit of the leapfrog framework. Moreover, this interpolation
concerns the most slow variables Si, rather than their more fast time derivatives ˙Si

and angular momenta li, thus, leading to an increased precision of the calculations.

When on-step temperature T (t) is required, for instance to check the energy conser-

vation, we can apply usual interpolation (12) of angular momenta and relation (11)

for velocities. It is worth underlining that, unlike the standard rotational integrator,

the angular-momentum interpolation errors are not introduced into trajectories (21)

produced by the revised algorithm at least within the energy-conserving dynamics.

The extension of the revised scheme to a thermostatted version is trivial. Using

the calculated temperature T (t) we deﬁne the scaling factor β(t) = qT0/T (t). The
i(t+ h
mid-step angular momenta li(t+ h
2 )
(see Eq. (18)) and substituted into Eq. (19) to continue the integration process

2 ) are then replaced by their modiﬁed values l′

according to equations (20) and (21).

Besides the evident simplicity of the revised approach with respect to the stan-

dard scheme, a very nice surprise is that the unit norm of quaternions and the

orthonormality of orientational matrices appear to be now by numerical integrals of

motion. Indeed, considering the quantity Ωi(t + h

2 ) as a parameter and explicitly
using coordinate interpolation (20), we can present Eq. (21) in the equivalent form

Si(t + h) = [I

h

2 Hi(t + h

2 )]−1[I + h

2 Hi(t + h

2 )]Si(t) ,

(22)

−

where Hi(t + h
2 )

2 )) and it is understood that I designates either three-
or four-dimensional unit matrix in the principal-axis or quaternion domain, respec-

H(Ωi(t + h

≡

tively. It can be checked readily that the matrix (I

Θ)−1(I + Θ) is orthonormal for

an arbitrary skewsymmetric matrix Θ+ =

Θ. As far as the matrix H is skewsym-

−

−

13

metrical by deﬁnition, the following important statement emerges immediately. If

initially the orthonormality of Si(t) is fulﬁlled, it will be satisﬁed perfectly for the

advanced matrices Si(t + h) as well, despite an approximate character of the inte-

gration process. Thus, no artiﬁcial or constraint normalizations and no recursive

procedures are necessary to conserve the rigidness of molecules.

The alternative presentation (22) may be more useful for iterating since it pro-

vides the orthonormality of Si(t + h) at each iteration step and leads to an increased

speed of the convergence. Because of this, we show Eq. (22) more explicitly,

qi(t + h) =

I [1

h2
16 Ω2
−
1 + h2

i (t + h
16 Ω2

2 )] + hQi
i (t + h
2 )

qi(t)

Gi(t, h) qi(t) ,

≡

(23)

Ai(t + h) =

I [1

−

h2
4 Ω2

i (t + h
1 + h2
4 Ω2

2 )] + hWi + h2
i (t + h
2 )

2 Pi

Ai(t)

Di(t, h) Ai(t) ,

(24)

≡

for the cases of quaternion and entire-rotation-matrix representations, respectively,
where expressions (3) and (5) for matrices Wi ≡
h
2 )) have been taken into account, Gi(t, h) and Di(t, h) are orthonormal evolution
matrices, and [Pi]αβ = Ωi
β denotes a symmetric matrix which, like Wi and Qi,

2 )) and Qi ≡

W(Ωi(t + h

Q(Ωi(t +

αΩi

is calculated using principal angular velocities (19). In view of the equalities W2
Pi −
exponential forms

i I, the evolution matrices can be cast also in the matrix-

i I and Q2

4 Ω2

i =

i =

Ω2

−

1

Gi(t, h) = exp[φiQi/Ωi]t+ h

,

2

φi = 2 arcsin

Di(t, h) = exp[ϕiWi/Ωi]t+ h

,

2

ϕi = arcsin

h

2 Ωi(t + h
2 )
i (t + h
16 Ω2
2 )

1 + h2

,

hΩi(t + h
2 )
i (t + h
4 Ω2
2 )

1 + h2

.

(25)

Then it becomes clear that the matrices Di and Gi deﬁne three- and four-

dimensional rotations on angles ϕi and φi in the laboratory frame and quaternion

space, respectively. In the ﬁrst case the rotation is carried out around the unit vec-
tor Ωi/Ωi|t+ h
perpendicular to all four orths of quaternion space.

, whereas in the second one it is performed around an orth which is

2

14

C. Avoidance of iterative solutions

Another excellent feature of the algorithm is that within the entire matrix rep-

resentation, equation (24) can be handled in a non-iterative way using so-called

quasianalytical solutions for mid-step angular velocities Ωi(t + h
ﬁrst perform a set of further transformations. Remembering that now Si ≡
Hi ≡
obtained equation by factor 2. Then using coordinate propagation (20) leads to

Wi, one adds the matrix Ai(t) to the both sides of Eq. (21) and divides the

2 ). To show this we
Ai and

Ai(t + h

2 ) = Ai(t) + h

2 W(Ωi(t + h

2 )) Ai(t + h

2 ) .

(26)

Multiplying Eq. (26) on the matrix J−1

i

from the left and additionally on the vector

li(t + h

2 ) from the right, and taking into account deﬁnition (19) yields

Ωi(t + h

2 ) = J−1

i Ai(t)li(t + h

2 ) + h

2 J−1

i W(Ωi(t + h

2 ))JiΩi(t + h

2 ) .

(27)

Therefore, the iterative problem is much simpliﬁed, because it is reduced to

ﬁnding solutions to three-dimensional vector equation (27) for three unknown com-

ponents ΩX, ΩY and ΩZ of Ωi(t + h

2 ) rather than to matrix equation (24) (or (21))
for nine unknowns elements of Ai(t + h). Equation (27) can be solved iteratively
again, choosing J−1

2 ) as the initial guess for Ωi(t + h

i Ai(t)li(t + h

2 ).

A next simpliﬁcation lies in the following. Let us rewrite equation (27) in the

explicit form

ΩX = θX + h̺XΩY ΩZ ,

ΩY = θY + h̺Y ΩZΩX ,

ΩZ = θZ + h̺Z ΩXΩY ,

(28)

Y Y −

ZZ)/(2J i
J i

XX), ̺Y = (J i

where ̺X = (J i
Y Y )/(2J i
J i
ZZ) =
J−1
i Ai(t)li(t + h
in the case of temperature-conserving dynamics. Unless J i

XX −
(̺X + ̺Y ), and θX,Y,Z are the components of known vector
i(t + h
2 )
ZZ, the

2 ) must be replaced by l′
= J i

2 ), keeping in mind that vector li(t + h

Y Y ), ̺Z = (J i

XX)/(2J i
J i

ZZ −

= J i

−

XX 6

Y Y 6

system of equations (28) appears to be linear and, therefore, it can easily be solved

exactly (see subsect. III. D, where speciﬁc models are described). Here, we consider

15

the most general case when all the principal moments of molecules are diﬀerent and

assume for deﬁniteness that J i

XX < J i

Y Y < J i

ZZ. Then the ﬁrst two unknowns ΩX

and ΩY are the most fast variables and they should be excluded from the iteration

to increase the convergence. Such an excluding indeed can be realized solving the

ﬁrst two equations of (28) with respect to ΩX and ΩY . The result is

ΩX =

θX + h̺XθY ΩZ
2
1 + h2ν2ΩZ

,

ΩY =

θY + h̺Y θXΩZ
2
1 + h2ν2ΩZ

,

(29)

̺X̺Y ≤
−

where 0 < ν2 =
Jαα > 0 and Jαα ≤
(α, β, γ) denote an array of three cyclic permutations of (X, Y, Z). In view of (29),

Jββ + Jγγ imposed on principal moments of inertia, where

1/4. The last inequalities follow from the requirements

only the third equation of system (28) really needs to be iterated with respect to

one variable ΩZ . Since ΩZ is the most slow quantity, a well convergence can be

guaranteed even for not so well normally behaved case as an almost linear body,

when J i

XX ≪

Y Y < J i
J i

ZZ.

Finally, one considers the question of how to obviate iterative solutions at all.

Substituting the result (29) into the third equation of system (28) and presenting the

Zth component of the angular velocity in the form ΩZ = s0 + δ yields the following

a0 + a1δ + a2δ2 + a3δ3 + a4δ4 + a5δ5 = 0

(30)

algebraic equation

with the coeﬃcients

h̺Z[θXθY ϑ− + h(̺Y θ2

X + ̺Xθ2

Y )s0] ,

Y )̺Z −

ν2s0[(5s0 −

4θZ)ϑ+ + 2hθXθY ̺Z]
}

,

2θZ + h̺ZθXθY + h2ν2s2

0(10s0 −

6θZ)] ,

(31)

θZ)ϑ2

h2

X + ̺Xθ2

+ −
(̺Y θ2

a0 = (s0 −
a1 = ϑ+ −
{
a2 = h2ν2[6s0 −
a3 = 2h2ν2[1 + h2ν2s0(5s0 −
a4 = h4ν4(5s0 −
h2ν2s2

2θZ)] ,

θZ) , a5 = h4ν4 ,

where ϑ± = 1

±

0. The equation (30) is ﬁfth order and the corresponding solu-

tions for Ωi

Z are independent on parameter s0, provided the unknown δ is precisely

determined. However, as is well known, only algebraic equations of fourth or less

order allow to be solved in quadratures.

16

The main idea of quasianalytical solutions consists in the fact that actual MD

simulations are performed with relative small values of the time step h. Then it is

necessary to choose the parameter s0 as a good prediction for ΩZ to be entitled to

ignore high-order terms in the left-hand side of Eq. (30). The simplest choice for

this can be found putting ΩXΩY = θXθY +

(h) in the right-hand side of the third

O

equation of system (28). As a result, one obtains

s0 = θZ + h̺ZθXθY

(32)

that represents the original value of ΩZ with second-order truncation errors, so that

δ =

(h2). It is easy to see that in this case the two last terms a4δ4 and a5δ5 in the

O

left-hand side of Eq. (30) behaves as

(h12) and

(h14), respectively. Taking into

O

O

account the smallness of h, such terms can merely be omitted without any loss of the

precision, because they involve uncertainties of order

(h12) into the solutions and

appear to be too small with respect to third-order truncation errors

(h3) inherent

O

O

initially in the algorithm.

Eq. (30) is now transformed to the third-order algebraic equation

a0 + a1δ + a2δ2 + a3δ3 =

(h12)

O

which can easily be solved analytically. The result is

δ1 =

δ2,3 =

1
3 a2/a3 + c
3 a2/a3 −

1

−
1
2[c

−

−

−

O

±

b/c +

(h12) ,

b/c

i√3(c + b/c)] +

(h12) ,

O

where

b = 1

2)/a2
a2
3 ,

9(3a1a3 −
c = (p + qb3 + p2)1/3,

p = 1

54(9a1a2a3 −

27a0a2

2a3

2)/a3
3 .

3 −

(33)

(34)

(35)

Among three solutions (34), only the ﬁrst one δ1 is real and satisﬁes the physical

boundary condition

h2 when h goes to zero (the other two solutions δ2,3 are purely

imaginary at h

0 and they tend to inﬁnity as

i/h).

∼ ±

Therefore, the desired Zth component of the angular velocity is

∼

→

17

ΩZ = s0 + δ1 .

(36)

The rest two components ΩX and ΩY are reproduced on the basis of equalities (29).

The obtained vector Ωi(t + h
2 )

≡

(ΩX, ΩY , ΩZ) is substituted into equation (24) to

perform the explicit evaluation for advanced orientational matrices Ai(t + h). This

completes the algorithm.

D. Implementations for particular models

There are two main classes of models for interacting rigid bodies, which most

frequently are applied in MD simulations. More realistic so-called interaction site

models can be related to the ﬁrst class. For these models, each ith body of the system

is considered as a molecule which in its turn is composed of Mi point interaction sites

(atoms). The rigid structure of molecules is completely deﬁned by time-independent

vector-positions ∆a

i (a = 1, . . . , Mi) of atom a within molecule i in the body frame,

whereas these positions in the laboratory frame are: ra

i (t) = ri(t) + A+

i (t)∆a

i . Using

easily be computed as fi =

the known site-site potentials uab

ij , the desired molecular forces and torques can
ri)×f ab
ij ,

N ;Mi,Mj
j(j6=i);a,b(ra

) and ki =

P

i −

N ;Mi,Mj
rb
ra
j(j6=i);a,b f ab
ij (
i −
j|
|
ij = ra
ij and rab
ij /∂rab

P
∂uab

respectively, where f ab
molecules (maxi;a,b |
model belonging this class is a system of point electro-dipoles. The molecular forces

0) with embedded multipoles. The most popular

rb
j. The second class is point

ij =
∆a

−
∆b

i | →

i −

i −

and torques caused by dipole-dipole interactions can be calculated using the relations
·rij)] and ki =

·rij) + µj(µi

·rij)(µj

·rij)

N
j(j6=i)

fi =

µi

P

N
j(j6=i)

1
r3
ij

µi

3
[rij{
r5
ij
×[ 3
r2
ij

rij(µj

5
r2
ij

·µj −
·rij)

P
the dipole moment of ith molecule.

−

(µi
}
µj], respectively, where rij = ri −

+ µi(µj

rj and µi denotes

Although the proposed algorithm can be implemented for arbitrary rigid mod-

els, some simpliﬁcations with respect to the general formulation are possible us-

ing special properties of the body. The simplest case is bodies with a spherical

distribution of mass, when all the moments of inertia are equal between them-

selves, i.e., when J i

XX = J i

Y Y = J i

Ji and, thus, Ji = JiI = ji. Then it

is more convenient to work with equations (2) for rotational matrices, presented

in terms of angular velocities ωi = j−1

i

li = li/Ji in the laboratory frame, i.e.,

ZZ ≡

18

with dAi/dt = AiW(ωi). The leapfrog trajectories for these equations are ob-

vious: Ai(t + h) = Ai(t)exp[ϕiWi(ωi)/ωi]t+ h
ϕi = arcsin[hωi/(1 + h2
4 ω2

i )]t+ h

.

2

2

, where ωi(t + h

2 ) = li(t + h

2 )/Ji and

For some particular models, the orientational part of the intermolecular potential

can be expressed using only unit three-component vectors ρi passing through the

centres of mass of molecules. The examples are point dipole interactions, when
ρi ≡
µi/µi, or when all force sites of the molecule are aligned along ρi, resulting in
torques which are perpendicular to ρi, i.e., ki·ρi = 0. If then additionally Ji = JiI
(for the last example this can be possible when forceless mass sites are placed in such

a way to ensure the spherical mass distribution), it is no longer necessary to deal

with orientational matrices or quaternions. In this case the equation for ρi looks as
dρi/dt = W+(ωi)ρi with the solution ρi(t + h) = exp[

ϕiWi(ωi)/ωi]t+ h

ρi(t).

2

−

For molecules with cylindric distribution of mass sites, when two of three of prin-

cipal moments of inertia are equal, the numerical trajectory can also be determined

in a simpler manner. Let us assume for deﬁniteness that J i

XX = J i

= J i

ZZ and

Y Y 6

= 0. Then arbitrary two perpendicular between themselves axes, lying in the

J i
ZZ 6
plane perpendicular to the Zth principal axis, can be considered initially as X- and

Y -th principal orths. Since now ̺Z = 0, the Zth component of the angular velocity

is found automatically, ΩZ = θZ. As in the general case, the two rest solutions ΩX

and ΩY of system (28) are calculated on the basis of Eq. (29) taking into account

that ̺Y =

̺X, whereas the orientational matrices are evaluated via Eq. (24).
XX = J i

A special attention must be paid for purely linear molecules when J i

−

=

Y Y 6

i (t)

J i
ZZ = 0 and each body has two, instead of free, orientational degrees of freedom.
The relative positions ra
i ρi(t) of all atoms within a linear molecule
can be expressed in terms of an unit vector ρi and besides ki·ρi = 0 one ﬁnds that
2) of the kinetic energy
[Li]Z = J i
2(J i
is also indiﬀerent to the Zth component Ωi

Z = 0. The rotational part 1

Z of the principal angular velocity. Such

ri(t) = ∆a

XXΩi
X

Y Y Ωi
Y

2 + J i

ZZΩi

−

a component causes irrelevant rotations of the molecule around ρi-axis and it does
not lead to any change of ra

i and the potential energy. It can be shown that the

angular-momentum approach allows to reproduce the correct time evolution of two-

dimensional unit vector ρi by the three-dimensional leapfrog rotation ρi(t + h) =

19

exp[ϕiWi(Ωi)/Ωi]t+ h
of Ωi(t + h

2

ρi(t) putting formally Ωi

0, where two other components

Z ≡

2 ) are ΩX = θX and ΩY = θY (this immediately follows from Eq. (28)).
Planar molecules do not present a speciﬁc case within our approach and they are

handled in the usual way as tree-dimensional bodies.

IV. NUMERICAL VERIFICATION OF THE ALGORITHM

The system chosen for numerical tests was the TIP4P model (M = 4) of water

[32] at a density of mN/V = 1 g cm−3 and a temperature of T = 298 K. Because of

the low moments of inertia of the water molecule and the large torques due to the

site-site interactions, such a system should provide a very severe test for rotational

algorithms. In order to reduce cut-oﬀ eﬀects to a minimum we have applied an inter-

action site reaction ﬁeld geometry [33] and a cubic sample with N = 256 molecules.

All runs were started from an identical well equilibrated conﬁguration. The MD sim-

ulations have been carried out in both energy-conserving (NVE) and thermostatted

(NVT) ensembles. The equations of rotational motion were integrated using the

standard quaternion integrator [27] and our revised leapfrog algorithm. As far as

water is usually [34] simulated in an NVE ensemble by the atomic-constraint tech-

nique [4, 5], the corresponding calculations on this approach and the angular-velocity

Verlet method [28] were performed for the purpose of comparison as well. All the

approaches required almost the same computer time per step given that near 97%

of the total time were spent to evaluate pair interactions.

The following thermodynamic quantities were evaluated: total energy, potential

energy, temperature, speciﬁc heat at constant volume, and mean-square forces and

torques. The structure of the TIP4P water was studied by determining the oxygen-

oxygen and hydrogen-hydrogen radial distribution functions (RDFs). Orientational

relaxation was investigated by evaluating the molecular dipole-axis autocorrelations.

Centre-of-mass and angular-velocity time autocorrelation functions were also found.

To reduce statistical noise, the measurements were averaged over 20 000 time steps.

In the case of NVE dynamics to verify whether the phase trajectories are pro-

duced properly, we applied the most important test on conservation of total energy

20

E of the system. The total energy ﬂuctuations

(E

= [
h

E

E

)2

]1/2/

− h

i

i

E

|h

i|

as func-

tions of the length of the simulations over 10 000 time steps are plotted in Fig. 1

(a)–(d) at four ﬁxed step sizes, h = 1, 2, 3 and 4 fs. Both principal-axis (the boldest

curves in subsets (a)–(d)) and quaternion representations were used to integrate the

equations by the revised leapfrog algorithm. It has been established that the func-

tions

corresponding to these representations are practically the same. For this

E

reason and to simplify the graph notations the results obtained within quaternion

variables are shown (as crosses) only in subset (d) of the ﬁgure.

As can be seen easily, the standard rotational leapfrog algorithm exhibits rel-

atively bad stability properties and conserves the energy rather poor even at the

smallest step size considered. It is worth remarking that investigating the system

during shorter time periods with small step sizes, for example over 1000 time steps

with h = 1 fs, one may come to very misleading conclusions on the energy con-

servation. A signiﬁcantly better pattern is observed for the angular velocity Verlet

integrator. However, the improvements in stability are quite insuﬃcient especially

for moderate and large step sizes (h

3 fs, subsets (c)–(d)). Finally, we can talk

≥

about the best energy conservation and long-term stability for the atomic-constraint

scheme and the revised leapfrog algorithm which lead to virtually identical results.

It is necessary to emphasize that within the principal-axis representation, the

revised leapfrog trajectories were evaluated using the non-iterative quasianalytical

scheme. The exact solutions (by means of iterations of Eq. (28)) were computed too

to compare it with quasianalytical values. No deviation between both trajectories

has been found up to h = 10 fs. They diﬀered on each step by uncertainties of

order round-oﬀ errors, so that the quasianalytical hypothesis appears to be in an

excellent accord. At the same time, the quaternions converged at each step to a

relative tolerance of 10−10 in average from 6 to 14 iterations with varying the step

size from 2 fs to 6 fs.

We also tried to avoid iterative procedures for quaternion variables by applying

a hybrid leapfrog scheme when the quasianalytical solutions for mid-step angular

velocities are substituted directly into orthogonormal matrices for quaternion eval-

uation (23). However, the hybrid scheme leads to a signiﬁcant loss of the precision

21

(see the long-dashed curve in subset (d) of Fig. 1). This is so because equation (27)

for angular velocities was obtained on the basis of interpolation (20) for principal-

axis variables, i.e., when Ai(t + h

2[Ai(t) + Ai(t + h)]. Using these veloci-
ties in the quaternion space causes an inconsistency of such an interpolation with

2 ) = 1

the corresponding interpolation qi(t + h

2 [qi(t) + qi(t + h)] for quaternions
2 (Ai[qi(t)] + Ai[qi(t + h)]). Therefore, to follow rigorously
the leapfrog framework, the auxiliary mid-step angular velocities must be involved

since Ai[qi(t + h

2 ) = 1

= 1

2 )]

within the principal-axis representation exclusively.

No shift of the total energy and temperature was observed during the revised

leapfrog trajectories at h

5 fs over a length of 20 000 time steps. As is well

≤

known, to reproduce features of an NVE ensemble correctly, the ratio Υ =

/

E

U

of

the total energy ﬂuctuations to the corresponding ﬂuctuations

of the potential

energy must be within a few per cent. The following levels of

at the end of the

revised leapfrog trajectories have been obtained: 0.0016, 0.0066, 0.017, 0.030, 0.051

and 0.11 %. They correspond to Υ

0.29, 1.2, 3.0, 5.4, 9.1 and 20 % at h = 1, 2, 3,

≈

4, 5 and 6 fs, respectively, where it was taken into account that

0.56% for the

investigated system. The deviations in all the rest measured functions with respect

to their benchmark values (obtained in the atomic-constraint NVE simulations with

h = 2 fs) were in a complete agreement with the corresponding relative deviations

Υ in the total energy conservation. For example, the results of the revised leapfrog

algorithm at h = 2 fs were indistinguishable from the benchmark ones, whereas they

U

E

U ≈

diﬀered as large as around 5%, 10% and 20% with increasing the time step to 4 fs,

5 fs and 6 fs, respectively. However, the diﬀerences were much smaller than in the

case of the standard rotational integrator. We see, therefore, that step sizes of order

5 fs are still suitable for precise NVE calculations. Even a time step of 6 fs can be

acceptable when a great precision is not so important, for instance, to achieve an

equilibrium state.

What about the NVT simulations? It is well established [27, 35] that ther-

mostatted versions allow to perform reliable calculations with signiﬁcantly greater

step sizes than those used within the energy-conserving dynamics. To conﬁrm such

a statement, we have made NVT runs on the basis of our non-iterative revised

22

6
leapfrog algorithm (within principal-axis variables) and a thermostatted version of

the standard implicit integrator [27] of Fincham.

The oxygen-oxygen and hydrogen-hydrogen RDFs, calculated during the revised

leapfrog trajectories for three diﬀerent step sizes, h = 2, 8 and 10 fs, are plotted

in Fig. 2a by the curves in comparison with the benchmark result (open circles).

Note that the RDFs corresponding to h = 4 and 6 fs coincide completely with those

for h = 2 fs and they are not included in the graph. A similar behaviour of RDFs

was identiﬁed for the standard rotational integrator, but the results are somewhat

worse especially at h = 8 and 10 fs. No drift of the potential energy was observed

at h

10 fs and h < 6 fs for the revised and standard algorithms, respectively.

≤

From the above, we can conclude that the revised leapfrog integrator is suitable for

simulating even with huge step sizes of 10 fs, because then there is no detectable

diﬀerence in RDFs. Other thermodynamic quantities such as the centre-of-mass and

angular-velocity time autocorrelation functions appeared to be also close to genuine

values. Quite recently, it was shown [36] that the time interval of 10 fs should

be considered as an upper theoretical limit for the step size in MD simulations on

water. We see, therefore, that this limit can be achieved in practice using the revised

leapfrog algorithm.

The molecular dipole-axis time autocorrelation function is the most sensitive

quantity with respect to varying the step size. Such a function obtained within

the standard (S) and revised (R) schemes at ﬁve ﬁxed step sizes, h = 2, 4, 6, 8

and 10 fs, is presented in Fig. 2b. For h

6 fs the results of S- and R-schemes

≤

are indistinguishable between themselves. With increasing the step size to 8 fs or

higher we can observe a systematic discrepancy which is smaller in the case of the

R-scheme. Reliable results can be obtained here at time steps of h < 8 fs for both the

standard and revised schemes. However within the standard approach, the solutions

converged too slow already at h = 6 fs and they began to diverge at greater step sizes.

To perform the simulations in this case, special time-consuming transformations to

unsure the convergence have been applied. For the revised integrator which is free

of iterations, the computer time did not depend on the step size.

23

V. CONCLUSIONS

During last years there was a slow progress in the improvement of existing MD

techniques concerning the numerical integration of motion for systems with inter-

acting rigid bodies. We have attempted to remedy such a situation by formulating

a revised angular-momentum approach within the leapfrog framework. As a result,

a new integrating algorithm has been derived. The revised approach reduces the

number of auxiliary interpolations to a minimum, applies the interpolations to the

most slow variables and avoids any extrapolations. This has allowed to achieve the

following two signiﬁcant beneﬁts: (i) all ﬁnal expressions are evaluated explicitly

without involving any iterative procedures, and (ii) the rigidity of bodies appears

to be a numerical integral of motion. Another positive feature of the algorithm is

its simplicity and universality for the implementation to arbitrary rigid structures

with arbitrary types of interactions.

As has been shown on the basis of actual simulations of water, the proposed algo-

rithm exhibits very good stability properties and conserves the total energy in micro-

canonical simulations with the same precision as the cumbersome atomic-constraint

technique. In the case of temperature-conserving dynamics, reliable calculations are

possible with huge step sizes around 10 fs. Such sizes are very close to the upper

theoretical limit and unaccessible in usual approaches.

Acknowledgements. The author would like to acknowledge ﬁnancial support

by the President of Ukraine.

24

REFERENCES

[1] M. P. Allen and D. J. Tildesley, Computer Simulation of Liquids (Clarendon

Press, Oxford, 1987).

[2] D. H. Kitson and A. T. Hagler, ”Theoretical studies of the structure and molec-

ular dynamics of a peptide crystal”, Biochemistry, 27, 5246 (1988).

[3] M. Karplus and G. A. Petsko, ”Molecular-dynamics simulations in biology”,

Nature, 347, 631 (1990).

[4] J. P. Ryckaert, G. Ciccotti, and H. J. C. Berendsen, ”Numerical integration

of the Cartesian equations of motion of a system with constraints: Molecular

dynamics of n-alkanes”, J. Comput. Phys., 23, 327 (1977).

[5] G. Ciccotti, M. Ferrario, and J. P. Ryckaert, ”Molecular dynamics of rigid

systems in cartesian coordinates. A general formulation”, Mol. Phys., 47, 1253

(1982).

[6] H. C. Andersen, ”Rattle: a ‘velocity’ version of the shake algorithm for molec-

ular dynamics calculations”, J. Comput. Phys., 52, 24 (1983).

[7] B. J. Leimkuhler and R. D. Skeel, ”Symplectic numerical integrators in con-

strained Hamiltonian systems”, J. Comput. Phys., 112, 117 (1994).

[8] E. Barth, K. Kuczera, B. Leimkuhler, and R. D. Skeel, ”Algorithms for con-

strained molecular dynamics”, J. Comput. Chem., 16, 1192 (1995).

[9] J. Turner, P. Weiner, B. Robson, R. Venugopal, H. Schubele III, and R. Singh,

”Reduced variable molecular dynamics”, J. Comput. Chem., 16, 1271 (1995).

[10] S. Miyamoto and P. A. Kollman, ”SETTLE: An analytical version of the

SHAKE and RATTLE algorithm for rigid water models”, J. Comput. Chem.,

13, 952 (1992).

[11] N. Grønbech-Jensen and S. Doniach, ”Long-time overdamped Langevin dynam-

ics of molecular chains”, J. Comput. Chem., 15, 997 (1994).

[12] H. Goldstein, Classical Mechanics, 2nd edn, (Addison-Wesley, Reading, Mas-

sachusetts, 1967).

25

[13] D. J. Evans, ”On the representation of orientation space”, Mol. Phys., 34, 317

(1977).

[14] D. C. Rapaport, The Art of Molecular Dynamics Simulation (Cambridge Uni-

versity Press, Cambridge, 1995).

[15] J. Barojas, D. Levesque, and B. Quentrec, ”Simulation of diatomic homonuclear

liquids”, Phys. Rev., A7, 1092 (1973).

[16] D. Levesque, J. J. Weis, and G. N. Patey, ”Fluids of Lennard-Jones spheres with

dipoles and tetrahedral quadrupoles. A comparison between computer simula-

tion and theoretical results”, Mol. Phys., 51, 333 (1984).

[17] C. W. Gear, Numerical Initial Value Problems in Ordinary Diﬀerential Equa-

tions (Prentice-Hall, Engelwood Cliﬀs, NJ, 1971).

[18] A. Rahman and F. H. Stillinger, ”Molecular dynamics study of liquid water”,

J. Chem. Phys., 55, 3336 (1971).

[19] D. J. Evans and S. Murad, ”Singularity free algorithm for molecular dynamics

simulation of rigid polyatomics”, Mol. Phys., 34, 327 (1977).

[20] J. P. Ryckaert and A. Bellemans, ”Molecular dynamics of liquid n-butane near

its boiling point”, Chem. Phys. Lett., 30, 123 (1975).

[21] L. Verlet, ”Computer experiments on classical ﬂuids. I. Thermodynamic prop-

erties of Lennard-Jones molecules”, Phys. Rev., 159, 98 (1967).

[22] W. C. Swope, H. C. Andersen, P. H. Berens, and K. R. Wilson, ”A computer

simulation method for the calculation of equilibrium constants for the formation

of physical clusters of molecules: Application to small water clusters”, J. Chem.

[23] R. W. Hockney and J. W. Eastwood, Computer Simulation Using Particles

Phys., 76, 637 (1982).

(McGraw-Hill, New York, 1981).

[24] R. Ahlrichs and S. Brode, ”A new rigid motion algorithm for MD simulations”,

Comput. Phys. Commun., 42, 59 (1986).

26

[25] A. Kol, B. Laird, and B. Leimkuhler, ”A symplectic method for rigid-body

molecular simulation”,

in Numerical Analysis Reports (University of Cam-

[26] D. Fincham, ”An algorithm for the rotational motion of rigid molecules”, CCP5

bridge, DAMTP 1997/NA5), 19 p.

Information Quarterly, 2, 6 (1981).

[27] D. Fincham, ”Leapfrog rotational algorithms”, Mol. Simul., 8, 165 (1992).

[28] I. P. Omelyan, ”On the numerical integration of motion for rigid polyatomics:

The modiﬁed quaternion approach”, Computers in Physics, 12, 97 (1998).

[29] I. P. Omelyan, ”Numerical integration of the equations of motion for rigid poly-

atomics: The matrix method”, Comput. Phys. Commun., 109, 171 (1998).

[30] I. P. Omelyan, ”Algorithm for numerical integration of the rigid-body equations

of motion”, Phys. Rev. E, 58, 1169 (1998).

[31] D. Brown and J. H. R. Clarke, ”A comparison of constant energy, constant

temperature and constant pressure ensembles in molecular dynamics simulations

of atomic liquids”, Mol. Phys., 51, 1243 (1984).

[32] W. L. Jorgensen, J. Chandrasekhar, J. D. Madura, R. W. Impey, and M. L.

Klein, ”Comparison of simple potential functions for simulating liquid water”,

J. Chem. Phys., 79, 926 (1983).

[33] I. P. Omelyan, ”On the reaction ﬁeld for interaction site models of polar sys-

tems”, Phys. Lett. A, 223, 295 (1996).

[34] D. Bertolini and A. Tani, ”Generalized hydrodynamics and the acoustic modes

of water: Theory and simulation results”, Phys. Rev. E, 51, 1091 (1995).

[35] D. Fincham, ”Choice of time step in molecular dynamics simulations”, Comput.

[36] A. K. Mazur, ”Hierarchy of fast motions in protein dynamics”, J. Phys. Chem.

Phys. Commun., 40, 263 (1986).

B, 102, 473 (1998).

27

Figure captions

Fig. 1. The total energy ﬂuctuations as functions of the length of the NVE

simulations on the TIP4P water, evaluated in various techniques at four ﬁxed time

steps: (a) 1 fs, (b) 2 fs, (c) 3 fs and (d) 4 fs.

Fig. 2. Oxygen-oxygen (O-O) and hydrogen-hydrogen (H-H) radial distribution

functions (a), and orientational relaxation (b), obtained in NVT simulations on the

TIP4P water using the revised ((a), (b)) and standard ((b)) leapfrog algorithms.

The results corresponding to the step sizes h = 2, 8 and 10 fs are plotted by bold

solid, short-dashed and thin solid curves, respectively. Additional long-short dashed

and dashed curves in (b) correspond to cases of h = 4 and 6 fs. The sets of

curves related to standard and revised integrators are labelled in (b) as ”S” and

”R”, respectively. The benchmark data are shown as open circles. Note that the

standard- and revised-algorithm curves are indistinguishable in (b) at h = 2, 4 and

6 fs.

28

